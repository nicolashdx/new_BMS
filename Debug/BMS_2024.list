
BMS_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092ac  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009544  08009544  00019544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080095bc  080095bc  000195bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  24000000  080095c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000624  24000060  08009620  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000684  08009620  00020684  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019a80  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030b7  00000000  00000000  00039b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001540  00000000  00000000  0003cc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000106d  00000000  00000000  0003e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6a5  00000000  00000000  0003f1b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d977  00000000  00000000  0007985a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177d80  00000000  00000000  000971d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005e9c  00000000  00000000  0020ef54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000080  00000000  00000000  00214df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800952c 	.word	0x0800952c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	0800952c 	.word	0x0800952c

080002d8 <BMS_Init>:
#include "defines.h"
#include "bms.h"
#include "ltc.h"


void BMS_Init(Master **BMS) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	*BMS = (Master*) calloc(1, sizeof(Master));
 80002e0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80002e4:	2001      	movs	r0, #1
 80002e6:	f009 f805 	bl	80092f4 <calloc>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]
	LTC_config* config = (LTC_config*) calloc(1, sizeof(LTC_config));
 80002f2:	210c      	movs	r1, #12
 80002f4:	2001      	movs	r0, #1
 80002f6:	f008 fffd 	bl	80092f4 <calloc>
 80002fa:	4603      	mov	r3, r0
 80002fc:	60bb      	str	r3, [r7, #8]
	config->command = (LTC_command*) calloc(1 ,sizeof(LTC_command));
 80002fe:	2112      	movs	r1, #18
 8000300:	2001      	movs	r0, #1
 8000302:	f008 fff7 	bl	80092f4 <calloc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
	LTC_Init(config);
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f88a 	bl	8000428 <LTC_Init>

	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000314:	2300      	movs	r3, #0
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	e015      	b.n	8000346 <BMS_Init+0x6e>
		(*BMS)->slaves[i].config = config;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	215c      	movs	r1, #92	; 0x5c
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	3358      	adds	r3, #88	; 0x58
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
		(*BMS)->slaves[i].sensor.ADDR = i;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	215c      	movs	r1, #92	; 0x5c
 8000336:	fb01 f303 	mul.w	r3, r1, r3
 800033a:	4413      	add	r3, r2
 800033c:	7bfa      	ldrb	r2, [r7, #15]
 800033e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	3301      	adds	r3, #1
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d9e6      	bls.n	800031a <BMS_Init+0x42>
	}

	LTC_PEC_InitTable();
 800034c:	f000 f8a4 	bl	8000498 <LTC_PEC_InitTable>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <BMS_Monitoring>:

void BMS_Monitoring(Master *BMS) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	LTC_SendBroadcastCommand(BMS->slaves[0].config, LTC_COMMAND_ADCV);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000364:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f8cf 	bl	800050c <LTC_SendBroadcastCommand>
	uint16_t aux_minCellVoltage = UINT16_MAX;
 800036e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000372:	81fb      	strh	r3, [r7, #14]
	uint16_t aux_maxCellVoltage = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	81bb      	strh	r3, [r7, #12]

}
 8000378:	bf00      	nop
 800037a:	3710      	adds	r7, #16
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000384:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <DWT_Delay_Init+0x58>)
 8000386:	68db      	ldr	r3, [r3, #12]
 8000388:	4a13      	ldr	r2, [pc, #76]	; (80003d8 <DWT_Delay_Init+0x58>)
 800038a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800038e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <DWT_Delay_Init+0x58>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a10      	ldr	r2, [pc, #64]	; (80003d8 <DWT_Delay_Init+0x58>)
 8000396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800039a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <DWT_Delay_Init+0x5c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <DWT_Delay_Init+0x5c>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <DWT_Delay_Init+0x5c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <DWT_Delay_Init+0x5c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <DWT_Delay_Init+0x5c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80003ba:	bf00      	nop
     __ASM volatile ("NOP");
 80003bc:	bf00      	nop
  __ASM volatile ("NOP");
 80003be:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <DWT_Delay_Init+0x5c>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80003c8:	2300      	movs	r3, #0
 80003ca:	e000      	b.n	80003ce <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80003cc:	2301      	movs	r3, #1
  }
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	e000edf0 	.word	0xe000edf0
 80003dc:	e0001000 	.word	0xe0001000

080003e0 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80003e8:	4b0d      	ldr	r3, [pc, #52]	; (8000420 <DWT_Delay_us+0x40>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80003ee:	f004 fdfd 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 80003f2:	4603      	mov	r3, r0
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <DWT_Delay_us+0x44>)
 80003f6:	fba2 2303 	umull	r2, r3, r2, r3
 80003fa:	0c9b      	lsrs	r3, r3, #18
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	fb02 f303 	mul.w	r3, r2, r3
 8000402:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000404:	bf00      	nop
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <DWT_Delay_us+0x40>)
 8000408:	685a      	ldr	r2, [r3, #4]
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	1ad2      	subs	r2, r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	d3f8      	bcc.n	8000406 <DWT_Delay_us+0x26>
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	e0001000 	.word	0xe0001000
 8000424:	431bde83 	.word	0x431bde83

08000428 <LTC_Init>:
#define BYTESWAP(word) ((word >> 8) + (word << 8))

extern SPI_HandleTypeDef hspi1;
static uint16_t pec_table[LTC_PEC_TABLE_LENGTH];

void LTC_Init(LTC_config *config) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	config->GPIO   = ALL_GPIOS_READ;
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7913      	ldrb	r3, [r2, #4]
 8000434:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 8000438:	7113      	strb	r3, [r2, #4]
	config->REFON  = REFERENCE_SHUTS_DOWN_AFTER_CONVERSIONS;
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	7913      	ldrb	r3, [r2, #4]
 800043e:	f36f 1386 	bfc	r3, #6, #1
 8000442:	7113      	strb	r3, [r2, #4]
	config->SWTRD  = SOFTWARE_TIMER_ENABLE_PIN_LOW;
 8000444:	687a      	ldr	r2, [r7, #4]
 8000446:	7913      	ldrb	r3, [r2, #4]
 8000448:	f36f 13c7 	bfc	r3, #7, #1
 800044c:	7113      	strb	r3, [r2, #4]
	config->ADCOPT = SELECT_ADC_MODES_FAST;
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	7953      	ldrb	r3, [r2, #5]
 8000452:	f36f 0300 	bfc	r3, #0, #1
 8000456:	7153      	strb	r3, [r2, #5]
	config->VUV    = DEFULT_VOLTAGE;
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	88d3      	ldrh	r3, [r2, #6]
 800045c:	f36f 030b 	bfc	r3, #0, #12
 8000460:	80d3      	strh	r3, [r2, #6]
	config->VOV    = DEFULT_VOLTAGE;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2200      	movs	r2, #0
 8000466:	811a      	strh	r2, [r3, #8]
	config->DCTO   = DISCHARGE_DISABLE;
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7a93      	ldrb	r3, [r2, #10]
 800046c:	f36f 0303 	bfc	r3, #0, #4
 8000470:	7293      	strb	r3, [r2, #10]
	config->command->MD  = MD_FILTRED;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800047a:	809a      	strh	r2, [r3, #4]
	config->command->DCP = DCP_PERMITED;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2210      	movs	r2, #16
 8000482:	80da      	strh	r2, [r3, #6]
	LTC_SendBroadcastCommand(config, LTC_COMMAND_WRCOMM);
 8000484:	f240 7121 	movw	r1, #1825	; 0x721
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f000 f83f 	bl	800050c <LTC_SendBroadcastCommand>
}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
	...

08000498 <LTC_PEC_InitTable>:

void LTC_PEC_InitTable() {
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 800049e:	2300      	movs	r3, #0
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	e026      	b.n	80004f2 <LTC_PEC_InitTable+0x5a>
		remainder = i << 7;
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	01db      	lsls	r3, r3, #7
 80004aa:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 80004ac:	2308      	movs	r3, #8
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	e014      	b.n	80004dc <LTC_PEC_InitTable+0x44>
			if(remainder & 0x4000) {
 80004b2:	89fb      	ldrh	r3, [r7, #14]
 80004b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d009      	beq.n	80004d0 <LTC_PEC_InitTable+0x38>
				remainder = remainder << 1;
 80004bc:	89fb      	ldrh	r3, [r7, #14]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	81fb      	strh	r3, [r7, #14]
				remainder = remainder ^ 0x4599;
 80004c2:	89fb      	ldrh	r3, [r7, #14]
 80004c4:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 80004c8:	f083 0319 	eor.w	r3, r3, #25
 80004cc:	81fb      	strh	r3, [r7, #14]
 80004ce:	e002      	b.n	80004d6 <LTC_PEC_InitTable+0x3e>
			}
			else
				remainder = remainder << 1;
 80004d0:	89fb      	ldrh	r3, [r7, #14]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3b01      	subs	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dce7      	bgt.n	80004b2 <LTC_PEC_InitTable+0x1a>
		}
		pec_table[i] = remainder&0xFFFF;
 80004e2:	4909      	ldr	r1, [pc, #36]	; (8000508 <LTC_PEC_InitTable+0x70>)
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	89fa      	ldrh	r2, [r7, #14]
 80004e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3301      	adds	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	2bff      	cmp	r3, #255	; 0xff
 80004f6:	ddd5      	ble.n	80004a4 <LTC_PEC_InitTable+0xc>
	}
}
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2400007c 	.word	0x2400007c

0800050c <LTC_SendBroadcastCommand>:
void LTC_Read(uint8_t LTC_READ, Slave *slave){
	slave->config->command->BROADCAST = false;

}

void LTC_SendBroadcastCommand(LTC_config *config, uint16_t command_name) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
	uint16_t tx_data[4] = {0, 0, 0, 0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
	uint16_t rx_data[4] = {0, 0, 0, 0};
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
	config->command->NAME = command_name;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	887a      	ldrh	r2, [r7, #2]
 8000532:	801a      	strh	r2, [r3, #0]
	LTC_Communication(config, tx_data, rx_data);
 8000534:	f107 0208 	add.w	r2, r7, #8
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 f812 	bl	8000568 <LTC_Communication>
}
 8000544:	bf00      	nop
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}

0800054c <LTC_StartTrasmission>:
	default:
		break;
	}
}

void LTC_StartTrasmission(){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	LTC_ChipSelect(RESET);
 8000550:	2000      	movs	r0, #0
 8000552:	f000 f82b 	bl	80005ac <LTC_ChipSelect>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}

0800055a <LTC_EndTramission>:

void LTC_EndTramission() {
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
	LTC_ChipSelect(SET);
 800055e:	2001      	movs	r0, #1
 8000560:	f000 f824 	bl	80005ac <LTC_ChipSelect>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <LTC_Communication>:

void LTC_Communication(LTC_config *config, uint16_t* tx_data, uint16_t* rx_data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
	uint16_t command = LTC_MakeCommand(config->command);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f850 	bl	800061e <LTC_MakeCommand>
 800057e:	4603      	mov	r3, r0
 8000580:	82fb      	strh	r3, [r7, #22]
	LTC_WakeUp();
 8000582:	f000 f841 	bl	8000608 <LTC_WakeUp>
	LTC_StartTrasmission();
 8000586:	f7ff ffe1 	bl	800054c <LTC_StartTrasmission>
	LTC_TransmitCommand(command);
 800058a:	8afb      	ldrh	r3, [r7, #22]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f917 	bl	80007c0 <LTC_TransmitCommand>
	LTC_TransmitReceive(command, tx_data, rx_data);
 8000592:	8afb      	ldrh	r3, [r7, #22]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	68b9      	ldr	r1, [r7, #8]
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f929 	bl	80007f0 <LTC_TransmitReceive>
	LTC_EndTramission();
 800059e:	f7ff ffdc 	bl	800055a <LTC_EndTramission>
}
 80005a2:	bf00      	nop
 80005a4:	3718      	adds	r7, #24
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <LTC_ChipSelect>:
	tx_data[0] = (slave->config->ADCOPT << 8) | (slave->config->SWTRD << 9) | (slave->config->REFON << 10) | (slave->config->GPIO << 11) | (slave->config->VUV);
	tx_data[1] = (slave->config->VUV >> 8) | (slave->config->VOV << 4);
	tx_data[2] |= ((slave->sensor.CELL_TO_DISCHARGE & 0xff) << 8) | ((slave->sensor.CELL_TO_DISCHARGE & 0xf00) >> 8) | ((slave->config->DCTO & 0xf) << 4);
}

void LTC_ChipSelect(uint8_t level) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin , level);
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	461a      	mov	r2, r3
 80005ba:	2120      	movs	r1, #32
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <LTC_ChipSelect+0x24>)
 80005be:	f003 fc03 	bl	8003dc8 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 80005c2:	200a      	movs	r0, #10
 80005c4:	f7ff ff0c 	bl	80003e0 <DWT_Delay_us>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	58020000 	.word	0x58020000

080005d4 <LTC_SPI>:


uint16_t LTC_SPI(uint16_t Tx_data) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af02      	add	r7, sp, #8
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]
	uint16_t Rx_data = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &Tx_data, (uint8_t *) &Rx_data, 1, 50);
 80005e2:	f107 020e 	add.w	r2, r7, #14
 80005e6:	1db9      	adds	r1, r7, #6
 80005e8:	2332      	movs	r3, #50	; 0x32
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	4805      	ldr	r0, [pc, #20]	; (8000604 <LTC_SPI+0x30>)
 80005f0:	f007 fb7a 	bl	8007ce8 <HAL_SPI_TransmitReceive>
	return(BYTESWAP(Rx_data));
 80005f4:	89fb      	ldrh	r3, [r7, #14]
 80005f6:	ba5b      	rev16	r3, r3
 80005f8:	b29b      	uxth	r3, r3
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	240003d4 	.word	0x240003d4

08000608 <LTC_WakeUp>:

void LTC_WakeUp() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	LTC_StartTrasmission();
 800060c:	f7ff ff9e 	bl	800054c <LTC_StartTrasmission>
	LTC_SPI(0);
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff ffdf 	bl	80005d4 <LTC_SPI>
	LTC_EndTramission();
 8000616:	f7ff ffa0 	bl	800055a <LTC_EndTramission>
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}

0800061e <LTC_MakeCommand>:

uint16_t LTC_MakeCommand(LTC_command *command) {
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
	switch(command->NAME) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	f240 426f 	movw	r2, #1135	; 0x46f
 800062e:	4293      	cmp	r3, r2
 8000630:	d06d      	beq.n	800070e <LTC_MakeCommand+0xf0>
 8000632:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000636:	da75      	bge.n	8000724 <LTC_MakeCommand+0x106>
 8000638:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 800063c:	d05c      	beq.n	80006f8 <LTC_MakeCommand+0xda>
 800063e:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 8000642:	dc6f      	bgt.n	8000724 <LTC_MakeCommand+0x106>
 8000644:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000648:	d04b      	beq.n	80006e2 <LTC_MakeCommand+0xc4>
 800064a:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800064e:	dc69      	bgt.n	8000724 <LTC_MakeCommand+0x106>
 8000650:	f240 420f 	movw	r2, #1039	; 0x40f
 8000654:	4293      	cmp	r3, r2
 8000656:	d039      	beq.n	80006cc <LTC_MakeCommand+0xae>
 8000658:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800065c:	da62      	bge.n	8000724 <LTC_MakeCommand+0x106>
 800065e:	f240 4207 	movw	r2, #1031	; 0x407
 8000662:	4293      	cmp	r3, r2
 8000664:	d032      	beq.n	80006cc <LTC_MakeCommand+0xae>
 8000666:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800066a:	da5b      	bge.n	8000724 <LTC_MakeCommand+0x106>
 800066c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000670:	d00a      	beq.n	8000688 <LTC_MakeCommand+0x6a>
 8000672:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000676:	dc55      	bgt.n	8000724 <LTC_MakeCommand+0x106>
 8000678:	f240 2207 	movw	r2, #519	; 0x207
 800067c:	4293      	cmp	r3, r2
 800067e:	d025      	beq.n	80006cc <LTC_MakeCommand+0xae>
 8000680:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8000684:	d00f      	beq.n	80006a6 <LTC_MakeCommand+0x88>
 8000686:	e04d      	b.n	8000724 <LTC_MakeCommand+0x106>
		case LTC_COMMAND_ADCV:
			return command->NAME | command->MD | command->DCP | command->CH;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	881a      	ldrh	r2, [r3, #0]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	889b      	ldrh	r3, [r3, #4]
 8000690:	4313      	orrs	r3, r2
 8000692:	b29a      	uxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	4313      	orrs	r3, r2
 800069a:	b29a      	uxth	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	891b      	ldrh	r3, [r3, #8]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	e040      	b.n	8000728 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADOW:
			return command->NAME | command->MD | command->PUP | command->DCP | command->CH;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	881a      	ldrh	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	889b      	ldrh	r3, [r3, #4]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	89db      	ldrh	r3, [r3, #14]
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	88db      	ldrh	r3, [r3, #6]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	891b      	ldrh	r3, [r3, #8]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	e02d      	b.n	8000728 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_CVST:
		case LTC_COMMAND_AXST:
		case LTC_COMMAND_STATST:
			return command->NAME | command->MD | command->ST;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8a1b      	ldrh	r3, [r3, #16]
 80006dc:	4313      	orrs	r3, r2
 80006de:	b29b      	uxth	r3, r3
 80006e0:	e022      	b.n	8000728 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADAX	:
			return command->NAME | command->MD | command->CHG;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	881a      	ldrh	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	895b      	ldrh	r3, [r3, #10]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	e017      	b.n	8000728 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADSTAT	:
			return command->NAME | command->MD | command->CHST;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	881a      	ldrh	r2, [r3, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	889b      	ldrh	r3, [r3, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	b29a      	uxth	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	899b      	ldrh	r3, [r3, #12]
 8000708:	4313      	orrs	r3, r2
 800070a:	b29b      	uxth	r3, r3
 800070c:	e00c      	b.n	8000728 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADCVAX	:
			return command->NAME | command->MD | command->CHG;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	889b      	ldrh	r3, [r3, #4]
 8000716:	4313      	orrs	r3, r2
 8000718:	b29a      	uxth	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	895b      	ldrh	r3, [r3, #10]
 800071e:	4313      	orrs	r3, r2
 8000720:	b29b      	uxth	r3, r3
 8000722:	e001      	b.n	8000728 <LTC_MakeCommand+0x10a>
			break;

		default:
			return command->NAME;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	881b      	ldrh	r3, [r3, #0]
			break;
	}
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LTC_PEC>:

uint16_t LTC_PEC(uint16_t *data , uint8_t len) {
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	int32_t remainder, address;
	remainder = LTC_PEC_SEED;
 8000740:	2310      	movs	r3, #16
 8000742:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000744:	2300      	movs	r3, #0
 8000746:	74fb      	strb	r3, [r7, #19]
 8000748:	e02a      	b.n	80007a0 <LTC_PEC+0x6c>
		address   = ((remainder >> 7) ^ ((data[i] >> 8) & 0xFF)) & 0xFF; //calculate PEC table address
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	11da      	asrs	r2, r3, #7
 800074e:	7cfb      	ldrb	r3, [r7, #19]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	440b      	add	r3, r1
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b29b      	uxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4053      	eors	r3, r2
 8000760:	b2db      	uxtb	r3, r3
 8000762:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	4914      	ldr	r1, [pc, #80]	; (80007bc <LTC_PEC+0x88>)
 800076a:	68fa      	ldr	r2, [r7, #12]
 800076c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000770:	4053      	eors	r3, r2
 8000772:	617b      	str	r3, [r7, #20]
		address   = ((remainder >> 7) ^ (data[i] & 0xFF)) & 0xFF;    	 //calculate PEC table address
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	11da      	asrs	r2, r3, #7
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	440b      	add	r3, r1
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4053      	eors	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	490b      	ldr	r1, [pc, #44]	; (80007bc <LTC_PEC+0x88>)
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000796:	4053      	eors	r3, r2
 8000798:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 800079a:	7cfb      	ldrb	r3, [r7, #19]
 800079c:	3301      	adds	r3, #1
 800079e:	74fb      	strb	r3, [r7, #19]
 80007a0:	7cfa      	ldrb	r2, [r7, #19]
 80007a2:	78fb      	ldrb	r3, [r7, #3]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d3d0      	bcc.n	800074a <LTC_PEC+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	371c      	adds	r7, #28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	2400007c 	.word	0x2400007c

080007c0 <LTC_TransmitCommand>:

void LTC_TransmitCommand(uint16_t command) {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	80fb      	strh	r3, [r7, #6]
	uint16_t pec = LTC_PEC(&command, 1);
 80007ca:	1dbb      	adds	r3, r7, #6
 80007cc:	2101      	movs	r1, #1
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffb0 	bl	8000734 <LTC_PEC>
 80007d4:	4603      	mov	r3, r0
 80007d6:	81fb      	strh	r3, [r7, #14]
	LTC_SPI(command);
 80007d8:	88fb      	ldrh	r3, [r7, #6]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fefa 	bl	80005d4 <LTC_SPI>
	LTC_SPI(pec);
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fef6 	bl	80005d4 <LTC_SPI>
}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <LTC_TransmitReceive>:

void LTC_TransmitReceive(uint16_t command, uint16_t* tx_data, uint16_t* rx_data) {
 80007f0:	b590      	push	{r4, r7, lr}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	81fb      	strh	r3, [r7, #14]
	if((command & 0x07FF) == LTC_COMMAND_WRCFGA) {
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000804:	2b01      	cmp	r3, #1
 8000806:	d109      	bne.n	800081c <LTC_TransmitReceive+0x2c>
		uint16_t pec = LTC_PEC(tx_data, 3);
 8000808:	2103      	movs	r1, #3
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f7ff ff92 	bl	8000734 <LTC_PEC>
 8000810:	4603      	mov	r3, r0
 8000812:	82bb      	strh	r3, [r7, #20]
		tx_data[3] = pec;
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	3306      	adds	r3, #6
 8000818:	8aba      	ldrh	r2, [r7, #20]
 800081a:	801a      	strh	r2, [r3, #0]
	}
	if((tx_data[0] & 0x07FF) < LTC_COMMAND_ADCV) {
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000824:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000828:	da16      	bge.n	8000858 <LTC_TransmitReceive+0x68>
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 800082a:	2300      	movs	r3, #0
 800082c:	75fb      	strb	r3, [r7, #23]
 800082e:	e010      	b.n	8000852 <LTC_TransmitReceive+0x62>
			rx_data[i] = LTC_SPI(tx_data[i]);
 8000830:	7dfb      	ldrb	r3, [r7, #23]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	4413      	add	r3, r2
 8000838:	8819      	ldrh	r1, [r3, #0]
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	18d4      	adds	r4, r2, r3
 8000842:	4608      	mov	r0, r1
 8000844:	f7ff fec6 	bl	80005d4 <LTC_SPI>
 8000848:	4603      	mov	r3, r0
 800084a:	8023      	strh	r3, [r4, #0]
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 800084c:	7dfb      	ldrb	r3, [r7, #23]
 800084e:	3301      	adds	r3, #1
 8000850:	75fb      	strb	r3, [r7, #23]
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	2b03      	cmp	r3, #3
 8000856:	d9eb      	bls.n	8000830 <LTC_TransmitReceive+0x40>
		}
	}
}
 8000858:	bf00      	nop
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd90      	pop	{r4, r7, pc}

08000860 <DWT_Delay_us>:
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <DWT_Delay_us+0x40>)
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800086e:	f004 fbbd 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8000872:	4603      	mov	r3, r0
 8000874:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <DWT_Delay_us+0x44>)
 8000876:	fba2 2303 	umull	r2, r3, r2, r3
 800087a:	0c9b      	lsrs	r3, r3, #18
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	fb02 f303 	mul.w	r3, r2, r3
 8000882:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000884:	bf00      	nop
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <DWT_Delay_us+0x40>)
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	1ad2      	subs	r2, r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	429a      	cmp	r2, r3
 8000892:	d3f8      	bcc.n	8000886 <DWT_Delay_us+0x26>
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e0001000 	.word	0xe0001000
 80008a4:	431bde83 	.word	0x431bde83

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fec7 	bl	8001640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f81d 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 fa89 	bl	8000dcc <MX_GPIO_Init>
  MX_DMA_Init();
 80008ba:	f000 fa43 	bl	8000d44 <MX_DMA_Init>
  MX_FDCAN1_Init();
 80008be:	f000 f8fb 	bl	8000ab8 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 80008c2:	f000 f99d 	bl	8000c00 <MX_SPI1_Init>
  MX_ADC2_Init();
 80008c6:	f000 f891 	bl	80009ec <MX_ADC2_Init>
  MX_I2C1_Init();
 80008ca:	f000 f959 	bl	8000b80 <MX_I2C1_Init>
  MX_USART1_Init();
 80008ce:	f000 f9ed 	bl	8000cac <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 80008d2:	f7ff fd55 	bl	8000380 <DWT_Delay_Init>


  Master *BMS;
  BMS_Init(&BMS);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fcfd 	bl	80002d8 <BMS_Init>


  DWT_Delay_us(50000);
 80008de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80008e2:	f7ff ffbd 	bl	8000860 <DWT_Delay_us>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMS_Monitoring(BMS);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fd35 	bl	8000358 <BMS_Monitoring>
 80008ee:	e7fa      	b.n	80008e6 <main+0x3e>

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	; 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	224c      	movs	r2, #76	; 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f008 fdc2 	bl	8009488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f008 fdbc 	bl	8009488 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f003 fba7 	bl	8004064 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <SystemClock_Config+0xf4>)
 800091c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091e:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <SystemClock_Config+0xf4>)
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <SystemClock_Config+0xf4>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <SystemClock_Config+0xf8>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000938:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <SystemClock_Config+0xf8>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <SystemClock_Config+0xf8>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800094c:	bf00      	nop
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <SystemClock_Config+0xf8>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800095a:	d1f8      	bne.n	800094e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800095c:	2302      	movs	r3, #2
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000960:	2301      	movs	r3, #1
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000968:	2302      	movs	r3, #2
 800096a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800096c:	2300      	movs	r3, #0
 800096e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000970:	2304      	movs	r3, #4
 8000972:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000974:	2309      	movs	r3, #9
 8000976:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800097c:	2303      	movs	r3, #3
 800097e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000980:	2302      	movs	r3, #2
 8000982:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000984:	230c      	movs	r3, #12
 8000986:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000988:	2302      	movs	r3, #2
 800098a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 800098c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000990:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4618      	mov	r0, r3
 8000998:	f003 fb9e 	bl	80040d8 <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009a2:	f000 fb01 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	233f      	movs	r3, #63	; 0x3f
 80009a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ba:	2340      	movs	r3, #64	; 0x40
 80009bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2101      	movs	r1, #1
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 ffdd 	bl	800498c <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xec>
  {
    Error_Handler();
 80009d8:	f000 fae6 	bl	8000fa8 <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3770      	adds	r7, #112	; 0x70
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	58000400 	.word	0x58000400
 80009e8:	58024800 	.word	0x58024800

080009ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a06:	4a29      	ldr	r2, [pc, #164]	; (8000aac <MX_ADC2_Init+0xc0>)
 8000a08:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a0a:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a10:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a16:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a22:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a2e:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a40:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a60:	4811      	ldr	r0, [pc, #68]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a62:	f001 f817 	bl	8001a94 <HAL_ADC_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000a6c:	f000 fa9c 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_ADC2_Init+0xc4>)
 8000a72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a74:	2306      	movs	r3, #6
 8000a76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_ADC2_Init+0xc8>)
 8000a7e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a80:	2304      	movs	r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_ADC2_Init+0xbc>)
 8000a92:	f001 f9a1 	bl	8001dd8 <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000a9c:	f000 fa84 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3720      	adds	r7, #32
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	2400027c 	.word	0x2400027c
 8000aac:	40022100 	.word	0x40022100
 8000ab0:	2a000400 	.word	0x2a000400
 8000ab4:	47ff0000 	.word	0x47ff0000

08000ab8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000abe:	4a2f      	ldr	r2, [pc, #188]	; (8000b7c <MX_FDCAN1_Init+0xc4>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ac2:	4b2d      	ldr	r3, [pc, #180]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ac8:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ace:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ad4:	4b28      	ldr	r3, [pc, #160]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000aec:	4b22      	ldr	r3, [pc, #136]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000aee:	2202      	movs	r2, #2
 8000af0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000af2:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000afa:	2201      	movs	r2, #1
 8000afc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b16:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b34:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b36:	2204      	movs	r2, #4
 8000b38:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b60:	2204      	movs	r2, #4
 8000b62:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_FDCAN1_Init+0xc0>)
 8000b66:	f002 fc1b 	bl	80033a0 <HAL_FDCAN_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b70:	f000 fa1a 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	240002e0 	.word	0x240002e0
 8000b7c:	4000a000 	.word	0x4000a000

08000b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <MX_I2C1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b8c:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x7c>)
 8000b8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bbc:	f003 f91e 	bl	8003dfc <HAL_I2C_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bc6:	f000 f9ef 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000bce:	f003 f9b1 	bl	8003f34 <HAL_I2CEx_ConfigAnalogFilter>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bd8:	f000 f9e6 	bl	8000fa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_I2C1_Init+0x74>)
 8000be0:	f003 f9f3 	bl	8003fca <HAL_I2CEx_ConfigDigitalFilter>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bea:	f000 f9dd 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000380 	.word	0x24000380
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	00707cbb 	.word	0x00707cbb

08000c00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c06:	4a28      	ldr	r2, [pc, #160]	; (8000ca8 <MX_SPI1_Init+0xa8>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_SPI1_Init+0xa4>)
 8000c90:	f006 ff06 	bl	8007aa0 <HAL_SPI_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c9a:	f000 f985 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	240003d4 	.word	0x240003d4
 8000ca8:	40013000 	.word	0x40013000

08000cac <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cb2:	4a23      	ldr	r2, [pc, #140]	; (8000d40 <MX_USART1_Init+0x94>)
 8000cb4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <MX_USART1_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_USART1_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MX_USART1_Init+0x90>)
 8000cf6:	f007 fc1a 	bl	800852e <HAL_USART_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000d00:	f000 f952 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_USART1_Init+0x90>)
 8000d08:	f008 fa2e 	bl	8009168 <HAL_USARTEx_SetTxFifoThreshold>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000d12:	f000 f949 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <MX_USART1_Init+0x90>)
 8000d1a:	f008 fa63 	bl	80091e4 <HAL_USARTEx_SetRxFifoThreshold>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000d24:	f000 f940 	bl	8000fa8 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_USART1_Init+0x90>)
 8000d2a:	f008 f9e4 	bl	80090f6 <HAL_USARTEx_DisableFifoMode>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000d34:	f000 f938 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2400045c 	.word	0x2400045c
 8000d40:	40011000 	.word	0x40011000

08000d44 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_DMA_Init+0x7c>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d6a:	4a17      	ldr	r2, [pc, #92]	; (8000dc8 <MX_DMA_Init+0x84>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d7a:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d86:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_DMA_Init+0x80>)
 8000da8:	f001 fd62 	bl	8002870 <HAL_DMA_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_DMA_Init+0x72>
  {
    Error_Handler( );
 8000db2:	f000 f8f9 	bl	8000fa8 <Error_Handler>
  }

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	240004bc 	.word	0x240004bc
 8000dc8:	40020010 	.word	0x40020010

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de2:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a6a      	ldr	r2, [pc, #424]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	61bb      	str	r3, [r7, #24]
 8000dfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e00:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a63      	ldr	r2, [pc, #396]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b60      	ldr	r3, [pc, #384]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a5b      	ldr	r2, [pc, #364]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b59      	ldr	r3, [pc, #356]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3c:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a54      	ldr	r2, [pc, #336]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0310 	and.w	r3, r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7e:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e88:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <MX_GPIO_Init+0x1c8>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	483f      	ldr	r0, [pc, #252]	; (8000f98 <MX_GPIO_Init+0x1cc>)
 8000e9c:	f002 ff94 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_ENABLE_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2190      	movs	r1, #144	; 0x90
 8000ea4:	483d      	ldr	r0, [pc, #244]	; (8000f9c <MX_GPIO_Init+0x1d0>)
 8000ea6:	f002 ff8f 	bl	8003dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_GPIO_Pin PC15_GPIO_Pin PC14_GPIO_Pin */
  GPIO_InitStruct.Pin = PC13_GPIO_Pin|PC15_GPIO_Pin|PC14_GPIO_Pin;
 8000eaa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000ec0:	f002 fdd2 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <MX_GPIO_Init+0x1d4>)
 8000ed8:	f002 fdc6 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Eletrobuild_Pin */
  GPIO_InitStruct.Pin = Reset_Eletrobuild_Pin;
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ee0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reset_Eletrobuild_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482c      	ldr	r0, [pc, #176]	; (8000fa4 <MX_GPIO_Init+0x1d8>)
 8000ef2:	f002 fdb9 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4619      	mov	r1, r3
 8000f12:	4822      	ldr	r0, [pc, #136]	; (8000f9c <MX_GPIO_Init+0x1d0>)
 8000f14:	f002 fda8 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1e:	2312      	movs	r3, #18
 8000f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4819      	ldr	r0, [pc, #100]	; (8000f9c <MX_GPIO_Init+0x1d0>)
 8000f36:	f002 fd97 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8000f3a:	2380      	movs	r3, #128	; 0x80
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x1cc>)
 8000f52:	f002 fd89 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_ENABLE_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = CHARGE_ENABLE_Pin|ERROR_LED_Pin;
 8000f56:	2390      	movs	r3, #144	; 0x90
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <MX_GPIO_Init+0x1d0>)
 8000f6e:	f002 fd7b 	bl	8003a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_AUX_MINUS_Pin AIR_AUX_PLUS_Pin */
  GPIO_InitStruct.Pin = AIR_AUX_MINUS_Pin|AIR_AUX_PLUS_Pin;
 8000f72:	2360      	movs	r3, #96	; 0x60
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_GPIO_Init+0x1d0>)
 8000f86:	f002 fd6f 	bl	8003a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020c00 	.word	0x58020c00
 8000f9c:	58020400 	.word	0x58020400
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58021000 	.word	0x58021000

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <Error_Handler+0x8>
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fc0:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fc2:	f043 0302 	orr.w	r3, r3, #2
 8000fc6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_MspInit+0x30>)
 8000fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58024400 	.word	0x58024400

08000fe8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ba      	sub	sp, #232	; 0xe8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	22c0      	movs	r2, #192	; 0xc0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f008 fa3d 	bl	8009488 <memset>
  if(hadc->Instance==ADC2)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a2c      	ldr	r2, [pc, #176]	; (80010c4 <HAL_ADC_MspInit+0xdc>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d150      	bne.n	80010ba <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001018:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001028:	2309      	movs	r3, #9
 800102a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001038:	23c0      	movs	r3, #192	; 0xc0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800103c:	2320      	movs	r3, #32
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001040:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4618      	mov	r0, r3
 8001052:	f004 f827 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 800105c:	f7ff ffa4 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_ADC_MspInit+0xe0>)
 8001062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001066:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_ADC_MspInit+0xe0>)
 8001068:	f043 0320 	orr.w	r3, r3, #32
 800106c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_ADC_MspInit+0xe0>)
 8001072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_ADC_MspInit+0xe0>)
 8001080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001084:	4a10      	ldr	r2, [pc, #64]	; (80010c8 <HAL_ADC_MspInit+0xe0>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108e:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <HAL_ADC_MspInit+0xe0>)
 8001090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_INP10
    PC1     ------> ADC2_INN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800109c:	2303      	movs	r3, #3
 800109e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a2:	2303      	movs	r3, #3
 80010a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	; (80010cc <HAL_ADC_MspInit+0xe4>)
 80010b6:	f002 fcd7 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	37e8      	adds	r7, #232	; 0xe8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40022100 	.word	0x40022100
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020800 	.word	0x58020800

080010d0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ba      	sub	sp, #232	; 0xe8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	22c0      	movs	r2, #192	; 0xc0
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f008 f9c9 	bl	8009488 <memset>
  if(hfdcan->Instance==FDCAN1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <HAL_FDCAN_MspInit+0xc8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d147      	bne.n	8001190 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001100:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800110c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001110:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4618      	mov	r0, r3
 800111a:	f003 ffc3 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001124:	f7ff ff40 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_FDCAN_MspInit+0xcc>)
 800112a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800112e:	4a1b      	ldr	r2, [pc, #108]	; (800119c <HAL_FDCAN_MspInit+0xcc>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_FDCAN_MspInit+0xcc>)
 800113a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800113e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_FDCAN_MspInit+0xcc>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_FDCAN_MspInit+0xcc>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_FDCAN_MspInit+0xcc>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_Rx_Pin|CAN_Tx_Pin;
 8001164:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001168:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800117e:	2309      	movs	r3, #9
 8001180:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_FDCAN_MspInit+0xd0>)
 800118c:	f002 fc6c 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	37e8      	adds	r7, #232	; 0xe8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	4000a000 	.word	0x4000a000
 800119c:	58024400 	.word	0x58024400
 80011a0:	58020000 	.word	0x58020000

080011a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ba      	sub	sp, #232	; 0xe8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22c0      	movs	r2, #192	; 0xc0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 f95f 	bl	8009488 <memset>
  if(hi2c->Instance==I2C1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <HAL_I2C_MspInit+0xc8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d146      	bne.n	8001262 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011d4:	f04f 0208 	mov.w	r2, #8
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 ff5a 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011f6:	f7ff fed7 	bl	8000fa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_I2C_MspInit+0xcc>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_I2C_MspInit+0xcc>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_I2C_MspInit+0xcc>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001218:	f44f 7340 	mov.w	r3, #768	; 0x300
 800121c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001220:	2312      	movs	r3, #18
 8001222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001232:	2304      	movs	r3, #4
 8001234:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001238:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800123c:	4619      	mov	r1, r3
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <HAL_I2C_MspInit+0xd0>)
 8001240:	f002 fc12 	bl	8003a68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_I2C_MspInit+0xcc>)
 8001246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_I2C_MspInit+0xcc>)
 800124c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_I2C_MspInit+0xcc>)
 8001256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800125a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	37e8      	adds	r7, #232	; 0xe8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40005400 	.word	0x40005400
 8001270:	58024400 	.word	0x58024400
 8001274:	58020400 	.word	0x58020400

08001278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ba      	sub	sp, #232	; 0xe8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	22c0      	movs	r2, #192	; 0xc0
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 f8f5 	bl	8009488 <memset>
  if(hspi->Instance==SPI1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_SPI_MspInit+0xc4>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d144      	bne.n	8001332 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fef1 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80012c8:	f7ff fe6e 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012cc:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_SPI_MspInit+0xc8>)
 80012ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d2:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <HAL_SPI_MspInit+0xc8>)
 80012d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_SPI_MspInit+0xc8>)
 80012de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_SPI_MspInit+0xc8>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <HAL_SPI_MspInit+0xc8>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_SPI_MspInit+0xc8>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001308:	23e0      	movs	r3, #224	; 0xe0
 800130a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001320:	2305      	movs	r3, #5
 8001322:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <HAL_SPI_MspInit+0xcc>)
 800132e:	f002 fb9b 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	37e8      	adds	r7, #232	; 0xe8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013000 	.word	0x40013000
 8001340:	58024400 	.word	0x58024400
 8001344:	58020000 	.word	0x58020000

08001348 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0ba      	sub	sp, #232	; 0xe8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0310 	add.w	r3, r7, #16
 8001364:	22c0      	movs	r2, #192	; 0xc0
 8001366:	2100      	movs	r1, #0
 8001368:	4618      	mov	r0, r3
 800136a:	f008 f88d 	bl	8009488 <memset>
  if(husart->Instance==USART1)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a27      	ldr	r2, [pc, #156]	; (8001410 <HAL_USART_MspInit+0xc8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d146      	bne.n	8001406 <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001378:	f04f 0201 	mov.w	r2, #1
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fe88 	bl	80050a4 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800139a:	f7ff fe05 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_USART_MspInit+0xcc>)
 80013a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a4:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_USART_MspInit+0xcc>)
 80013a6:	f043 0310 	orr.w	r3, r3, #16
 80013aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_USART_MspInit+0xcc>)
 80013b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_USART_MspInit+0xcc>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_USART_MspInit+0xcc>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013cc:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_USART_MspInit+0xcc>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART1_Tx_Pin|USART1_Rx_Pin;
 80013da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f4:	2307      	movs	r3, #7
 80013f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_USART_MspInit+0xd0>)
 8001402:	f002 fb31 	bl	8003a68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	37e8      	adds	r7, #232	; 0xe8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40011000 	.word	0x40011000
 8001414:	58024400 	.word	0x58024400
 8001418:	58020000 	.word	0x58020000

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f95c 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_sbrk>:
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
 80014a0:	f008 f80a 	bl	80094b8 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	24080000 	.word	0x24080000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	24000534 	.word	0x24000534
 80014d8:	24000688 	.word	0x24000688

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e0:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <SystemInit+0xe4>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a36      	ldr	r2, [pc, #216]	; (80015c0 <SystemInit+0xe4>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f0:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <SystemInit+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	2b06      	cmp	r3, #6
 80014fa:	d807      	bhi.n	800150c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <SystemInit+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 030f 	bic.w	r3, r3, #15
 8001504:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <SystemInit+0xe8>)
 8001506:	f043 0307 	orr.w	r3, r3, #7
 800150a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800150c:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <SystemInit+0xec>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <SystemInit+0xec>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001518:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <SystemInit+0xec>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800151e:	4b2a      	ldr	r3, [pc, #168]	; (80015c8 <SystemInit+0xec>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4929      	ldr	r1, [pc, #164]	; (80015c8 <SystemInit+0xec>)
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <SystemInit+0xf0>)
 8001526:	4013      	ands	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <SystemInit+0xe8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001536:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <SystemInit+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 030f 	bic.w	r3, r3, #15
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <SystemInit+0xe8>)
 8001540:	f043 0307 	orr.w	r3, r3, #7
 8001544:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001546:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <SystemInit+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <SystemInit+0xec>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <SystemInit+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <SystemInit+0xec>)
 800155a:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <SystemInit+0xf4>)
 800155c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <SystemInit+0xec>)
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <SystemInit+0xf8>)
 8001562:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <SystemInit+0xec>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <SystemInit+0xfc>)
 8001568:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <SystemInit+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <SystemInit+0xec>)
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <SystemInit+0xfc>)
 8001574:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <SystemInit+0xec>)
 8001578:	2200      	movs	r2, #0
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <SystemInit+0xec>)
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <SystemInit+0xfc>)
 8001580:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <SystemInit+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <SystemInit+0xec>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <SystemInit+0xec>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001592:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <SystemInit+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SystemInit+0x100>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <SystemInit+0x104>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015a6:	d202      	bcs.n	80015ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <SystemInit+0x108>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <SystemInit+0x10c>)
 80015b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80015b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	52002000 	.word	0x52002000
 80015c8:	58024400 	.word	0x58024400
 80015cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015d0:	02020200 	.word	0x02020200
 80015d4:	01ff0000 	.word	0x01ff0000
 80015d8:	01010280 	.word	0x01010280
 80015dc:	5c001000 	.word	0x5c001000
 80015e0:	ffff0000 	.word	0xffff0000
 80015e4:	51008108 	.word	0x51008108
 80015e8:	52004000 	.word	0x52004000

080015ec <Reset_Handler>:
 80015ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001624 <LoopFillZerobss+0xe>
 80015f0:	f7ff ff74 	bl	80014dc <SystemInit>
 80015f4:	480c      	ldr	r0, [pc, #48]	; (8001628 <LoopFillZerobss+0x12>)
 80015f6:	490d      	ldr	r1, [pc, #52]	; (800162c <LoopFillZerobss+0x16>)
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <LoopFillZerobss+0x1a>)
 80015fa:	2300      	movs	r3, #0
 80015fc:	e002      	b.n	8001604 <LoopCopyDataInit>

080015fe <CopyDataInit>:
 80015fe:	58d4      	ldr	r4, [r2, r3]
 8001600:	50c4      	str	r4, [r0, r3]
 8001602:	3304      	adds	r3, #4

08001604 <LoopCopyDataInit>:
 8001604:	18c4      	adds	r4, r0, r3
 8001606:	428c      	cmp	r4, r1
 8001608:	d3f9      	bcc.n	80015fe <CopyDataInit>
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <LoopFillZerobss+0x1e>)
 800160c:	4c0a      	ldr	r4, [pc, #40]	; (8001638 <LoopFillZerobss+0x22>)
 800160e:	2300      	movs	r3, #0
 8001610:	e001      	b.n	8001616 <LoopFillZerobss>

08001612 <FillZerobss>:
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	3204      	adds	r2, #4

08001616 <LoopFillZerobss>:
 8001616:	42a2      	cmp	r2, r4
 8001618:	d3fb      	bcc.n	8001612 <FillZerobss>
 800161a:	f007 ff53 	bl	80094c4 <__libc_init_array>
 800161e:	f7ff f943 	bl	80008a8 <main>
 8001622:	4770      	bx	lr
 8001624:	24080000 	.word	0x24080000
 8001628:	24000000 	.word	0x24000000
 800162c:	24000060 	.word	0x24000060
 8001630:	080095c0 	.word	0x080095c0
 8001634:	24000060 	.word	0x24000060
 8001638:	24000684 	.word	0x24000684

0800163c <ADC3_IRQHandler>:
 800163c:	e7fe      	b.n	800163c <ADC3_IRQHandler>
	...

08001640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001646:	2003      	movs	r0, #3
 8001648:	f001 f8e0 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800164c:	f003 fb54 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8001650:	4602      	mov	r2, r0
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <HAL_Init+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	f003 030f 	and.w	r3, r3, #15
 800165c:	4913      	ldr	r1, [pc, #76]	; (80016ac <HAL_Init+0x6c>)
 800165e:	5ccb      	ldrb	r3, [r1, r3]
 8001660:	f003 031f 	and.w	r3, r3, #31
 8001664:	fa22 f303 	lsr.w	r3, r2, r3
 8001668:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_Init+0x68>)
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_Init+0x6c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	fa22 f303 	lsr.w	r3, r2, r3
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_Init+0x70>)
 8001682:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_Init+0x74>)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f814 	bl	80016b8 <HAL_InitTick>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e002      	b.n	80016a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800169a:	f7ff fc8b 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	58024400 	.word	0x58024400
 80016ac:	08009590 	.word	0x08009590
 80016b0:	24000004 	.word	0x24000004
 80016b4:	24000000 	.word	0x24000000

080016b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_InitTick+0x60>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e021      	b.n	8001710 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_InitTick+0x64>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_InitTick+0x60>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f001 f8b7 	bl	8002856 <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f001 f88f 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x68>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2400000c 	.word	0x2400000c
 800171c:	24000000 	.word	0x24000000
 8001720:	24000008 	.word	0x24000008

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2400000c 	.word	0x2400000c
 8001748:	24000538 	.word	0x24000538

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	24000538 	.word	0x24000538

08001764 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetREVID+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	0c1b      	lsrs	r3, r3, #16
}
 800176e:	4618      	mov	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	5c001000 	.word	0x5c001000

0800177c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	609a      	str	r2, [r3, #8]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	609a      	str	r2, [r3, #8]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	3360      	adds	r3, #96	; 0x60
 80017f6:	461a      	mov	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	431a      	orrs	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3360      	adds	r3, #96	; 0x60
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	431a      	orrs	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	601a      	str	r2, [r3, #0]
  }
}
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3330      	adds	r3, #48	; 0x30
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	f003 030c 	and.w	r3, r3, #12
 80018a8:	4413      	add	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	211f      	movs	r1, #31
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	0e9b      	lsrs	r3, r3, #26
 80018c4:	f003 011f 	and.w	r1, r3, #31
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3314      	adds	r3, #20
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	0e5b      	lsrs	r3, r3, #25
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	0d1b      	lsrs	r3, r3, #20
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2107      	movs	r1, #7
 8001912:	fa01 f303 	lsl.w	r3, r1, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	401a      	ands	r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0d1b      	lsrs	r3, r3, #20
 800191e:	f003 031f 	and.w	r3, r3, #31
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	fa01 f303 	lsl.w	r3, r1, r3
 8001928:	431a      	orrs	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800192e:	bf00      	nop
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f003 0318 	and.w	r3, r3, #24
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001960:	40d9      	lsrs	r1, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	400b      	ands	r3, r1
 8001966:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800196a:	431a      	orrs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	000fffff 	.word	0x000fffff

08001984 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6093      	str	r3, [r2, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	5fffffc0 	.word	0x5fffffc0

080019a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019bc:	d101      	bne.n	80019c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80019de:	4013      	ands	r3, r2
 80019e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	6fffffc0 	.word	0x6fffffc0

080019f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a0c:	d101      	bne.n	8001a12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d101      	bne.n	8001a38 <LL_ADC_IsEnabled+0x18>
 8001a34:	2301      	movs	r3, #1
 8001a36:	e000      	b.n	8001a3a <LL_ADC_IsEnabled+0x1a>
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d101      	bne.n	8001a84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e18f      	b.n	8001dce <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fa93 	bl	8000fe8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff67 	bl	80019a8 <LL_ADC_IsDeepPowerDownEnabled>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff4d 	bl	8001984 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff82 	bl	80019f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d114      	bne.n	8001b24 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff66 	bl	80019d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b04:	4b87      	ldr	r3, [pc, #540]	; (8001d24 <HAL_ADC_Init+0x290>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	099b      	lsrs	r3, r3, #6
 8001b0a:	4a87      	ldr	r2, [pc, #540]	; (8001d28 <HAL_ADC_Init+0x294>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	3301      	adds	r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b16:	e002      	b.n	8001b1e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f9      	bne.n	8001b18 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff65 	bl	80019f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10d      	bne.n	8001b50 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b38:	f043 0210 	orr.w	r2, r3, #16
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	f043 0201 	orr.w	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff76 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001b5a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 8129 	bne.w	8001dbc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 8125 	bne.w	8001dbc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b76:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff4a 	bl	8001a20 <LL_ADC_IsEnabled>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d136      	bne.n	8001c00 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_ADC_Init+0x298>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x112>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a63      	ldr	r2, [pc, #396]	; (8001d30 <HAL_ADC_Init+0x29c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_ADC_Init+0x130>
 8001ba6:	4861      	ldr	r0, [pc, #388]	; (8001d2c <HAL_ADC_Init+0x298>)
 8001ba8:	f7ff ff3a 	bl	8001a20 <LL_ADC_IsEnabled>
 8001bac:	4604      	mov	r4, r0
 8001bae:	4860      	ldr	r0, [pc, #384]	; (8001d30 <HAL_ADC_Init+0x29c>)
 8001bb0:	f7ff ff36 	bl	8001a20 <LL_ADC_IsEnabled>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4323      	orrs	r3, r4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	e008      	b.n	8001bd6 <HAL_ADC_Init+0x142>
 8001bc4:	485b      	ldr	r0, [pc, #364]	; (8001d34 <HAL_ADC_Init+0x2a0>)
 8001bc6:	f7ff ff2b 	bl	8001a20 <LL_ADC_IsEnabled>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d012      	beq.n	8001c00 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a53      	ldr	r2, [pc, #332]	; (8001d2c <HAL_ADC_Init+0x298>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d004      	beq.n	8001bee <HAL_ADC_Init+0x15a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a51      	ldr	r2, [pc, #324]	; (8001d30 <HAL_ADC_Init+0x29c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Init+0x15e>
 8001bee:	4a52      	ldr	r2, [pc, #328]	; (8001d38 <HAL_ADC_Init+0x2a4>)
 8001bf0:	e000      	b.n	8001bf4 <HAL_ADC_Init+0x160>
 8001bf2:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_ADC_Init+0x2a8>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f7ff fdbe 	bl	800177c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001c00:	f7ff fdb0 	bl	8001764 <HAL_GetREVID>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d914      	bls.n	8001c38 <HAL_ADC_Init+0x1a4>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b10      	cmp	r3, #16
 8001c14:	d110      	bne.n	8001c38 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7d5b      	ldrb	r3, [r3, #21]
 8001c1a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c20:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c26:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7f1b      	ldrb	r3, [r3, #28]
 8001c2c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c2e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c30:	f043 030c 	orr.w	r3, r3, #12
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	e00d      	b.n	8001c54 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7d5b      	ldrb	r3, [r3, #21]
 8001c3c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c42:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c48:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7f1b      	ldrb	r3, [r3, #28]
 8001c4e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	7f1b      	ldrb	r3, [r3, #28]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	045b      	lsls	r3, r3, #17
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d009      	beq.n	8001c86 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <HAL_ADC_Init+0x2ac>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	69b9      	ldr	r1, [r7, #24]
 8001c96:	430b      	orrs	r3, r1
 8001c98:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fed1 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001ca4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fede 	bl	8001a6c <LL_ADC_INJ_IsConversionOngoing>
 8001cb0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d15f      	bne.n	8001d78 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d15c      	bne.n	8001d78 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7d1b      	ldrb	r3, [r3, #20]
 8001cc2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_ADC_Init+0x2b0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	69b9      	ldr	r1, [r7, #24]
 8001cdc:	430b      	orrs	r3, r1
 8001cde:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d130      	bne.n	8001d4c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_ADC_Init+0x2b4>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cfe:	3a01      	subs	r2, #1
 8001d00:	0411      	lsls	r1, r2, #16
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d06:	4311      	orrs	r1, r2
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d12:	430a      	orrs	r2, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	e01c      	b.n	8001d5c <HAL_ADC_Init+0x2c8>
 8001d22:	bf00      	nop
 8001d24:	24000000 	.word	0x24000000
 8001d28:	053e2d63 	.word	0x053e2d63
 8001d2c:	40022000 	.word	0x40022000
 8001d30:	40022100 	.word	0x40022100
 8001d34:	58026000 	.word	0x58026000
 8001d38:	40022300 	.word	0x40022300
 8001d3c:	58026300 	.word	0x58026300
 8001d40:	fff0c003 	.word	0xfff0c003
 8001d44:	ffffbffc 	.word	0xffffbffc
 8001d48:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fb8c 	bl	8002490 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d10c      	bne.n	8001d9a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f023 010f 	bic.w	r1, r3, #15
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	1e5a      	subs	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
 8001d98:	e007      	b.n	8001daa <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 020f 	bic.w	r2, r2, #15
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f023 0303 	bic.w	r3, r3, #3
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
 8001dba:	e007      	b.n	8001dcc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	f043 0210 	orr.w	r2, r3, #16
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001dcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop

08001dd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b0a1      	sub	sp, #132	; 0x84
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <HAL_ADC_ConfigChannel+0x1b0>)
 8001df2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x2a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e32e      	b.n	8002460 <HAL_ADC_ConfigChannel+0x688>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fe19 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 8313 	bne.w	8002442 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	db2c      	blt.n	8001e7e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d108      	bne.n	8001e42 <HAL_ADC_ConfigChannel+0x6a>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0e9b      	lsrs	r3, r3, #26
 8001e36:	f003 031f 	and.w	r3, r3, #31
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	e016      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x98>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e52:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	e003      	b.n	8001e66 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	69d1      	ldr	r1, [r2, #28]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6859      	ldr	r1, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff fcfe 	bl	800188c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fdd6 	bl	8001a46 <LL_ADC_REG_IsConversionOngoing>
 8001e9a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fde3 	bl	8001a6c <LL_ADC_INJ_IsConversionOngoing>
 8001ea6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 80b8 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f040 80b4 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	f7ff fd0d 	bl	80018e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_ADC_ConfigChannel+0x1b4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ed6:	d10b      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x118>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	089b      	lsrs	r3, r3, #2
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	e01d      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x154>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d10b      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x13e>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	e00a      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x154>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d02c      	beq.n	8001f90 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6919      	ldr	r1, [r3, #16]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f44:	f7ff fc4e 	bl	80017e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	6919      	ldr	r1, [r3, #16]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	7e5b      	ldrb	r3, [r3, #25]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d102      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x186>
 8001f58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x188>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fc78 	bl	8001856 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d102      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1a4>
 8001f76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f7a:	e000      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x1a6>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f7ff fc50 	bl	8001824 <LL_ADC_SetDataRightShift>
 8001f84:	e04c      	b.n	8002020 <HAL_ADC_ConfigChannel+0x248>
 8001f86:	bf00      	nop
 8001f88:	47ff0000 	.word	0x47ff0000
 8001f8c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	069b      	lsls	r3, r3, #26
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	069b      	lsls	r3, r3, #26
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d107      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fd6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	069b      	lsls	r3, r3, #26
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d107      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ffa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002002:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	069b      	lsls	r3, r3, #26
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800201e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fcfb 	bl	8001a20 <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	f040 8211 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6819      	ldr	r1, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	461a      	mov	r2, r3
 8002040:	f7ff fc7c 	bl	800193c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4aa1      	ldr	r2, [pc, #644]	; (80022d0 <HAL_ADC_ConfigChannel+0x4f8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	f040 812e 	bne.w	80022ac <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10b      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x2a0>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0e9b      	lsrs	r3, r3, #26
 8002066:	3301      	adds	r3, #1
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2b09      	cmp	r3, #9
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e019      	b.n	80020ac <HAL_ADC_ConfigChannel+0x2d4>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800208a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e003      	b.n	800209c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002096:	fab3 f383 	clz	r3, r3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	3301      	adds	r3, #1
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	2b09      	cmp	r3, #9
 80020a4:	bf94      	ite	ls
 80020a6:	2301      	movls	r3, #1
 80020a8:	2300      	movhi	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d079      	beq.n	80021a4 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x2f4>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	3301      	adds	r3, #1
 80020c4:	069b      	lsls	r3, r3, #26
 80020c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ca:	e015      	b.n	80020f8 <HAL_ADC_ConfigChannel+0x320>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80020da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80020de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e003      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80020e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	069b      	lsls	r3, r3, #26
 80020f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002100:	2b00      	cmp	r3, #0
 8002102:	d109      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x340>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0e9b      	lsrs	r3, r3, #26
 800210a:	3301      	adds	r3, #1
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2101      	movs	r1, #1
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	e017      	b.n	8002148 <HAL_ADC_ConfigChannel+0x370>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002128:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002130:	2320      	movs	r3, #32
 8002132:	e003      	b.n	800213c <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	2101      	movs	r1, #1
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	ea42 0103 	orr.w	r1, r2, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_ADC_ConfigChannel+0x396>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	051b      	lsls	r3, r3, #20
 800216c:	e018      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x3c8>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002176:	fa93 f3a3 	rbit	r3, r3
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002186:	2320      	movs	r3, #32
 8002188:	e003      	b.n	8002192 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218c:	fab3 f383 	clz	r3, r3
 8002190:	b2db      	uxtb	r3, r3
 8002192:	3301      	adds	r3, #1
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a0:	430b      	orrs	r3, r1
 80021a2:	e07e      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x3e8>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	069b      	lsls	r3, r3, #26
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021be:	e015      	b.n	80021ec <HAL_ADC_ConfigChannel+0x414>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80021d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x434>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	e017      	b.n	800223c <HAL_ADC_ConfigChannel+0x464>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	61bb      	str	r3, [r7, #24]
  return result;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	ea42 0103 	orr.w	r1, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10d      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x490>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	3b1e      	subs	r3, #30
 8002260:	051b      	lsls	r3, r3, #20
 8002262:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002266:	e01b      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x4c8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	60fb      	str	r3, [r7, #12]
  return result;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002280:	2320      	movs	r3, #32
 8002282:	e003      	b.n	800228c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f003 021f 	and.w	r2, r3, #31
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3b1e      	subs	r3, #30
 800229a:	051b      	lsls	r3, r3, #20
 800229c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022a0:	430b      	orrs	r3, r1
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	6892      	ldr	r2, [r2, #8]
 80022a6:	4619      	mov	r1, r3
 80022a8:	f7ff fb1c 	bl	80018e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f280 80cf 	bge.w	8002454 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a06      	ldr	r2, [pc, #24]	; (80022d4 <HAL_ADC_ConfigChannel+0x4fc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_ADC_ConfigChannel+0x4f2>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_ADC_ConfigChannel+0x500>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d10a      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x508>
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_ADC_ConfigChannel+0x504>)
 80022cc:	e009      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x50a>
 80022ce:	bf00      	nop
 80022d0:	47ff0000 	.word	0x47ff0000
 80022d4:	40022000 	.word	0x40022000
 80022d8:	40022100 	.word	0x40022100
 80022dc:	40022300 	.word	0x40022300
 80022e0:	4b61      	ldr	r3, [pc, #388]	; (8002468 <HAL_ADC_ConfigChannel+0x690>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fa70 	bl	80017c8 <LL_ADC_GetCommonPathInternalCh>
 80022e8:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a5f      	ldr	r2, [pc, #380]	; (800246c <HAL_ADC_ConfigChannel+0x694>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d004      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x526>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5d      	ldr	r2, [pc, #372]	; (8002470 <HAL_ADC_ConfigChannel+0x698>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10e      	bne.n	800231c <HAL_ADC_ConfigChannel+0x544>
 80022fe:	485b      	ldr	r0, [pc, #364]	; (800246c <HAL_ADC_ConfigChannel+0x694>)
 8002300:	f7ff fb8e 	bl	8001a20 <LL_ADC_IsEnabled>
 8002304:	4604      	mov	r4, r0
 8002306:	485a      	ldr	r0, [pc, #360]	; (8002470 <HAL_ADC_ConfigChannel+0x698>)
 8002308:	f7ff fb8a 	bl	8001a20 <LL_ADC_IsEnabled>
 800230c:	4603      	mov	r3, r0
 800230e:	4323      	orrs	r3, r4
 8002310:	2b00      	cmp	r3, #0
 8002312:	bf0c      	ite	eq
 8002314:	2301      	moveq	r3, #1
 8002316:	2300      	movne	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e008      	b.n	800232e <HAL_ADC_ConfigChannel+0x556>
 800231c:	4855      	ldr	r0, [pc, #340]	; (8002474 <HAL_ADC_ConfigChannel+0x69c>)
 800231e:	f7ff fb7f 	bl	8001a20 <LL_ADC_IsEnabled>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	bf0c      	ite	eq
 8002328:	2301      	moveq	r3, #1
 800232a:	2300      	movne	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d07d      	beq.n	800242e <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_ADC_ConfigChannel+0x6a0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d130      	bne.n	800239e <HAL_ADC_ConfigChannel+0x5c6>
 800233c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d12b      	bne.n	800239e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_ADC_ConfigChannel+0x69c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	f040 8081 	bne.w	8002454 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_ADC_ConfigChannel+0x694>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d004      	beq.n	8002366 <HAL_ADC_ConfigChannel+0x58e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a43      	ldr	r2, [pc, #268]	; (8002470 <HAL_ADC_ConfigChannel+0x698>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_ADC_ConfigChannel+0x592>
 8002366:	4a45      	ldr	r2, [pc, #276]	; (800247c <HAL_ADC_ConfigChannel+0x6a4>)
 8002368:	e000      	b.n	800236c <HAL_ADC_ConfigChannel+0x594>
 800236a:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <HAL_ADC_ConfigChannel+0x690>)
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7ff fa14 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_ADC_ConfigChannel+0x6a8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	099b      	lsrs	r3, r3, #6
 8002380:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_ADC_ConfigChannel+0x6ac>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	3301      	adds	r3, #1
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800238e:	e002      	b.n	8002396 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	3b01      	subs	r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800239c:	e05a      	b.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a39      	ldr	r2, [pc, #228]	; (8002488 <HAL_ADC_ConfigChannel+0x6b0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d11e      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x60e>
 80023a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d119      	bne.n	80023e6 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <HAL_ADC_ConfigChannel+0x69c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d14b      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2a      	ldr	r2, [pc, #168]	; (800246c <HAL_ADC_ConfigChannel+0x694>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_ADC_ConfigChannel+0x5f8>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_ADC_ConfigChannel+0x698>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x5fc>
 80023d0:	4a2a      	ldr	r2, [pc, #168]	; (800247c <HAL_ADC_ConfigChannel+0x6a4>)
 80023d2:	e000      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x5fe>
 80023d4:	4a24      	ldr	r2, [pc, #144]	; (8002468 <HAL_ADC_ConfigChannel+0x690>)
 80023d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff f9df 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023e4:	e036      	b.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <HAL_ADC_ConfigChannel+0x6b4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d131      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
 80023f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d12c      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <HAL_ADC_ConfigChannel+0x69c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d127      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_ADC_ConfigChannel+0x694>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d004      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x640>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a17      	ldr	r2, [pc, #92]	; (8002470 <HAL_ADC_ConfigChannel+0x698>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_ADC_ConfigChannel+0x644>
 8002418:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_ADC_ConfigChannel+0x6a4>)
 800241a:	e000      	b.n	800241e <HAL_ADC_ConfigChannel+0x646>
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_ADC_ConfigChannel+0x690>)
 800241e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002420:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f7ff f9bb 	bl	80017a2 <LL_ADC_SetCommonPathInternalCh>
 800242c:	e012      	b.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	f043 0220 	orr.w	r2, r3, #32
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002440:	e008      	b.n	8002454 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800245c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002460:	4618      	mov	r0, r3
 8002462:	3784      	adds	r7, #132	; 0x84
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	58026300 	.word	0x58026300
 800246c:	40022000 	.word	0x40022000
 8002470:	40022100 	.word	0x40022100
 8002474:	58026000 	.word	0x58026000
 8002478:	cb840000 	.word	0xcb840000
 800247c:	40022300 	.word	0x40022300
 8002480:	24000000 	.word	0x24000000
 8002484:	053e2d63 	.word	0x053e2d63
 8002488:	c7520000 	.word	0xc7520000
 800248c:	cfb80000 	.word	0xcfb80000

08002490 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a7a      	ldr	r2, [pc, #488]	; (8002688 <ADC_ConfigureBoostMode+0x1f8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d004      	beq.n	80024ac <ADC_ConfigureBoostMode+0x1c>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a79      	ldr	r2, [pc, #484]	; (800268c <ADC_ConfigureBoostMode+0x1fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d109      	bne.n	80024c0 <ADC_ConfigureBoostMode+0x30>
 80024ac:	4b78      	ldr	r3, [pc, #480]	; (8002690 <ADC_ConfigureBoostMode+0x200>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	e008      	b.n	80024d2 <ADC_ConfigureBoostMode+0x42>
 80024c0:	4b74      	ldr	r3, [pc, #464]	; (8002694 <ADC_ConfigureBoostMode+0x204>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d01c      	beq.n	8002510 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80024d6:	f002 fd89 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 80024da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024e4:	d010      	beq.n	8002508 <ADC_ConfigureBoostMode+0x78>
 80024e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024ea:	d873      	bhi.n	80025d4 <ADC_ConfigureBoostMode+0x144>
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d002      	beq.n	80024f8 <ADC_ConfigureBoostMode+0x68>
 80024f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f6:	d16d      	bne.n	80025d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	fbb2 f3f3 	udiv	r3, r2, r3
 8002504:	60fb      	str	r3, [r7, #12]
        break;
 8002506:	e068      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	60fb      	str	r3, [r7, #12]
        break;
 800250e:	e064      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002510:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002514:	f04f 0100 	mov.w	r1, #0
 8002518:	f003 ffce 	bl	80064b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800251c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002526:	d051      	beq.n	80025cc <ADC_ConfigureBoostMode+0x13c>
 8002528:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800252c:	d854      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800252e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002532:	d047      	beq.n	80025c4 <ADC_ConfigureBoostMode+0x134>
 8002534:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002538:	d84e      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800253a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800253e:	d03d      	beq.n	80025bc <ADC_ConfigureBoostMode+0x12c>
 8002540:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002544:	d848      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800254a:	d033      	beq.n	80025b4 <ADC_ConfigureBoostMode+0x124>
 800254c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002550:	d842      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002552:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002556:	d029      	beq.n	80025ac <ADC_ConfigureBoostMode+0x11c>
 8002558:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800255c:	d83c      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800255e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002562:	d01a      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002564:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002568:	d836      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800256a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800256e:	d014      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002570:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002574:	d830      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800257a:	d00e      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 800257c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002580:	d82a      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 8002582:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002586:	d008      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002588:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800258c:	d824      	bhi.n	80025d8 <ADC_ConfigureBoostMode+0x148>
 800258e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002592:	d002      	beq.n	800259a <ADC_ConfigureBoostMode+0x10a>
 8002594:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002598:	d11e      	bne.n	80025d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c9b      	lsrs	r3, r3, #18
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e016      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	60fb      	str	r3, [r7, #12]
        break;
 80025b2:	e012      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	60fb      	str	r3, [r7, #12]
        break;
 80025ba:	e00e      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	60fb      	str	r3, [r7, #12]
        break;
 80025c2:	e00a      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	09db      	lsrs	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
        break;
 80025ca:	e006      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	60fb      	str	r3, [r7, #12]
        break;
 80025d2:	e002      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
        break;
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80025d8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80025da:	f7ff f8c3 	bl	8001764 <HAL_GetREVID>
 80025de:	4603      	mov	r3, r0
 80025e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d815      	bhi.n	8002614 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <ADC_ConfigureBoostMode+0x208>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d908      	bls.n	8002602 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002600:	e03e      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002610:	609a      	str	r2, [r3, #8]
}
 8002612:	e035      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <ADC_ConfigureBoostMode+0x20c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d808      	bhi.n	8002634 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	e025      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <ADC_ConfigureBoostMode+0x210>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d80a      	bhi.n	8002652 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	e016      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <ADC_ConfigureBoostMode+0x214>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d80a      	bhi.n	8002670 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266c:	609a      	str	r2, [r3, #8]
}
 800266e:	e007      	b.n	8002680 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40022000 	.word	0x40022000
 800268c:	40022100 	.word	0x40022100
 8002690:	40022300 	.word	0x40022300
 8002694:	58026300 	.word	0x58026300
 8002698:	01312d00 	.word	0x01312d00
 800269c:	005f5e10 	.word	0x005f5e10
 80026a0:	00bebc20 	.word	0x00bebc20
 80026a4:	017d7840 	.word	0x017d7840

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026d0:	4b06      	ldr	r3, [pc, #24]	; (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d6:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <__NVIC_SetPriorityGrouping+0x40>)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00
 80026ec:	05fa0000 	.word	0x05fa0000

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	; (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <__NVIC_SetPriority+0x50>)
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	; 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	; (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	; (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff47 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002830:	f7ff ff5e 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68b9      	ldr	r1, [r7, #8]
 800283a:	6978      	ldr	r0, [r7, #20]
 800283c:	f7ff ff90 	bl	8002760 <NVIC_EncodePriority>
 8002840:	4602      	mov	r2, r0
 8002842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff5f 	bl	800270c <__NVIC_SetPriority>
}
 800284e:	bf00      	nop
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffb2 	bl	80027c8 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002878:	f7fe ff68 	bl	800174c <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e316      	b.n	8002eb6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a66      	ldr	r2, [pc, #408]	; (8002a28 <HAL_DMA_Init+0x1b8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d04a      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a65      	ldr	r2, [pc, #404]	; (8002a2c <HAL_DMA_Init+0x1bc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d045      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a63      	ldr	r2, [pc, #396]	; (8002a30 <HAL_DMA_Init+0x1c0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d040      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a62      	ldr	r2, [pc, #392]	; (8002a34 <HAL_DMA_Init+0x1c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d03b      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a60      	ldr	r2, [pc, #384]	; (8002a38 <HAL_DMA_Init+0x1c8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d036      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a5f      	ldr	r2, [pc, #380]	; (8002a3c <HAL_DMA_Init+0x1cc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a5d      	ldr	r2, [pc, #372]	; (8002a40 <HAL_DMA_Init+0x1d0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d02c      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <HAL_DMA_Init+0x1d4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d027      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a5a      	ldr	r2, [pc, #360]	; (8002a48 <HAL_DMA_Init+0x1d8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d022      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a59      	ldr	r2, [pc, #356]	; (8002a4c <HAL_DMA_Init+0x1dc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d01d      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_DMA_Init+0x1e0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d018      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_DMA_Init+0x1e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a54      	ldr	r2, [pc, #336]	; (8002a58 <HAL_DMA_Init+0x1e8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00e      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a53      	ldr	r2, [pc, #332]	; (8002a5c <HAL_DMA_Init+0x1ec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d009      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a51      	ldr	r2, [pc, #324]	; (8002a60 <HAL_DMA_Init+0x1f0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d004      	beq.n	8002928 <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a50      	ldr	r2, [pc, #320]	; (8002a64 <HAL_DMA_Init+0x1f4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d101      	bne.n	800292c <HAL_DMA_Init+0xbc>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_DMA_Init+0xbe>
 800292c:	2300      	movs	r3, #0
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 813b 	beq.w	8002baa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a37      	ldr	r2, [pc, #220]	; (8002a28 <HAL_DMA_Init+0x1b8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d04a      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a36      	ldr	r2, [pc, #216]	; (8002a2c <HAL_DMA_Init+0x1bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d045      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_DMA_Init+0x1c0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d040      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a33      	ldr	r2, [pc, #204]	; (8002a34 <HAL_DMA_Init+0x1c4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d03b      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <HAL_DMA_Init+0x1c8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d036      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a30      	ldr	r2, [pc, #192]	; (8002a3c <HAL_DMA_Init+0x1cc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d031      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2e      	ldr	r2, [pc, #184]	; (8002a40 <HAL_DMA_Init+0x1d0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02c      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2d      	ldr	r2, [pc, #180]	; (8002a44 <HAL_DMA_Init+0x1d4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d027      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2b      	ldr	r2, [pc, #172]	; (8002a48 <HAL_DMA_Init+0x1d8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d022      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_DMA_Init+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d01d      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a28      	ldr	r2, [pc, #160]	; (8002a50 <HAL_DMA_Init+0x1e0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d018      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_DMA_Init+0x1e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_DMA_Init+0x1e8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <HAL_DMA_Init+0x1ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <HAL_DMA_Init+0x1f0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <HAL_DMA_Init+0x1f4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d108      	bne.n	80029f6 <HAL_DMA_Init+0x186>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e007      	b.n	8002a06 <HAL_DMA_Init+0x196>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a06:	e02f      	b.n	8002a68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a08:	f7fe fea0 	bl	800174c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b05      	cmp	r3, #5
 8002a14:	d928      	bls.n	8002a68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2203      	movs	r2, #3
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e246      	b.n	8002eb6 <HAL_DMA_Init+0x646>
 8002a28:	40020010 	.word	0x40020010
 8002a2c:	40020028 	.word	0x40020028
 8002a30:	40020040 	.word	0x40020040
 8002a34:	40020058 	.word	0x40020058
 8002a38:	40020070 	.word	0x40020070
 8002a3c:	40020088 	.word	0x40020088
 8002a40:	400200a0 	.word	0x400200a0
 8002a44:	400200b8 	.word	0x400200b8
 8002a48:	40020410 	.word	0x40020410
 8002a4c:	40020428 	.word	0x40020428
 8002a50:	40020440 	.word	0x40020440
 8002a54:	40020458 	.word	0x40020458
 8002a58:	40020470 	.word	0x40020470
 8002a5c:	40020488 	.word	0x40020488
 8002a60:	400204a0 	.word	0x400204a0
 8002a64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1c8      	bne.n	8002a08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <HAL_DMA_Init+0x420>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d107      	bne.n	8002acc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002acc:	4b71      	ldr	r3, [pc, #452]	; (8002c94 <HAL_DMA_Init+0x424>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b71      	ldr	r3, [pc, #452]	; (8002c98 <HAL_DMA_Init+0x428>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad8:	d328      	bcc.n	8002b2c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b28      	cmp	r3, #40	; 0x28
 8002ae0:	d903      	bls.n	8002aea <HAL_DMA_Init+0x27a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ae8:	d917      	bls.n	8002b1a <HAL_DMA_Init+0x2aa>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b3e      	cmp	r3, #62	; 0x3e
 8002af0:	d903      	bls.n	8002afa <HAL_DMA_Init+0x28a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b42      	cmp	r3, #66	; 0x42
 8002af8:	d90f      	bls.n	8002b1a <HAL_DMA_Init+0x2aa>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b46      	cmp	r3, #70	; 0x46
 8002b00:	d903      	bls.n	8002b0a <HAL_DMA_Init+0x29a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b48      	cmp	r3, #72	; 0x48
 8002b08:	d907      	bls.n	8002b1a <HAL_DMA_Init+0x2aa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b4e      	cmp	r3, #78	; 0x4e
 8002b10:	d905      	bls.n	8002b1e <HAL_DMA_Init+0x2ae>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b52      	cmp	r3, #82	; 0x52
 8002b18:	d801      	bhi.n	8002b1e <HAL_DMA_Init+0x2ae>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_DMA_Init+0x2b0>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d117      	bne.n	8002b86 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00e      	beq.n	8002b86 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fa8f 	bl	800308c <DMA_CheckFifoParam>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e197      	b.n	8002eb6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9ca 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 8002b94:	4603      	mov	r3, r0
 8002b96:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	f003 031f 	and.w	r3, r3, #31
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	e0cd      	b.n	8002d46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a3b      	ldr	r2, [pc, #236]	; (8002c9c <HAL_DMA_Init+0x42c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d022      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a39      	ldr	r2, [pc, #228]	; (8002ca0 <HAL_DMA_Init+0x430>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01d      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a38      	ldr	r2, [pc, #224]	; (8002ca4 <HAL_DMA_Init+0x434>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d018      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <HAL_DMA_Init+0x438>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a35      	ldr	r2, [pc, #212]	; (8002cac <HAL_DMA_Init+0x43c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00e      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a33      	ldr	r2, [pc, #204]	; (8002cb0 <HAL_DMA_Init+0x440>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <HAL_DMA_Init+0x444>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_DMA_Init+0x38a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_DMA_Init+0x448>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_DMA_Init+0x38e>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e000      	b.n	8002c00 <HAL_DMA_Init+0x390>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8097 	beq.w	8002d34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_DMA_Init+0x42c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d021      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_DMA_Init+0x430>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d01c      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_DMA_Init+0x434>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d017      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_DMA_Init+0x438>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d012      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <HAL_DMA_Init+0x43c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00d      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_DMA_Init+0x440>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d008      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_DMA_Init+0x444>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <HAL_DMA_Init+0x3e4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_DMA_Init+0x448>)
 8002c52:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_DMA_Init+0x44c>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b40      	cmp	r3, #64	; 0x40
 8002c7a:	d021      	beq.n	8002cc0 <HAL_DMA_Init+0x450>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d102      	bne.n	8002c8a <HAL_DMA_Init+0x41a>
 8002c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c88:	e01b      	b.n	8002cc2 <HAL_DMA_Init+0x452>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e019      	b.n	8002cc2 <HAL_DMA_Init+0x452>
 8002c8e:	bf00      	nop
 8002c90:	fe10803f 	.word	0xfe10803f
 8002c94:	5c001000 	.word	0x5c001000
 8002c98:	ffff0000 	.word	0xffff0000
 8002c9c:	58025408 	.word	0x58025408
 8002ca0:	5802541c 	.word	0x5802541c
 8002ca4:	58025430 	.word	0x58025430
 8002ca8:	58025444 	.word	0x58025444
 8002cac:	58025458 	.word	0x58025458
 8002cb0:	5802546c 	.word	0x5802546c
 8002cb4:	58025480 	.word	0x58025480
 8002cb8:	58025494 	.word	0x58025494
 8002cbc:	fffe000f 	.word	0xfffe000f
 8002cc0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002cf0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b6e      	ldr	r3, [pc, #440]	; (8002ec0 <HAL_DMA_Init+0x650>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	4a6e      	ldr	r2, [pc, #440]	; (8002ec4 <HAL_DMA_Init+0x654>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	009a      	lsls	r2, r3, #2
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f905 	bl	8002f28 <DMA_CalcBaseAndBitshift>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	e008      	b.n	8002d46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2240      	movs	r2, #64	; 0x40
 8002d38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e0b7      	b.n	8002eb6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5f      	ldr	r2, [pc, #380]	; (8002ec8 <HAL_DMA_Init+0x658>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d072      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_DMA_Init+0x65c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d06d      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5c      	ldr	r2, [pc, #368]	; (8002ed0 <HAL_DMA_Init+0x660>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d068      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a5a      	ldr	r2, [pc, #360]	; (8002ed4 <HAL_DMA_Init+0x664>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d063      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a59      	ldr	r2, [pc, #356]	; (8002ed8 <HAL_DMA_Init+0x668>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d05e      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a57      	ldr	r2, [pc, #348]	; (8002edc <HAL_DMA_Init+0x66c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d059      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a56      	ldr	r2, [pc, #344]	; (8002ee0 <HAL_DMA_Init+0x670>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d054      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a54      	ldr	r2, [pc, #336]	; (8002ee4 <HAL_DMA_Init+0x674>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d04f      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a53      	ldr	r2, [pc, #332]	; (8002ee8 <HAL_DMA_Init+0x678>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d04a      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a51      	ldr	r2, [pc, #324]	; (8002eec <HAL_DMA_Init+0x67c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d045      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a50      	ldr	r2, [pc, #320]	; (8002ef0 <HAL_DMA_Init+0x680>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d040      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4e      	ldr	r2, [pc, #312]	; (8002ef4 <HAL_DMA_Init+0x684>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d03b      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4d      	ldr	r2, [pc, #308]	; (8002ef8 <HAL_DMA_Init+0x688>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d036      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a4b      	ldr	r2, [pc, #300]	; (8002efc <HAL_DMA_Init+0x68c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d031      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a4a      	ldr	r2, [pc, #296]	; (8002f00 <HAL_DMA_Init+0x690>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d02c      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a48      	ldr	r2, [pc, #288]	; (8002f04 <HAL_DMA_Init+0x694>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d027      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a47      	ldr	r2, [pc, #284]	; (8002f08 <HAL_DMA_Init+0x698>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <HAL_DMA_Init+0x69c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d01d      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a44      	ldr	r2, [pc, #272]	; (8002f10 <HAL_DMA_Init+0x6a0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d018      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a42      	ldr	r2, [pc, #264]	; (8002f14 <HAL_DMA_Init+0x6a4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d013      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <HAL_DMA_Init+0x6a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00e      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_DMA_Init+0x6ac>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d009      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_DMA_Init+0x6b0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d004      	beq.n	8002e36 <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <HAL_DMA_Init+0x6b4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Init+0x5ca>
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <HAL_DMA_Init+0x5cc>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d032      	beq.n	8002ea6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f99f 	bl	8003184 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d102      	bne.n	8002e54 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e68:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <HAL_DMA_Init+0x624>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d80c      	bhi.n	8002e94 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa1c 	bl	80032b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e008      	b.n	8002ea6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	a7fdabf8 	.word	0xa7fdabf8
 8002ec4:	cccccccd 	.word	0xcccccccd
 8002ec8:	40020010 	.word	0x40020010
 8002ecc:	40020028 	.word	0x40020028
 8002ed0:	40020040 	.word	0x40020040
 8002ed4:	40020058 	.word	0x40020058
 8002ed8:	40020070 	.word	0x40020070
 8002edc:	40020088 	.word	0x40020088
 8002ee0:	400200a0 	.word	0x400200a0
 8002ee4:	400200b8 	.word	0x400200b8
 8002ee8:	40020410 	.word	0x40020410
 8002eec:	40020428 	.word	0x40020428
 8002ef0:	40020440 	.word	0x40020440
 8002ef4:	40020458 	.word	0x40020458
 8002ef8:	40020470 	.word	0x40020470
 8002efc:	40020488 	.word	0x40020488
 8002f00:	400204a0 	.word	0x400204a0
 8002f04:	400204b8 	.word	0x400204b8
 8002f08:	58025408 	.word	0x58025408
 8002f0c:	5802541c 	.word	0x5802541c
 8002f10:	58025430 	.word	0x58025430
 8002f14:	58025444 	.word	0x58025444
 8002f18:	58025458 	.word	0x58025458
 8002f1c:	5802546c 	.word	0x5802546c
 8002f20:	58025480 	.word	0x58025480
 8002f24:	58025494 	.word	0x58025494

08002f28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a42      	ldr	r2, [pc, #264]	; (8003040 <DMA_CalcBaseAndBitshift+0x118>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d04a      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a41      	ldr	r2, [pc, #260]	; (8003044 <DMA_CalcBaseAndBitshift+0x11c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d045      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a3f      	ldr	r2, [pc, #252]	; (8003048 <DMA_CalcBaseAndBitshift+0x120>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d040      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a3e      	ldr	r2, [pc, #248]	; (800304c <DMA_CalcBaseAndBitshift+0x124>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d03b      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <DMA_CalcBaseAndBitshift+0x128>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d036      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3b      	ldr	r2, [pc, #236]	; (8003054 <DMA_CalcBaseAndBitshift+0x12c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d031      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a39      	ldr	r2, [pc, #228]	; (8003058 <DMA_CalcBaseAndBitshift+0x130>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d02c      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a38      	ldr	r2, [pc, #224]	; (800305c <DMA_CalcBaseAndBitshift+0x134>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d027      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a36      	ldr	r2, [pc, #216]	; (8003060 <DMA_CalcBaseAndBitshift+0x138>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d022      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a35      	ldr	r2, [pc, #212]	; (8003064 <DMA_CalcBaseAndBitshift+0x13c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d01d      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a33      	ldr	r2, [pc, #204]	; (8003068 <DMA_CalcBaseAndBitshift+0x140>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d018      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a32      	ldr	r2, [pc, #200]	; (800306c <DMA_CalcBaseAndBitshift+0x144>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a30      	ldr	r2, [pc, #192]	; (8003070 <DMA_CalcBaseAndBitshift+0x148>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a2f      	ldr	r2, [pc, #188]	; (8003074 <DMA_CalcBaseAndBitshift+0x14c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2d      	ldr	r2, [pc, #180]	; (8003078 <DMA_CalcBaseAndBitshift+0x150>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2c      	ldr	r2, [pc, #176]	; (800307c <DMA_CalcBaseAndBitshift+0x154>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d101      	bne.n	8002fd4 <DMA_CalcBaseAndBitshift+0xac>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <DMA_CalcBaseAndBitshift+0xae>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d024      	beq.n	8003024 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	3b10      	subs	r3, #16
 8002fe2:	4a27      	ldr	r2, [pc, #156]	; (8003080 <DMA_CalcBaseAndBitshift+0x158>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	091b      	lsrs	r3, r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	4a24      	ldr	r2, [pc, #144]	; (8003084 <DMA_CalcBaseAndBitshift+0x15c>)
 8002ff4:	5cd3      	ldrb	r3, [r2, r3]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d908      	bls.n	8003014 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b1f      	ldr	r3, [pc, #124]	; (8003088 <DMA_CalcBaseAndBitshift+0x160>)
 800300a:	4013      	ands	r3, r2
 800300c:	1d1a      	adds	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58
 8003012:	e00d      	b.n	8003030 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <DMA_CalcBaseAndBitshift+0x160>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
 8003022:	e005      	b.n	8003030 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40020010 	.word	0x40020010
 8003044:	40020028 	.word	0x40020028
 8003048:	40020040 	.word	0x40020040
 800304c:	40020058 	.word	0x40020058
 8003050:	40020070 	.word	0x40020070
 8003054:	40020088 	.word	0x40020088
 8003058:	400200a0 	.word	0x400200a0
 800305c:	400200b8 	.word	0x400200b8
 8003060:	40020410 	.word	0x40020410
 8003064:	40020428 	.word	0x40020428
 8003068:	40020440 	.word	0x40020440
 800306c:	40020458 	.word	0x40020458
 8003070:	40020470 	.word	0x40020470
 8003074:	40020488 	.word	0x40020488
 8003078:	400204a0 	.word	0x400204a0
 800307c:	400204b8 	.word	0x400204b8
 8003080:	aaaaaaab 	.word	0xaaaaaaab
 8003084:	080095a0 	.word	0x080095a0
 8003088:	fffffc00 	.word	0xfffffc00

0800308c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d120      	bne.n	80030e2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d858      	bhi.n	800315a <DMA_CheckFifoParam+0xce>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <DMA_CheckFifoParam+0x24>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030d3 	.word	0x080030d3
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	0800315b 	.word	0x0800315b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d048      	beq.n	800315e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030d0:	e045      	b.n	800315e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030da:	d142      	bne.n	8003162 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030e0:	e03f      	b.n	8003162 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ea:	d123      	bne.n	8003134 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d838      	bhi.n	8003166 <DMA_CheckFifoParam+0xda>
 80030f4:	a201      	add	r2, pc, #4	; (adr r2, 80030fc <DMA_CheckFifoParam+0x70>)
 80030f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fa:	bf00      	nop
 80030fc:	0800310d 	.word	0x0800310d
 8003100:	08003113 	.word	0x08003113
 8003104:	0800310d 	.word	0x0800310d
 8003108:	08003125 	.word	0x08003125
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
        break;
 8003110:	e030      	b.n	8003174 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d025      	beq.n	800316a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003122:	e022      	b.n	800316a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800312c:	d11f      	bne.n	800316e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003132:	e01c      	b.n	800316e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b02      	cmp	r3, #2
 800313a:	d902      	bls.n	8003142 <DMA_CheckFifoParam+0xb6>
 800313c:	2b03      	cmp	r3, #3
 800313e:	d003      	beq.n	8003148 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003140:	e018      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
        break;
 8003146:	e015      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00e      	beq.n	8003172 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
    break;
 8003158:	e00b      	b.n	8003172 <DMA_CheckFifoParam+0xe6>
        break;
 800315a:	bf00      	nop
 800315c:	e00a      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        break;
 800315e:	bf00      	nop
 8003160:	e008      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        break;
 8003162:	bf00      	nop
 8003164:	e006      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        break;
 8003166:	bf00      	nop
 8003168:	e004      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        break;
 800316a:	bf00      	nop
 800316c:	e002      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
        break;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <DMA_CheckFifoParam+0xe8>
    break;
 8003172:	bf00      	nop
    }
  }

  return status;
 8003174:	7bfb      	ldrb	r3, [r7, #15]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop

08003184 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a36      	ldr	r2, [pc, #216]	; (800327c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a35      	ldr	r2, [pc, #212]	; (8003280 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a33      	ldr	r2, [pc, #204]	; (8003284 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a32      	ldr	r2, [pc, #200]	; (8003288 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a30      	ldr	r2, [pc, #192]	; (800328c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2f      	ldr	r2, [pc, #188]	; (8003290 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2d      	ldr	r2, [pc, #180]	; (8003294 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80031e6:	2300      	movs	r3, #0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01a      	beq.n	8003222 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	3b08      	subs	r3, #8
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4b26      	ldr	r3, [pc, #152]	; (800329c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	461a      	mov	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a24      	ldr	r2, [pc, #144]	; (80032a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003210:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2201      	movs	r2, #1
 800321a:	409a      	lsls	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003220:	e024      	b.n	800326c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3b10      	subs	r3, #16
 800322a:	4a1e      	ldr	r2, [pc, #120]	; (80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d806      	bhi.n	800324a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4a1b      	ldr	r2, [pc, #108]	; (80032ac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d902      	bls.n	800324a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3308      	adds	r3, #8
 8003248:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4b18      	ldr	r3, [pc, #96]	; (80032b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a16      	ldr	r2, [pc, #88]	; (80032b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800325c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2201      	movs	r2, #1
 8003266:	409a      	lsls	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800326c:	bf00      	nop
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	58025408 	.word	0x58025408
 800327c:	5802541c 	.word	0x5802541c
 8003280:	58025430 	.word	0x58025430
 8003284:	58025444 	.word	0x58025444
 8003288:	58025458 	.word	0x58025458
 800328c:	5802546c 	.word	0x5802546c
 8003290:	58025480 	.word	0x58025480
 8003294:	58025494 	.word	0x58025494
 8003298:	cccccccd 	.word	0xcccccccd
 800329c:	16009600 	.word	0x16009600
 80032a0:	58025880 	.word	0x58025880
 80032a4:	aaaaaaab 	.word	0xaaaaaaab
 80032a8:	400204b8 	.word	0x400204b8
 80032ac:	4002040f 	.word	0x4002040f
 80032b0:	10008200 	.word	0x10008200
 80032b4:	40020880 	.word	0x40020880

080032b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04a      	beq.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d847      	bhi.n	8003364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d022      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a24      	ldr	r2, [pc, #144]	; (8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01d      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a22      	ldr	r2, [pc, #136]	; (8003378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a21      	ldr	r2, [pc, #132]	; (800337c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1e      	ldr	r2, [pc, #120]	; (8003384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1c      	ldr	r2, [pc, #112]	; (8003388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1b      	ldr	r2, [pc, #108]	; (800338c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4b17      	ldr	r3, [pc, #92]	; (8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	461a      	mov	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003340:	671a      	str	r2, [r3, #112]	; 0x70
 8003342:	e009      	b.n	8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4b14      	ldr	r3, [pc, #80]	; (8003398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	461a      	mov	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003356:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	3b01      	subs	r3, #1
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003364:	bf00      	nop
 8003366:	3714      	adds	r7, #20
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	58025408 	.word	0x58025408
 8003374:	5802541c 	.word	0x5802541c
 8003378:	58025430 	.word	0x58025430
 800337c:	58025444 	.word	0x58025444
 8003380:	58025458 	.word	0x58025458
 8003384:	5802546c 	.word	0x5802546c
 8003388:	58025480 	.word	0x58025480
 800338c:	58025494 	.word	0x58025494
 8003390:	1600963f 	.word	0x1600963f
 8003394:	58025940 	.word	0x58025940
 8003398:	1000823f 	.word	0x1000823f
 800339c:	40020940 	.word	0x40020940

080033a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b098      	sub	sp, #96	; 0x60
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80033a8:	4a84      	ldr	r2, [pc, #528]	; (80035bc <HAL_FDCAN_Init+0x21c>)
 80033aa:	f107 030c 	add.w	r3, r7, #12
 80033ae:	4611      	mov	r1, r2
 80033b0:	224c      	movs	r2, #76	; 0x4c
 80033b2:	4618      	mov	r0, r3
 80033b4:	f006 f8ac 	bl	8009510 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e1c6      	b.n	8003750 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7e      	ldr	r2, [pc, #504]	; (80035c0 <HAL_FDCAN_Init+0x220>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d106      	bne.n	80033da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fe6e 	bl	80010d0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0210 	bic.w	r2, r2, #16
 8003402:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003404:	f7fe f9a2 	bl	800174c <HAL_GetTick>
 8003408:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800340a:	e014      	b.n	8003436 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800340c:	f7fe f99e 	bl	800174c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b0a      	cmp	r3, #10
 8003418:	d90d      	bls.n	8003436 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003420:	f043 0201 	orr.w	r2, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2203      	movs	r2, #3
 800342e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e18c      	b.n	8003750 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d0e3      	beq.n	800340c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003454:	f7fe f97a 	bl	800174c <HAL_GetTick>
 8003458:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800345a:	e014      	b.n	8003486 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800345c:	f7fe f976 	bl	800174c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b0a      	cmp	r3, #10
 8003468:	d90d      	bls.n	8003486 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003470:	f043 0201 	orr.w	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e164      	b.n	8003750 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0e3      	beq.n	800345c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0202 	orr.w	r2, r2, #2
 80034a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7c1b      	ldrb	r3, [r3, #16]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d108      	bne.n	80034be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ba:	619a      	str	r2, [r3, #24]
 80034bc:	e007      	b.n	80034ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7c5b      	ldrb	r3, [r3, #17]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d108      	bne.n	80034e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699a      	ldr	r2, [r3, #24]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034e4:	619a      	str	r2, [r3, #24]
 80034e6:	e007      	b.n	80034f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7c9b      	ldrb	r3, [r3, #18]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d108      	bne.n	8003512 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800350e:	619a      	str	r2, [r3, #24]
 8003510:	e007      	b.n	8003522 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003520:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003546:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0210 	bic.w	r2, r2, #16
 8003556:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d108      	bne.n	8003572 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0204 	orr.w	r2, r2, #4
 800356e:	619a      	str	r2, [r3, #24]
 8003570:	e030      	b.n	80035d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02c      	beq.n	80035d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d020      	beq.n	80035c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699a      	ldr	r2, [r3, #24]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003590:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0210 	orr.w	r2, r2, #16
 80035a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d114      	bne.n	80035d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0220 	orr.w	r2, r2, #32
 80035b8:	619a      	str	r2, [r3, #24]
 80035ba:	e00b      	b.n	80035d4 <HAL_FDCAN_Init+0x234>
 80035bc:	08009544 	.word	0x08009544
 80035c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699a      	ldr	r2, [r3, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0220 	orr.w	r2, r2, #32
 80035d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	3b01      	subs	r3, #1
 80035da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80035ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80035fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80035fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003608:	d115      	bne.n	8003636 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	3b01      	subs	r3, #1
 8003616:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003618:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	3b01      	subs	r3, #1
 8003620:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003622:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	3b01      	subs	r3, #1
 800362c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003632:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003634:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365c:	4413      	add	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d011      	beq.n	8003686 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800366a:	f023 0107 	bic.w	r1, r3, #7
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3360      	adds	r3, #96	; 0x60
 8003676:	443b      	add	r3, r7
 8003678:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d011      	beq.n	80036b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003696:	f023 0107 	bic.w	r1, r3, #7
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3360      	adds	r3, #96	; 0x60
 80036a2:	443b      	add	r3, r7
 80036a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d012      	beq.n	80036e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	3360      	adds	r3, #96	; 0x60
 80036ce:	443b      	add	r3, r7
 80036d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80036d4:	011a      	lsls	r2, r3, #4
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d012      	beq.n	800370e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80036f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	3360      	adds	r3, #96	; 0x60
 80036fc:	443b      	add	r3, r7
 80036fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003702:	021a      	lsls	r2, r3, #8
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_FDCAN_Init+0x3b8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d107      	bne.n	8003728 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f022 0203 	bic.w	r2, r2, #3
 8003726:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f80b 	bl	800375c <FDCAN_CalcultateRamBlockAddresses>
 8003746:	4603      	mov	r3, r0
 8003748:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800374c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003750:	4618      	mov	r0, r3
 8003752:	3760      	adds	r7, #96	; 0x60
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	4000a000 	.word	0x4000a000

0800375c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003772:	4ba7      	ldr	r3, [pc, #668]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003774:	4013      	ands	r3, r2
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	0091      	lsls	r1, r2, #2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6812      	ldr	r2, [r2, #0]
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800378c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	041a      	lsls	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4413      	add	r3, r2
 80037a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037b2:	4b97      	ldr	r3, [pc, #604]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	0091      	lsls	r1, r2, #2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	430b      	orrs	r3, r1
 80037c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	041a      	lsls	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80037f4:	4b86      	ldr	r3, [pc, #536]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	0091      	lsls	r1, r2, #2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800380e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	041a      	lsls	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	4413      	add	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800383c:	4b74      	ldr	r3, [pc, #464]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800383e:	4013      	ands	r3, r2
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	0091      	lsls	r1, r2, #2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003856:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385e:	041a      	lsls	r2, r3, #16
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	0091      	lsls	r1, r2, #2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80038b0:	4b57      	ldr	r3, [pc, #348]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	0091      	lsls	r1, r2, #2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d2:	041a      	lsls	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	4413      	add	r3, r2
 80038e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	0091      	lsls	r1, r2, #2
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6812      	ldr	r2, [r2, #0]
 80038fe:	430b      	orrs	r3, r1
 8003900:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800390c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	041a      	lsls	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003928:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	061a      	lsls	r2, r3, #24
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003940:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003942:	4413      	add	r3, r2
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	441a      	add	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800397c:	441a      	add	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80039a6:	fb01 f303 	mul.w	r3, r1, r3
 80039aa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80039f8:	441a      	add	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a06:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d915      	bls.n	8003a38 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003a0c:	e006      	b.n	8003a1c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003a0e:	bf00      	nop
 8003a10:	ffff0003 	.word	0xffff0003
 8003a14:	10002b00 	.word	0x10002b00
 8003a18:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2203      	movs	r2, #3
 8003a30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e010      	b.n	8003a5a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e005      	b.n	8003a4c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3f3      	bcc.n	8003a40 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop

08003a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b089      	sub	sp, #36	; 0x24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003a76:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_GPIO_Init+0x234>)
 8003a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a7a:	e194      	b.n	8003da6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	4013      	ands	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8186 	beq.w	8003da0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d005      	beq.n	8003aac <HAL_GPIO_Init+0x44>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d130      	bne.n	8003b0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4013      	ands	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	f003 0201 	and.w	r2, r3, #1
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d017      	beq.n	8003b4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d123      	bne.n	8003b9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	220f      	movs	r2, #15
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	f003 0307 	and.w	r3, r3, #7
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	08da      	lsrs	r2, r3, #3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3208      	adds	r2, #8
 8003b98:	69b9      	ldr	r1, [r7, #24]
 8003b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	2203      	movs	r2, #3
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 0203 	and.w	r2, r3, #3
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 80e0 	beq.w	8003da0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be0:	4b2f      	ldr	r3, [pc, #188]	; (8003ca0 <HAL_GPIO_Init+0x238>)
 8003be2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003be6:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <HAL_GPIO_Init+0x238>)
 8003be8:	f043 0302 	orr.w	r3, r3, #2
 8003bec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bf0:	4b2b      	ldr	r3, [pc, #172]	; (8003ca0 <HAL_GPIO_Init+0x238>)
 8003bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bfe:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <HAL_GPIO_Init+0x23c>)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a20      	ldr	r2, [pc, #128]	; (8003ca8 <HAL_GPIO_Init+0x240>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d052      	beq.n	8003cd0 <HAL_GPIO_Init+0x268>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_GPIO_Init+0x244>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d031      	beq.n	8003c96 <HAL_GPIO_Init+0x22e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_GPIO_Init+0x248>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d02b      	beq.n	8003c92 <HAL_GPIO_Init+0x22a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <HAL_GPIO_Init+0x24c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d025      	beq.n	8003c8e <HAL_GPIO_Init+0x226>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_GPIO_Init+0x250>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01f      	beq.n	8003c8a <HAL_GPIO_Init+0x222>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_GPIO_Init+0x254>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d019      	beq.n	8003c86 <HAL_GPIO_Init+0x21e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1a      	ldr	r2, [pc, #104]	; (8003cc0 <HAL_GPIO_Init+0x258>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d013      	beq.n	8003c82 <HAL_GPIO_Init+0x21a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <HAL_GPIO_Init+0x25c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00d      	beq.n	8003c7e <HAL_GPIO_Init+0x216>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_GPIO_Init+0x260>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <HAL_GPIO_Init+0x212>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_GPIO_Init+0x264>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_GPIO_Init+0x20e>
 8003c72:	2309      	movs	r3, #9
 8003c74:	e02d      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c76:	230a      	movs	r3, #10
 8003c78:	e02b      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	e029      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c7e:	2307      	movs	r3, #7
 8003c80:	e027      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c82:	2306      	movs	r3, #6
 8003c84:	e025      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c86:	2305      	movs	r3, #5
 8003c88:	e023      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	e021      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e01f      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e01d      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c96:	2301      	movs	r3, #1
 8003c98:	e01b      	b.n	8003cd2 <HAL_GPIO_Init+0x26a>
 8003c9a:	bf00      	nop
 8003c9c:	58000080 	.word	0x58000080
 8003ca0:	58024400 	.word	0x58024400
 8003ca4:	58000400 	.word	0x58000400
 8003ca8:	58020000 	.word	0x58020000
 8003cac:	58020400 	.word	0x58020400
 8003cb0:	58020800 	.word	0x58020800
 8003cb4:	58020c00 	.word	0x58020c00
 8003cb8:	58021000 	.word	0x58021000
 8003cbc:	58021400 	.word	0x58021400
 8003cc0:	58021800 	.word	0x58021800
 8003cc4:	58021c00 	.word	0x58021c00
 8003cc8:	58022000 	.word	0x58022000
 8003ccc:	58022400 	.word	0x58022400
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	69fa      	ldr	r2, [r7, #28]
 8003cd4:	f002 0203 	and.w	r2, r2, #3
 8003cd8:	0092      	lsls	r2, r2, #2
 8003cda:	4093      	lsls	r3, r2
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ce2:	4938      	ldr	r1, [pc, #224]	; (8003dc4 <HAL_GPIO_Init+0x35c>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	3301      	adds	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f47f ae63 	bne.w	8003a7c <HAL_GPIO_Init+0x14>
  }
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	3724      	adds	r7, #36	; 0x24
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	58000400 	.word	0x58000400

08003dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dd8:	787b      	ldrb	r3, [r7, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dde:	887a      	ldrh	r2, [r7, #2]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003de4:	e003      	b.n	8003dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	041a      	lsls	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	619a      	str	r2, [r3, #24]
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e08b      	b.n	8003f26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d106      	bne.n	8003e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fd f9be 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2224      	movs	r2, #36	; 0x24
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d107      	bne.n	8003e76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	e006      	b.n	8003e84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d108      	bne.n	8003e9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	e007      	b.n	8003eae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6859      	ldr	r1, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_I2C_Init+0x134>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69d9      	ldr	r1, [r3, #28]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1a      	ldr	r2, [r3, #32]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	02008000 	.word	0x02008000

08003f34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d138      	bne.n	8003fbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e032      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	; 0x24
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6819      	ldr	r1, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e000      	b.n	8003fbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fbc:	2302      	movs	r3, #2
  }
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	d139      	bne.n	8004054 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e033      	b.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2224      	movs	r2, #36	; 0x24
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800401c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004050:	2300      	movs	r3, #0
 8004052:	e000      	b.n	8004056 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
  }
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d00a      	beq.n	800408e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004078:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	429a      	cmp	r2, r3
 8004084:	d001      	beq.n	800408a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e01f      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e01d      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	490f      	ldr	r1, [pc, #60]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4313      	orrs	r3, r2
 800409c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800409e:	f7fd fb55 	bl	800174c <HAL_GetTick>
 80040a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040a4:	e009      	b.n	80040ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040a6:	f7fd fb51 	bl	800174c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b4:	d901      	bls.n	80040ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e007      	b.n	80040ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_PWREx_ConfigSupply+0x70>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d1ee      	bne.n	80040a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	58024800 	.word	0x58024800

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	; 0x30
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f000 bc48 	b.w	800497c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 8088 	beq.w	800420a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fa:	4b99      	ldr	r3, [pc, #612]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004104:	4b96      	ldr	r3, [pc, #600]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	2b10      	cmp	r3, #16
 800410e:	d007      	beq.n	8004120 <HAL_RCC_OscConfig+0x48>
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	2b18      	cmp	r3, #24
 8004114:	d111      	bne.n	800413a <HAL_RCC_OscConfig+0x62>
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d10c      	bne.n	800413a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4b8f      	ldr	r3, [pc, #572]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d06d      	beq.n	8004208 <HAL_RCC_OscConfig+0x130>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d169      	bne.n	8004208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	f000 bc21 	b.w	800497c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004142:	d106      	bne.n	8004152 <HAL_RCC_OscConfig+0x7a>
 8004144:	4b86      	ldr	r3, [pc, #536]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a85      	ldr	r2, [pc, #532]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e02e      	b.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x9c>
 800415a:	4b81      	ldr	r3, [pc, #516]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b7e      	ldr	r3, [pc, #504]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a7d      	ldr	r2, [pc, #500]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800416c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0xc0>
 800417e:	4b78      	ldr	r3, [pc, #480]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a77      	ldr	r2, [pc, #476]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b75      	ldr	r3, [pc, #468]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a74      	ldr	r2, [pc, #464]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xd8>
 8004198:	4b71      	ldr	r3, [pc, #452]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a70      	ldr	r2, [pc, #448]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b6e      	ldr	r3, [pc, #440]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a6d      	ldr	r2, [pc, #436]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fd fac8 	bl	800174c <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fd fac4 	bl	800174c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e3d4      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041d2:	4b63      	ldr	r3, [pc, #396]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xe8>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd fab4 	bl	800174c <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd fab0 	bl	800174c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	; 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e3c0      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041fa:	4b59      	ldr	r3, [pc, #356]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0x110>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80ca 	beq.w	80043ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004218:	4b51      	ldr	r3, [pc, #324]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004220:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004222:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_RCC_OscConfig+0x166>
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	2b18      	cmp	r3, #24
 8004232:	d156      	bne.n	80042e2 <HAL_RCC_OscConfig+0x20a>
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	f003 0303 	and.w	r3, r3, #3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d151      	bne.n	80042e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800423e:	4b48      	ldr	r3, [pc, #288]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RCC_OscConfig+0x17e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e392      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004256:	4b42      	ldr	r3, [pc, #264]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0219 	bic.w	r2, r3, #25
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	493f      	ldr	r1, [pc, #252]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd fa70 	bl	800174c <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fd fa6c 	bl	800174c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e37c      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004282:	4b37      	ldr	r3, [pc, #220]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	f7fd fa69 	bl	8001764 <HAL_GetREVID>
 8004292:	4603      	mov	r3, r0
 8004294:	f241 0203 	movw	r2, #4099	; 0x1003
 8004298:	4293      	cmp	r3, r2
 800429a:	d817      	bhi.n	80042cc <HAL_RCC_OscConfig+0x1f4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d108      	bne.n	80042b6 <HAL_RCC_OscConfig+0x1de>
 80042a4:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042ac:	4a2c      	ldr	r2, [pc, #176]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042b4:	e07a      	b.n	80043ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	4926      	ldr	r1, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ca:	e06f      	b.n	80043ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	061b      	lsls	r3, r3, #24
 80042da:	4921      	ldr	r1, [pc, #132]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e0:	e064      	b.n	80043ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d047      	beq.n	800437a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042ea:	4b1d      	ldr	r3, [pc, #116]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0219 	bic.w	r2, r3, #25
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	491a      	ldr	r1, [pc, #104]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd fa26 	bl	800174c <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004304:	f7fd fa22 	bl	800174c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e332      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004322:	f7fd fa1f 	bl	8001764 <HAL_GetREVID>
 8004326:	4603      	mov	r3, r0
 8004328:	f241 0203 	movw	r2, #4099	; 0x1003
 800432c:	4293      	cmp	r3, r2
 800432e:	d819      	bhi.n	8004364 <HAL_RCC_OscConfig+0x28c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d108      	bne.n	800434a <HAL_RCC_OscConfig+0x272>
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004340:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 8004342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004346:	6053      	str	r3, [r2, #4]
 8004348:	e030      	b.n	80043ac <HAL_RCC_OscConfig+0x2d4>
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	031b      	lsls	r3, r3, #12
 8004358:	4901      	ldr	r1, [pc, #4]	; (8004360 <HAL_RCC_OscConfig+0x288>)
 800435a:	4313      	orrs	r3, r2
 800435c:	604b      	str	r3, [r1, #4]
 800435e:	e025      	b.n	80043ac <HAL_RCC_OscConfig+0x2d4>
 8004360:	58024400 	.word	0x58024400
 8004364:	4b9a      	ldr	r3, [pc, #616]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	061b      	lsls	r3, r3, #24
 8004372:	4997      	ldr	r1, [pc, #604]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]
 8004378:	e018      	b.n	80043ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437a:	4b95      	ldr	r3, [pc, #596]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a94      	ldr	r2, [pc, #592]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fd f9e1 	bl	800174c <HAL_GetTick>
 800438a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438e:	f7fd f9dd 	bl	800174c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e2ed      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043a0:	4b8b      	ldr	r3, [pc, #556]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1f0      	bne.n	800438e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a9 	beq.w	800450c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ba:	4b85      	ldr	r3, [pc, #532]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043c4:	4b82      	ldr	r3, [pc, #520]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d007      	beq.n	80043e0 <HAL_RCC_OscConfig+0x308>
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	2b18      	cmp	r3, #24
 80043d4:	d13a      	bne.n	800444c <HAL_RCC_OscConfig+0x374>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d135      	bne.n	800444c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043e0:	4b7b      	ldr	r3, [pc, #492]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_OscConfig+0x320>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b80      	cmp	r3, #128	; 0x80
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e2c1      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043f8:	f7fd f9b4 	bl	8001764 <HAL_GetREVID>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8004402:	4293      	cmp	r3, r2
 8004404:	d817      	bhi.n	8004436 <HAL_RCC_OscConfig+0x35e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	2b20      	cmp	r3, #32
 800440c:	d108      	bne.n	8004420 <HAL_RCC_OscConfig+0x348>
 800440e:	4b70      	ldr	r3, [pc, #448]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004416:	4a6e      	ldr	r2, [pc, #440]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800441e:	e075      	b.n	800450c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004420:	4b6b      	ldr	r3, [pc, #428]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	069b      	lsls	r3, r3, #26
 800442e:	4968      	ldr	r1, [pc, #416]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004434:	e06a      	b.n	800450c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004436:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	4962      	ldr	r1, [pc, #392]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	4313      	orrs	r3, r2
 8004448:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800444a:	e05f      	b.n	800450c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d042      	beq.n	80044da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004454:	4b5e      	ldr	r3, [pc, #376]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a5d      	ldr	r2, [pc, #372]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800445a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd f974 	bl	800174c <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004468:	f7fd f970 	bl	800174c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e280      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800447a:	4b55      	ldr	r3, [pc, #340]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004486:	f7fd f96d 	bl	8001764 <HAL_GetREVID>
 800448a:	4603      	mov	r3, r0
 800448c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004490:	4293      	cmp	r3, r2
 8004492:	d817      	bhi.n	80044c4 <HAL_RCC_OscConfig+0x3ec>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	2b20      	cmp	r3, #32
 800449a:	d108      	bne.n	80044ae <HAL_RCC_OscConfig+0x3d6>
 800449c:	4b4c      	ldr	r3, [pc, #304]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044a4:	4a4a      	ldr	r2, [pc, #296]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044aa:	6053      	str	r3, [r2, #4]
 80044ac:	e02e      	b.n	800450c <HAL_RCC_OscConfig+0x434>
 80044ae:	4b48      	ldr	r3, [pc, #288]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	069b      	lsls	r3, r3, #26
 80044bc:	4944      	ldr	r1, [pc, #272]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
 80044c2:	e023      	b.n	800450c <HAL_RCC_OscConfig+0x434>
 80044c4:	4b42      	ldr	r3, [pc, #264]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	493f      	ldr	r1, [pc, #252]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60cb      	str	r3, [r1, #12]
 80044d8:	e018      	b.n	800450c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044da:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3c      	ldr	r2, [pc, #240]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80044e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e6:	f7fd f931 	bl	800174c <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044ee:	f7fd f92d 	bl	800174c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e23d      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004500:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f0      	bne.n	80044ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d036      	beq.n	8004586 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004520:	4b2b      	ldr	r3, [pc, #172]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd f90e 	bl	800174c <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004534:	f7fd f90a 	bl	800174c <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e21a      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004546:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x45c>
 8004552:	e018      	b.n	8004586 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004554:	4b1e      	ldr	r3, [pc, #120]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004560:	f7fd f8f4 	bl	800174c <HAL_GetTick>
 8004564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004568:	f7fd f8f0 	bl	800174c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e200      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800457a:	4b15      	ldr	r3, [pc, #84]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	d039      	beq.n	8004606 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a0c      	ldr	r2, [pc, #48]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045a6:	f7fd f8d1 	bl	800174c <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045ae:	f7fd f8cd 	bl	800174c <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1dd      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x4d6>
 80045cc:	e01b      	b.n	8004606 <HAL_RCC_OscConfig+0x52e>
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045d4:	4b9b      	ldr	r3, [pc, #620]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a9a      	ldr	r2, [pc, #616]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80045da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045e0:	f7fd f8b4 	bl	800174c <HAL_GetTick>
 80045e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e8:	f7fd f8b0 	bl	800174c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1c0      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045fa:	4b92      	ldr	r3, [pc, #584]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8081 	beq.w	8004716 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004614:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <HAL_RCC_OscConfig+0x770>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a8b      	ldr	r2, [pc, #556]	; (8004848 <HAL_RCC_OscConfig+0x770>)
 800461a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004620:	f7fd f894 	bl	800174c <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fd f890 	bl	800174c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	; 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1a0      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800463a:	4b83      	ldr	r3, [pc, #524]	; (8004848 <HAL_RCC_OscConfig+0x770>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x584>
 800464e:	4b7d      	ldr	r3, [pc, #500]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	4a7c      	ldr	r2, [pc, #496]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6713      	str	r3, [r2, #112]	; 0x70
 800465a:	e02d      	b.n	80046b8 <HAL_RCC_OscConfig+0x5e0>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10c      	bne.n	800467e <HAL_RCC_OscConfig+0x5a6>
 8004664:	4b77      	ldr	r3, [pc, #476]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	4a76      	ldr	r2, [pc, #472]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	; 0x70
 8004670:	4b74      	ldr	r3, [pc, #464]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a73      	ldr	r2, [pc, #460]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	e01c      	b.n	80046b8 <HAL_RCC_OscConfig+0x5e0>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x5c8>
 8004686:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	4a6e      	ldr	r2, [pc, #440]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6713      	str	r3, [r2, #112]	; 0x70
 8004692:	4b6c      	ldr	r3, [pc, #432]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a6b      	ldr	r2, [pc, #428]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	e00b      	b.n	80046b8 <HAL_RCC_OscConfig+0x5e0>
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a67      	ldr	r2, [pc, #412]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b65      	ldr	r3, [pc, #404]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a64      	ldr	r2, [pc, #400]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80046b2:	f023 0304 	bic.w	r3, r3, #4
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd f844 	bl	800174c <HAL_GetTick>
 80046c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fd f840 	bl	800174c <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e14e      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046de:	4b59      	ldr	r3, [pc, #356]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ee      	beq.n	80046c8 <HAL_RCC_OscConfig+0x5f0>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ec:	f7fd f82e 	bl	800174c <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd f82a 	bl	800174c <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e138      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800470a:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ee      	bne.n	80046f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 812d 	beq.w	800497a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004720:	4b48      	ldr	r3, [pc, #288]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004728:	2b18      	cmp	r3, #24
 800472a:	f000 80bd 	beq.w	80048a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	2b02      	cmp	r3, #2
 8004734:	f040 809e 	bne.w	8004874 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004738:	4b42      	ldr	r3, [pc, #264]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a41      	ldr	r2, [pc, #260]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800473e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004744:	f7fd f802 	bl	800174c <HAL_GetTick>
 8004748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc fffe 	bl	800174c <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e10e      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800476a:	4b36      	ldr	r3, [pc, #216]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800476c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCC_OscConfig+0x774>)
 8004770:	4013      	ands	r3, r2
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800477a:	0112      	lsls	r2, r2, #4
 800477c:	430a      	orrs	r2, r1
 800477e:	4931      	ldr	r1, [pc, #196]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	628b      	str	r3, [r1, #40]	; 0x28
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	3b01      	subs	r3, #1
 800478a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004792:	3b01      	subs	r3, #1
 8004794:	025b      	lsls	r3, r3, #9
 8004796:	b29b      	uxth	r3, r3
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ac:	3b01      	subs	r3, #1
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047b4:	4923      	ldr	r1, [pc, #140]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	4a21      	ldr	r2, [pc, #132]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047c0:	f023 0301 	bic.w	r3, r3, #1
 80047c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047c6:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ca:	4b21      	ldr	r3, [pc, #132]	; (8004850 <HAL_RCC_OscConfig+0x778>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047d2:	00d2      	lsls	r2, r2, #3
 80047d4:	491b      	ldr	r1, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f023 020c 	bic.w	r2, r3, #12
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e6:	4917      	ldr	r1, [pc, #92]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	f023 0202 	bic.w	r2, r3, #2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	4912      	ldr	r1, [pc, #72]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a10      	ldr	r2, [pc, #64]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	4a0d      	ldr	r2, [pc, #52]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004814:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004816:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 800481c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004820:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004828:	f043 0301 	orr.w	r3, r3, #1
 800482c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HAL_RCC_OscConfig+0x76c>)
 8004834:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483a:	f7fc ff87 	bl	800174c <HAL_GetTick>
 800483e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004840:	e011      	b.n	8004866 <HAL_RCC_OscConfig+0x78e>
 8004842:	bf00      	nop
 8004844:	58024400 	.word	0x58024400
 8004848:	58024800 	.word	0x58024800
 800484c:	fffffc0c 	.word	0xfffffc0c
 8004850:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fc ff7a 	bl	800174c <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e08a      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x77c>
 8004872:	e082      	b.n	800497a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004874:	4b43      	ldr	r3, [pc, #268]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a42      	ldr	r2, [pc, #264]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 800487a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fc ff64 	bl	800174c <HAL_GetTick>
 8004884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004888:	f7fc ff60 	bl	800174c <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e070      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800489a:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x7b0>
 80048a6:	e068      	b.n	800497a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048ae:	4b35      	ldr	r3, [pc, #212]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d031      	beq.n	8004920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f003 0203 	and.w	r2, r3, #3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d12a      	bne.n	8004920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d122      	bne.n	8004920 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d11a      	bne.n	8004920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	0a5b      	lsrs	r3, r3, #9
 80048ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d111      	bne.n	8004920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	0c1b      	lsrs	r3, r3, #16
 8004900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d108      	bne.n	8004920 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	0e1b      	lsrs	r3, r3, #24
 8004912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e02b      	b.n	800497c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 8004926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800492e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d01f      	beq.n	800497a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a11      	ldr	r2, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004946:	f7fc ff01 	bl	800174c <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800494c:	bf00      	nop
 800494e:	f7fc fefd 	bl	800174c <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	4293      	cmp	r3, r2
 8004958:	d0f9      	beq.n	800494e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 800495c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <HAL_RCC_OscConfig+0x8b0>)
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004966:	00d2      	lsls	r2, r2, #3
 8004968:	4906      	ldr	r1, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 800496a:	4313      	orrs	r3, r2
 800496c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCC_OscConfig+0x8ac>)
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3730      	adds	r7, #48	; 0x30
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	58024400 	.word	0x58024400
 8004988:	ffff0007 	.word	0xffff0007

0800498c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d101      	bne.n	80049a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e19c      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a0:	4b8a      	ldr	r3, [pc, #552]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 030f 	and.w	r3, r3, #15
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d910      	bls.n	80049d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ae:	4b87      	ldr	r3, [pc, #540]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 020f 	bic.w	r2, r3, #15
 80049b6:	4985      	ldr	r1, [pc, #532]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049be:	4b83      	ldr	r3, [pc, #524]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e184      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d010      	beq.n	80049fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	4b7b      	ldr	r3, [pc, #492]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d908      	bls.n	80049fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ec:	4b78      	ldr	r3, [pc, #480]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	4975      	ldr	r1, [pc, #468]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695a      	ldr	r2, [r3, #20]
 8004a0e:	4b70      	ldr	r3, [pc, #448]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d908      	bls.n	8004a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	496a      	ldr	r1, [pc, #424]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699a      	ldr	r2, [r3, #24]
 8004a3c:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d908      	bls.n	8004a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a48:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	495e      	ldr	r1, [pc, #376]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d010      	beq.n	8004a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69da      	ldr	r2, [r3, #28]
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d908      	bls.n	8004a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a76:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4953      	ldr	r1, [pc, #332]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d010      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	4b4d      	ldr	r3, [pc, #308]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d908      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	4b4a      	ldr	r3, [pc, #296]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f023 020f 	bic.w	r2, r3, #15
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4947      	ldr	r1, [pc, #284]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d055      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ac2:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4940      	ldr	r1, [pc, #256]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004adc:	4b3c      	ldr	r3, [pc, #240]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d121      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0f6      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d107      	bne.n	8004b04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d115      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e0ea      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b0c:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0de      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1c:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0d6      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b2c:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f023 0207 	bic.w	r2, r3, #7
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4925      	ldr	r1, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fe05 	bl	800174c <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b44:	e00a      	b.n	8004b5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b46:	f7fc fe01 	bl	800174c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e0be      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d1eb      	bne.n	8004b46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	4b14      	ldr	r3, [pc, #80]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d208      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f023 020f 	bic.w	r2, r3, #15
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	490e      	ldr	r1, [pc, #56]	; (8004bd0 <HAL_RCC_ClockConfig+0x244>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d214      	bcs.n	8004bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f023 020f 	bic.w	r2, r3, #15
 8004bb2:	4906      	ldr	r1, [pc, #24]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bba:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <HAL_RCC_ClockConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e086      	b.n	8004cda <HAL_RCC_ClockConfig+0x34e>
 8004bcc:	52002000 	.word	0x52002000
 8004bd0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691a      	ldr	r2, [r3, #16]
 8004be4:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d208      	bcs.n	8004c02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bf0:	4b3c      	ldr	r3, [pc, #240]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	4939      	ldr	r1, [pc, #228]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d010      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	4b34      	ldr	r3, [pc, #208]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d208      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c1e:	4b31      	ldr	r3, [pc, #196]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	492e      	ldr	r1, [pc, #184]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d010      	beq.n	8004c5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	4b28      	ldr	r3, [pc, #160]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d208      	bcs.n	8004c5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4922      	ldr	r1, [pc, #136]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d208      	bcs.n	8004c8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c8c:	f000 f834 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	4912      	ldr	r1, [pc, #72]	; (8004ce8 <HAL_RCC_ClockConfig+0x35c>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_RCC_ClockConfig+0x358>)
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <HAL_RCC_ClockConfig+0x35c>)
 8004cb4:	5cd3      	ldrb	r3, [r2, r3]
 8004cb6:	f003 031f 	and.w	r3, r3, #31
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x360>)
 8004cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004cc4:	4a0a      	ldr	r2, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x364>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004cca:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <HAL_RCC_ClockConfig+0x368>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fc fcf2 	bl	80016b8 <HAL_InitTick>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	08009590 	.word	0x08009590
 8004cec:	24000004 	.word	0x24000004
 8004cf0:	24000000 	.word	0x24000000
 8004cf4:	24000008 	.word	0x24000008

08004cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cfe:	4bb3      	ldr	r3, [pc, #716]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d06:	2b18      	cmp	r3, #24
 8004d08:	f200 8155 	bhi.w	8004fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d0c:	a201      	add	r2, pc, #4	; (adr r2, 8004d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d79 	.word	0x08004d79
 8004d18:	08004fb7 	.word	0x08004fb7
 8004d1c:	08004fb7 	.word	0x08004fb7
 8004d20:	08004fb7 	.word	0x08004fb7
 8004d24:	08004fb7 	.word	0x08004fb7
 8004d28:	08004fb7 	.word	0x08004fb7
 8004d2c:	08004fb7 	.word	0x08004fb7
 8004d30:	08004fb7 	.word	0x08004fb7
 8004d34:	08004d9f 	.word	0x08004d9f
 8004d38:	08004fb7 	.word	0x08004fb7
 8004d3c:	08004fb7 	.word	0x08004fb7
 8004d40:	08004fb7 	.word	0x08004fb7
 8004d44:	08004fb7 	.word	0x08004fb7
 8004d48:	08004fb7 	.word	0x08004fb7
 8004d4c:	08004fb7 	.word	0x08004fb7
 8004d50:	08004fb7 	.word	0x08004fb7
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004fb7 	.word	0x08004fb7
 8004d5c:	08004fb7 	.word	0x08004fb7
 8004d60:	08004fb7 	.word	0x08004fb7
 8004d64:	08004fb7 	.word	0x08004fb7
 8004d68:	08004fb7 	.word	0x08004fb7
 8004d6c:	08004fb7 	.word	0x08004fb7
 8004d70:	08004fb7 	.word	0x08004fb7
 8004d74:	08004dab 	.word	0x08004dab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d78:	4b94      	ldr	r3, [pc, #592]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d84:	4b91      	ldr	r3, [pc, #580]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	4a90      	ldr	r2, [pc, #576]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d96:	e111      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d98:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d9a:	61bb      	str	r3, [r7, #24]
      break;
 8004d9c:	e10e      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d9e:	4b8d      	ldr	r3, [pc, #564]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004da0:	61bb      	str	r3, [r7, #24]
      break;
 8004da2:	e10b      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004da4:	4b8c      	ldr	r3, [pc, #560]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004da6:	61bb      	str	r3, [r7, #24]
      break;
 8004da8:	e108      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004daa:	4b88      	ldr	r3, [pc, #544]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004db4:	4b85      	ldr	r3, [pc, #532]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004dc0:	4b82      	ldr	r3, [pc, #520]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004dca:	4b80      	ldr	r3, [pc, #512]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dce:	08db      	lsrs	r3, r3, #3
 8004dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80e1 	beq.w	8004fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	f000 8083 	beq.w	8004efc <HAL_RCC_GetSysClockFreq+0x204>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f200 80a1 	bhi.w	8004f40 <HAL_RCC_GetSysClockFreq+0x248>
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x114>
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d056      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e0a:	e099      	b.n	8004f40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e0c:	4b6f      	ldr	r3, [pc, #444]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d02d      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e18:	4b6c      	ldr	r3, [pc, #432]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	08db      	lsrs	r3, r3, #3
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	4a6b      	ldr	r2, [pc, #428]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e24:	fa22 f303 	lsr.w	r3, r2, r3
 8004e28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	ee07 3a90 	vmov	s15, r3
 8004e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b62      	ldr	r3, [pc, #392]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e72:	e087      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b51      	ldr	r3, [pc, #324]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eb6:	e065      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eca:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ede:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004efa:	e043      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0e:	4b2f      	ldr	r3, [pc, #188]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f3e:	e021      	b.n	8004f84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b1e      	ldr	r3, [pc, #120]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	0a5b      	lsrs	r3, r3, #9
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	3301      	adds	r3, #1
 8004f90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fa8:	ee17 3a90 	vmov	r3, s15
 8004fac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004fae:	e005      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
      break;
 8004fb4:	e002      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fb8:	61bb      	str	r3, [r7, #24]
      break;
 8004fba:	bf00      	nop
  }

  return sysclockfreq;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3724      	adds	r7, #36	; 0x24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	03d09000 	.word	0x03d09000
 8004fd4:	003d0900 	.word	0x003d0900
 8004fd8:	017d7840 	.word	0x017d7840
 8004fdc:	46000000 	.word	0x46000000
 8004fe0:	4c742400 	.word	0x4c742400
 8004fe4:	4a742400 	.word	0x4a742400
 8004fe8:	4bbebc20 	.word	0x4bbebc20

08004fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff2:	f7ff fe81 	bl	8004cf8 <HAL_RCC_GetSysClockFreq>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4b10      	ldr	r3, [pc, #64]	; (800503c <HAL_RCC_GetHCLKFreq+0x50>)
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	490f      	ldr	r1, [pc, #60]	; (8005040 <HAL_RCC_GetHCLKFreq+0x54>)
 8005004:	5ccb      	ldrb	r3, [r1, r3]
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	fa22 f303 	lsr.w	r3, r2, r3
 800500e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005010:	4b0a      	ldr	r3, [pc, #40]	; (800503c <HAL_RCC_GetHCLKFreq+0x50>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <HAL_RCC_GetHCLKFreq+0x54>)
 800501a:	5cd3      	ldrb	r3, [r2, r3]
 800501c:	f003 031f 	and.w	r3, r3, #31
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	fa22 f303 	lsr.w	r3, r2, r3
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <HAL_RCC_GetHCLKFreq+0x58>)
 8005028:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_RCC_GetHCLKFreq+0x5c>)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <HAL_RCC_GetHCLKFreq+0x58>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	58024400 	.word	0x58024400
 8005040:	08009590 	.word	0x08009590
 8005044:	24000004 	.word	0x24000004
 8005048:	24000000 	.word	0x24000000

0800504c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005050:	f7ff ffcc 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4904      	ldr	r1, [pc, #16]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	58024400 	.word	0x58024400
 8005074:	08009590 	.word	0x08009590

08005078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800507c:	f7ff ffb6 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8005080:	4602      	mov	r2, r0
 8005082:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4904      	ldr	r1, [pc, #16]	; (80050a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800508e:	5ccb      	ldrb	r3, [r1, r3]
 8005090:	f003 031f 	and.w	r3, r3, #31
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	58024400 	.word	0x58024400
 80050a0:	08009590 	.word	0x08009590

080050a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a8:	b0ca      	sub	sp, #296	; 0x128
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80050b0:	2300      	movs	r3, #0
 80050b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80050c8:	2500      	movs	r5, #0
 80050ca:	ea54 0305 	orrs.w	r3, r4, r5
 80050ce:	d049      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050da:	d02f      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80050dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80050e0:	d828      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e6:	d01a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80050e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050ec:	d822      	bhi.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80050f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f6:	d007      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050f8:	e01c      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050fa:	4bb8      	ldr	r3, [pc, #736]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fe:	4ab7      	ldr	r2, [pc, #732]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005104:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005106:	e01a      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800510c:	3308      	adds	r3, #8
 800510e:	2102      	movs	r1, #2
 8005110:	4618      	mov	r0, r3
 8005112:	f002 fb61 	bl	80077d8 <RCCEx_PLL2_Config>
 8005116:	4603      	mov	r3, r0
 8005118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800511c:	e00f      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005122:	3328      	adds	r3, #40	; 0x28
 8005124:	2102      	movs	r1, #2
 8005126:	4618      	mov	r0, r3
 8005128:	f002 fc08 	bl	800793c <RCCEx_PLL3_Config>
 800512c:	4603      	mov	r3, r0
 800512e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005132:	e004      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800513c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800513e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10a      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005146:	4ba5      	ldr	r3, [pc, #660]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800514e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005154:	4aa1      	ldr	r2, [pc, #644]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005156:	430b      	orrs	r3, r1
 8005158:	6513      	str	r3, [r2, #80]	; 0x50
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005160:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005170:	f04f 0900 	mov.w	r9, #0
 8005174:	ea58 0309 	orrs.w	r3, r8, r9
 8005178:	d047      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005180:	2b04      	cmp	r3, #4
 8005182:	d82a      	bhi.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	080051a1 	.word	0x080051a1
 8005190:	080051af 	.word	0x080051af
 8005194:	080051c5 	.word	0x080051c5
 8005198:	080051e3 	.word	0x080051e3
 800519c:	080051e3 	.word	0x080051e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a0:	4b8e      	ldr	r3, [pc, #568]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4a8d      	ldr	r2, [pc, #564]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051ac:	e01a      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b2:	3308      	adds	r3, #8
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f002 fb0e 	bl	80077d8 <RCCEx_PLL2_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051c2:	e00f      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c8:	3328      	adds	r3, #40	; 0x28
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 fbb5 	bl	800793c <RCCEx_PLL3_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80051d8:	e004      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051e0:	e000      	b.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80051e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ec:	4b7b      	ldr	r3, [pc, #492]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	f023 0107 	bic.w	r1, r3, #7
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	4a78      	ldr	r2, [pc, #480]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051fc:	430b      	orrs	r3, r1
 80051fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005200:	e003      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005212:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005216:	f04f 0b00 	mov.w	fp, #0
 800521a:	ea5a 030b 	orrs.w	r3, sl, fp
 800521e:	d04c      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d030      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800522c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005230:	d829      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005232:	2bc0      	cmp	r3, #192	; 0xc0
 8005234:	d02d      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005236:	2bc0      	cmp	r3, #192	; 0xc0
 8005238:	d825      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800523a:	2b80      	cmp	r3, #128	; 0x80
 800523c:	d018      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d821      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005246:	2b40      	cmp	r3, #64	; 0x40
 8005248:	d007      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800524a:	e01c      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800524c:	4b63      	ldr	r3, [pc, #396]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	4a62      	ldr	r2, [pc, #392]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005256:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005258:	e01c      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800525a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800525e:	3308      	adds	r3, #8
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f002 fab8 	bl	80077d8 <RCCEx_PLL2_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800526e:	e011      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005274:	3328      	adds	r3, #40	; 0x28
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f002 fb5f 	bl	800793c <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005284:	e006      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800528c:	e002      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800528e:	bf00      	nop
 8005290:	e000      	b.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800529c:	4b4f      	ldr	r3, [pc, #316]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800529e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052aa:	4a4c      	ldr	r2, [pc, #304]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6513      	str	r3, [r2, #80]	; 0x50
 80052b0:	e003      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80052c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80052d4:	460b      	mov	r3, r1
 80052d6:	4313      	orrs	r3, r2
 80052d8:	d053      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80052da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052e6:	d035      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80052e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ec:	d82e      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052f2:	d031      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80052f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052f8:	d828      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fe:	d01a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005304:	d822      	bhi.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800530a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800530e:	d007      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005310:	e01c      	b.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005312:	4b32      	ldr	r3, [pc, #200]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	4a31      	ldr	r2, [pc, #196]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800531c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800531e:	e01c      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005324:	3308      	adds	r3, #8
 8005326:	2100      	movs	r1, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f002 fa55 	bl	80077d8 <RCCEx_PLL2_Config>
 800532e:	4603      	mov	r3, r0
 8005330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005334:	e011      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533a:	3328      	adds	r3, #40	; 0x28
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f002 fafc 	bl	800793c <RCCEx_PLL3_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800534a:	e006      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005352:	e002      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800535a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005362:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005366:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005374:	430b      	orrs	r3, r1
 8005376:	6593      	str	r3, [r2, #88]	; 0x58
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800537e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800538e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005392:	2300      	movs	r3, #0
 8005394:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005398:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800539c:	460b      	mov	r3, r1
 800539e:	4313      	orrs	r3, r2
 80053a0:	d056      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80053a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ae:	d038      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80053b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b4:	d831      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ba:	d034      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80053bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053c0:	d82b      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053c6:	d01d      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80053c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053cc:	d825      	bhi.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80053d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053d6:	d00a      	beq.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80053d8:	e01f      	b.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80053da:	bf00      	nop
 80053dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e0:	4ba2      	ldr	r3, [pc, #648]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	4aa1      	ldr	r2, [pc, #644]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ec:	e01c      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f2:	3308      	adds	r3, #8
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f002 f9ee 	bl	80077d8 <RCCEx_PLL2_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005402:	e011      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005408:	3328      	adds	r3, #40	; 0x28
 800540a:	2100      	movs	r1, #0
 800540c:	4618      	mov	r0, r3
 800540e:	f002 fa95 	bl	800793c <RCCEx_PLL3_Config>
 8005412:	4603      	mov	r3, r0
 8005414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005418:	e006      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005420:	e002      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005430:	4b8e      	ldr	r3, [pc, #568]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800543c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005440:	4a8a      	ldr	r2, [pc, #552]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005442:	430b      	orrs	r3, r1
 8005444:	6593      	str	r3, [r2, #88]	; 0x58
 8005446:	e003      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005448:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800544c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005458:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800545c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005466:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800546a:	460b      	mov	r3, r1
 800546c:	4313      	orrs	r3, r2
 800546e:	d03a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	2b30      	cmp	r3, #48	; 0x30
 8005478:	d01f      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800547a:	2b30      	cmp	r3, #48	; 0x30
 800547c:	d819      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800547e:	2b20      	cmp	r3, #32
 8005480:	d00c      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005482:	2b20      	cmp	r3, #32
 8005484:	d815      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d019      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800548a:	2b10      	cmp	r3, #16
 800548c:	d111      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548e:	4b77      	ldr	r3, [pc, #476]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a76      	ldr	r2, [pc, #472]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800549a:	e011      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800549c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054a0:	3308      	adds	r3, #8
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 f997 	bl	80077d8 <RCCEx_PLL2_Config>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80054b0:	e006      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054b8:	e002      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80054ba:	bf00      	nop
 80054bc:	e000      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80054be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054c8:	4b68      	ldr	r3, [pc, #416]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80054d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	4a65      	ldr	r2, [pc, #404]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054d8:	430b      	orrs	r3, r1
 80054da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80054f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80054f6:	2300      	movs	r3, #0
 80054f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005500:	460b      	mov	r3, r1
 8005502:	4313      	orrs	r3, r2
 8005504:	d051      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005510:	d035      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005516:	d82e      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800551c:	d031      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800551e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005522:	d828      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005528:	d01a      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552e:	d822      	bhi.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005538:	d007      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800553a:	e01c      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553c:	4b4b      	ldr	r3, [pc, #300]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a4a      	ldr	r2, [pc, #296]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005548:	e01c      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800554a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800554e:	3308      	adds	r3, #8
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f002 f940 	bl	80077d8 <RCCEx_PLL2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800555e:	e011      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005564:	3328      	adds	r3, #40	; 0x28
 8005566:	2100      	movs	r1, #0
 8005568:	4618      	mov	r0, r3
 800556a:	f002 f9e7 	bl	800793c <RCCEx_PLL3_Config>
 800556e:	4603      	mov	r3, r0
 8005570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005574:	e006      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800557c:	e002      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800558c:	4b37      	ldr	r3, [pc, #220]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005590:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559a:	4a34      	ldr	r2, [pc, #208]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6513      	str	r3, [r2, #80]	; 0x50
 80055a0:	e003      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80055aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80055b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80055c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80055c4:	460b      	mov	r3, r1
 80055c6:	4313      	orrs	r3, r2
 80055c8:	d056      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80055ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055d4:	d033      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80055d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055da:	d82c      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e0:	d02f      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80055e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e6:	d826      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055ec:	d02b      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80055ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055f2:	d820      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055f8:	d012      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80055fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055fe:	d81a      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d022      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005608:	d115      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560e:	3308      	adds	r3, #8
 8005610:	2101      	movs	r1, #1
 8005612:	4618      	mov	r0, r3
 8005614:	f002 f8e0 	bl	80077d8 <RCCEx_PLL2_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800561e:	e015      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005624:	3328      	adds	r3, #40	; 0x28
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f002 f987 	bl	800793c <RCCEx_PLL3_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005634:	e00a      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800563c:	e006      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800563e:	bf00      	nop
 8005640:	e004      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005642:	bf00      	nop
 8005644:	e002      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005646:	bf00      	nop
 8005648:	e000      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800564a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800564c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005654:	4b05      	ldr	r3, [pc, #20]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005662:	4a02      	ldr	r2, [pc, #8]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005664:	430b      	orrs	r3, r1
 8005666:	6513      	str	r3, [r2, #80]	; 0x50
 8005668:	e006      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800566a:	bf00      	nop
 800566c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800568e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005692:	460b      	mov	r3, r1
 8005694:	4313      	orrs	r3, r2
 8005696:	d055      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056a4:	d033      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80056a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056aa:	d82c      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b0:	d02f      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80056b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b6:	d826      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056bc:	d02b      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80056be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056c2:	d820      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c8:	d012      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80056ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056ce:	d81a      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d022      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80056d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056d8:	d115      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056de:	3308      	adds	r3, #8
 80056e0:	2101      	movs	r1, #1
 80056e2:	4618      	mov	r0, r3
 80056e4:	f002 f878 	bl	80077d8 <RCCEx_PLL2_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056ee:	e015      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f4:	3328      	adds	r3, #40	; 0x28
 80056f6:	2101      	movs	r1, #1
 80056f8:	4618      	mov	r0, r3
 80056fa:	f002 f91f 	bl	800793c <RCCEx_PLL3_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005704:	e00a      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800570c:	e006      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800570e:	bf00      	nop
 8005710:	e004      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005712:	bf00      	nop
 8005714:	e002      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005716:	bf00      	nop
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800571a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005724:	4ba3      	ldr	r3, [pc, #652]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005728:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800572c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005730:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005734:	4a9f      	ldr	r2, [pc, #636]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005736:	430b      	orrs	r3, r1
 8005738:	6593      	str	r3, [r2, #88]	; 0x58
 800573a:	e003      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005750:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800575a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800575e:	460b      	mov	r3, r1
 8005760:	4313      	orrs	r3, r2
 8005762:	d037      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800576e:	d00e      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005774:	d816      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005776:	2b00      	cmp	r3, #0
 8005778:	d018      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800577a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800577e:	d111      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005780:	4b8c      	ldr	r3, [pc, #560]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	4a8b      	ldr	r2, [pc, #556]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800578a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800578c:	e00f      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005792:	3308      	adds	r3, #8
 8005794:	2101      	movs	r1, #1
 8005796:	4618      	mov	r0, r3
 8005798:	f002 f81e 	bl	80077d8 <RCCEx_PLL2_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80057a2:	e004      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057aa:	e000      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057b6:	4b7f      	ldr	r3, [pc, #508]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	4a7b      	ldr	r2, [pc, #492]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6513      	str	r3, [r2, #80]	; 0x50
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80057e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80057ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d039      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d81c      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005841 	.word	0x08005841
 8005808:	08005815 	.word	0x08005815
 800580c:	08005823 	.word	0x08005823
 8005810:	08005841 	.word	0x08005841
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005814:	4b67      	ldr	r3, [pc, #412]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a66      	ldr	r2, [pc, #408]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800581a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005820:	e00f      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005826:	3308      	adds	r3, #8
 8005828:	2102      	movs	r1, #2
 800582a:	4618      	mov	r0, r3
 800582c:	f001 ffd4 	bl	80077d8 <RCCEx_PLL2_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005836:	e004      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800583e:	e000      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005842:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800584a:	4b5a      	ldr	r3, [pc, #360]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	f023 0103 	bic.w	r1, r3, #3
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005858:	4a56      	ldr	r2, [pc, #344]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800585a:	430b      	orrs	r3, r1
 800585c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800585e:	e003      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005878:	2300      	movs	r3, #0
 800587a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800587e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005882:	460b      	mov	r3, r1
 8005884:	4313      	orrs	r3, r2
 8005886:	f000 809f 	beq.w	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800588a:	4b4b      	ldr	r3, [pc, #300]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a4a      	ldr	r2, [pc, #296]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005896:	f7fb ff59 	bl	800174c <HAL_GetTick>
 800589a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800589e:	e00b      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a0:	f7fb ff54 	bl	800174c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b64      	cmp	r3, #100	; 0x64
 80058ae:	d903      	bls.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058b6:	e005      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b8:	4b3f      	ldr	r3, [pc, #252]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ed      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80058c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d179      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80058cc:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058d8:	4053      	eors	r3, r2
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d015      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e2:	4b34      	ldr	r3, [pc, #208]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f2:	4a30      	ldr	r2, [pc, #192]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058fa:	4b2e      	ldr	r3, [pc, #184]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	4a2d      	ldr	r2, [pc, #180]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005904:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005906:	4a2b      	ldr	r2, [pc, #172]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005908:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800591a:	d118      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fb ff16 	bl	800174c <HAL_GetTick>
 8005920:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005924:	e00d      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005926:	f7fb ff11 	bl	800174c <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	f241 3388 	movw	r3, #5000	; 0x1388
 8005936:	429a      	cmp	r2, r3
 8005938:	d903      	bls.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005940:	e005      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0eb      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800594e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005952:	2b00      	cmp	r3, #0
 8005954:	d129      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005966:	d10e      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005978:	091a      	lsrs	r2, r3, #4
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800597c:	4013      	ands	r3, r2
 800597e:	4a0d      	ldr	r2, [pc, #52]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005980:	430b      	orrs	r3, r1
 8005982:	6113      	str	r3, [r2, #16]
 8005984:	e005      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	4a0a      	ldr	r2, [pc, #40]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005990:	6113      	str	r3, [r2, #16]
 8005992:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005994:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800599a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800599e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a2:	4a04      	ldr	r2, [pc, #16]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a4:	430b      	orrs	r3, r1
 80059a6:	6713      	str	r3, [r2, #112]	; 0x70
 80059a8:	e00e      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80059b2:	e009      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80059b4:	58024400 	.word	0x58024400
 80059b8:	58024800 	.word	0x58024800
 80059bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f002 0301 	and.w	r3, r2, #1
 80059d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f000 8089 	beq.w	8005afc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80059ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f0:	2b28      	cmp	r3, #40	; 0x28
 80059f2:	d86b      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80059f4:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005ad5 	.word	0x08005ad5
 8005a00:	08005acd 	.word	0x08005acd
 8005a04:	08005acd 	.word	0x08005acd
 8005a08:	08005acd 	.word	0x08005acd
 8005a0c:	08005acd 	.word	0x08005acd
 8005a10:	08005acd 	.word	0x08005acd
 8005a14:	08005acd 	.word	0x08005acd
 8005a18:	08005acd 	.word	0x08005acd
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005acd 	.word	0x08005acd
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005acd 	.word	0x08005acd
 8005a2c:	08005acd 	.word	0x08005acd
 8005a30:	08005acd 	.word	0x08005acd
 8005a34:	08005acd 	.word	0x08005acd
 8005a38:	08005acd 	.word	0x08005acd
 8005a3c:	08005ab7 	.word	0x08005ab7
 8005a40:	08005acd 	.word	0x08005acd
 8005a44:	08005acd 	.word	0x08005acd
 8005a48:	08005acd 	.word	0x08005acd
 8005a4c:	08005acd 	.word	0x08005acd
 8005a50:	08005acd 	.word	0x08005acd
 8005a54:	08005acd 	.word	0x08005acd
 8005a58:	08005acd 	.word	0x08005acd
 8005a5c:	08005ad5 	.word	0x08005ad5
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005acd 	.word	0x08005acd
 8005a68:	08005acd 	.word	0x08005acd
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	08005acd 	.word	0x08005acd
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005ad5 	.word	0x08005ad5
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005acd 	.word	0x08005acd
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005acd 	.word	0x08005acd
 8005a9c:	08005ad5 	.word	0x08005ad5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fe95 	bl	80077d8 <RCCEx_PLL2_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e00f      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aba:	3328      	adds	r3, #40	; 0x28
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 ff3c 	bl	800793c <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005aca:	e004      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ade:	4bbf      	ldr	r3, [pc, #764]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aec:	4abb      	ldr	r2, [pc, #748]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005aee:	430b      	orrs	r3, r1
 8005af0:	6553      	str	r3, [r2, #84]	; 0x54
 8005af2:	e003      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005af8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f002 0302 	and.w	r3, r2, #2
 8005b08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005b16:	460b      	mov	r3, r1
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	d041      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d824      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b79 	.word	0x08005b79
 8005b30:	08005b45 	.word	0x08005b45
 8005b34:	08005b5b 	.word	0x08005b5b
 8005b38:	08005b79 	.word	0x08005b79
 8005b3c:	08005b79 	.word	0x08005b79
 8005b40:	08005b79 	.word	0x08005b79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b48:	3308      	adds	r3, #8
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fe43 	bl	80077d8 <RCCEx_PLL2_Config>
 8005b52:	4603      	mov	r3, r0
 8005b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b58:	e00f      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b5e:	3328      	adds	r3, #40	; 0x28
 8005b60:	2101      	movs	r1, #1
 8005b62:	4618      	mov	r0, r3
 8005b64:	f001 feea 	bl	800793c <RCCEx_PLL3_Config>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b6e:	e004      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b82:	4b96      	ldr	r3, [pc, #600]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b86:	f023 0107 	bic.w	r1, r3, #7
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b90:	4a92      	ldr	r2, [pc, #584]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6553      	str	r3, [r2, #84]	; 0x54
 8005b96:	e003      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f002 0304 	and.w	r3, r2, #4
 8005bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	d044      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bc8:	2b05      	cmp	r3, #5
 8005bca:	d825      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005bcc:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd2:	bf00      	nop
 8005bd4:	08005c21 	.word	0x08005c21
 8005bd8:	08005bed 	.word	0x08005bed
 8005bdc:	08005c03 	.word	0x08005c03
 8005be0:	08005c21 	.word	0x08005c21
 8005be4:	08005c21 	.word	0x08005c21
 8005be8:	08005c21 	.word	0x08005c21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fdef 	bl	80077d8 <RCCEx_PLL2_Config>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c00:	e00f      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c06:	3328      	adds	r3, #40	; 0x28
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 fe96 	bl	800793c <RCCEx_PLL3_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c2a:	4b6c      	ldr	r3, [pc, #432]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	f023 0107 	bic.w	r1, r3, #7
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	4a68      	ldr	r2, [pc, #416]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c40:	e003      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	f002 0320 	and.w	r3, r2, #32
 8005c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c64:	460b      	mov	r3, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	d055      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c76:	d033      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c7c:	d82c      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c82:	d02f      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d826      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c8e:	d02b      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005c90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c94:	d820      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9a:	d012      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca0:	d81a      	bhi.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d022      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005ca6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005caa:	d115      	bne.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fd8f 	bl	80077d8 <RCCEx_PLL2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cc0:	e015      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	3328      	adds	r3, #40	; 0x28
 8005cc8:	2102      	movs	r1, #2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f001 fe36 	bl	800793c <RCCEx_PLL3_Config>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005cd6:	e00a      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cde:	e006      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ce0:	bf00      	nop
 8005ce2:	e004      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ce4:	bf00      	nop
 8005ce6:	e002      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e000      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005cf6:	4b39      	ldr	r3, [pc, #228]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	4a35      	ldr	r2, [pc, #212]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	6553      	str	r3, [r2, #84]	; 0x54
 8005d0c:	e003      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d058      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d42:	d033      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005d44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d48:	d82c      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d4e:	d02f      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d826      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d5a:	d02b      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d60:	d820      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d66:	d012      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d6c:	d81a      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d022      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d76:	d115      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4618      	mov	r0, r3
 8005d82:	f001 fd29 	bl	80077d8 <RCCEx_PLL2_Config>
 8005d86:	4603      	mov	r3, r0
 8005d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d8c:	e015      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d92:	3328      	adds	r3, #40	; 0x28
 8005d94:	2102      	movs	r1, #2
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 fdd0 	bl	800793c <RCCEx_PLL3_Config>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005da2:	e00a      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005daa:	e006      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005dac:	bf00      	nop
 8005dae:	e004      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005db0:	bf00      	nop
 8005db2:	e002      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005db4:	bf00      	nop
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10e      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dd2:	4a02      	ldr	r2, [pc, #8]	; (8005ddc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dd4:	430b      	orrs	r3, r1
 8005dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd8:	e006      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005dda:	bf00      	nop
 8005ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005e02:	460b      	mov	r3, r1
 8005e04:	4313      	orrs	r3, r2
 8005e06:	d055      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e14:	d033      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005e16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e1a:	d82c      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e20:	d02f      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	d826      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e2c:	d02b      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005e2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e32:	d820      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e38:	d012      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e3e:	d81a      	bhi.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d022      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e48:	d115      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4e:	3308      	adds	r3, #8
 8005e50:	2100      	movs	r1, #0
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fcc0 	bl	80077d8 <RCCEx_PLL2_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e015      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e64:	3328      	adds	r3, #40	; 0x28
 8005e66:	2102      	movs	r1, #2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fd67 	bl	800793c <RCCEx_PLL3_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e74:	e00a      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e7c:	e006      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e7e:	bf00      	nop
 8005e80:	e004      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e82:	bf00      	nop
 8005e84:	e002      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e86:	bf00      	nop
 8005e88:	e000      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e94:	4ba1      	ldr	r3, [pc, #644]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ea4:	4a9d      	ldr	r2, [pc, #628]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8005eaa:	e003      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f002 0308 	and.w	r3, r2, #8
 8005ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005eca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	d01e      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee0:	d10c      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee6:	3328      	adds	r3, #40	; 0x28
 8005ee8:	2102      	movs	r1, #2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fd26 	bl	800793c <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005efc:	4b87      	ldr	r3, [pc, #540]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f0c:	4a83      	ldr	r2, [pc, #524]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f0e:	430b      	orrs	r3, r1
 8005f10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f002 0310 	and.w	r3, r2, #16
 8005f1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f22:	2300      	movs	r3, #0
 8005f24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d01e      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3e:	d10c      	bne.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f44:	3328      	adds	r3, #40	; 0x28
 8005f46:	2102      	movs	r1, #2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fcf7 	bl	800793c <RCCEx_PLL3_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f5a:	4b70      	ldr	r3, [pc, #448]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f6a:	4a6c      	ldr	r2, [pc, #432]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005f7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d03e      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9c:	d022      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005f9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa2:	d81b      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fac:	d00b      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005fae:	e015      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 fc0d 	bl	80077d8 <RCCEx_PLL2_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fc4:	e00f      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fca:	3328      	adds	r3, #40	; 0x28
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fcb4 	bl	800793c <RCCEx_PLL3_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005fda:	e004      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fee:	4b4b      	ldr	r3, [pc, #300]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ffe:	4a47      	ldr	r2, [pc, #284]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6593      	str	r3, [r2, #88]	; 0x58
 8006004:	e003      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800600a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800601a:	67bb      	str	r3, [r7, #120]	; 0x78
 800601c:	2300      	movs	r3, #0
 800601e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006020:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006024:	460b      	mov	r3, r1
 8006026:	4313      	orrs	r3, r2
 8006028:	d03b      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006036:	d01f      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006038:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800603c:	d818      	bhi.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800603e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006042:	d003      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006044:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006048:	d007      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800604a:	e011      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4b33      	ldr	r3, [pc, #204]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	4a32      	ldr	r2, [pc, #200]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006058:	e00f      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605e:	3328      	adds	r3, #40	; 0x28
 8006060:	2101      	movs	r1, #1
 8006062:	4618      	mov	r0, r3
 8006064:	f001 fc6a 	bl	800793c <RCCEx_PLL3_Config>
 8006068:	4603      	mov	r3, r0
 800606a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800606e:	e004      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006076:	e000      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800607a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006082:	4b26      	ldr	r3, [pc, #152]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006086:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	4a22      	ldr	r2, [pc, #136]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006094:	430b      	orrs	r3, r1
 8006096:	6553      	str	r3, [r2, #84]	; 0x54
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80060a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80060ae:	673b      	str	r3, [r7, #112]	; 0x70
 80060b0:	2300      	movs	r3, #0
 80060b2:	677b      	str	r3, [r7, #116]	; 0x74
 80060b4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80060b8:	460b      	mov	r3, r1
 80060ba:	4313      	orrs	r3, r2
 80060bc:	d034      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80060c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060cc:	d007      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80060ce:	e011      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d0:	4b12      	ldr	r3, [pc, #72]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	4a11      	ldr	r2, [pc, #68]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060dc:	e00e      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e2:	3308      	adds	r3, #8
 80060e4:	2102      	movs	r1, #2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 fb76 	bl	80077d8 <RCCEx_PLL2_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10d      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006104:	4b05      	ldr	r3, [pc, #20]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006108:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006112:	4a02      	ldr	r2, [pc, #8]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006114:	430b      	orrs	r3, r1
 8006116:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006118:	e006      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800611a:	bf00      	nop
 800611c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006124:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006134:	66bb      	str	r3, [r7, #104]	; 0x68
 8006136:	2300      	movs	r3, #0
 8006138:	66fb      	str	r3, [r7, #108]	; 0x6c
 800613a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d00c      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006148:	3328      	adds	r3, #40	; 0x28
 800614a:	2102      	movs	r1, #2
 800614c:	4618      	mov	r0, r3
 800614e:	f001 fbf5 	bl	800793c <RCCEx_PLL3_Config>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800616a:	663b      	str	r3, [r7, #96]	; 0x60
 800616c:	2300      	movs	r3, #0
 800616e:	667b      	str	r3, [r7, #100]	; 0x64
 8006170:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006174:	460b      	mov	r3, r1
 8006176:	4313      	orrs	r3, r2
 8006178:	d038      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006186:	d018      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006188:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618c:	d811      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800618e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006192:	d014      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006198:	d80b      	bhi.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800619a:	2b00      	cmp	r3, #0
 800619c:	d011      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800619e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061a2:	d106      	bne.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a4:	4bc3      	ldr	r3, [pc, #780]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	4ac2      	ldr	r2, [pc, #776]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80061b0:	e008      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b8:	e004      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061ba:	bf00      	nop
 80061bc:	e002      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061be:	bf00      	nop
 80061c0:	e000      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80061c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10b      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061cc:	4bb9      	ldr	r3, [pc, #740]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061dc:	4ab5      	ldr	r2, [pc, #724]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061de:	430b      	orrs	r3, r1
 80061e0:	6553      	str	r3, [r2, #84]	; 0x54
 80061e2:	e003      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80061f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80061fa:	2300      	movs	r3, #0
 80061fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006202:	460b      	mov	r3, r1
 8006204:	4313      	orrs	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006208:	4baa      	ldr	r3, [pc, #680]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800620a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800620c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006216:	4aa7      	ldr	r2, [pc, #668]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006218:	430b      	orrs	r3, r1
 800621a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800621c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006224:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006228:	653b      	str	r3, [r7, #80]	; 0x50
 800622a:	2300      	movs	r3, #0
 800622c:	657b      	str	r3, [r7, #84]	; 0x54
 800622e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006232:	460b      	mov	r3, r1
 8006234:	4313      	orrs	r3, r2
 8006236:	d00a      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006238:	4b9e      	ldr	r3, [pc, #632]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006244:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006248:	4a9a      	ldr	r2, [pc, #616]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800624a:	430b      	orrs	r3, r1
 800624c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800625a:	64bb      	str	r3, [r7, #72]	; 0x48
 800625c:	2300      	movs	r3, #0
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006264:	460b      	mov	r3, r1
 8006266:	4313      	orrs	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800626a:	4b92      	ldr	r3, [pc, #584]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006278:	4a8e      	ldr	r2, [pc, #568]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627a:	430b      	orrs	r3, r1
 800627c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800627e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800628a:	643b      	str	r3, [r7, #64]	; 0x40
 800628c:	2300      	movs	r3, #0
 800628e:	647b      	str	r3, [r7, #68]	; 0x44
 8006290:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006294:	460b      	mov	r3, r1
 8006296:	4313      	orrs	r3, r2
 8006298:	d00e      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800629a:	4b86      	ldr	r3, [pc, #536]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	4a85      	ldr	r2, [pc, #532]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062a4:	6113      	str	r3, [r2, #16]
 80062a6:	4b83      	ldr	r3, [pc, #524]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062a8:	6919      	ldr	r1, [r3, #16]
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80062b2:	4a80      	ldr	r2, [pc, #512]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062b4:	430b      	orrs	r3, r1
 80062b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80062c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062c6:	2300      	movs	r3, #0
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80062ce:	460b      	mov	r3, r1
 80062d0:	4313      	orrs	r3, r2
 80062d2:	d009      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062d4:	4b77      	ldr	r3, [pc, #476]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80062dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	4a74      	ldr	r2, [pc, #464]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062e4:	430b      	orrs	r3, r1
 80062e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80062f4:	633b      	str	r3, [r7, #48]	; 0x30
 80062f6:	2300      	movs	r3, #0
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80062fe:	460b      	mov	r3, r1
 8006300:	4313      	orrs	r3, r2
 8006302:	d00a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006304:	4b6b      	ldr	r3, [pc, #428]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006308:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800630c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006314:	4a67      	ldr	r2, [pc, #412]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006316:	430b      	orrs	r3, r1
 8006318:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	2100      	movs	r1, #0
 8006324:	62b9      	str	r1, [r7, #40]	; 0x28
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800632c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d011      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633a:	3308      	adds	r3, #8
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fa4a 	bl	80077d8 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800634a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800635a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800635e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006362:	2100      	movs	r1, #0
 8006364:	6239      	str	r1, [r7, #32]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006370:	460b      	mov	r3, r1
 8006372:	4313      	orrs	r3, r2
 8006374:	d011      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637a:	3308      	adds	r3, #8
 800637c:	2101      	movs	r1, #1
 800637e:	4618      	mov	r0, r3
 8006380:	f001 fa2a 	bl	80077d8 <RCCEx_PLL2_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	2100      	movs	r1, #0
 80063a4:	61b9      	str	r1, [r7, #24]
 80063a6:	f003 0304 	and.w	r3, r3, #4
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d011      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ba:	3308      	adds	r3, #8
 80063bc:	2102      	movs	r1, #2
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 fa0a 	bl	80077d8 <RCCEx_PLL2_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e2:	2100      	movs	r1, #0
 80063e4:	6139      	str	r1, [r7, #16]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80063f0:	460b      	mov	r3, r1
 80063f2:	4313      	orrs	r3, r2
 80063f4:	d011      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063fa:	3328      	adds	r3, #40	; 0x28
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f001 fa9c 	bl	800793c <RCCEx_PLL3_Config>
 8006404:	4603      	mov	r3, r0
 8006406:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800640a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	2100      	movs	r1, #0
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d011      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800643a:	3328      	adds	r3, #40	; 0x28
 800643c:	2101      	movs	r1, #1
 800643e:	4618      	mov	r0, r3
 8006440:	f001 fa7c 	bl	800793c <RCCEx_PLL3_Config>
 8006444:	4603      	mov	r3, r0
 8006446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800644a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	2100      	movs	r1, #0
 8006464:	6039      	str	r1, [r7, #0]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006470:	460b      	mov	r3, r1
 8006472:	4313      	orrs	r3, r2
 8006474:	d011      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800647a:	3328      	adds	r3, #40	; 0x28
 800647c:	2102      	movs	r1, #2
 800647e:	4618      	mov	r0, r3
 8006480:	f001 fa5c 	bl	800793c <RCCEx_PLL3_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800648a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800649a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e000      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80064ae:	46bd      	mov	sp, r7
 80064b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b4:	58024400 	.word	0x58024400

080064b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b090      	sub	sp, #64	; 0x40
 80064bc:	af00      	add	r7, sp, #0
 80064be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80064c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80064ca:	430b      	orrs	r3, r1
 80064cc:	f040 8094 	bne.w	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80064d0:	4b9e      	ldr	r3, [pc, #632]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2b04      	cmp	r3, #4
 80064de:	f200 8087 	bhi.w	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80064e2:	a201      	add	r2, pc, #4	; (adr r2, 80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80064e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e8:	080064fd 	.word	0x080064fd
 80064ec:	08006525 	.word	0x08006525
 80064f0:	0800654d 	.word	0x0800654d
 80064f4:	080065e9 	.word	0x080065e9
 80064f8:	08006575 	.word	0x08006575
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064fc:	4b93      	ldr	r3, [pc, #588]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006508:	d108      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800650a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f810 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006518:	f000 bd45 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006520:	f000 bd41 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006524:	4b89      	ldr	r3, [pc, #548]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800652c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006530:	d108      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006532:	f107 0318 	add.w	r3, r7, #24
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fd54 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006540:	f000 bd31 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006548:	f000 bd2d 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800654c:	4b7f      	ldr	r3, [pc, #508]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006558:	d108      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800655a:	f107 030c 	add.w	r3, r7, #12
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fe94 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006568:	f000 bd1d 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006570:	f000 bd19 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006574:	4b75      	ldr	r3, [pc, #468]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800657c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800657e:	4b73      	ldr	r3, [pc, #460]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b04      	cmp	r3, #4
 8006588:	d10c      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006590:	4b6e      	ldr	r3, [pc, #440]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	4a6d      	ldr	r2, [pc, #436]	; (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a2:	e01f      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065a4:	4b69      	ldr	r3, [pc, #420]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b0:	d106      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065b8:	d102      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80065ba:	4b66      	ldr	r3, [pc, #408]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065be:	e011      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065c0:	4b62      	ldr	r3, [pc, #392]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065cc:	d106      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d4:	d102      	bne.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80065d6:	4b60      	ldr	r3, [pc, #384]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80065d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065da:	e003      	b.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80065e0:	f000 bce1 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80065e4:	f000 bcdf 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80065e8:	4b5c      	ldr	r3, [pc, #368]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065ec:	f000 bcdb 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f4:	f000 bcd7 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006600:	430b      	orrs	r3, r1
 8006602:	f040 80ad 	bne.w	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006606:	4b51      	ldr	r3, [pc, #324]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800660e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006616:	d056      	beq.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661e:	f200 8090 	bhi.w	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	2bc0      	cmp	r3, #192	; 0xc0
 8006626:	f000 8088 	beq.w	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	2bc0      	cmp	r3, #192	; 0xc0
 800662e:	f200 8088 	bhi.w	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	2b80      	cmp	r3, #128	; 0x80
 8006636:	d032      	beq.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b80      	cmp	r3, #128	; 0x80
 800663c:	f200 8081 	bhi.w	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d014      	beq.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800664c:	e079      	b.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800664e:	4b3f      	ldr	r3, [pc, #252]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800665a:	d108      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800665c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006660:	4618      	mov	r0, r3
 8006662:	f000 ff67 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800666a:	f000 bc9c 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006672:	f000 bc98 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006676:	4b35      	ldr	r3, [pc, #212]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800667e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006682:	d108      	bne.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006684:	f107 0318 	add.w	r3, r7, #24
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fcab 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006692:	f000 bc88 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800669a:	f000 bc84 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800669e:	4b2b      	ldr	r3, [pc, #172]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066aa:	d108      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ac:	f107 030c 	add.w	r3, r7, #12
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fdeb 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066ba:	f000 bc74 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c2:	f000 bc70 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066c6:	4b21      	ldr	r3, [pc, #132]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b04      	cmp	r3, #4
 80066da:	d10c      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80066dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e2:	4b1a      	ldr	r3, [pc, #104]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	08db      	lsrs	r3, r3, #3
 80066e8:	f003 0303 	and.w	r3, r3, #3
 80066ec:	4a18      	ldr	r2, [pc, #96]	; (8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80066ee:	fa22 f303 	lsr.w	r3, r2, r3
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	e01f      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066f6:	4b15      	ldr	r3, [pc, #84]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800670a:	d102      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800670c:	4b11      	ldr	r3, [pc, #68]	; (8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006710:	e011      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006712:	4b0e      	ldr	r3, [pc, #56]	; (800674c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671e:	d106      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006722:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006726:	d102      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672c:	e003      	b.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006732:	f000 bc38 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006736:	f000 bc36 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800673a:	4b08      	ldr	r3, [pc, #32]	; (800675c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800673e:	f000 bc32 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006746:	f000 bc2e 	b.w	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800674a:	bf00      	nop
 800674c:	58024400 	.word	0x58024400
 8006750:	03d09000 	.word	0x03d09000
 8006754:	003d0900 	.word	0x003d0900
 8006758:	017d7840 	.word	0x017d7840
 800675c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006764:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006768:	430b      	orrs	r3, r1
 800676a:	f040 809c 	bne.w	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800676e:	4b9e      	ldr	r3, [pc, #632]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006772:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006776:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800677e:	d054      	beq.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006786:	f200 808b 	bhi.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006790:	f000 8083 	beq.w	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800679a:	f200 8081 	bhi.w	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067a4:	d02f      	beq.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ac:	d878      	bhi.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ba:	d012      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80067bc:	e070      	b.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80067be:	4b8a      	ldr	r3, [pc, #552]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ca:	d107      	bne.n	80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 feaf 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067da:	e3e4      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e0:	e3e1      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067e2:	4b81      	ldr	r3, [pc, #516]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ee:	d107      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f0:	f107 0318 	add.w	r3, r7, #24
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fbf5 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067fe:	e3d2      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006800:	2300      	movs	r3, #0
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006804:	e3cf      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006806:	4b78      	ldr	r3, [pc, #480]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800680e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006812:	d107      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006814:	f107 030c 	add.w	r3, r7, #12
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fd37 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006822:	e3c0      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006828:	e3bd      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800682a:	4b6f      	ldr	r3, [pc, #444]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800682e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006832:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006834:	4b6c      	ldr	r3, [pc, #432]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b04      	cmp	r3, #4
 800683e:	d10c      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006846:	4b68      	ldr	r3, [pc, #416]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	08db      	lsrs	r3, r3, #3
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	4a66      	ldr	r2, [pc, #408]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006852:	fa22 f303 	lsr.w	r3, r2, r3
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	e01e      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800685a:	4b63      	ldr	r3, [pc, #396]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006866:	d106      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686e:	d102      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006870:	4b5f      	ldr	r3, [pc, #380]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006874:	e010      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006876:	4b5c      	ldr	r3, [pc, #368]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006882:	d106      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688a:	d102      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800688c:	4b59      	ldr	r3, [pc, #356]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	e002      	b.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006896:	e386      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006898:	e385      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800689a:	4b57      	ldr	r3, [pc, #348]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689e:	e382      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068a4:	e37f      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80068a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80068ae:	430b      	orrs	r3, r1
 80068b0:	f040 80a7 	bne.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80068b4:	4b4c      	ldr	r3, [pc, #304]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80068bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c4:	d055      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068cc:	f200 8096 	bhi.w	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068d6:	f000 8084 	beq.w	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068e0:	f200 808c 	bhi.w	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ea:	d030      	beq.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80068ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068f2:	f200 8083 	bhi.w	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006902:	d012      	beq.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006904:	e07a      	b.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006906:	4b38      	ldr	r3, [pc, #224]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800690e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006912:	d107      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fe0b 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006922:	e340      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006928:	e33d      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800692a:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006938:	f107 0318 	add.w	r3, r7, #24
 800693c:	4618      	mov	r0, r3
 800693e:	f000 fb51 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006946:	e32e      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800694c:	e32b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800694e:	4b26      	ldr	r3, [pc, #152]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695a:	d107      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800695c:	f107 030c 	add.w	r3, r7, #12
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fc93 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800696a:	e31c      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800696c:	2300      	movs	r3, #0
 800696e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006970:	e319      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800697a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800697c:	4b1a      	ldr	r3, [pc, #104]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b04      	cmp	r3, #4
 8006986:	d10c      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800698e:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	4a14      	ldr	r2, [pc, #80]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069a0:	e01e      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069a2:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ae:	d106      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80069b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b6:	d102      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80069b8:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069bc:	e010      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069be:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069ca:	d106      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80069cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d2:	d102      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d8:	e002      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80069de:	e2e2      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069e0:	e2e1      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80069e2:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e6:	e2de      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80069e8:	58024400 	.word	0x58024400
 80069ec:	03d09000 	.word	0x03d09000
 80069f0:	003d0900 	.word	0x003d0900
 80069f4:	017d7840 	.word	0x017d7840
 80069f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e2d1      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a06:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	f040 809c 	bne.w	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006a10:	4b93      	ldr	r3, [pc, #588]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006a18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a20:	d054      	beq.n	8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a28:	f200 808b 	bhi.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a32:	f000 8083 	beq.w	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a3c:	f200 8081 	bhi.w	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a46:	d02f      	beq.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4e:	d878      	bhi.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5c:	d012      	beq.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a5e:	e070      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a60:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a6c:	d107      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fd5e 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a7c:	e293      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a82:	e290      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a84:	4b76      	ldr	r3, [pc, #472]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a92:	f107 0318 	add.w	r3, r7, #24
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 faa4 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006aa0:	e281      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa6:	e27e      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006aa8:	4b6d      	ldr	r3, [pc, #436]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d107      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ab6:	f107 030c 	add.w	r3, r7, #12
 8006aba:	4618      	mov	r0, r3
 8006abc:	f000 fbe6 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ac4:	e26f      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aca:	e26c      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006acc:	4b64      	ldr	r3, [pc, #400]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ad4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ad6:	4b62      	ldr	r3, [pc, #392]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0304 	and.w	r3, r3, #4
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d10c      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ae8:	4b5d      	ldr	r3, [pc, #372]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	08db      	lsrs	r3, r3, #3
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	4a5c      	ldr	r2, [pc, #368]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006af4:	fa22 f303 	lsr.w	r3, r2, r3
 8006af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006afa:	e01e      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006afc:	4b58      	ldr	r3, [pc, #352]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b08:	d106      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b10:	d102      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006b12:	4b55      	ldr	r3, [pc, #340]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b16:	e010      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b18:	4b51      	ldr	r3, [pc, #324]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b24:	d106      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b2c:	d102      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b32:	e002      	b.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006b38:	e235      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006b3a:	e234      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006b3c:	4b4c      	ldr	r3, [pc, #304]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b40:	e231      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b46:	e22e      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006b50:	430b      	orrs	r3, r1
 8006b52:	f040 808f 	bne.w	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006b56:	4b42      	ldr	r3, [pc, #264]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b66:	d06b      	beq.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b6e:	d874      	bhi.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b76:	d056      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b7e:	d86c      	bhi.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b86:	d03b      	beq.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b8e:	d864      	bhi.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b96:	d021      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b9e:	d85c      	bhi.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bac:	d004      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006bae:	e054      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fe fa4c 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 8006bb4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bb6:	e1f6      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bb8:	4b29      	ldr	r3, [pc, #164]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bc6:	f107 0318 	add.w	r3, r7, #24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fa0a 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bd4:	e1e7      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bda:	e1e4      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006bdc:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be8:	d107      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fb4c 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bf8:	e1d5      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfe:	e1d2      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c00:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d109      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c0c:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	08db      	lsrs	r3, r3, #3
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	4a13      	ldr	r2, [pc, #76]	; (8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006c18:	fa22 f303 	lsr.w	r3, r2, r3
 8006c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c1e:	e1c2      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c24:	e1bf      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006c26:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c32:	d102      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006c34:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c38:	e1b5      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3e:	e1b2      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c4c:	d102      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006c4e:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c52:	e1a8      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c58:	e1a5      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c5e:	e1a2      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c60:	58024400 	.word	0x58024400
 8006c64:	03d09000 	.word	0x03d09000
 8006c68:	003d0900 	.word	0x003d0900
 8006c6c:	017d7840 	.word	0x017d7840
 8006c70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	d173      	bne.n	8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c80:	4b9c      	ldr	r3, [pc, #624]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c90:	d02f      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c98:	d863      	bhi.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca6:	d012      	beq.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006ca8:	e05b      	b.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006caa:	4b92      	ldr	r3, [pc, #584]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb6:	d107      	bne.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cb8:	f107 0318 	add.w	r3, r7, #24
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f991 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc6:	e16e      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ccc:	e16b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cce:	4b89      	ldr	r3, [pc, #548]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cda:	d107      	bne.n	8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cdc:	f107 030c 	add.w	r3, r7, #12
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fad3 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cea:	e15c      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf0:	e159      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cf2:	4b80      	ldr	r3, [pc, #512]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cfc:	4b7d      	ldr	r3, [pc, #500]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0304 	and.w	r3, r3, #4
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d10c      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d0e:	4b79      	ldr	r3, [pc, #484]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	08db      	lsrs	r3, r3, #3
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	4a77      	ldr	r2, [pc, #476]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d20:	e01e      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d22:	4b74      	ldr	r3, [pc, #464]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d36:	d102      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d38:	4b70      	ldr	r3, [pc, #448]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d3c:	e010      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d3e:	4b6d      	ldr	r3, [pc, #436]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d52:	d102      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d54:	4b6a      	ldr	r3, [pc, #424]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d58:	e002      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d5e:	e122      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d60:	e121      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d62:	2300      	movs	r3, #0
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d66:	e11e      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006d70:	430b      	orrs	r3, r1
 8006d72:	d133      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d74:	4b5f      	ldr	r3, [pc, #380]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8a:	d012      	beq.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d8c:	e023      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d8e:	4b59      	ldr	r3, [pc, #356]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d9a:	d107      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 fbc7 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006daa:	e0fc      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dac:	2300      	movs	r3, #0
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db0:	e0f9      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006db2:	4b50      	ldr	r3, [pc, #320]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dbe:	d107      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc0:	f107 0318 	add.w	r3, r7, #24
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f90d 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dce:	e0ea      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dd4:	e0e7      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dda:	e0e4      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006de0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006de4:	430b      	orrs	r3, r1
 8006de6:	f040 808d 	bne.w	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006dea:	4b42      	ldr	r3, [pc, #264]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dfa:	d06b      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e02:	d874      	bhi.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0a:	d056      	beq.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e12:	d86c      	bhi.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e1a:	d03b      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006e22:	d864      	bhi.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e2a:	d021      	beq.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e32:	d85c      	bhi.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e40:	d004      	beq.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006e42:	e054      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006e44:	f000 f8b8 	bl	8006fb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006e4a:	e0ac      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e4c:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e58:	d107      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e5a:	f107 0318 	add.w	r3, r7, #24
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 f8c0 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e68:	e09d      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6e:	e09a      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e70:	4b20      	ldr	r3, [pc, #128]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e7c:	d107      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e7e:	f107 030c 	add.w	r3, r7, #12
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fa02 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8c:	e08b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e92:	e088      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e94:	4b17      	ldr	r3, [pc, #92]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0304 	and.w	r3, r3, #4
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d109      	bne.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea0:	4b14      	ldr	r3, [pc, #80]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a13      	ldr	r2, [pc, #76]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eb2:	e078      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eb8:	e075      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006eba:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec6:	d102      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006ec8:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ecc:	e06b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ed2:	e068      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ee6:	e05e      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eec:	e05b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef2:	e058      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	03d09000 	.word	0x03d09000
 8006efc:	003d0900 	.word	0x003d0900
 8006f00:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006f0c:	430b      	orrs	r3, r1
 8006f0e:	d148      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006f10:	4b27      	ldr	r3, [pc, #156]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f20:	d02a      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f28:	d838      	bhi.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d004      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f36:	d00d      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006f38:	e030      	b.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f3a:	4b1d      	ldr	r3, [pc, #116]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f46:	d102      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006f48:	4b1a      	ldr	r3, [pc, #104]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f4c:	e02b      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f52:	e028      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f54:	4b16      	ldr	r3, [pc, #88]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f60:	d107      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fae4 	bl	8007534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f70:	e019      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f72:	2300      	movs	r3, #0
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f76:	e016      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f78:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f84:	d107      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f86:	f107 0318 	add.w	r3, r7, #24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 f82a 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f94:	e007      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9a:	e004      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa0:	e001      	b.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3740      	adds	r7, #64	; 0x40
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	017d7840 	.word	0x017d7840

08006fb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006fbc:	f7fe f816 	bl	8004fec <HAL_RCC_GetHCLKFreq>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	4b06      	ldr	r3, [pc, #24]	; (8006fdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	091b      	lsrs	r3, r3, #4
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	4904      	ldr	r1, [pc, #16]	; (8006fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006fce:	5ccb      	ldrb	r3, [r1, r3]
 8006fd0:	f003 031f 	and.w	r3, r3, #31
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	58024400 	.word	0x58024400
 8006fe0:	08009590 	.word	0x08009590

08006fe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fec:	4ba1      	ldr	r3, [pc, #644]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006ff6:	4b9f      	ldr	r3, [pc, #636]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	0b1b      	lsrs	r3, r3, #12
 8006ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007002:	4b9c      	ldr	r3, [pc, #624]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800700e:	4b99      	ldr	r3, [pc, #612]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007012:	08db      	lsrs	r3, r3, #3
 8007014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	fb02 f303 	mul.w	r3, r2, r3
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8111 	beq.w	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f000 8083 	beq.w	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f200 80a1 	bhi.w	8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d056      	beq.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800704e:	e099      	b.n	8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007050:	4b88      	ldr	r3, [pc, #544]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0320 	and.w	r3, r3, #32
 8007058:	2b00      	cmp	r3, #0
 800705a:	d02d      	beq.n	80070b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800705c:	4b85      	ldr	r3, [pc, #532]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	08db      	lsrs	r3, r3, #3
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	4a84      	ldr	r2, [pc, #528]	; (8007278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007068:	fa22 f303 	lsr.w	r3, r2, r3
 800706c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	ee07 3a90 	vmov	s15, r3
 8007074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007086:	4b7b      	ldr	r3, [pc, #492]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007096:	ed97 6a03 	vldr	s12, [r7, #12]
 800709a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800709e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80070b6:	e087      	b.n	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b6a      	ldr	r3, [pc, #424]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a03 	vldr	s12, [r7, #12]
 80070de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070fa:	e065      	b.n	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b59      	ldr	r3, [pc, #356]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a56 	vldr	s11, [pc, #344]	; 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713e:	e043      	b.n	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b48      	ldr	r3, [pc, #288]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a03 	vldr	s12, [r7, #12]
 8007166:	eddf 5a45 	vldr	s11, [pc, #276]	; 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007182:	e021      	b.n	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b37      	ldr	r3, [pc, #220]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800727c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80071c8:	4b2a      	ldr	r3, [pc, #168]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071cc:	0a5b      	lsrs	r3, r3, #9
 80071ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071ee:	ee17 2a90 	vmov	r2, s15
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80071f6:	4b1f      	ldr	r3, [pc, #124]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	0c1b      	lsrs	r3, r3, #16
 80071fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007208:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800720c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007210:	edd7 6a07 	vldr	s13, [r7, #28]
 8007214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721c:	ee17 2a90 	vmov	r2, s15
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007224:	4b13      	ldr	r3, [pc, #76]	; (8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007228:	0e1b      	lsrs	r3, r3, #24
 800722a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800723a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800723e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800724a:	ee17 2a90 	vmov	r2, s15
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007252:	e008      	b.n	8007266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	609a      	str	r2, [r3, #8]
}
 8007266:	bf00      	nop
 8007268:	3724      	adds	r7, #36	; 0x24
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	58024400 	.word	0x58024400
 8007278:	03d09000 	.word	0x03d09000
 800727c:	46000000 	.word	0x46000000
 8007280:	4c742400 	.word	0x4c742400
 8007284:	4a742400 	.word	0x4a742400
 8007288:	4bbebc20 	.word	0x4bbebc20

0800728c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007294:	4ba1      	ldr	r3, [pc, #644]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800729e:	4b9f      	ldr	r3, [pc, #636]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	0d1b      	lsrs	r3, r3, #20
 80072a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072aa:	4b9c      	ldr	r3, [pc, #624]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80072b6:	4b99      	ldr	r3, [pc, #612]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	08db      	lsrs	r3, r3, #3
 80072bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	fb02 f303 	mul.w	r3, r2, r3
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8111 	beq.w	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	f000 8083 	beq.w	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	f200 80a1 	bhi.w	800742c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d056      	beq.n	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80072f6:	e099      	b.n	800742c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f8:	4b88      	ldr	r3, [pc, #544]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d02d      	beq.n	8007360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007304:	4b85      	ldr	r3, [pc, #532]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	08db      	lsrs	r3, r3, #3
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	4a84      	ldr	r2, [pc, #528]	; (8007520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
 8007314:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b7b      	ldr	r3, [pc, #492]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007342:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800735e:	e087      	b.n	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b6a      	ldr	r3, [pc, #424]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	e065      	b.n	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b59      	ldr	r3, [pc, #356]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073e6:	e043      	b.n	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b48      	ldr	r3, [pc, #288]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a03 	vldr	s12, [r7, #12]
 800740e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742a:	e021      	b.n	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800752c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800743a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743e:	4b37      	ldr	r3, [pc, #220]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007452:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800746e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007470:	4b2a      	ldr	r3, [pc, #168]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	0a5b      	lsrs	r3, r3, #9
 8007476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748a:	edd7 6a07 	vldr	s13, [r7, #28]
 800748e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007496:	ee17 2a90 	vmov	r2, s15
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800749e:	4b1f      	ldr	r3, [pc, #124]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	0c1b      	lsrs	r3, r3, #16
 80074a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a8:	ee07 3a90 	vmov	s15, r3
 80074ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c4:	ee17 2a90 	vmov	r2, s15
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80074cc:	4b13      	ldr	r3, [pc, #76]	; (800751c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	0e1b      	lsrs	r3, r3, #24
 80074d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f2:	ee17 2a90 	vmov	r2, s15
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074fa:	e008      	b.n	800750e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	609a      	str	r2, [r3, #8]
}
 800750e:	bf00      	nop
 8007510:	3724      	adds	r7, #36	; 0x24
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400
 8007520:	03d09000 	.word	0x03d09000
 8007524:	46000000 	.word	0x46000000
 8007528:	4c742400 	.word	0x4c742400
 800752c:	4a742400 	.word	0x4a742400
 8007530:	4bbebc20 	.word	0x4bbebc20

08007534 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007534:	b480      	push	{r7}
 8007536:	b089      	sub	sp, #36	; 0x24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800753c:	4ba0      	ldr	r3, [pc, #640]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007546:	4b9e      	ldr	r3, [pc, #632]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	091b      	lsrs	r3, r3, #4
 800754c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007550:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007552:	4b9b      	ldr	r3, [pc, #620]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800755c:	4b98      	ldr	r3, [pc, #608]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	fb02 f303 	mul.w	r3, r2, r3
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007574:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 8111 	beq.w	80077a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	2b02      	cmp	r3, #2
 8007584:	f000 8083 	beq.w	800768e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	2b02      	cmp	r3, #2
 800758c:	f200 80a1 	bhi.w	80076d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d056      	beq.n	800764a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800759c:	e099      	b.n	80076d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800759e:	4b88      	ldr	r3, [pc, #544]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d02d      	beq.n	8007606 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075aa:	4b85      	ldr	r3, [pc, #532]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	08db      	lsrs	r3, r3, #3
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	4a83      	ldr	r2, [pc, #524]	; (80077c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80075b6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075d4:	4b7a      	ldr	r3, [pc, #488]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80075e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007604:	e087      	b.n	8007716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	ee07 3a90 	vmov	s15, r3
 800760c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007610:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007618:	4b69      	ldr	r3, [pc, #420]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007628:	ed97 6a03 	vldr	s12, [r7, #12]
 800762c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007648:	e065      	b.n	8007716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	ee07 3a90 	vmov	s15, r3
 8007650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007654:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765c:	4b58      	ldr	r3, [pc, #352]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007670:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800768c:	e043      	b.n	8007716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007698:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800769c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a0:	4b47      	ldr	r3, [pc, #284]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d0:	e021      	b.n	8007716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	ee07 3a90 	vmov	s15, r3
 80076d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80077cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e4:	4b36      	ldr	r3, [pc, #216]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800770c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007714:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007716:	4b2a      	ldr	r3, [pc, #168]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	0a5b      	lsrs	r3, r3, #9
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007730:	edd7 6a07 	vldr	s13, [r7, #28]
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 2a90 	vmov	r2, s15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007744:	4b1e      	ldr	r3, [pc, #120]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007748:	0c1b      	lsrs	r3, r3, #16
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776a:	ee17 2a90 	vmov	r2, s15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007772:	4b13      	ldr	r3, [pc, #76]	; (80077c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	0e1b      	lsrs	r3, r3, #24
 8007778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800778c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007798:	ee17 2a90 	vmov	r2, s15
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80077a0:	e008      	b.n	80077b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	609a      	str	r2, [r3, #8]
}
 80077b4:	bf00      	nop
 80077b6:	3724      	adds	r7, #36	; 0x24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	58024400 	.word	0x58024400
 80077c4:	03d09000 	.word	0x03d09000
 80077c8:	46000000 	.word	0x46000000
 80077cc:	4c742400 	.word	0x4c742400
 80077d0:	4a742400 	.word	0x4a742400
 80077d4:	4bbebc20 	.word	0x4bbebc20

080077d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077e6:	4b53      	ldr	r3, [pc, #332]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80077e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d101      	bne.n	80077f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e099      	b.n	800792a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077f6:	4b4f      	ldr	r3, [pc, #316]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a4e      	ldr	r2, [pc, #312]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80077fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007802:	f7f9 ffa3 	bl	800174c <HAL_GetTick>
 8007806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007808:	e008      	b.n	800781c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800780a:	f7f9 ff9f 	bl	800174c <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e086      	b.n	800792a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800781c:	4b45      	ldr	r3, [pc, #276]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1f0      	bne.n	800780a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007828:	4b42      	ldr	r3, [pc, #264]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	031b      	lsls	r3, r3, #12
 8007836:	493f      	ldr	r1, [pc, #252]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 8007838:	4313      	orrs	r3, r2
 800783a:	628b      	str	r3, [r1, #40]	; 0x28
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	3b01      	subs	r3, #1
 8007842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	3b01      	subs	r3, #1
 800784c:	025b      	lsls	r3, r3, #9
 800784e:	b29b      	uxth	r3, r3
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	3b01      	subs	r3, #1
 8007858:	041b      	lsls	r3, r3, #16
 800785a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800785e:	431a      	orrs	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	3b01      	subs	r3, #1
 8007866:	061b      	lsls	r3, r3, #24
 8007868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800786c:	4931      	ldr	r1, [pc, #196]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 800786e:	4313      	orrs	r3, r2
 8007870:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007872:	4b30      	ldr	r3, [pc, #192]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	492d      	ldr	r1, [pc, #180]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 8007880:	4313      	orrs	r3, r2
 8007882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007884:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f023 0220 	bic.w	r2, r3, #32
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	4928      	ldr	r1, [pc, #160]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 8007892:	4313      	orrs	r3, r2
 8007894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007896:	4b27      	ldr	r3, [pc, #156]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	4a26      	ldr	r2, [pc, #152]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 800789c:	f023 0310 	bic.w	r3, r3, #16
 80078a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078a2:	4b24      	ldr	r3, [pc, #144]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078a6:	4b24      	ldr	r3, [pc, #144]	; (8007938 <RCCEx_PLL2_Config+0x160>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	69d2      	ldr	r2, [r2, #28]
 80078ae:	00d2      	lsls	r2, r2, #3
 80078b0:	4920      	ldr	r1, [pc, #128]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80078b6:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a1e      	ldr	r2, [pc, #120]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078bc:	f043 0310 	orr.w	r3, r3, #16
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d106      	bne.n	80078d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80078c8:	4b1a      	ldr	r3, [pc, #104]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	4a19      	ldr	r2, [pc, #100]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078d4:	e00f      	b.n	80078f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d106      	bne.n	80078ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078dc:	4b15      	ldr	r3, [pc, #84]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	4a14      	ldr	r2, [pc, #80]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078e8:	e005      	b.n	80078f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078ea:	4b12      	ldr	r3, [pc, #72]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	4a11      	ldr	r2, [pc, #68]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078f6:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a0e      	ldr	r2, [pc, #56]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 80078fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007902:	f7f9 ff23 	bl	800174c <HAL_GetTick>
 8007906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007908:	e008      	b.n	800791c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800790a:	f7f9 ff1f 	bl	800174c <HAL_GetTick>
 800790e:	4602      	mov	r2, r0
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	2b02      	cmp	r3, #2
 8007916:	d901      	bls.n	800791c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e006      	b.n	800792a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <RCCEx_PLL2_Config+0x15c>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0f0      	beq.n	800790a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	58024400 	.word	0x58024400
 8007938:	ffff0007 	.word	0xffff0007

0800793c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800794a:	4b53      	ldr	r3, [pc, #332]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	f003 0303 	and.w	r3, r3, #3
 8007952:	2b03      	cmp	r3, #3
 8007954:	d101      	bne.n	800795a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e099      	b.n	8007a8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800795a:	4b4f      	ldr	r3, [pc, #316]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a4e      	ldr	r2, [pc, #312]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007966:	f7f9 fef1 	bl	800174c <HAL_GetTick>
 800796a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800796c:	e008      	b.n	8007980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800796e:	f7f9 feed 	bl	800174c <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e086      	b.n	8007a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007980:	4b45      	ldr	r3, [pc, #276]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d1f0      	bne.n	800796e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800798c:	4b42      	ldr	r3, [pc, #264]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	051b      	lsls	r3, r3, #20
 800799a:	493f      	ldr	r1, [pc, #252]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 800799c:	4313      	orrs	r3, r2
 800799e:	628b      	str	r3, [r1, #40]	; 0x28
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	025b      	lsls	r3, r3, #9
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	041b      	lsls	r3, r3, #16
 80079be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	061b      	lsls	r3, r3, #24
 80079cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079d0:	4931      	ldr	r1, [pc, #196]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079d6:	4b30      	ldr	r3, [pc, #192]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	492d      	ldr	r1, [pc, #180]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079e8:	4b2b      	ldr	r3, [pc, #172]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	4928      	ldr	r1, [pc, #160]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079fa:	4b27      	ldr	r3, [pc, #156]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 80079fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fe:	4a26      	ldr	r2, [pc, #152]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a06:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a0a:	4b24      	ldr	r3, [pc, #144]	; (8007a9c <RCCEx_PLL3_Config+0x160>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	69d2      	ldr	r2, [r2, #28]
 8007a12:	00d2      	lsls	r2, r2, #3
 8007a14:	4920      	ldr	r1, [pc, #128]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a1a:	4b1f      	ldr	r3, [pc, #124]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	4a1e      	ldr	r2, [pc, #120]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d106      	bne.n	8007a3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a2c:	4b1a      	ldr	r3, [pc, #104]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a30:	4a19      	ldr	r2, [pc, #100]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a38:	e00f      	b.n	8007a5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a40:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a44:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a4c:	e005      	b.n	8007a5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a52:	4a11      	ldr	r2, [pc, #68]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a0e      	ldr	r2, [pc, #56]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a66:	f7f9 fe71 	bl	800174c <HAL_GetTick>
 8007a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a6c:	e008      	b.n	8007a80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a6e:	f7f9 fe6d 	bl	800174c <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e006      	b.n	8007a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a80:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <RCCEx_PLL3_Config+0x15c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	ffff0007 	.word	0xffff0007

08007aa0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e10f      	b.n	8007cd2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a87      	ldr	r2, [pc, #540]	; (8007cdc <HAL_SPI_Init+0x23c>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00f      	beq.n	8007ae2 <HAL_SPI_Init+0x42>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a86      	ldr	r2, [pc, #536]	; (8007ce0 <HAL_SPI_Init+0x240>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00a      	beq.n	8007ae2 <HAL_SPI_Init+0x42>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a84      	ldr	r2, [pc, #528]	; (8007ce4 <HAL_SPI_Init+0x244>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d005      	beq.n	8007ae2 <HAL_SPI_Init+0x42>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d901      	bls.n	8007ae2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0f7      	b.n	8007cd2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fd08 	bl	80084f8 <SPI_GetPacketSize>
 8007ae8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a7b      	ldr	r2, [pc, #492]	; (8007cdc <HAL_SPI_Init+0x23c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00c      	beq.n	8007b0e <HAL_SPI_Init+0x6e>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a79      	ldr	r2, [pc, #484]	; (8007ce0 <HAL_SPI_Init+0x240>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d007      	beq.n	8007b0e <HAL_SPI_Init+0x6e>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a78      	ldr	r2, [pc, #480]	; (8007ce4 <HAL_SPI_Init+0x244>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d002      	beq.n	8007b0e <HAL_SPI_Init+0x6e>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b08      	cmp	r3, #8
 8007b0c:	d811      	bhi.n	8007b32 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b12:	4a72      	ldr	r2, [pc, #456]	; (8007cdc <HAL_SPI_Init+0x23c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d009      	beq.n	8007b2c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a70      	ldr	r2, [pc, #448]	; (8007ce0 <HAL_SPI_Init+0x240>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d004      	beq.n	8007b2c <HAL_SPI_Init+0x8c>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a6f      	ldr	r2, [pc, #444]	; (8007ce4 <HAL_SPI_Init+0x244>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d104      	bne.n	8007b36 <HAL_SPI_Init+0x96>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b10      	cmp	r3, #16
 8007b30:	d901      	bls.n	8007b36 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e0cd      	b.n	8007cd2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f9 fb94 	bl	8001278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0201 	bic.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007b72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b7c:	d119      	bne.n	8007bb2 <HAL_SPI_Init+0x112>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b86:	d103      	bne.n	8007b90 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10c      	bne.n	8007bb2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba0:	d107      	bne.n	8007bb2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007bb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00f      	beq.n	8007bde <HAL_SPI_Init+0x13e>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2b06      	cmp	r3, #6
 8007bc4:	d90b      	bls.n	8007bde <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e007      	b.n	8007bee <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69da      	ldr	r2, [r3, #28]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	ea42 0103 	orr.w	r1, r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	431a      	orrs	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c4e:	ea42 0103 	orr.w	r1, r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d113      	bne.n	8007c8e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00a      	beq.n	8007cc0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40013000 	.word	0x40013000
 8007ce0:	40003800 	.word	0x40003800
 8007ce4:	40003c00 	.word	0x40003c00

08007ce8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3320      	adds	r3, #32
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3330      	adds	r3, #48	; 0x30
 8007d04:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	095b      	lsrs	r3, r3, #5
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	3301      	adds	r3, #1
 8007d10:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d12:	f7f9 fd1b 	bl	800174c <HAL_GetTick>
 8007d16:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007d18:	887b      	ldrh	r3, [r7, #2]
 8007d1a:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007d1c:	887b      	ldrh	r3, [r7, #2]
 8007d1e:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d001      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	e310      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <HAL_SPI_TransmitReceive+0x5a>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <HAL_SPI_TransmitReceive+0x5a>
 8007d3c:	887b      	ldrh	r3, [r7, #2]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e305      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d101      	bne.n	8007d54 <HAL_SPI_TransmitReceive+0x6c>
 8007d50:	2302      	movs	r3, #2
 8007d52:	e2fe      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2205      	movs	r2, #5
 8007d60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	887a      	ldrh	r2, [r7, #2]
 8007d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	887a      	ldrh	r2, [r7, #2]
 8007d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	887a      	ldrh	r2, [r7, #2]
 8007d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	887a      	ldrh	r2, [r7, #2]
 8007d94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007db2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a70      	ldr	r2, [pc, #448]	; (8007f7c <HAL_SPI_TransmitReceive+0x294>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d009      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0xea>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a6f      	ldr	r2, [pc, #444]	; (8007f80 <HAL_SPI_TransmitReceive+0x298>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d004      	beq.n	8007dd2 <HAL_SPI_TransmitReceive+0xea>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a6d      	ldr	r2, [pc, #436]	; (8007f84 <HAL_SPI_TransmitReceive+0x29c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d102      	bne.n	8007dd8 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007dd2:	2310      	movs	r3, #16
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd6:	e001      	b.n	8007ddc <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007dd8:	2308      	movs	r3, #8
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	4b69      	ldr	r3, [pc, #420]	; (8007f88 <HAL_SPI_TransmitReceive+0x2a0>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	8879      	ldrh	r1, [r7, #2]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	6812      	ldr	r2, [r2, #0]
 8007dec:	430b      	orrs	r3, r1
 8007dee:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e08:	d107      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	2b0f      	cmp	r3, #15
 8007e20:	f240 80a2 	bls.w	8007f68 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e26:	089b      	lsrs	r3, r3, #2
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007e2a:	e094      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d120      	bne.n	8007e7c <HAL_SPI_TransmitReceive+0x194>
 8007e3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01d      	beq.n	8007e7c <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007e40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007e42:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d217      	bcs.n	8007e7c <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6812      	ldr	r2, [r2, #0]
 8007e56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	1d1a      	adds	r2, r3, #4
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e7a:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007e84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d065      	beq.n	8007f56 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d118      	bne.n	8007eca <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ea2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	1d1a      	adds	r2, r3, #4
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ec6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007ec8:	e045      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007eca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ecc:	8bfb      	ldrh	r3, [r7, #30]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d21d      	bcs.n	8007f0e <HAL_SPI_TransmitReceive+0x226>
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d018      	beq.n	8007f0e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007ee6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eec:	1d1a      	adds	r2, r3, #4
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f0a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f0c:	e023      	b.n	8007f56 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f0e:	f7f9 fc1d 	bl	800174c <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d803      	bhi.n	8007f26 <HAL_SPI_TransmitReceive+0x23e>
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f24:	d102      	bne.n	8007f2c <HAL_SPI_TransmitReceive+0x244>
 8007f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d114      	bne.n	8007f56 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 fa15 	bl	800835c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e1fd      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f47f af67 	bne.w	8007e2c <HAL_SPI_TransmitReceive+0x144>
 8007f5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f af63 	bne.w	8007e2c <HAL_SPI_TransmitReceive+0x144>
 8007f66:	e1ce      	b.n	8008306 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	f240 81c2 	bls.w	80082f6 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8007f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f74:	085b      	lsrs	r3, r3, #1
 8007f76:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007f78:	e0c9      	b.n	800810e <HAL_SPI_TransmitReceive+0x426>
 8007f7a:	bf00      	nop
 8007f7c:	40013000 	.word	0x40013000
 8007f80:	40003800 	.word	0x40003800
 8007f84:	40003c00 	.word	0x40003c00
 8007f88:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d11f      	bne.n	8007fda <HAL_SPI_TransmitReceive+0x2f2>
 8007f9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01c      	beq.n	8007fda <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007fa0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007fa2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d216      	bcs.n	8007fda <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb0:	881a      	ldrh	r2, [r3, #0]
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fba:	1c9a      	adds	r2, r3, #2
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fd8:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007fe2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8092 	beq.w	800810e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d118      	bne.n	800802a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	8812      	ldrh	r2, [r2, #0]
 8008000:	b292      	uxth	r2, r2
 8008002:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008008:	1c9a      	adds	r2, r3, #2
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008014:	b29b      	uxth	r3, r3
 8008016:	3b01      	subs	r3, #1
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008026:	853b      	strh	r3, [r7, #40]	; 0x28
 8008028:	e071      	b.n	800810e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800802a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800802c:	8bfb      	ldrh	r3, [r7, #30]
 800802e:	429a      	cmp	r2, r3
 8008030:	d228      	bcs.n	8008084 <HAL_SPI_TransmitReceive+0x39c>
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d023      	beq.n	8008084 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	8812      	ldrh	r2, [r2, #0]
 8008044:	b292      	uxth	r2, r2
 8008046:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800804c:	1c9a      	adds	r2, r3, #2
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008056:	6a3a      	ldr	r2, [r7, #32]
 8008058:	8812      	ldrh	r2, [r2, #0]
 800805a:	b292      	uxth	r2, r2
 800805c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008062:	1c9a      	adds	r2, r3, #2
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b02      	subs	r3, #2
 8008072:	b29a      	uxth	r2, r3
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008080:	853b      	strh	r3, [r7, #40]	; 0x28
 8008082:	e044      	b.n	800810e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008084:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008086:	2b01      	cmp	r3, #1
 8008088:	d11d      	bne.n	80080c6 <HAL_SPI_TransmitReceive+0x3de>
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d018      	beq.n	80080c6 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	8812      	ldrh	r2, [r2, #0]
 800809c:	b292      	uxth	r2, r2
 800809e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a4:	1c9a      	adds	r2, r3, #2
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080c2:	853b      	strh	r3, [r7, #40]	; 0x28
 80080c4:	e023      	b.n	800810e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c6:	f7f9 fb41 	bl	800174c <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d803      	bhi.n	80080de <HAL_SPI_TransmitReceive+0x3f6>
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080dc:	d102      	bne.n	80080e4 <HAL_SPI_TransmitReceive+0x3fc>
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d114      	bne.n	800810e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f939 	bl	800835c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e121      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800810e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008110:	2b00      	cmp	r3, #0
 8008112:	f47f af3b 	bne.w	8007f8c <HAL_SPI_TransmitReceive+0x2a4>
 8008116:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008118:	2b00      	cmp	r3, #0
 800811a:	f47f af37 	bne.w	8007f8c <HAL_SPI_TransmitReceive+0x2a4>
 800811e:	e0f2      	b.n	8008306 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b02      	cmp	r3, #2
 800812c:	d121      	bne.n	8008172 <HAL_SPI_TransmitReceive+0x48a>
 800812e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01e      	beq.n	8008172 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008134:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008136:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d218      	bcs.n	8008172 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3320      	adds	r3, #32
 800814a:	7812      	ldrb	r2, [r2, #0]
 800814c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800815e:	b29b      	uxth	r3, r3
 8008160:	3b01      	subs	r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008170:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800817a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80ba 	beq.w	80082f6 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	f003 0301 	and.w	r3, r3, #1
 800818c:	2b01      	cmp	r3, #1
 800818e:	d11b      	bne.n	80081c8 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800819c:	7812      	ldrb	r2, [r2, #0]
 800819e:	b2d2      	uxtb	r2, r2
 80081a0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081c4:	853b      	strh	r3, [r7, #40]	; 0x28
 80081c6:	e096      	b.n	80082f6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80081c8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081ca:	8bfb      	ldrh	r3, [r7, #30]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d24a      	bcs.n	8008266 <HAL_SPI_TransmitReceive+0x57e>
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d045      	beq.n	8008266 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e6:	7812      	ldrb	r2, [r2, #0]
 80081e8:	b2d2      	uxtb	r2, r2
 80081ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008202:	7812      	ldrb	r2, [r2, #0]
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820c:	1c5a      	adds	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823a:	7812      	ldrb	r2, [r2, #0]
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008250:	b29b      	uxth	r3, r3
 8008252:	3b04      	subs	r3, #4
 8008254:	b29a      	uxth	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008262:	853b      	strh	r3, [r7, #40]	; 0x28
 8008264:	e047      	b.n	80082f6 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008266:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008268:	2b03      	cmp	r3, #3
 800826a:	d820      	bhi.n	80082ae <HAL_SPI_TransmitReceive+0x5c6>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d01b      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008282:	7812      	ldrb	r2, [r2, #0]
 8008284:	b2d2      	uxtb	r2, r2
 8008286:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b01      	subs	r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082aa:	853b      	strh	r3, [r7, #40]	; 0x28
 80082ac:	e023      	b.n	80082f6 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082ae:	f7f9 fa4d 	bl	800174c <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d803      	bhi.n	80082c6 <HAL_SPI_TransmitReceive+0x5de>
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d102      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x5e4>
 80082c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d114      	bne.n	80082f6 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f845 	bl	800835c <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e02d      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80082f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f47f af11 	bne.w	8008120 <HAL_SPI_TransmitReceive+0x438>
 80082fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008300:	2b00      	cmp	r3, #0
 8008302:	f47f af0d 	bne.w	8008120 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	2200      	movs	r2, #0
 800830e:	2108      	movs	r1, #8
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f8c3 	bl	800849c <SPI_WaitOnFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008322:	f043 0220 	orr.w	r2, r3, #32
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f815 	bl	800835c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e000      	b.n	8008352 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008350:	2300      	movs	r3, #0
  }
}
 8008352:	4618      	mov	r0, r3
 8008354:	3730      	adds	r7, #48	; 0x30
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	699a      	ldr	r2, [r3, #24]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f042 0208 	orr.w	r2, r2, #8
 800837a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0210 	orr.w	r2, r2, #16
 800838a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0201 	bic.w	r2, r2, #1
 800839a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6919      	ldr	r1, [r3, #16]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	4b3c      	ldr	r3, [pc, #240]	; (8008498 <SPI_CloseTransfer+0x13c>)
 80083a8:	400b      	ands	r3, r1
 80083aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80083ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d014      	beq.n	80083f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00f      	beq.n	80083f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	699a      	ldr	r2, [r3, #24]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f042 0220 	orr.w	r2, r2, #32
 80083f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d014      	beq.n	8008428 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00f      	beq.n	8008428 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840e:	f043 0204 	orr.w	r2, r3, #4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	699a      	ldr	r2, [r3, #24]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008426:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00f      	beq.n	8008452 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008438:	f043 0201 	orr.w	r2, r3, #1
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008450:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00f      	beq.n	800847c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008462:	f043 0208 	orr.w	r2, r3, #8
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800847a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800848c:	bf00      	nop
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	fffffc90 	.word	0xfffffc90

0800849c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	603b      	str	r3, [r7, #0]
 80084a8:	4613      	mov	r3, r2
 80084aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084ac:	e010      	b.n	80084d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ae:	f7f9 f94d 	bl	800174c <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d803      	bhi.n	80084c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c4:	d102      	bne.n	80084cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e00f      	b.n	80084f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695a      	ldr	r2, [r3, #20]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	4013      	ands	r3, r2
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	bf0c      	ite	eq
 80084e0:	2301      	moveq	r3, #1
 80084e2:	2300      	movne	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d0df      	beq.n	80084ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	3301      	adds	r3, #1
 8008508:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	3301      	adds	r3, #1
 8008510:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	3307      	adds	r3, #7
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008522:	4618      	mov	r0, r3
 8008524:	3714      	adds	r7, #20
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr

0800852e <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e03c      	b.n	80085ba <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7f8 fef7 	bl	8001348 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 f85c 	bl	8008630 <USART_SetConfig>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e01b      	b.n	80085ba <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008590:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085a0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0201 	orr.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fd5c 	bl	8009070 <USART_CheckIdleState>
 80085b8:	4603      	mov	r3, r0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80085d2:	e018      	b.n	8008606 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085da:	d014      	beq.n	8008606 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085dc:	f7f9 f8b6 	bl	800174c <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <USART_WaitOnFlagUntilTimeout+0x30>
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e00f      	b.n	8008626 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4013      	ands	r3, r2
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	429a      	cmp	r2, r3
 8008614:	bf0c      	ite	eq
 8008616:	2301      	moveq	r3, #1
 8008618:	2300      	movne	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	429a      	cmp	r2, r3
 8008622:	d0d7      	beq.n	80085d4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08e      	sub	sp, #56	; 0x38
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800863e:	2300      	movs	r3, #0
 8008640:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	431a      	orrs	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	4bc9      	ldr	r3, [pc, #804]	; (8008984 <USART_SetConfig+0x354>)
 8008660:	4013      	ands	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008668:	430b      	orrs	r3, r1
 800866a:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800866c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008678:	4313      	orrs	r3, r2
 800867a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	699a      	ldr	r2, [r3, #24]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	4313      	orrs	r3, r2
 8008686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008688:	4313      	orrs	r3, r2
 800868a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008692:	4313      	orrs	r3, r2
 8008694:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	4bba      	ldr	r3, [pc, #744]	; (8008988 <USART_SetConfig+0x358>)
 800869e:	4013      	ands	r3, r2
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086a6:	430b      	orrs	r3, r1
 80086a8:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	f023 010f 	bic.w	r1, r3, #15
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4ab1      	ldr	r2, [pc, #708]	; (800898c <USART_SetConfig+0x35c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d176      	bne.n	80087b8 <USART_SetConfig+0x188>
 80086ca:	4bb1      	ldr	r3, [pc, #708]	; (8008990 <USART_SetConfig+0x360>)
 80086cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086d2:	2b28      	cmp	r3, #40	; 0x28
 80086d4:	d86c      	bhi.n	80087b0 <USART_SetConfig+0x180>
 80086d6:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <USART_SetConfig+0xac>)
 80086d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086dc:	08008781 	.word	0x08008781
 80086e0:	080087b1 	.word	0x080087b1
 80086e4:	080087b1 	.word	0x080087b1
 80086e8:	080087b1 	.word	0x080087b1
 80086ec:	080087b1 	.word	0x080087b1
 80086f0:	080087b1 	.word	0x080087b1
 80086f4:	080087b1 	.word	0x080087b1
 80086f8:	080087b1 	.word	0x080087b1
 80086fc:	08008789 	.word	0x08008789
 8008700:	080087b1 	.word	0x080087b1
 8008704:	080087b1 	.word	0x080087b1
 8008708:	080087b1 	.word	0x080087b1
 800870c:	080087b1 	.word	0x080087b1
 8008710:	080087b1 	.word	0x080087b1
 8008714:	080087b1 	.word	0x080087b1
 8008718:	080087b1 	.word	0x080087b1
 800871c:	08008791 	.word	0x08008791
 8008720:	080087b1 	.word	0x080087b1
 8008724:	080087b1 	.word	0x080087b1
 8008728:	080087b1 	.word	0x080087b1
 800872c:	080087b1 	.word	0x080087b1
 8008730:	080087b1 	.word	0x080087b1
 8008734:	080087b1 	.word	0x080087b1
 8008738:	080087b1 	.word	0x080087b1
 800873c:	08008799 	.word	0x08008799
 8008740:	080087b1 	.word	0x080087b1
 8008744:	080087b1 	.word	0x080087b1
 8008748:	080087b1 	.word	0x080087b1
 800874c:	080087b1 	.word	0x080087b1
 8008750:	080087b1 	.word	0x080087b1
 8008754:	080087b1 	.word	0x080087b1
 8008758:	080087b1 	.word	0x080087b1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087b1 	.word	0x080087b1
 8008764:	080087b1 	.word	0x080087b1
 8008768:	080087b1 	.word	0x080087b1
 800876c:	080087b1 	.word	0x080087b1
 8008770:	080087b1 	.word	0x080087b1
 8008774:	080087b1 	.word	0x080087b1
 8008778:	080087b1 	.word	0x080087b1
 800877c:	080087a9 	.word	0x080087a9
 8008780:	2301      	movs	r3, #1
 8008782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008786:	e112      	b.n	80089ae <USART_SetConfig+0x37e>
 8008788:	2302      	movs	r3, #2
 800878a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800878e:	e10e      	b.n	80089ae <USART_SetConfig+0x37e>
 8008790:	2304      	movs	r3, #4
 8008792:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008796:	e10a      	b.n	80089ae <USART_SetConfig+0x37e>
 8008798:	2308      	movs	r3, #8
 800879a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800879e:	e106      	b.n	80089ae <USART_SetConfig+0x37e>
 80087a0:	2310      	movs	r3, #16
 80087a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087a6:	e102      	b.n	80089ae <USART_SetConfig+0x37e>
 80087a8:	2320      	movs	r3, #32
 80087aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087ae:	e0fe      	b.n	80089ae <USART_SetConfig+0x37e>
 80087b0:	2340      	movs	r3, #64	; 0x40
 80087b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087b6:	e0fa      	b.n	80089ae <USART_SetConfig+0x37e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a75      	ldr	r2, [pc, #468]	; (8008994 <USART_SetConfig+0x364>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d130      	bne.n	8008824 <USART_SetConfig+0x1f4>
 80087c2:	4b73      	ldr	r3, [pc, #460]	; (8008990 <USART_SetConfig+0x360>)
 80087c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	2b05      	cmp	r3, #5
 80087cc:	d826      	bhi.n	800881c <USART_SetConfig+0x1ec>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <USART_SetConfig+0x1a4>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087ed 	.word	0x080087ed
 80087d8:	080087f5 	.word	0x080087f5
 80087dc:	080087fd 	.word	0x080087fd
 80087e0:	08008805 	.word	0x08008805
 80087e4:	0800880d 	.word	0x0800880d
 80087e8:	08008815 	.word	0x08008815
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087f2:	e0dc      	b.n	80089ae <USART_SetConfig+0x37e>
 80087f4:	2302      	movs	r3, #2
 80087f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80087fa:	e0d8      	b.n	80089ae <USART_SetConfig+0x37e>
 80087fc:	2304      	movs	r3, #4
 80087fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008802:	e0d4      	b.n	80089ae <USART_SetConfig+0x37e>
 8008804:	2308      	movs	r3, #8
 8008806:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800880a:	e0d0      	b.n	80089ae <USART_SetConfig+0x37e>
 800880c:	2310      	movs	r3, #16
 800880e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008812:	e0cc      	b.n	80089ae <USART_SetConfig+0x37e>
 8008814:	2320      	movs	r3, #32
 8008816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800881a:	e0c8      	b.n	80089ae <USART_SetConfig+0x37e>
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008822:	e0c4      	b.n	80089ae <USART_SetConfig+0x37e>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a5b      	ldr	r2, [pc, #364]	; (8008998 <USART_SetConfig+0x368>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d130      	bne.n	8008890 <USART_SetConfig+0x260>
 800882e:	4b58      	ldr	r3, [pc, #352]	; (8008990 <USART_SetConfig+0x360>)
 8008830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	2b05      	cmp	r3, #5
 8008838:	d826      	bhi.n	8008888 <USART_SetConfig+0x258>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <USART_SetConfig+0x210>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008859 	.word	0x08008859
 8008844:	08008861 	.word	0x08008861
 8008848:	08008869 	.word	0x08008869
 800884c:	08008871 	.word	0x08008871
 8008850:	08008879 	.word	0x08008879
 8008854:	08008881 	.word	0x08008881
 8008858:	2300      	movs	r3, #0
 800885a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800885e:	e0a6      	b.n	80089ae <USART_SetConfig+0x37e>
 8008860:	2302      	movs	r3, #2
 8008862:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008866:	e0a2      	b.n	80089ae <USART_SetConfig+0x37e>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800886e:	e09e      	b.n	80089ae <USART_SetConfig+0x37e>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008876:	e09a      	b.n	80089ae <USART_SetConfig+0x37e>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800887e:	e096      	b.n	80089ae <USART_SetConfig+0x37e>
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008886:	e092      	b.n	80089ae <USART_SetConfig+0x37e>
 8008888:	2340      	movs	r3, #64	; 0x40
 800888a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800888e:	e08e      	b.n	80089ae <USART_SetConfig+0x37e>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a41      	ldr	r2, [pc, #260]	; (800899c <USART_SetConfig+0x36c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	f040 8086 	bne.w	80089a8 <USART_SetConfig+0x378>
 800889c:	4b3c      	ldr	r3, [pc, #240]	; (8008990 <USART_SetConfig+0x360>)
 800889e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088a4:	2b28      	cmp	r3, #40	; 0x28
 80088a6:	d87b      	bhi.n	80089a0 <USART_SetConfig+0x370>
 80088a8:	a201      	add	r2, pc, #4	; (adr r2, 80088b0 <USART_SetConfig+0x280>)
 80088aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ae:	bf00      	nop
 80088b0:	08008955 	.word	0x08008955
 80088b4:	080089a1 	.word	0x080089a1
 80088b8:	080089a1 	.word	0x080089a1
 80088bc:	080089a1 	.word	0x080089a1
 80088c0:	080089a1 	.word	0x080089a1
 80088c4:	080089a1 	.word	0x080089a1
 80088c8:	080089a1 	.word	0x080089a1
 80088cc:	080089a1 	.word	0x080089a1
 80088d0:	0800895d 	.word	0x0800895d
 80088d4:	080089a1 	.word	0x080089a1
 80088d8:	080089a1 	.word	0x080089a1
 80088dc:	080089a1 	.word	0x080089a1
 80088e0:	080089a1 	.word	0x080089a1
 80088e4:	080089a1 	.word	0x080089a1
 80088e8:	080089a1 	.word	0x080089a1
 80088ec:	080089a1 	.word	0x080089a1
 80088f0:	08008965 	.word	0x08008965
 80088f4:	080089a1 	.word	0x080089a1
 80088f8:	080089a1 	.word	0x080089a1
 80088fc:	080089a1 	.word	0x080089a1
 8008900:	080089a1 	.word	0x080089a1
 8008904:	080089a1 	.word	0x080089a1
 8008908:	080089a1 	.word	0x080089a1
 800890c:	080089a1 	.word	0x080089a1
 8008910:	0800896d 	.word	0x0800896d
 8008914:	080089a1 	.word	0x080089a1
 8008918:	080089a1 	.word	0x080089a1
 800891c:	080089a1 	.word	0x080089a1
 8008920:	080089a1 	.word	0x080089a1
 8008924:	080089a1 	.word	0x080089a1
 8008928:	080089a1 	.word	0x080089a1
 800892c:	080089a1 	.word	0x080089a1
 8008930:	08008975 	.word	0x08008975
 8008934:	080089a1 	.word	0x080089a1
 8008938:	080089a1 	.word	0x080089a1
 800893c:	080089a1 	.word	0x080089a1
 8008940:	080089a1 	.word	0x080089a1
 8008944:	080089a1 	.word	0x080089a1
 8008948:	080089a1 	.word	0x080089a1
 800894c:	080089a1 	.word	0x080089a1
 8008950:	0800897d 	.word	0x0800897d
 8008954:	2301      	movs	r3, #1
 8008956:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800895a:	e028      	b.n	80089ae <USART_SetConfig+0x37e>
 800895c:	2302      	movs	r3, #2
 800895e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008962:	e024      	b.n	80089ae <USART_SetConfig+0x37e>
 8008964:	2304      	movs	r3, #4
 8008966:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800896a:	e020      	b.n	80089ae <USART_SetConfig+0x37e>
 800896c:	2308      	movs	r3, #8
 800896e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008972:	e01c      	b.n	80089ae <USART_SetConfig+0x37e>
 8008974:	2310      	movs	r3, #16
 8008976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800897a:	e018      	b.n	80089ae <USART_SetConfig+0x37e>
 800897c:	2320      	movs	r3, #32
 800897e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008982:	e014      	b.n	80089ae <USART_SetConfig+0x37e>
 8008984:	cfff69f3 	.word	0xcfff69f3
 8008988:	ffffc0f6 	.word	0xffffc0f6
 800898c:	40011000 	.word	0x40011000
 8008990:	58024400 	.word	0x58024400
 8008994:	40004400 	.word	0x40004400
 8008998:	40004800 	.word	0x40004800
 800899c:	40011400 	.word	0x40011400
 80089a0:	2340      	movs	r3, #64	; 0x40
 80089a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80089a6:	e002      	b.n	80089ae <USART_SetConfig+0x37e>
 80089a8:	2340      	movs	r3, #64	; 0x40
 80089aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 80089ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	f200 8329 	bhi.w	800900a <USART_SetConfig+0x9da>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USART_SetConfig+0x390>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	08008a45 	.word	0x08008a45
 80089c4:	08008afb 	.word	0x08008afb
 80089c8:	08008bb1 	.word	0x08008bb1
 80089cc:	0800900b 	.word	0x0800900b
 80089d0:	08008c6b 	.word	0x08008c6b
 80089d4:	0800900b 	.word	0x0800900b
 80089d8:	0800900b 	.word	0x0800900b
 80089dc:	0800900b 	.word	0x0800900b
 80089e0:	08008d25 	.word	0x08008d25
 80089e4:	0800900b 	.word	0x0800900b
 80089e8:	0800900b 	.word	0x0800900b
 80089ec:	0800900b 	.word	0x0800900b
 80089f0:	0800900b 	.word	0x0800900b
 80089f4:	0800900b 	.word	0x0800900b
 80089f8:	0800900b 	.word	0x0800900b
 80089fc:	0800900b 	.word	0x0800900b
 8008a00:	08008e9d 	.word	0x08008e9d
 8008a04:	0800900b 	.word	0x0800900b
 8008a08:	0800900b 	.word	0x0800900b
 8008a0c:	0800900b 	.word	0x0800900b
 8008a10:	0800900b 	.word	0x0800900b
 8008a14:	0800900b 	.word	0x0800900b
 8008a18:	0800900b 	.word	0x0800900b
 8008a1c:	0800900b 	.word	0x0800900b
 8008a20:	0800900b 	.word	0x0800900b
 8008a24:	0800900b 	.word	0x0800900b
 8008a28:	0800900b 	.word	0x0800900b
 8008a2c:	0800900b 	.word	0x0800900b
 8008a30:	0800900b 	.word	0x0800900b
 8008a34:	0800900b 	.word	0x0800900b
 8008a38:	0800900b 	.word	0x0800900b
 8008a3c:	0800900b 	.word	0x0800900b
 8008a40:	08008f59 	.word	0x08008f59
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a44:	f7fc fb02 	bl	800504c <HAL_RCC_GetPCLK1Freq>
 8008a48:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d044      	beq.n	8008adc <USART_SetConfig+0x4ac>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d03e      	beq.n	8008ad8 <USART_SetConfig+0x4a8>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d038      	beq.n	8008ad4 <USART_SetConfig+0x4a4>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d032      	beq.n	8008ad0 <USART_SetConfig+0x4a0>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d02c      	beq.n	8008acc <USART_SetConfig+0x49c>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	2b05      	cmp	r3, #5
 8008a78:	d026      	beq.n	8008ac8 <USART_SetConfig+0x498>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	2b06      	cmp	r3, #6
 8008a80:	d020      	beq.n	8008ac4 <USART_SetConfig+0x494>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	2b07      	cmp	r3, #7
 8008a88:	d01a      	beq.n	8008ac0 <USART_SetConfig+0x490>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b08      	cmp	r3, #8
 8008a90:	d014      	beq.n	8008abc <USART_SetConfig+0x48c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d00e      	beq.n	8008ab8 <USART_SetConfig+0x488>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	2b0a      	cmp	r3, #10
 8008aa0:	d008      	beq.n	8008ab4 <USART_SetConfig+0x484>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2b0b      	cmp	r3, #11
 8008aa8:	d102      	bne.n	8008ab0 <USART_SetConfig+0x480>
 8008aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008aae:	e016      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e014      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ab4:	2380      	movs	r3, #128	; 0x80
 8008ab6:	e012      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ab8:	2340      	movs	r3, #64	; 0x40
 8008aba:	e010      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008abc:	2320      	movs	r3, #32
 8008abe:	e00e      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	e00c      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ac4:	230c      	movs	r3, #12
 8008ac6:	e00a      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ac8:	230a      	movs	r3, #10
 8008aca:	e008      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008acc:	2308      	movs	r3, #8
 8008ace:	e006      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ad0:	2306      	movs	r3, #6
 8008ad2:	e004      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	e002      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	e000      	b.n	8008ade <USART_SetConfig+0x4ae>
 8008adc:	2301      	movs	r3, #1
 8008ade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	005a      	lsls	r2, r3, #1
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	085b      	lsrs	r3, r3, #1
 8008aec:	441a      	add	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008af6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008af8:	e28b      	b.n	8009012 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008afa:	f7fc fabd 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8008afe:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d044      	beq.n	8008b92 <USART_SetConfig+0x562>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d03e      	beq.n	8008b8e <USART_SetConfig+0x55e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d038      	beq.n	8008b8a <USART_SetConfig+0x55a>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	2b03      	cmp	r3, #3
 8008b1e:	d032      	beq.n	8008b86 <USART_SetConfig+0x556>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d02c      	beq.n	8008b82 <USART_SetConfig+0x552>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b05      	cmp	r3, #5
 8008b2e:	d026      	beq.n	8008b7e <USART_SetConfig+0x54e>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b06      	cmp	r3, #6
 8008b36:	d020      	beq.n	8008b7a <USART_SetConfig+0x54a>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b07      	cmp	r3, #7
 8008b3e:	d01a      	beq.n	8008b76 <USART_SetConfig+0x546>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d014      	beq.n	8008b72 <USART_SetConfig+0x542>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b09      	cmp	r3, #9
 8008b4e:	d00e      	beq.n	8008b6e <USART_SetConfig+0x53e>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b0a      	cmp	r3, #10
 8008b56:	d008      	beq.n	8008b6a <USART_SetConfig+0x53a>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b0b      	cmp	r3, #11
 8008b5e:	d102      	bne.n	8008b66 <USART_SetConfig+0x536>
 8008b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b64:	e016      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e014      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b6a:	2380      	movs	r3, #128	; 0x80
 8008b6c:	e012      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b6e:	2340      	movs	r3, #64	; 0x40
 8008b70:	e010      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b72:	2320      	movs	r3, #32
 8008b74:	e00e      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b76:	2310      	movs	r3, #16
 8008b78:	e00c      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	e00a      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b7e:	230a      	movs	r3, #10
 8008b80:	e008      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b82:	2308      	movs	r3, #8
 8008b84:	e006      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b86:	2306      	movs	r3, #6
 8008b88:	e004      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b8a:	2304      	movs	r3, #4
 8008b8c:	e002      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e000      	b.n	8008b94 <USART_SetConfig+0x564>
 8008b92:	2301      	movs	r3, #1
 8008b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9a:	005a      	lsls	r2, r3, #1
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	085b      	lsrs	r3, r3, #1
 8008ba2:	441a      	add	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008bae:	e230      	b.n	8009012 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bb0:	f107 0318 	add.w	r3, r7, #24
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fe fa15 	bl	8006fe4 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d044      	beq.n	8008c4e <USART_SetConfig+0x61e>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d03e      	beq.n	8008c4a <USART_SetConfig+0x61a>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d038      	beq.n	8008c46 <USART_SetConfig+0x616>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d032      	beq.n	8008c42 <USART_SetConfig+0x612>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d02c      	beq.n	8008c3e <USART_SetConfig+0x60e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b05      	cmp	r3, #5
 8008bea:	d026      	beq.n	8008c3a <USART_SetConfig+0x60a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b06      	cmp	r3, #6
 8008bf2:	d020      	beq.n	8008c36 <USART_SetConfig+0x606>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b07      	cmp	r3, #7
 8008bfa:	d01a      	beq.n	8008c32 <USART_SetConfig+0x602>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d014      	beq.n	8008c2e <USART_SetConfig+0x5fe>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	2b09      	cmp	r3, #9
 8008c0a:	d00e      	beq.n	8008c2a <USART_SetConfig+0x5fa>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b0a      	cmp	r3, #10
 8008c12:	d008      	beq.n	8008c26 <USART_SetConfig+0x5f6>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b0b      	cmp	r3, #11
 8008c1a:	d102      	bne.n	8008c22 <USART_SetConfig+0x5f2>
 8008c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c20:	e016      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e014      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	e012      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	e010      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c2e:	2320      	movs	r3, #32
 8008c30:	e00e      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c32:	2310      	movs	r3, #16
 8008c34:	e00c      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c36:	230c      	movs	r3, #12
 8008c38:	e00a      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	e008      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c3e:	2308      	movs	r3, #8
 8008c40:	e006      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c42:	2306      	movs	r3, #6
 8008c44:	e004      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c46:	2304      	movs	r3, #4
 8008c48:	e002      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e000      	b.n	8008c50 <USART_SetConfig+0x620>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c54:	005a      	lsls	r2, r3, #1
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	441a      	add	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c66:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008c68:	e1d3      	b.n	8009012 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fb0c 	bl	800728c <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d044      	beq.n	8008d08 <USART_SetConfig+0x6d8>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d03e      	beq.n	8008d04 <USART_SetConfig+0x6d4>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d038      	beq.n	8008d00 <USART_SetConfig+0x6d0>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d032      	beq.n	8008cfc <USART_SetConfig+0x6cc>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	d02c      	beq.n	8008cf8 <USART_SetConfig+0x6c8>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	2b05      	cmp	r3, #5
 8008ca4:	d026      	beq.n	8008cf4 <USART_SetConfig+0x6c4>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008caa:	2b06      	cmp	r3, #6
 8008cac:	d020      	beq.n	8008cf0 <USART_SetConfig+0x6c0>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb2:	2b07      	cmp	r3, #7
 8008cb4:	d01a      	beq.n	8008cec <USART_SetConfig+0x6bc>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cba:	2b08      	cmp	r3, #8
 8008cbc:	d014      	beq.n	8008ce8 <USART_SetConfig+0x6b8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	2b09      	cmp	r3, #9
 8008cc4:	d00e      	beq.n	8008ce4 <USART_SetConfig+0x6b4>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	2b0a      	cmp	r3, #10
 8008ccc:	d008      	beq.n	8008ce0 <USART_SetConfig+0x6b0>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd2:	2b0b      	cmp	r3, #11
 8008cd4:	d102      	bne.n	8008cdc <USART_SetConfig+0x6ac>
 8008cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cda:	e016      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e014      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	e012      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	e010      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008ce8:	2320      	movs	r3, #32
 8008cea:	e00e      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008cec:	2310      	movs	r3, #16
 8008cee:	e00c      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	e00a      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008cf4:	230a      	movs	r3, #10
 8008cf6:	e008      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008cf8:	2308      	movs	r3, #8
 8008cfa:	e006      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008cfc:	2306      	movs	r3, #6
 8008cfe:	e004      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008d00:	2304      	movs	r3, #4
 8008d02:	e002      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e000      	b.n	8008d0a <USART_SetConfig+0x6da>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0e:	005a      	lsls	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	085b      	lsrs	r3, r3, #1
 8008d16:	441a      	add	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d20:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008d22:	e176      	b.n	8009012 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d24:	4b89      	ldr	r3, [pc, #548]	; (8008f4c <USART_SetConfig+0x91c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d05d      	beq.n	8008dec <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8008d30:	4b86      	ldr	r3, [pc, #536]	; (8008f4c <USART_SetConfig+0x91c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	08db      	lsrs	r3, r3, #3
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	4a85      	ldr	r2, [pc, #532]	; (8008f50 <USART_SetConfig+0x920>)
 8008d3c:	40da      	lsrs	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d044      	beq.n	8008dd0 <USART_SetConfig+0x7a0>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d03e      	beq.n	8008dcc <USART_SetConfig+0x79c>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d038      	beq.n	8008dc8 <USART_SetConfig+0x798>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d032      	beq.n	8008dc4 <USART_SetConfig+0x794>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d62:	2b04      	cmp	r3, #4
 8008d64:	d02c      	beq.n	8008dc0 <USART_SetConfig+0x790>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	2b05      	cmp	r3, #5
 8008d6c:	d026      	beq.n	8008dbc <USART_SetConfig+0x78c>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	2b06      	cmp	r3, #6
 8008d74:	d020      	beq.n	8008db8 <USART_SetConfig+0x788>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	2b07      	cmp	r3, #7
 8008d7c:	d01a      	beq.n	8008db4 <USART_SetConfig+0x784>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d82:	2b08      	cmp	r3, #8
 8008d84:	d014      	beq.n	8008db0 <USART_SetConfig+0x780>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	2b09      	cmp	r3, #9
 8008d8c:	d00e      	beq.n	8008dac <USART_SetConfig+0x77c>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d92:	2b0a      	cmp	r3, #10
 8008d94:	d008      	beq.n	8008da8 <USART_SetConfig+0x778>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9a:	2b0b      	cmp	r3, #11
 8008d9c:	d102      	bne.n	8008da4 <USART_SetConfig+0x774>
 8008d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008da2:	e016      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e014      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008da8:	2380      	movs	r3, #128	; 0x80
 8008daa:	e012      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dac:	2340      	movs	r3, #64	; 0x40
 8008dae:	e010      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008db0:	2320      	movs	r3, #32
 8008db2:	e00e      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008db4:	2310      	movs	r3, #16
 8008db6:	e00c      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008db8:	230c      	movs	r3, #12
 8008dba:	e00a      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dbc:	230a      	movs	r3, #10
 8008dbe:	e008      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dc0:	2308      	movs	r3, #8
 8008dc2:	e006      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dc4:	2306      	movs	r3, #6
 8008dc6:	e004      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dc8:	2304      	movs	r3, #4
 8008dca:	e002      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e000      	b.n	8008dd2 <USART_SetConfig+0x7a2>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	005a      	lsls	r2, r3, #1
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	441a      	add	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8008dea:	e112      	b.n	8009012 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d044      	beq.n	8008e7e <USART_SetConfig+0x84e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d03e      	beq.n	8008e7a <USART_SetConfig+0x84a>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d038      	beq.n	8008e76 <USART_SetConfig+0x846>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d032      	beq.n	8008e72 <USART_SetConfig+0x842>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e10:	2b04      	cmp	r3, #4
 8008e12:	d02c      	beq.n	8008e6e <USART_SetConfig+0x83e>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	2b05      	cmp	r3, #5
 8008e1a:	d026      	beq.n	8008e6a <USART_SetConfig+0x83a>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e20:	2b06      	cmp	r3, #6
 8008e22:	d020      	beq.n	8008e66 <USART_SetConfig+0x836>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	2b07      	cmp	r3, #7
 8008e2a:	d01a      	beq.n	8008e62 <USART_SetConfig+0x832>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d014      	beq.n	8008e5e <USART_SetConfig+0x82e>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	2b09      	cmp	r3, #9
 8008e3a:	d00e      	beq.n	8008e5a <USART_SetConfig+0x82a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	2b0a      	cmp	r3, #10
 8008e42:	d008      	beq.n	8008e56 <USART_SetConfig+0x826>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	2b0b      	cmp	r3, #11
 8008e4a:	d102      	bne.n	8008e52 <USART_SetConfig+0x822>
 8008e4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e50:	e016      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e52:	2301      	movs	r3, #1
 8008e54:	e014      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e56:	2380      	movs	r3, #128	; 0x80
 8008e58:	e012      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e5a:	2340      	movs	r3, #64	; 0x40
 8008e5c:	e010      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e5e:	2320      	movs	r3, #32
 8008e60:	e00e      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e62:	2310      	movs	r3, #16
 8008e64:	e00c      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e66:	230c      	movs	r3, #12
 8008e68:	e00a      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e6a:	230a      	movs	r3, #10
 8008e6c:	e008      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e6e:	2308      	movs	r3, #8
 8008e70:	e006      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e72:	2306      	movs	r3, #6
 8008e74:	e004      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e76:	2304      	movs	r3, #4
 8008e78:	e002      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e7a:	2302      	movs	r3, #2
 8008e7c:	e000      	b.n	8008e80 <USART_SetConfig+0x850>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	4a33      	ldr	r2, [pc, #204]	; (8008f50 <USART_SetConfig+0x920>)
 8008e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e86:	005a      	lsls	r2, r3, #1
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	085b      	lsrs	r3, r3, #1
 8008e8e:	441a      	add	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008e9a:	e0ba      	b.n	8009012 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d044      	beq.n	8008f2e <USART_SetConfig+0x8fe>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d03e      	beq.n	8008f2a <USART_SetConfig+0x8fa>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d038      	beq.n	8008f26 <USART_SetConfig+0x8f6>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d032      	beq.n	8008f22 <USART_SetConfig+0x8f2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d02c      	beq.n	8008f1e <USART_SetConfig+0x8ee>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b05      	cmp	r3, #5
 8008eca:	d026      	beq.n	8008f1a <USART_SetConfig+0x8ea>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed0:	2b06      	cmp	r3, #6
 8008ed2:	d020      	beq.n	8008f16 <USART_SetConfig+0x8e6>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b07      	cmp	r3, #7
 8008eda:	d01a      	beq.n	8008f12 <USART_SetConfig+0x8e2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d014      	beq.n	8008f0e <USART_SetConfig+0x8de>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b09      	cmp	r3, #9
 8008eea:	d00e      	beq.n	8008f0a <USART_SetConfig+0x8da>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b0a      	cmp	r3, #10
 8008ef2:	d008      	beq.n	8008f06 <USART_SetConfig+0x8d6>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	2b0b      	cmp	r3, #11
 8008efa:	d102      	bne.n	8008f02 <USART_SetConfig+0x8d2>
 8008efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f00:	e016      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e014      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f06:	2380      	movs	r3, #128	; 0x80
 8008f08:	e012      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f0a:	2340      	movs	r3, #64	; 0x40
 8008f0c:	e010      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f0e:	2320      	movs	r3, #32
 8008f10:	e00e      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f12:	2310      	movs	r3, #16
 8008f14:	e00c      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f16:	230c      	movs	r3, #12
 8008f18:	e00a      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f1a:	230a      	movs	r3, #10
 8008f1c:	e008      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f1e:	2308      	movs	r3, #8
 8008f20:	e006      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f22:	2306      	movs	r3, #6
 8008f24:	e004      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f26:	2304      	movs	r3, #4
 8008f28:	e002      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	e000      	b.n	8008f30 <USART_SetConfig+0x900>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <USART_SetConfig+0x924>)
 8008f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f36:	005a      	lsls	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	085b      	lsrs	r3, r3, #1
 8008f3e:	441a      	add	r2, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008f4a:	e062      	b.n	8009012 <USART_SetConfig+0x9e2>
 8008f4c:	58024400 	.word	0x58024400
 8008f50:	03d09000 	.word	0x03d09000
 8008f54:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d044      	beq.n	8008fea <USART_SetConfig+0x9ba>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d03e      	beq.n	8008fe6 <USART_SetConfig+0x9b6>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d038      	beq.n	8008fe2 <USART_SetConfig+0x9b2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d032      	beq.n	8008fde <USART_SetConfig+0x9ae>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d02c      	beq.n	8008fda <USART_SetConfig+0x9aa>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	d026      	beq.n	8008fd6 <USART_SetConfig+0x9a6>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b06      	cmp	r3, #6
 8008f8e:	d020      	beq.n	8008fd2 <USART_SetConfig+0x9a2>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b07      	cmp	r3, #7
 8008f96:	d01a      	beq.n	8008fce <USART_SetConfig+0x99e>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d014      	beq.n	8008fca <USART_SetConfig+0x99a>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b09      	cmp	r3, #9
 8008fa6:	d00e      	beq.n	8008fc6 <USART_SetConfig+0x996>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b0a      	cmp	r3, #10
 8008fae:	d008      	beq.n	8008fc2 <USART_SetConfig+0x992>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b0b      	cmp	r3, #11
 8008fb6:	d102      	bne.n	8008fbe <USART_SetConfig+0x98e>
 8008fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fbc:	e016      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e014      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fc2:	2380      	movs	r3, #128	; 0x80
 8008fc4:	e012      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	e010      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fca:	2320      	movs	r3, #32
 8008fcc:	e00e      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fce:	2310      	movs	r3, #16
 8008fd0:	e00c      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	e00a      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fd6:	230a      	movs	r3, #10
 8008fd8:	e008      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fda:	2308      	movs	r3, #8
 8008fdc:	e006      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fde:	2306      	movs	r3, #6
 8008fe0:	e004      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	e002      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e000      	b.n	8008fec <USART_SetConfig+0x9bc>
 8008fea:	2301      	movs	r3, #1
 8008fec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff4:	005a      	lsls	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	085b      	lsrs	r3, r3, #1
 8008ffc:	441a      	add	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	fbb2 f3f3 	udiv	r3, r2, r3
 8009006:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009008:	e003      	b.n	8009012 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 8009010:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	2b0f      	cmp	r3, #15
 8009016:	d916      	bls.n	8009046 <USART_SetConfig+0xa16>
 8009018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901e:	d212      	bcs.n	8009046 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	b29b      	uxth	r3, r3
 8009024:	f023 030f 	bic.w	r3, r3, #15
 8009028:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	b29b      	uxth	r3, r3
 8009030:	f003 0307 	and.w	r3, r3, #7
 8009034:	b29a      	uxth	r2, r3
 8009036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009038:	4313      	orrs	r3, r2
 800903a:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009042:	60da      	str	r2, [r3, #12]
 8009044:	e002      	b.n	800904c <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009064:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8009068:	4618      	mov	r0, r3
 800906a:	3738      	adds	r7, #56	; 0x38
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af02      	add	r7, sp, #8
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800907e:	f7f8 fb65 	bl	800174c <HAL_GetTick>
 8009082:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f003 0308 	and.w	r3, r3, #8
 800908e:	2b08      	cmp	r3, #8
 8009090:	d10e      	bne.n	80090b0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fa8e 	bl	80085c2 <USART_WaitOnFlagUntilTimeout>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e01e      	b.n	80090ee <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f003 0304 	and.w	r3, r3, #4
 80090ba:	2b04      	cmp	r3, #4
 80090bc:	d10e      	bne.n	80090dc <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80090be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f7ff fa78 	bl	80085c2 <USART_WaitOnFlagUntilTimeout>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e008      	b.n	80090ee <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_USARTEx_DisableFifoMode+0x16>
 8009108:	2302      	movs	r3, #2
 800910a:	e027      	b.n	800915c <HAL_USARTEx_DisableFifoMode+0x66>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0201 	bic.w	r2, r2, #1
 8009132:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800913a:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 800917c:	2302      	movs	r3, #2
 800917e:	e02d      	b.n	80091dc <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 0201 	bic.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f84f 	bl	8009260 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d101      	bne.n	80091fc <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80091f8:	2302      	movs	r3, #2
 80091fa:	e02d      	b.n	8009258 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0201 	bic.w	r2, r2, #1
 8009222:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f811 	bl	8009260 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68fa      	ldr	r2, [r7, #12]
 8009244:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800927c:	e02f      	b.n	80092de <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800927e:	2310      	movs	r3, #16
 8009280:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009282:	2310      	movs	r3, #16
 8009284:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 800928c:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800928e:	b2db      	uxtb	r3, r3
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 800929c:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f003 0307 	and.w	r3, r3, #7
 80092a4:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	7b3a      	ldrb	r2, [r7, #12]
 80092aa:	4910      	ldr	r1, [pc, #64]	; (80092ec <USARTEx_SetNbDataToProcess+0x8c>)
 80092ac:	5c8a      	ldrb	r2, [r1, r2]
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 80092b2:	7b3a      	ldrb	r2, [r7, #12]
 80092b4:	490e      	ldr	r1, [pc, #56]	; (80092f0 <USARTEx_SetNbDataToProcess+0x90>)
 80092b6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80092bc:	b29a      	uxth	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	7b7a      	ldrb	r2, [r7, #13]
 80092c6:	4909      	ldr	r1, [pc, #36]	; (80092ec <USARTEx_SetNbDataToProcess+0x8c>)
 80092c8:	5c8a      	ldrb	r2, [r1, r2]
 80092ca:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80092ce:	7b7a      	ldrb	r2, [r7, #13]
 80092d0:	4907      	ldr	r1, [pc, #28]	; (80092f0 <USARTEx_SetNbDataToProcess+0x90>)
 80092d2:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80092de:	bf00      	nop
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	080095a8 	.word	0x080095a8
 80092f0:	080095b0 	.word	0x080095b0

080092f4 <calloc>:
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <calloc+0xc>)
 80092f6:	460a      	mov	r2, r1
 80092f8:	4601      	mov	r1, r0
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	f000 b802 	b.w	8009304 <_calloc_r>
 8009300:	2400005c 	.word	0x2400005c

08009304 <_calloc_r>:
 8009304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009306:	fba1 2402 	umull	r2, r4, r1, r2
 800930a:	b94c      	cbnz	r4, 8009320 <_calloc_r+0x1c>
 800930c:	4611      	mov	r1, r2
 800930e:	9201      	str	r2, [sp, #4]
 8009310:	f000 f82e 	bl	8009370 <_malloc_r>
 8009314:	9a01      	ldr	r2, [sp, #4]
 8009316:	4605      	mov	r5, r0
 8009318:	b930      	cbnz	r0, 8009328 <_calloc_r+0x24>
 800931a:	4628      	mov	r0, r5
 800931c:	b003      	add	sp, #12
 800931e:	bd30      	pop	{r4, r5, pc}
 8009320:	220c      	movs	r2, #12
 8009322:	6002      	str	r2, [r0, #0]
 8009324:	2500      	movs	r5, #0
 8009326:	e7f8      	b.n	800931a <_calloc_r+0x16>
 8009328:	4621      	mov	r1, r4
 800932a:	f000 f8ad 	bl	8009488 <memset>
 800932e:	e7f4      	b.n	800931a <_calloc_r+0x16>

08009330 <sbrk_aligned>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4e0e      	ldr	r6, [pc, #56]	; (800936c <sbrk_aligned+0x3c>)
 8009334:	460c      	mov	r4, r1
 8009336:	6831      	ldr	r1, [r6, #0]
 8009338:	4605      	mov	r5, r0
 800933a:	b911      	cbnz	r1, 8009342 <sbrk_aligned+0x12>
 800933c:	f000 f8ac 	bl	8009498 <_sbrk_r>
 8009340:	6030      	str	r0, [r6, #0]
 8009342:	4621      	mov	r1, r4
 8009344:	4628      	mov	r0, r5
 8009346:	f000 f8a7 	bl	8009498 <_sbrk_r>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	d00a      	beq.n	8009364 <sbrk_aligned+0x34>
 800934e:	1cc4      	adds	r4, r0, #3
 8009350:	f024 0403 	bic.w	r4, r4, #3
 8009354:	42a0      	cmp	r0, r4
 8009356:	d007      	beq.n	8009368 <sbrk_aligned+0x38>
 8009358:	1a21      	subs	r1, r4, r0
 800935a:	4628      	mov	r0, r5
 800935c:	f000 f89c 	bl	8009498 <_sbrk_r>
 8009360:	3001      	adds	r0, #1
 8009362:	d101      	bne.n	8009368 <sbrk_aligned+0x38>
 8009364:	f04f 34ff 	mov.w	r4, #4294967295
 8009368:	4620      	mov	r0, r4
 800936a:	bd70      	pop	{r4, r5, r6, pc}
 800936c:	24000540 	.word	0x24000540

08009370 <_malloc_r>:
 8009370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009374:	1ccd      	adds	r5, r1, #3
 8009376:	f025 0503 	bic.w	r5, r5, #3
 800937a:	3508      	adds	r5, #8
 800937c:	2d0c      	cmp	r5, #12
 800937e:	bf38      	it	cc
 8009380:	250c      	movcc	r5, #12
 8009382:	2d00      	cmp	r5, #0
 8009384:	4607      	mov	r7, r0
 8009386:	db01      	blt.n	800938c <_malloc_r+0x1c>
 8009388:	42a9      	cmp	r1, r5
 800938a:	d905      	bls.n	8009398 <_malloc_r+0x28>
 800938c:	230c      	movs	r3, #12
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	2600      	movs	r6, #0
 8009392:	4630      	mov	r0, r6
 8009394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009398:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800946c <_malloc_r+0xfc>
 800939c:	f000 f868 	bl	8009470 <__malloc_lock>
 80093a0:	f8d8 3000 	ldr.w	r3, [r8]
 80093a4:	461c      	mov	r4, r3
 80093a6:	bb5c      	cbnz	r4, 8009400 <_malloc_r+0x90>
 80093a8:	4629      	mov	r1, r5
 80093aa:	4638      	mov	r0, r7
 80093ac:	f7ff ffc0 	bl	8009330 <sbrk_aligned>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	4604      	mov	r4, r0
 80093b4:	d155      	bne.n	8009462 <_malloc_r+0xf2>
 80093b6:	f8d8 4000 	ldr.w	r4, [r8]
 80093ba:	4626      	mov	r6, r4
 80093bc:	2e00      	cmp	r6, #0
 80093be:	d145      	bne.n	800944c <_malloc_r+0xdc>
 80093c0:	2c00      	cmp	r4, #0
 80093c2:	d048      	beq.n	8009456 <_malloc_r+0xe6>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	4631      	mov	r1, r6
 80093c8:	4638      	mov	r0, r7
 80093ca:	eb04 0903 	add.w	r9, r4, r3
 80093ce:	f000 f863 	bl	8009498 <_sbrk_r>
 80093d2:	4581      	cmp	r9, r0
 80093d4:	d13f      	bne.n	8009456 <_malloc_r+0xe6>
 80093d6:	6821      	ldr	r1, [r4, #0]
 80093d8:	1a6d      	subs	r5, r5, r1
 80093da:	4629      	mov	r1, r5
 80093dc:	4638      	mov	r0, r7
 80093de:	f7ff ffa7 	bl	8009330 <sbrk_aligned>
 80093e2:	3001      	adds	r0, #1
 80093e4:	d037      	beq.n	8009456 <_malloc_r+0xe6>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	442b      	add	r3, r5
 80093ea:	6023      	str	r3, [r4, #0]
 80093ec:	f8d8 3000 	ldr.w	r3, [r8]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d038      	beq.n	8009466 <_malloc_r+0xf6>
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	42a2      	cmp	r2, r4
 80093f8:	d12b      	bne.n	8009452 <_malloc_r+0xe2>
 80093fa:	2200      	movs	r2, #0
 80093fc:	605a      	str	r2, [r3, #4]
 80093fe:	e00f      	b.n	8009420 <_malloc_r+0xb0>
 8009400:	6822      	ldr	r2, [r4, #0]
 8009402:	1b52      	subs	r2, r2, r5
 8009404:	d41f      	bmi.n	8009446 <_malloc_r+0xd6>
 8009406:	2a0b      	cmp	r2, #11
 8009408:	d917      	bls.n	800943a <_malloc_r+0xca>
 800940a:	1961      	adds	r1, r4, r5
 800940c:	42a3      	cmp	r3, r4
 800940e:	6025      	str	r5, [r4, #0]
 8009410:	bf18      	it	ne
 8009412:	6059      	strne	r1, [r3, #4]
 8009414:	6863      	ldr	r3, [r4, #4]
 8009416:	bf08      	it	eq
 8009418:	f8c8 1000 	streq.w	r1, [r8]
 800941c:	5162      	str	r2, [r4, r5]
 800941e:	604b      	str	r3, [r1, #4]
 8009420:	4638      	mov	r0, r7
 8009422:	f104 060b 	add.w	r6, r4, #11
 8009426:	f000 f829 	bl	800947c <__malloc_unlock>
 800942a:	f026 0607 	bic.w	r6, r6, #7
 800942e:	1d23      	adds	r3, r4, #4
 8009430:	1af2      	subs	r2, r6, r3
 8009432:	d0ae      	beq.n	8009392 <_malloc_r+0x22>
 8009434:	1b9b      	subs	r3, r3, r6
 8009436:	50a3      	str	r3, [r4, r2]
 8009438:	e7ab      	b.n	8009392 <_malloc_r+0x22>
 800943a:	42a3      	cmp	r3, r4
 800943c:	6862      	ldr	r2, [r4, #4]
 800943e:	d1dd      	bne.n	80093fc <_malloc_r+0x8c>
 8009440:	f8c8 2000 	str.w	r2, [r8]
 8009444:	e7ec      	b.n	8009420 <_malloc_r+0xb0>
 8009446:	4623      	mov	r3, r4
 8009448:	6864      	ldr	r4, [r4, #4]
 800944a:	e7ac      	b.n	80093a6 <_malloc_r+0x36>
 800944c:	4634      	mov	r4, r6
 800944e:	6876      	ldr	r6, [r6, #4]
 8009450:	e7b4      	b.n	80093bc <_malloc_r+0x4c>
 8009452:	4613      	mov	r3, r2
 8009454:	e7cc      	b.n	80093f0 <_malloc_r+0x80>
 8009456:	230c      	movs	r3, #12
 8009458:	603b      	str	r3, [r7, #0]
 800945a:	4638      	mov	r0, r7
 800945c:	f000 f80e 	bl	800947c <__malloc_unlock>
 8009460:	e797      	b.n	8009392 <_malloc_r+0x22>
 8009462:	6025      	str	r5, [r4, #0]
 8009464:	e7dc      	b.n	8009420 <_malloc_r+0xb0>
 8009466:	605b      	str	r3, [r3, #4]
 8009468:	deff      	udf	#255	; 0xff
 800946a:	bf00      	nop
 800946c:	2400053c 	.word	0x2400053c

08009470 <__malloc_lock>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__malloc_lock+0x8>)
 8009472:	f000 b84b 	b.w	800950c <__retarget_lock_acquire_recursive>
 8009476:	bf00      	nop
 8009478:	24000680 	.word	0x24000680

0800947c <__malloc_unlock>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__malloc_unlock+0x8>)
 800947e:	f000 b846 	b.w	800950e <__retarget_lock_release_recursive>
 8009482:	bf00      	nop
 8009484:	24000680 	.word	0x24000680

08009488 <memset>:
 8009488:	4402      	add	r2, r0
 800948a:	4603      	mov	r3, r0
 800948c:	4293      	cmp	r3, r2
 800948e:	d100      	bne.n	8009492 <memset+0xa>
 8009490:	4770      	bx	lr
 8009492:	f803 1b01 	strb.w	r1, [r3], #1
 8009496:	e7f9      	b.n	800948c <memset+0x4>

08009498 <_sbrk_r>:
 8009498:	b538      	push	{r3, r4, r5, lr}
 800949a:	4d06      	ldr	r5, [pc, #24]	; (80094b4 <_sbrk_r+0x1c>)
 800949c:	2300      	movs	r3, #0
 800949e:	4604      	mov	r4, r0
 80094a0:	4608      	mov	r0, r1
 80094a2:	602b      	str	r3, [r5, #0]
 80094a4:	f7f7 ffe4 	bl	8001470 <_sbrk>
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	d102      	bne.n	80094b2 <_sbrk_r+0x1a>
 80094ac:	682b      	ldr	r3, [r5, #0]
 80094ae:	b103      	cbz	r3, 80094b2 <_sbrk_r+0x1a>
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	bd38      	pop	{r3, r4, r5, pc}
 80094b4:	2400067c 	.word	0x2400067c

080094b8 <__errno>:
 80094b8:	4b01      	ldr	r3, [pc, #4]	; (80094c0 <__errno+0x8>)
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	2400005c 	.word	0x2400005c

080094c4 <__libc_init_array>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	4d0d      	ldr	r5, [pc, #52]	; (80094fc <__libc_init_array+0x38>)
 80094c8:	4c0d      	ldr	r4, [pc, #52]	; (8009500 <__libc_init_array+0x3c>)
 80094ca:	1b64      	subs	r4, r4, r5
 80094cc:	10a4      	asrs	r4, r4, #2
 80094ce:	2600      	movs	r6, #0
 80094d0:	42a6      	cmp	r6, r4
 80094d2:	d109      	bne.n	80094e8 <__libc_init_array+0x24>
 80094d4:	4d0b      	ldr	r5, [pc, #44]	; (8009504 <__libc_init_array+0x40>)
 80094d6:	4c0c      	ldr	r4, [pc, #48]	; (8009508 <__libc_init_array+0x44>)
 80094d8:	f000 f828 	bl	800952c <_init>
 80094dc:	1b64      	subs	r4, r4, r5
 80094de:	10a4      	asrs	r4, r4, #2
 80094e0:	2600      	movs	r6, #0
 80094e2:	42a6      	cmp	r6, r4
 80094e4:	d105      	bne.n	80094f2 <__libc_init_array+0x2e>
 80094e6:	bd70      	pop	{r4, r5, r6, pc}
 80094e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094ec:	4798      	blx	r3
 80094ee:	3601      	adds	r6, #1
 80094f0:	e7ee      	b.n	80094d0 <__libc_init_array+0xc>
 80094f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f6:	4798      	blx	r3
 80094f8:	3601      	adds	r6, #1
 80094fa:	e7f2      	b.n	80094e2 <__libc_init_array+0x1e>
 80094fc:	080095b8 	.word	0x080095b8
 8009500:	080095b8 	.word	0x080095b8
 8009504:	080095b8 	.word	0x080095b8
 8009508:	080095bc 	.word	0x080095bc

0800950c <__retarget_lock_acquire_recursive>:
 800950c:	4770      	bx	lr

0800950e <__retarget_lock_release_recursive>:
 800950e:	4770      	bx	lr

08009510 <memcpy>:
 8009510:	440a      	add	r2, r1
 8009512:	4291      	cmp	r1, r2
 8009514:	f100 33ff 	add.w	r3, r0, #4294967295
 8009518:	d100      	bne.n	800951c <memcpy+0xc>
 800951a:	4770      	bx	lr
 800951c:	b510      	push	{r4, lr}
 800951e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009526:	4291      	cmp	r1, r2
 8009528:	d1f9      	bne.n	800951e <memcpy+0xe>
 800952a:	bd10      	pop	{r4, pc}

0800952c <_init>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr

08009538 <_fini>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr
