
BMS_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008880  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008b90  08008b90  00018b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  24000000  08008b94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000061c  24000060  08008bf4  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400067c  08008bf4  0002067c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000192e4  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f9d  00000000  00000000  000393b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e8  00000000  00000000  0003c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000102d  00000000  00000000  0003d840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a270  00000000  00000000  0003e86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c52e  00000000  00000000  00078add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177c47  00000000  00000000  0009500b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005d34  00000000  00000000  0020cc54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000080  00000000  00000000  00212988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008b00 	.word	0x08008b00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	08008b00 	.word	0x08008b00

080002d8 <BMS_Init>:
#include "defines.h"
#include "bms.h"
#include "ltc.h"


void BMS_Init(Master **BMS) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
    *BMS = (Master*) calloc(1, sizeof(Master));
 80002e0:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80002e4:	2001      	movs	r0, #1
 80002e6:	f008 faef 	bl	80088c8 <calloc>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]


    LTC_config* config = (LTC_config*) calloc(1, sizeof(LTC_config));
 80002f2:	210c      	movs	r1, #12
 80002f4:	2001      	movs	r0, #1
 80002f6:	f008 fae7 	bl	80088c8 <calloc>
 80002fa:	4603      	mov	r3, r0
 80002fc:	60bb      	str	r3, [r7, #8]

    config->command = (LTC_command*) calloc(1, sizeof(LTC_command));
 80002fe:	2112      	movs	r1, #18
 8000300:	2001      	movs	r0, #1
 8000302:	f008 fae1 	bl	80088c8 <calloc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]

    LTC_Init(config);
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f884 	bl	800041c <LTC_Init>


    for (uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000314:	2300      	movs	r3, #0
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	e016      	b.n	8000348 <BMS_Init+0x70>
        (*BMS)->slaves[i].config = config;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	215c      	movs	r1, #92	; 0x5c
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	3360      	adds	r3, #96	; 0x60
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
        (*BMS)->slaves[i].sensor.ADDR = i;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	215c      	movs	r1, #92	; 0x5c
 8000336:	fb01 f303 	mul.w	r3, r1, r3
 800033a:	4413      	add	r3, r2
 800033c:	3308      	adds	r3, #8
 800033e:	7bfa      	ldrb	r2, [r7, #15]
 8000340:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000342:	7bfb      	ldrb	r3, [r7, #15]
 8000344:	3301      	adds	r3, #1
 8000346:	73fb      	strb	r3, [r7, #15]
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	2b03      	cmp	r3, #3
 800034c:	d9e5      	bls.n	800031a <BMS_Init+0x42>
    }

    LTC_PEC_InitTable();
 800034e:	f000 f89d 	bl	800048c <LTC_PEC_InitTable>
}
 8000352:	bf00      	nop
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <ElectricalManagement>:


void ElectricalManagement(Master *BMS){
 800035a:	b580      	push	{r7, lr}
 800035c:	b084      	sub	sp, #16
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
	LTC_SendBroadcastCommand(BMS->slaves[0].config, LTC_COMMAND_ADCV);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000366:	f44f 7118 	mov.w	r1, #608	; 0x260
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f8d9 	bl	8000522 <LTC_SendBroadcastCommand>
		uint16_t temp_minV = UINT16_MAX;
 8000370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000374:	81fb      	strh	r3, [r7, #14]
		uint16_t temp_maxV = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 800037a:	2300      	movs	r3, #0
 800037c:	72fb      	strb	r3, [r7, #11]
 800037e:	e035      	b.n	80003ec <ElectricalManagement+0x92>
			LTC_Read(LTC_READ_CELL, &(BMS->slaves[i]));
 8000380:	7afb      	ldrb	r3, [r7, #11]
 8000382:	225c      	movs	r2, #92	; 0x5c
 8000384:	fb02 f303 	mul.w	r3, r2, r3
 8000388:	3308      	adds	r3, #8
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	4619      	mov	r1, r3
 8000390:	2001      	movs	r0, #1
 8000392:	f000 f8b5 	bl	8000500 <LTC_Read>
			if(BMS->slaves[i].sensor.V_MIN < temp_minV)
 8000396:	7afb      	ldrb	r3, [r7, #11]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	215c      	movs	r1, #92	; 0x5c
 800039c:	fb01 f303 	mul.w	r3, r1, r3
 80003a0:	4413      	add	r3, r2
 80003a2:	335a      	adds	r3, #90	; 0x5a
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	89fa      	ldrh	r2, [r7, #14]
 80003a8:	429a      	cmp	r2, r3
 80003aa:	d908      	bls.n	80003be <ElectricalManagement+0x64>
				temp_minV = BMS->slaves[i].sensor.V_MIN;
 80003ac:	7afb      	ldrb	r3, [r7, #11]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	215c      	movs	r1, #92	; 0x5c
 80003b2:	fb01 f303 	mul.w	r3, r1, r3
 80003b6:	4413      	add	r3, r2
 80003b8:	335a      	adds	r3, #90	; 0x5a
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	81fb      	strh	r3, [r7, #14]
			if(BMS->slaves[i].sensor.V_MAX > temp_maxV)
 80003be:	7afb      	ldrb	r3, [r7, #11]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	215c      	movs	r1, #92	; 0x5c
 80003c4:	fb01 f303 	mul.w	r3, r1, r3
 80003c8:	4413      	add	r3, r2
 80003ca:	3358      	adds	r3, #88	; 0x58
 80003cc:	881b      	ldrh	r3, [r3, #0]
 80003ce:	89ba      	ldrh	r2, [r7, #12]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d208      	bcs.n	80003e6 <ElectricalManagement+0x8c>
				temp_maxV = BMS->slaves[i].sensor.V_MAX;
 80003d4:	7afb      	ldrb	r3, [r7, #11]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	215c      	movs	r1, #92	; 0x5c
 80003da:	fb01 f303 	mul.w	r3, r1, r3
 80003de:	4413      	add	r3, r2
 80003e0:	3358      	adds	r3, #88	; 0x58
 80003e2:	881b      	ldrh	r3, [r3, #0]
 80003e4:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 80003e6:	7afb      	ldrb	r3, [r7, #11]
 80003e8:	3301      	adds	r3, #1
 80003ea:	72fb      	strb	r3, [r7, #11]
 80003ec:	7afb      	ldrb	r3, [r7, #11]
 80003ee:	2b03      	cmp	r3, #3
 80003f0:	d9c6      	bls.n	8000380 <ElectricalManagement+0x26>
		}
		//BMS->maxCellVoltage = temp_maxV;
		BMS->maxCellVoltage++;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	3301      	adds	r3, #1
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	801a      	strh	r2, [r3, #0]
		BMS->minCellVoltage = temp_minV;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	89fa      	ldrh	r2, [r7, #14]
 8000402:	805a      	strh	r2, [r3, #2]
		BMS->deltaVoltage = BMS->maxCellVoltage - BMS->minCellVoltage;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	881a      	ldrh	r2, [r3, #0]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	885b      	ldrh	r3, [r3, #2]
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	b29a      	uxth	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	809a      	strh	r2, [r3, #4]
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <LTC_Init>:
#define BYTESWAP(word) ((word >> 8) + (word << 8))

extern SPI_HandleTypeDef hspi1;
static uint16_t pec_table[LTC_PEC_TABLE_LENGTH];

void LTC_Init(LTC_config *config) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	config->GPIO   = ALL_GPIOS_READ;
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	7913      	ldrb	r3, [r2, #4]
 8000428:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 800042c:	7113      	strb	r3, [r2, #4]
	config->REFON  = REFERENCE_SHUTS_DOWN_AFTER_CONVERSIONS;
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7913      	ldrb	r3, [r2, #4]
 8000432:	f36f 1386 	bfc	r3, #6, #1
 8000436:	7113      	strb	r3, [r2, #4]
	config->SWTRD  = SOFTWARE_TIMER_ENABLE_PIN_LOW;
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	7913      	ldrb	r3, [r2, #4]
 800043c:	f36f 13c7 	bfc	r3, #7, #1
 8000440:	7113      	strb	r3, [r2, #4]
	config->ADCOPT = SELECT_ADC_MODES_FAST;
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7953      	ldrb	r3, [r2, #5]
 8000446:	f36f 0300 	bfc	r3, #0, #1
 800044a:	7153      	strb	r3, [r2, #5]
	config->VUV    = DEFULT_VOLTAGE;
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	88d3      	ldrh	r3, [r2, #6]
 8000450:	f36f 030b 	bfc	r3, #0, #12
 8000454:	80d3      	strh	r3, [r2, #6]
	config->VOV    = DEFULT_VOLTAGE;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2200      	movs	r2, #0
 800045a:	811a      	strh	r2, [r3, #8]
	config->DCTO   = DISCHARGE_DISABLE;
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	7a93      	ldrb	r3, [r2, #10]
 8000460:	f36f 0303 	bfc	r3, #0, #4
 8000464:	7293      	strb	r3, [r2, #10]
	config->command->MD  = MD_FILTRED;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800046e:	809a      	strh	r2, [r3, #4]
	config->command->DCP = DCP_PERMITED;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2210      	movs	r2, #16
 8000476:	80da      	strh	r2, [r3, #6]
	LTC_SendBroadcastCommand(config, LTC_COMMAND_WRCOMM);
 8000478:	f240 7121 	movw	r1, #1825	; 0x721
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f000 f850 	bl	8000522 <LTC_SendBroadcastCommand>
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <LTC_PEC_InitTable>:

void LTC_PEC_InitTable() {
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	e026      	b.n	80004e6 <LTC_PEC_InitTable+0x5a>
		remainder = i << 7;
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	b29b      	uxth	r3, r3
 800049c:	01db      	lsls	r3, r3, #7
 800049e:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 80004a0:	2308      	movs	r3, #8
 80004a2:	607b      	str	r3, [r7, #4]
 80004a4:	e014      	b.n	80004d0 <LTC_PEC_InitTable+0x44>
			if(remainder & 0x4000) {
 80004a6:	89fb      	ldrh	r3, [r7, #14]
 80004a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d009      	beq.n	80004c4 <LTC_PEC_InitTable+0x38>
				remainder = remainder << 1;
 80004b0:	89fb      	ldrh	r3, [r7, #14]
 80004b2:	005b      	lsls	r3, r3, #1
 80004b4:	81fb      	strh	r3, [r7, #14]
				remainder = remainder ^ 0x4599;
 80004b6:	89fb      	ldrh	r3, [r7, #14]
 80004b8:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 80004bc:	f083 0319 	eor.w	r3, r3, #25
 80004c0:	81fb      	strh	r3, [r7, #14]
 80004c2:	e002      	b.n	80004ca <LTC_PEC_InitTable+0x3e>
			}
			else
				remainder = remainder << 1;
 80004c4:	89fb      	ldrh	r3, [r7, #14]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3b01      	subs	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	dce7      	bgt.n	80004a6 <LTC_PEC_InitTable+0x1a>
		}
		pec_table[i] = remainder&0xFFFF;
 80004d6:	4909      	ldr	r1, [pc, #36]	; (80004fc <LTC_PEC_InitTable+0x70>)
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	89fa      	ldrh	r2, [r7, #14]
 80004dc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	2bff      	cmp	r3, #255	; 0xff
 80004ea:	ddd5      	ble.n	8000498 <LTC_PEC_InitTable+0xc>
	}
}
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2400007c 	.word	0x2400007c

08000500 <LTC_Read>:
	do{
		LTC_SendAddressedCommand(slave, LTC_COMMAND_PLADC);
	}while(!slave->config->ADC_READY);
}

void LTC_Read(uint8_t LTC_READ, Slave *slave){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	6039      	str	r1, [r7, #0]
 800050a:	71fb      	strb	r3, [r7, #7]
	slave->config->command->BROADCAST = false;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2200      	movs	r2, #0
 8000514:	709a      	strb	r2, [r3, #2]

}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LTC_SendBroadcastCommand>:

void LTC_SendBroadcastCommand(LTC_config *config, uint16_t command_name) {
 8000522:	b580      	push	{r7, lr}
 8000524:	b086      	sub	sp, #24
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	460b      	mov	r3, r1
 800052c:	807b      	strh	r3, [r7, #2]
	uint16_t tx_data[4] = {0, 0, 0, 0};
 800052e:	f107 0310 	add.w	r3, r7, #16
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
	uint16_t rx_data[4] = {0, 0, 0, 0};
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
	config->command->NAME = command_name;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	887a      	ldrh	r2, [r7, #2]
 8000548:	801a      	strh	r2, [r3, #0]
	LTC_Communication(config, tx_data, rx_data);
 800054a:	f107 0208 	add.w	r2, r7, #8
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	4619      	mov	r1, r3
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f812 	bl	800057e <LTC_Communication>
}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <LTC_StartTrasmission>:
	default:
		break;
	}
}

void LTC_StartTrasmission(){
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
	LTC_ChipSelect(RESET);
 8000566:	2000      	movs	r0, #0
 8000568:	f000 f82a 	bl	80005c0 <LTC_ChipSelect>
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <LTC_EndTramission>:

void LTC_EndTramission() {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	LTC_ChipSelect(SET);
 8000574:	2001      	movs	r0, #1
 8000576:	f000 f823 	bl	80005c0 <LTC_ChipSelect>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}

0800057e <LTC_Communication>:

void LTC_Communication(LTC_config *config, uint16_t* tx_data, uint16_t* rx_data) {
 800057e:	b580      	push	{r7, lr}
 8000580:	b086      	sub	sp, #24
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	60b9      	str	r1, [r7, #8]
 8000588:	607a      	str	r2, [r7, #4]
	uint16_t command = LTC_MakeCommand(config->command);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4618      	mov	r0, r3
 8000590:	f000 f84d 	bl	800062e <LTC_MakeCommand>
 8000594:	4603      	mov	r3, r0
 8000596:	82fb      	strh	r3, [r7, #22]
	LTC_WakeUp();
 8000598:	f000 f83e 	bl	8000618 <LTC_WakeUp>
	LTC_StartTrasmission();
 800059c:	f7ff ffe1 	bl	8000562 <LTC_StartTrasmission>
	LTC_TransmitCommand(command);
 80005a0:	8afb      	ldrh	r3, [r7, #22]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f914 	bl	80007d0 <LTC_TransmitCommand>
	LTC_TransmitReceive(command, tx_data, rx_data);
 80005a8:	8afb      	ldrh	r3, [r7, #22]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	68b9      	ldr	r1, [r7, #8]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f926 	bl	8000800 <LTC_TransmitReceive>
	LTC_EndTramission();
 80005b4:	f7ff ffdc 	bl	8000570 <LTC_EndTramission>
}
 80005b8:	bf00      	nop
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <LTC_ChipSelect>:
	tx_data[0] = (slave->config->ADCOPT << 8) | (slave->config->SWTRD << 9) | (slave->config->REFON << 10) | (slave->config->GPIO << 11) | (slave->config->VUV);
	tx_data[1] = (slave->config->VUV >> 8) | (slave->config->VOV << 4);
	tx_data[2] |= ((slave->sensor.CELL_TO_DISCHARGE & 0xff) << 8) | ((slave->sensor.CELL_TO_DISCHARGE & 0xf00) >> 8) | ((slave->config->DCTO & 0xf) << 4);
}

void LTC_ChipSelect(uint8_t level) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin , level);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	461a      	mov	r2, r3
 80005ce:	2120      	movs	r1, #32
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <LTC_ChipSelect+0x20>)
 80005d2:	f003 fbbd 	bl	8003d50 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	58020000 	.word	0x58020000

080005e4 <LTC_SPI>:


uint16_t LTC_SPI(uint16_t Tx_data) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
	uint16_t Rx_data = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &Tx_data, (uint8_t *) &Rx_data, 1, 50);
 80005f2:	f107 020e 	add.w	r2, r7, #14
 80005f6:	1db9      	adds	r1, r7, #6
 80005f8:	2332      	movs	r3, #50	; 0x32
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2301      	movs	r3, #1
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <LTC_SPI+0x30>)
 8000600:	f006 ff6e 	bl	80074e0 <HAL_SPI_TransmitReceive>
	return(BYTESWAP(Rx_data));
 8000604:	89fb      	ldrh	r3, [r7, #14]
 8000606:	ba5b      	rev16	r3, r3
 8000608:	b29b      	uxth	r3, r3
}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	240003cc 	.word	0x240003cc

08000618 <LTC_WakeUp>:

void LTC_WakeUp() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	LTC_StartTrasmission();
 800061c:	f7ff ffa1 	bl	8000562 <LTC_StartTrasmission>
	LTC_SPI(0);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff ffdf 	bl	80005e4 <LTC_SPI>
	LTC_EndTramission();
 8000626:	f7ff ffa3 	bl	8000570 <LTC_EndTramission>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}

0800062e <LTC_MakeCommand>:

uint16_t LTC_MakeCommand(LTC_command *command) {
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
	switch(command->NAME) {
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	f240 426f 	movw	r2, #1135	; 0x46f
 800063e:	4293      	cmp	r3, r2
 8000640:	d06d      	beq.n	800071e <LTC_MakeCommand+0xf0>
 8000642:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000646:	da75      	bge.n	8000734 <LTC_MakeCommand+0x106>
 8000648:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 800064c:	d05c      	beq.n	8000708 <LTC_MakeCommand+0xda>
 800064e:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 8000652:	dc6f      	bgt.n	8000734 <LTC_MakeCommand+0x106>
 8000654:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000658:	d04b      	beq.n	80006f2 <LTC_MakeCommand+0xc4>
 800065a:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800065e:	dc69      	bgt.n	8000734 <LTC_MakeCommand+0x106>
 8000660:	f240 420f 	movw	r2, #1039	; 0x40f
 8000664:	4293      	cmp	r3, r2
 8000666:	d039      	beq.n	80006dc <LTC_MakeCommand+0xae>
 8000668:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800066c:	da62      	bge.n	8000734 <LTC_MakeCommand+0x106>
 800066e:	f240 4207 	movw	r2, #1031	; 0x407
 8000672:	4293      	cmp	r3, r2
 8000674:	d032      	beq.n	80006dc <LTC_MakeCommand+0xae>
 8000676:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800067a:	da5b      	bge.n	8000734 <LTC_MakeCommand+0x106>
 800067c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000680:	d00a      	beq.n	8000698 <LTC_MakeCommand+0x6a>
 8000682:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000686:	dc55      	bgt.n	8000734 <LTC_MakeCommand+0x106>
 8000688:	f240 2207 	movw	r2, #519	; 0x207
 800068c:	4293      	cmp	r3, r2
 800068e:	d025      	beq.n	80006dc <LTC_MakeCommand+0xae>
 8000690:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8000694:	d00f      	beq.n	80006b6 <LTC_MakeCommand+0x88>
 8000696:	e04d      	b.n	8000734 <LTC_MakeCommand+0x106>
		case LTC_COMMAND_ADCV:
			return command->NAME | command->MD | command->DCP | command->CH;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	889b      	ldrh	r3, [r3, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	88db      	ldrh	r3, [r3, #6]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	891b      	ldrh	r3, [r3, #8]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	e040      	b.n	8000738 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADOW:
			return command->NAME | command->MD | command->PUP | command->DCP | command->CH;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	881a      	ldrh	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	889b      	ldrh	r3, [r3, #4]
 80006be:	4313      	orrs	r3, r2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	89db      	ldrh	r3, [r3, #14]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	88db      	ldrh	r3, [r3, #6]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	891b      	ldrh	r3, [r3, #8]
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b29b      	uxth	r3, r3
 80006da:	e02d      	b.n	8000738 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_CVST:
		case LTC_COMMAND_AXST:
		case LTC_COMMAND_STATST:
			return command->NAME | command->MD | command->ST;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	889b      	ldrh	r3, [r3, #4]
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	8a1b      	ldrh	r3, [r3, #16]
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	e022      	b.n	8000738 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADAX	:
			return command->NAME | command->MD | command->CHG;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	881a      	ldrh	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	889b      	ldrh	r3, [r3, #4]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	895b      	ldrh	r3, [r3, #10]
 8000702:	4313      	orrs	r3, r2
 8000704:	b29b      	uxth	r3, r3
 8000706:	e017      	b.n	8000738 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADSTAT	:
			return command->NAME | command->MD | command->CHST;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	881a      	ldrh	r2, [r3, #0]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	4313      	orrs	r3, r2
 8000712:	b29a      	uxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	899b      	ldrh	r3, [r3, #12]
 8000718:	4313      	orrs	r3, r2
 800071a:	b29b      	uxth	r3, r3
 800071c:	e00c      	b.n	8000738 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADCVAX	:
			return command->NAME | command->MD | command->CHG;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	889b      	ldrh	r3, [r3, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	b29a      	uxth	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	895b      	ldrh	r3, [r3, #10]
 800072e:	4313      	orrs	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	e001      	b.n	8000738 <LTC_MakeCommand+0x10a>
			break;

		default:
			return command->NAME;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	881b      	ldrh	r3, [r3, #0]
			break;
	}
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <LTC_PEC>:

uint16_t LTC_PEC(uint16_t *data , uint8_t len) {
 8000744:	b480      	push	{r7}
 8000746:	b087      	sub	sp, #28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	460b      	mov	r3, r1
 800074e:	70fb      	strb	r3, [r7, #3]
	int32_t remainder, address;
	remainder = LTC_PEC_SEED;
 8000750:	2310      	movs	r3, #16
 8000752:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	74fb      	strb	r3, [r7, #19]
 8000758:	e02a      	b.n	80007b0 <LTC_PEC+0x6c>
		address   = ((remainder >> 7) ^ ((data[i] >> 8) & 0xFF)) & 0xFF; //calculate PEC table address
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	11da      	asrs	r2, r3, #7
 800075e:	7cfb      	ldrb	r3, [r7, #19]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	440b      	add	r3, r1
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4053      	eors	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	4914      	ldr	r1, [pc, #80]	; (80007cc <LTC_PEC+0x88>)
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000780:	4053      	eors	r3, r2
 8000782:	617b      	str	r3, [r7, #20]
		address   = ((remainder >> 7) ^ (data[i] & 0xFF)) & 0xFF;    	 //calculate PEC table address
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	11da      	asrs	r2, r3, #7
 8000788:	7cfb      	ldrb	r3, [r7, #19]
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	440b      	add	r3, r1
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	b2db      	uxtb	r3, r3
 8000794:	4053      	eors	r3, r2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	490b      	ldr	r1, [pc, #44]	; (80007cc <LTC_PEC+0x88>)
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007a6:	4053      	eors	r3, r2
 80007a8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	3301      	adds	r3, #1
 80007ae:	74fb      	strb	r3, [r7, #19]
 80007b0:	7cfa      	ldrb	r2, [r7, #19]
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3d0      	bcc.n	800075a <LTC_PEC+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	b29b      	uxth	r3, r3
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	371c      	adds	r7, #28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	2400007c 	.word	0x2400007c

080007d0 <LTC_TransmitCommand>:

void LTC_TransmitCommand(uint16_t command) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	uint16_t pec = LTC_PEC(&command, 1);
 80007da:	1dbb      	adds	r3, r7, #6
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffb0 	bl	8000744 <LTC_PEC>
 80007e4:	4603      	mov	r3, r0
 80007e6:	81fb      	strh	r3, [r7, #14]
	LTC_SPI(command);
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fefa 	bl	80005e4 <LTC_SPI>
	LTC_SPI(pec);
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fef6 	bl	80005e4 <LTC_SPI>
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <LTC_TransmitReceive>:

void LTC_TransmitReceive(uint16_t command, uint16_t* tx_data, uint16_t* rx_data) {
 8000800:	b590      	push	{r4, r7, lr}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	81fb      	strh	r3, [r7, #14]
	if((command & 0x07FF) == LTC_COMMAND_WRCFGA) {
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000814:	2b01      	cmp	r3, #1
 8000816:	d109      	bne.n	800082c <LTC_TransmitReceive+0x2c>
		uint16_t pec = LTC_PEC(tx_data, 3);
 8000818:	2103      	movs	r1, #3
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff ff92 	bl	8000744 <LTC_PEC>
 8000820:	4603      	mov	r3, r0
 8000822:	82bb      	strh	r3, [r7, #20]
		tx_data[3] = pec;
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	3306      	adds	r3, #6
 8000828:	8aba      	ldrh	r2, [r7, #20]
 800082a:	801a      	strh	r2, [r3, #0]
	}
	if((tx_data[0] & 0x07FF) < LTC_COMMAND_ADCV) {
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000834:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000838:	da16      	bge.n	8000868 <LTC_TransmitReceive+0x68>
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 800083a:	2300      	movs	r3, #0
 800083c:	75fb      	strb	r3, [r7, #23]
 800083e:	e010      	b.n	8000862 <LTC_TransmitReceive+0x62>
			rx_data[i] = LTC_SPI(tx_data[i]);
 8000840:	7dfb      	ldrb	r3, [r7, #23]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	4413      	add	r3, r2
 8000848:	8819      	ldrh	r1, [r3, #0]
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	18d4      	adds	r4, r2, r3
 8000852:	4608      	mov	r0, r1
 8000854:	f7ff fec6 	bl	80005e4 <LTC_SPI>
 8000858:	4603      	mov	r3, r0
 800085a:	8023      	strh	r3, [r4, #0]
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 800085c:	7dfb      	ldrb	r3, [r7, #23]
 800085e:	3301      	adds	r3, #1
 8000860:	75fb      	strb	r3, [r7, #23]
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	2b03      	cmp	r3, #3
 8000866:	d9eb      	bls.n	8000840 <LTC_TransmitReceive+0x40>
		}
	}
}
 8000868:	bf00      	nop
 800086a:	371c      	adds	r7, #28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 feb5 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f817 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 fa8b 	bl	8000d98 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000882:	f000 f899 	bl	80009b8 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8000886:	f000 f8fd 	bl	8000a84 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800088a:	f000 f99f 	bl	8000bcc <MX_SPI1_Init>
  MX_DMA_Init();
 800088e:	f000 fa3f 	bl	8000d10 <MX_DMA_Init>
  MX_I2C1_Init();
 8000892:	f000 f95b 	bl	8000b4c <MX_I2C1_Init>
  MX_USART1_Init();
 8000896:	f000 f9ef 	bl	8000c78 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  Master* BMS;
  BMS_Init(&BMS);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd1b 	bl	80002d8 <BMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ElectricalManagement(BMS);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fd58 	bl	800035a <ElectricalManagement>
 80008aa:	e7fa      	b.n	80008a2 <main+0x32>

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	; 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	224c      	movs	r2, #76	; 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f008 f8ce 	bl	8008a5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f008 f8c8 	bl	8008a5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f003 fb81 	bl	8003fd4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b35      	ldr	r3, [pc, #212]	; (80009ac <SystemClock_Config+0x100>)
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	4a34      	ldr	r2, [pc, #208]	; (80009ac <SystemClock_Config+0x100>)
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008e2:	4b32      	ldr	r3, [pc, #200]	; (80009ac <SystemClock_Config+0x100>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <SystemClock_Config+0x104>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008f4:	4a2e      	ldr	r2, [pc, #184]	; (80009b0 <SystemClock_Config+0x104>)
 80008f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <SystemClock_Config+0x104>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000908:	bf00      	nop
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemClock_Config+0x104>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000916:	d1f8      	bne.n	800090a <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <SystemClock_Config+0x108>)
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	4a25      	ldr	r2, [pc, #148]	; (80009b4 <SystemClock_Config+0x108>)
 800091e:	f023 0303 	bic.w	r3, r3, #3
 8000922:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	2302      	movs	r3, #2
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000928:	2301      	movs	r3, #1
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092c:	2340      	movs	r3, #64	; 0x40
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000930:	2302      	movs	r3, #2
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000934:	2300      	movs	r3, #0
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800093c:	2309      	movs	r3, #9
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000944:	2303      	movs	r3, #3
 8000946:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800094c:	230c      	movs	r3, #12
 800094e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000950:	2302      	movs	r3, #2
 8000952:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000958:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fb72 	bl	8004048 <HAL_RCC_OscConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800096a:	f000 fb03 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096e:	233f      	movs	r3, #63	; 0x3f
 8000970:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000982:	2340      	movs	r3, #64	; 0x40
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2101      	movs	r1, #1
 8000994:	4618      	mov	r0, r3
 8000996:	f003 ff85 	bl	80048a4 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80009a0:	f000 fae8 	bl	8000f74 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3770      	adds	r7, #112	; 0x70
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	58000400 	.word	0x58000400
 80009b0:	58024800 	.word	0x58024800
 80009b4:	58024400 	.word	0x58024400

080009b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009d2:	4a29      	ldr	r2, [pc, #164]	; (8000a78 <MX_ADC2_Init+0xc0>)
 80009d4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80009dc:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009e2:	4b24      	ldr	r3, [pc, #144]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_ADC2_Init+0xbc>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a2c:	4811      	ldr	r0, [pc, #68]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a2e:	f001 f803 	bl	8001a38 <HAL_ADC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000a38:	f000 fa9c 	bl	8000f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_ADC2_Init+0xc4>)
 8000a3e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a40:	2306      	movs	r3, #6
 8000a42:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_ADC2_Init+0xc8>)
 8000a4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_ADC2_Init+0xbc>)
 8000a5e:	f001 f98d 	bl	8001d7c <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000a68:	f000 fa84 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2400027c 	.word	0x2400027c
 8000a78:	40022100 	.word	0x40022100
 8000a7c:	2a000400 	.word	0x2a000400
 8000a80:	47ff0000 	.word	0x47ff0000

08000a84 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000a8a:	4a2f      	ldr	r2, [pc, #188]	; (8000b48 <MX_FDCAN1_Init+0xc4>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aa6:	4b27      	ldr	r3, [pc, #156]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000aac:	4b25      	ldr	r3, [pc, #148]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000aae:	2210      	movs	r2, #16
 8000ab0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ab2:	4b24      	ldr	r3, [pc, #144]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ab8:	4b22      	ldr	r3, [pc, #136]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000af6:	2204      	movs	r2, #4
 8000af8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b0e:	2204      	movs	r2, #4
 8000b10:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_FDCAN1_Init+0xc0>)
 8000b32:	f002 fbf9 	bl	8003328 <HAL_FDCAN_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b3c:	f000 fa1a 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	240002e0 	.word	0x240002e0
 8000b48:	4000a000 	.word	0x4000a000

08000b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b52:	4a1c      	ldr	r2, [pc, #112]	; (8000bc4 <MX_I2C1_Init+0x78>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <MX_I2C1_Init+0x7c>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b86:	480e      	ldr	r0, [pc, #56]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b88:	f003 f8fc 	bl	8003d84 <HAL_I2C_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b92:	f000 f9ef 	bl	8000f74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b96:	2100      	movs	r1, #0
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000b9a:	f003 f983 	bl	8003ea4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ba4:	f000 f9e6 	bl	8000f74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_I2C1_Init+0x74>)
 8000bac:	f003 f9c5 	bl	8003f3a <HAL_I2CEx_ConfigDigitalFilter>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bb6:	f000 f9dd 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	24000380 	.word	0x24000380
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	00707cbb 	.word	0x00707cbb

08000bcc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bd0:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000bd2:	4a28      	ldr	r2, [pc, #160]	; (8000c74 <MX_SPI1_Init+0xa8>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000bd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bde:	4b24      	ldr	r3, [pc, #144]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be4:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000be6:	2203      	movs	r2, #3
 8000be8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000bf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c22:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_SPI1_Init+0xa4>)
 8000c5c:	f006 fb3a 	bl	80072d4 <HAL_SPI_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c66:	f000 f985 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	240003cc 	.word	0x240003cc
 8000c74:	40013000 	.word	0x40013000

08000c78 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_USART1_Init+0x90>)
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <MX_USART1_Init+0x94>)
 8000c80:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_USART1_Init+0x90>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_USART1_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_USART1_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_USART1_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_USART1_Init+0x90>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_USART1_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_USART1_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_USART1_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_USART1_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_USART1_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000cc0:	4811      	ldr	r0, [pc, #68]	; (8000d08 <MX_USART1_Init+0x90>)
 8000cc2:	f006 ff1e 	bl	8007b02 <HAL_USART_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000ccc:	f000 f952 	bl	8000f74 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_USART1_Init+0x90>)
 8000cd4:	f007 fd32 	bl	800873c <HAL_USARTEx_SetTxFifoThreshold>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000cde:	f000 f949 	bl	8000f74 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <MX_USART1_Init+0x90>)
 8000ce6:	f007 fd67 	bl	80087b8 <HAL_USARTEx_SetRxFifoThreshold>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000cf0:	f000 f940 	bl	8000f74 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_USART1_Init+0x90>)
 8000cf6:	f007 fce8 	bl	80086ca <HAL_USARTEx_DisableFifoMode>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000d00:	f000 f938 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	24000454 	.word	0x24000454
 8000d0c:	40011000 	.word	0x40011000

08000d10 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_DMA_Init+0x7c>)
 8000d28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d36:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <MX_DMA_Init+0x84>)
 8000d38:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d52:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000d72:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_DMA_Init+0x80>)
 8000d74:	f001 fd40 	bl	80027f8 <HAL_DMA_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_DMA_Init+0x72>
  {
    Error_Handler( );
 8000d7e:	f000 f8f9 	bl	8000f74 <Error_Handler>
  }

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400
 8000d90:	240004b4 	.word	0x240004b4
 8000d94:	40020010 	.word	0x40020010

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	; 0x30
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b6c      	ldr	r3, [pc, #432]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	4a6a      	ldr	r2, [pc, #424]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dcc:	4b64      	ldr	r3, [pc, #400]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	4a63      	ldr	r2, [pc, #396]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ddc:	4b60      	ldr	r3, [pc, #384]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b5d      	ldr	r3, [pc, #372]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	4a5b      	ldr	r2, [pc, #364]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000df2:	f043 0301 	orr.w	r3, r3, #1
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfa:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e08:	4b55      	ldr	r3, [pc, #340]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	4a54      	ldr	r2, [pc, #336]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e10:	f043 0310 	orr.w	r3, r3, #16
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e18:	4b51      	ldr	r3, [pc, #324]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b4e      	ldr	r3, [pc, #312]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	4a4c      	ldr	r2, [pc, #304]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e36:	4b4a      	ldr	r3, [pc, #296]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	4a45      	ldr	r2, [pc, #276]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e4c:	f043 0308 	orr.w	r3, r3, #8
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <MX_GPIO_Init+0x1c8>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5a:	f003 0308 	and.w	r3, r3, #8
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	483f      	ldr	r0, [pc, #252]	; (8000f64 <MX_GPIO_Init+0x1cc>)
 8000e68:	f002 ff72 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_ENABLE_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2190      	movs	r1, #144	; 0x90
 8000e70:	483d      	ldr	r0, [pc, #244]	; (8000f68 <MX_GPIO_Init+0x1d0>)
 8000e72:	f002 ff6d 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_GPIO_Pin PC15_GPIO_Pin PC14_GPIO_Pin */
  GPIO_InitStruct.Pin = PC13_GPIO_Pin|PC15_GPIO_Pin|PC14_GPIO_Pin;
 8000e76:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4838      	ldr	r0, [pc, #224]	; (8000f6c <MX_GPIO_Init+0x1d4>)
 8000e8c:	f002 fdb0 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4832      	ldr	r0, [pc, #200]	; (8000f6c <MX_GPIO_Init+0x1d4>)
 8000ea4:	f002 fda4 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Eletrobuild_Pin */
  GPIO_InitStruct.Pin = Reset_Eletrobuild_Pin;
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reset_Eletrobuild_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	482c      	ldr	r0, [pc, #176]	; (8000f70 <MX_GPIO_Init+0x1d8>)
 8000ebe:	f002 fd97 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4822      	ldr	r0, [pc, #136]	; (8000f68 <MX_GPIO_Init+0x1d0>)
 8000ee0:	f002 fd86 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eea:	2312      	movs	r3, #18
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4819      	ldr	r0, [pc, #100]	; (8000f68 <MX_GPIO_Init+0x1d0>)
 8000f02:	f002 fd75 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_GPIO_Init+0x1cc>)
 8000f1e:	f002 fd67 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_ENABLE_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = CHARGE_ENABLE_Pin|ERROR_LED_Pin;
 8000f22:	2390      	movs	r3, #144	; 0x90
 8000f24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	2301      	movs	r3, #1
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <MX_GPIO_Init+0x1d0>)
 8000f3a:	f002 fd59 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_AUX_MINUS_Pin AIR_AUX_PLUS_Pin */
  GPIO_InitStruct.Pin = AIR_AUX_MINUS_Pin|AIR_AUX_PLUS_Pin;
 8000f3e:	2360      	movs	r3, #96	; 0x60
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_GPIO_Init+0x1d0>)
 8000f52:	f002 fd4d 	bl	80039f0 <HAL_GPIO_Init>

}
 8000f56:	bf00      	nop
 8000f58:	3730      	adds	r7, #48	; 0x30
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	58024400 	.word	0x58024400
 8000f64:	58020c00 	.word	0x58020c00
 8000f68:	58020400 	.word	0x58020400
 8000f6c:	58020800 	.word	0x58020800
 8000f70:	58021000 	.word	0x58021000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f8c:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f8e:	f043 0302 	orr.w	r3, r3, #2
 8000f92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_MspInit+0x30>)
 8000f98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f9c:	f003 0302 	and.w	r3, r3, #2
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	58024400 	.word	0x58024400

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0b8      	sub	sp, #224	; 0xe0
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	22bc      	movs	r2, #188	; 0xbc
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fd41 	bl	8008a5c <memset>
  if(hadc->Instance==ADC2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a2a      	ldr	r2, [pc, #168]	; (8001088 <HAL_ADC_MspInit+0xd4>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d14d      	bne.n	8001080 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000fe8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ffe:	23c0      	movs	r3, #192	; 0xc0
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001002:	2320      	movs	r3, #32
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072.0;
 8001006:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	4618      	mov	r0, r3
 8001018:	f003 ffd0 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001022:	f7ff ffa7 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001026:	4b19      	ldr	r3, [pc, #100]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001028:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800102c:	4a17      	ldr	r2, [pc, #92]	; (800108c <HAL_ADC_MspInit+0xd8>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4a10      	ldr	r2, [pc, #64]	; (800108c <HAL_ADC_MspInit+0xd8>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_ADC_MspInit+0xd8>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_INP10
    PC1     ------> ADC2_INN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001062:	2303      	movs	r3, #3
 8001064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_ADC_MspInit+0xdc>)
 800107c:	f002 fcb8 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	37e0      	adds	r7, #224	; 0xe0
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40022100 	.word	0x40022100
 800108c:	58024400 	.word	0x58024400
 8001090:	58020800 	.word	0x58020800

08001094 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0b8      	sub	sp, #224	; 0xe0
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	22bc      	movs	r2, #188	; 0xbc
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f007 fcd1 	bl	8008a5c <memset>
  if(hfdcan->Instance==FDCAN1)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <HAL_FDCAN_MspInit+0xc0>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d143      	bne.n	800114c <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 ff71 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80010e0:	f7ff ff48 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80010e4:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HAL_FDCAN_MspInit+0xc4>)
 80010e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010ea:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_FDCAN_MspInit+0xc4>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010f4:	4b18      	ldr	r3, [pc, #96]	; (8001158 <HAL_FDCAN_MspInit+0xc4>)
 80010f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_FDCAN_MspInit+0xc4>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	4a13      	ldr	r2, [pc, #76]	; (8001158 <HAL_FDCAN_MspInit+0xc4>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_FDCAN_MspInit+0xc4>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_Rx_Pin|CAN_Tx_Pin;
 8001120:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001124:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800113a:	2309      	movs	r3, #9
 800113c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001144:	4619      	mov	r1, r3
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <HAL_FDCAN_MspInit+0xc8>)
 8001148:	f002 fc52 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	37e0      	adds	r7, #224	; 0xe0
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	4000a000 	.word	0x4000a000
 8001158:	58024400 	.word	0x58024400
 800115c:	58020000 	.word	0x58020000

08001160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0b8      	sub	sp, #224	; 0xe0
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	22bc      	movs	r2, #188	; 0xbc
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f007 fc6b 	bl	8008a5c <memset>
  if(hi2c->Instance==I2C1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a25      	ldr	r2, [pc, #148]	; (8001220 <HAL_I2C_MspInit+0xc0>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d142      	bne.n	8001216 <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001190:	2308      	movs	r3, #8
 8001192:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119a:	f107 0310 	add.w	r3, r7, #16
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 ff0c 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80011aa:	f7ff fee3 	bl	8000f74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_I2C_MspInit+0xc4>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_I2C_MspInit+0xc4>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_I2C_MspInit+0xc4>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d4:	2312      	movs	r3, #18
 80011d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e6:	2304      	movs	r3, #4
 80011e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f0:	4619      	mov	r1, r3
 80011f2:	480d      	ldr	r0, [pc, #52]	; (8001228 <HAL_I2C_MspInit+0xc8>)
 80011f4:	f002 fbfc 	bl	80039f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_I2C_MspInit+0xc4>)
 80011fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011fe:	4a09      	ldr	r2, [pc, #36]	; (8001224 <HAL_I2C_MspInit+0xc4>)
 8001200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001204:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_I2C_MspInit+0xc4>)
 800120a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	37e0      	adds	r7, #224	; 0xe0
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40005400 	.word	0x40005400
 8001224:	58024400 	.word	0x58024400
 8001228:	58020400 	.word	0x58020400

0800122c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b0b8      	sub	sp, #224	; 0xe0
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	22bc      	movs	r2, #188	; 0xbc
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f007 fc05 	bl	8008a5c <memset>
  if(hspi->Instance==SPI1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <HAL_SPI_MspInit+0xbc>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d141      	bne.n	80012e0 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001262:	2300      	movs	r3, #0
 8001264:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4618      	mov	r0, r3
 800126c:	f003 fea6 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001276:	f7ff fe7d 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800127a:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <HAL_SPI_MspInit+0xc0>)
 800127c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001280:	4a1a      	ldr	r2, [pc, #104]	; (80012ec <HAL_SPI_MspInit+0xc0>)
 8001282:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800128a:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_SPI_MspInit+0xc0>)
 800128c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_SPI_MspInit+0xc0>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_SPI_MspInit+0xc0>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <HAL_SPI_MspInit+0xc0>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012b6:	23e0      	movs	r3, #224	; 0xe0
 80012b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ce:	2305      	movs	r3, #5
 80012d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_SPI_MspInit+0xc4>)
 80012dc:	f002 fb88 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	37e0      	adds	r7, #224	; 0xe0
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013000 	.word	0x40013000
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020000 	.word	0x58020000

080012f4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b0b8      	sub	sp, #224	; 0xe0
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	22bc      	movs	r2, #188	; 0xbc
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fba1 	bl	8008a5c <memset>
  if(husart->Instance==USART1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_USART_MspInit+0xc0>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d142      	bne.n	80013aa <HAL_USART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001324:	2301      	movs	r3, #1
 8001326:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001328:	2300      	movs	r3, #0
 800132a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4618      	mov	r0, r3
 8001334:	f003 fe42 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 800133e:	f7ff fe19 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_USART_MspInit+0xc4>)
 8001344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <HAL_USART_MspInit+0xc4>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_USART_MspInit+0xc4>)
 8001354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_USART_MspInit+0xc4>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_USART_MspInit+0xc4>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_USART_MspInit+0xc4>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART1_Tx_Pin|USART1_Rx_Pin;
 800137e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001398:	2307      	movs	r3, #7
 800139a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_USART_MspInit+0xc8>)
 80013a6:	f002 fb23 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	37e0      	adds	r7, #224	; 0xe0
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40011000 	.word	0x40011000
 80013b8:	58024400 	.word	0x58024400
 80013bc:	58020000 	.word	0x58020000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f95c 	bl	80016c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f007 fb22 	bl	8008a8c <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24080000 	.word	0x24080000
 8001474:	00000400 	.word	0x00000400
 8001478:	2400052c 	.word	0x2400052c
 800147c:	24000680 	.word	0x24000680

08001480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001484:	4b37      	ldr	r3, [pc, #220]	; (8001564 <SystemInit+0xe4>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a36      	ldr	r2, [pc, #216]	; (8001564 <SystemInit+0xe4>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001494:	4b34      	ldr	r3, [pc, #208]	; (8001568 <SystemInit+0xe8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	2b06      	cmp	r3, #6
 800149e:	d807      	bhi.n	80014b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <SystemInit+0xe8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 030f 	bic.w	r3, r3, #15
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <SystemInit+0xe8>)
 80014aa:	f043 0307 	orr.w	r3, r3, #7
 80014ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014b0:	4b2e      	ldr	r3, [pc, #184]	; (800156c <SystemInit+0xec>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a2d      	ldr	r2, [pc, #180]	; (800156c <SystemInit+0xec>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <SystemInit+0xec>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014c2:	4b2a      	ldr	r3, [pc, #168]	; (800156c <SystemInit+0xec>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	4929      	ldr	r1, [pc, #164]	; (800156c <SystemInit+0xec>)
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <SystemInit+0xf0>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <SystemInit+0xe8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <SystemInit+0xe8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 030f 	bic.w	r3, r3, #15
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <SystemInit+0xe8>)
 80014e4:	f043 0307 	orr.w	r3, r3, #7
 80014e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <SystemInit+0xec>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <SystemInit+0xec>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <SystemInit+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <SystemInit+0xec>)
 80014fe:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <SystemInit+0xf4>)
 8001500:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <SystemInit+0xec>)
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <SystemInit+0xf8>)
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <SystemInit+0xec>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <SystemInit+0xfc>)
 800150c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <SystemInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <SystemInit+0xec>)
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <SystemInit+0xfc>)
 8001518:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <SystemInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <SystemInit+0xec>)
 8001522:	4a16      	ldr	r2, [pc, #88]	; (800157c <SystemInit+0xfc>)
 8001524:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <SystemInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <SystemInit+0xec>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <SystemInit+0xec>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <SystemInit+0xec>)
 800153a:	2200      	movs	r2, #0
 800153c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <SystemInit+0x100>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <SystemInit+0x104>)
 8001544:	4013      	ands	r3, r2
 8001546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800154a:	d202      	bcs.n	8001552 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <SystemInit+0x108>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <SystemInit+0x10c>)
 8001554:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001558:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	52002000 	.word	0x52002000
 800156c:	58024400 	.word	0x58024400
 8001570:	eaf6ed7f 	.word	0xeaf6ed7f
 8001574:	02020200 	.word	0x02020200
 8001578:	01ff0000 	.word	0x01ff0000
 800157c:	01010280 	.word	0x01010280
 8001580:	5c001000 	.word	0x5c001000
 8001584:	ffff0000 	.word	0xffff0000
 8001588:	51008108 	.word	0x51008108
 800158c:	52004000 	.word	0x52004000

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001594:	f7ff ff74 	bl	8001480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b0:	4c0a      	ldr	r4, [pc, #40]	; (80015dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f007 fa6b 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff f955 	bl	8000870 <main>
  bx  lr
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015d0:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80015d4:	08008b94 	.word	0x08008b94
  ldr r2, =_sbss
 80015d8:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80015dc:	2400067c 	.word	0x2400067c

080015e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC3_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f001 f8d2 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015f0:	f003 fb0e 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_Init+0x68>)
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	4913      	ldr	r1, [pc, #76]	; (8001650 <HAL_Init+0x6c>)
 8001602:	5ccb      	ldrb	r3, [r1, r3]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800160e:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_Init+0x68>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	4a0e      	ldr	r2, [pc, #56]	; (8001650 <HAL_Init+0x6c>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	f003 031f 	and.w	r3, r3, #31
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_Init+0x70>)
 8001626:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001628:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_Init+0x74>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800162e:	200f      	movs	r0, #15
 8001630:	f000 f814 	bl	800165c <HAL_InitTick>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e002      	b.n	8001644 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800163e:	f7ff fc9f 	bl	8000f80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	58024400 	.word	0x58024400
 8001650:	08008b64 	.word	0x08008b64
 8001654:	24000004 	.word	0x24000004
 8001658:	24000000 	.word	0x24000000

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <HAL_InitTick+0x60>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e021      	b.n	80016b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_InitTick+0x64>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_InitTick+0x60>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f8a9 	bl	80027de <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f001 f881 	bl	80027aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	; (80016c4 <HAL_InitTick+0x68>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2400000c 	.word	0x2400000c
 80016c0:	24000000 	.word	0x24000000
 80016c4:	24000008 	.word	0x24000008

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	2400000c 	.word	0x2400000c
 80016ec:	24000530 	.word	0x24000530

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	24000530 	.word	0x24000530

08001708 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetREVID+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	0c1b      	lsrs	r3, r3, #16
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	5c001000 	.word	0x5c001000

08001720 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	431a      	orrs	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	609a      	str	r2, [r3, #8]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
 800174e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
 8001794:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3360      	adds	r3, #96	; 0x60
 800179a:	461a      	mov	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017bc:	bf00      	nop
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	fa01 f303 	lsl.w	r3, r1, r3
 80017e8:	431a      	orrs	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	611a      	str	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b087      	sub	sp, #28
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3360      	adds	r3, #96	; 0x60
 800180a:	461a      	mov	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	431a      	orrs	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	601a      	str	r2, [r3, #0]
  }
}
 8001824:	bf00      	nop
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3330      	adds	r3, #48	; 0x30
 8001840:	461a      	mov	r2, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	4413      	add	r3, r2
 800184e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	211f      	movs	r1, #31
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	0e9b      	lsrs	r3, r3, #26
 8001868:	f003 011f 	and.w	r1, r3, #31
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	431a      	orrs	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800187c:	bf00      	nop
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3314      	adds	r3, #20
 8001898:	461a      	mov	r2, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	0e5b      	lsrs	r3, r3, #25
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	0d1b      	lsrs	r3, r3, #20
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2107      	movs	r1, #7
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	401a      	ands	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	0d1b      	lsrs	r3, r3, #20
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	431a      	orrs	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018d2:	bf00      	nop
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0318 	and.w	r3, r3, #24
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001904:	40d9      	lsrs	r1, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	400b      	ands	r3, r1
 800190a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	000fffff 	.word	0x000fffff

08001928 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	5fffffc0 	.word	0x5fffffc0

0800194c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800195c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001960:	d101      	bne.n	8001966 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <LL_ADC_EnableInternalRegulator+0x24>)
 8001982:	4013      	ands	r3, r2
 8001984:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	6fffffc0 	.word	0x6fffffc0

0800199c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019b0:	d101      	bne.n	80019b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <LL_ADC_IsEnabled+0x18>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LL_ADC_IsEnabled+0x1a>
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d101      	bne.n	8001a02 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d101      	bne.n	8001a28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a24:	2301      	movs	r3, #1
 8001a26:	e000      	b.n	8001a2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2300      	movs	r3, #0
 8001a42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e18f      	b.n	8001d72 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff faa7 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff67 	bl	800194c <LL_ADC_IsDeepPowerDownEnabled>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff4d 	bl	8001928 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff ff82 	bl	800199c <LL_ADC_IsInternalRegulatorEnabled>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d114      	bne.n	8001ac8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff ff66 	bl	8001974 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aa8:	4b87      	ldr	r3, [pc, #540]	; (8001cc8 <HAL_ADC_Init+0x290>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	4a87      	ldr	r2, [pc, #540]	; (8001ccc <HAL_ADC_Init+0x294>)
 8001ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab4:	099b      	lsrs	r3, r3, #6
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aba:	e002      	b.n	8001ac2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f9      	bne.n	8001abc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff65 	bl	800199c <LL_ADC_IsInternalRegulatorEnabled>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10d      	bne.n	8001af4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001adc:	f043 0210 	orr.w	r2, r3, #16
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff76 	bl	80019ea <LL_ADC_REG_IsConversionOngoing>
 8001afe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 8129 	bne.w	8001d60 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 8125 	bne.w	8001d60 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b1e:	f043 0202 	orr.w	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff4a 	bl	80019c4 <LL_ADC_IsEnabled>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d136      	bne.n	8001ba4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_ADC_Init+0x298>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d004      	beq.n	8001b4a <HAL_ADC_Init+0x112>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a63      	ldr	r2, [pc, #396]	; (8001cd4 <HAL_ADC_Init+0x29c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10e      	bne.n	8001b68 <HAL_ADC_Init+0x130>
 8001b4a:	4861      	ldr	r0, [pc, #388]	; (8001cd0 <HAL_ADC_Init+0x298>)
 8001b4c:	f7ff ff3a 	bl	80019c4 <LL_ADC_IsEnabled>
 8001b50:	4604      	mov	r4, r0
 8001b52:	4860      	ldr	r0, [pc, #384]	; (8001cd4 <HAL_ADC_Init+0x29c>)
 8001b54:	f7ff ff36 	bl	80019c4 <LL_ADC_IsEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4323      	orrs	r3, r4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e008      	b.n	8001b7a <HAL_ADC_Init+0x142>
 8001b68:	485b      	ldr	r0, [pc, #364]	; (8001cd8 <HAL_ADC_Init+0x2a0>)
 8001b6a:	f7ff ff2b 	bl	80019c4 <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	bf0c      	ite	eq
 8001b74:	2301      	moveq	r3, #1
 8001b76:	2300      	movne	r3, #0
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d012      	beq.n	8001ba4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <HAL_ADC_Init+0x298>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_ADC_Init+0x15a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a51      	ldr	r2, [pc, #324]	; (8001cd4 <HAL_ADC_Init+0x29c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_ADC_Init+0x15e>
 8001b92:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_ADC_Init+0x2a4>)
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_Init+0x160>
 8001b96:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_ADC_Init+0x2a8>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f7ff fdbe 	bl	8001720 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001ba4:	f7ff fdb0 	bl	8001708 <HAL_GetREVID>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d914      	bls.n	8001bdc <HAL_ADC_Init+0x1a4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d110      	bne.n	8001bdc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7d5b      	ldrb	r3, [r3, #21]
 8001bbe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bc4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7f1b      	ldrb	r3, [r3, #28]
 8001bd0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bd2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd4:	f043 030c 	orr.w	r3, r3, #12
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	e00d      	b.n	8001bf8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	7d5b      	ldrb	r3, [r3, #21]
 8001be0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001be6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bec:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7f1b      	ldrb	r3, [r3, #28]
 8001bf2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f1b      	ldrb	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d106      	bne.n	8001c0e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	045b      	lsls	r3, r3, #17
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <HAL_ADC_Init+0x2ac>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	69b9      	ldr	r1, [r7, #24]
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fed1 	bl	80019ea <LL_ADC_REG_IsConversionOngoing>
 8001c48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fede 	bl	8001a10 <LL_ADC_INJ_IsConversionOngoing>
 8001c54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d15f      	bne.n	8001d1c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d15c      	bne.n	8001d1c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7d1b      	ldrb	r3, [r3, #20]
 8001c66:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_ADC_Init+0x2b0>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	430b      	orrs	r3, r1
 8001c82:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d130      	bne.n	8001cf0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691a      	ldr	r2, [r3, #16]
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_ADC_Init+0x2b4>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ca2:	3a01      	subs	r2, #1
 8001ca4:	0411      	lsls	r1, r2, #16
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001caa:	4311      	orrs	r1, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	611a      	str	r2, [r3, #16]
 8001cc4:	e01c      	b.n	8001d00 <HAL_ADC_Init+0x2c8>
 8001cc6:	bf00      	nop
 8001cc8:	24000000 	.word	0x24000000
 8001ccc:	053e2d63 	.word	0x053e2d63
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40022100 	.word	0x40022100
 8001cd8:	58026000 	.word	0x58026000
 8001cdc:	40022300 	.word	0x40022300
 8001ce0:	58026300 	.word	0x58026300
 8001ce4:	fff0c003 	.word	0xfff0c003
 8001ce8:	ffffbffc 	.word	0xffffbffc
 8001cec:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691a      	ldr	r2, [r3, #16]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fb80 	bl	800241c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d10c      	bne.n	8001d3e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f023 010f 	bic.w	r1, r3, #15
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	1e5a      	subs	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3c:	e007      	b.n	8001d4e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 020f 	bic.w	r2, r2, #15
 8001d4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d5e:	e007      	b.n	8001d70 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d64:	f043 0210 	orr.w	r2, r3, #16
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3724      	adds	r7, #36	; 0x24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd90      	pop	{r4, r7, pc}
 8001d7a:	bf00      	nop

08001d7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b0a1      	sub	sp, #132	; 0x84
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4a9d      	ldr	r2, [pc, #628]	; (800200c <HAL_ADC_ConfigChannel+0x290>)
 8001d96:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x2a>
 8001da2:	2302      	movs	r3, #2
 8001da4:	e321      	b.n	80023ea <HAL_ADC_ConfigChannel+0x66e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fe19 	bl	80019ea <LL_ADC_REG_IsConversionOngoing>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 8306 	bne.w	80023cc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d108      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x62>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	e016      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x90>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dee:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001df0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d101      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001df6:	2320      	movs	r3, #32
 8001df8:	e003      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f003 031f 	and.w	r3, r3, #31
 8001e06:	2201      	movs	r2, #1
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	69d1      	ldr	r1, [r2, #28]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	6812      	ldr	r2, [r2, #0]
 8001e16:	430b      	orrs	r3, r1
 8001e18:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f7ff fd02 	bl	8001830 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fdda 	bl	80019ea <LL_ADC_REG_IsConversionOngoing>
 8001e36:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fde7 	bl	8001a10 <LL_ADC_INJ_IsConversionOngoing>
 8001e42:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f040 80b3 	bne.w	8001fb2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 80af 	bne.w	8001fb2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6818      	ldr	r0, [r3, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f7ff fd11 	bl	8001888 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e66:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_ADC_ConfigChannel+0x294>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e72:	d10b      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x110>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	e01d      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x14c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10b      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x136>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	e00a      	b.n	8001ec8 <HAL_ADC_ConfigChannel+0x14c>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d027      	beq.n	8001f22 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6919      	ldr	r1, [r3, #16]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ee0:	f7ff fc52 	bl	8001788 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	6919      	ldr	r1, [r3, #16]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	7e5b      	ldrb	r3, [r3, #25]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x17e>
 8001ef4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ef8:	e000      	b.n	8001efc <HAL_ADC_ConfigChannel+0x180>
 8001efa:	2300      	movs	r3, #0
 8001efc:	461a      	mov	r2, r3
 8001efe:	f7ff fc7c 	bl	80017fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6919      	ldr	r1, [r3, #16]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	7e1b      	ldrb	r3, [r3, #24]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x19c>
 8001f12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f16:	e000      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x19e>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f7ff fc54 	bl	80017c8 <LL_ADC_SetDataRightShift>
 8001f20:	e047      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	069b      	lsls	r3, r3, #26
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d107      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f44:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	069b      	lsls	r3, r3, #26
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d107      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f68:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	069b      	lsls	r3, r3, #26
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d107      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f8c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	069b      	lsls	r3, r3, #26
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d107      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fb0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd04 	bl	80019c4 <LL_ADC_IsEnabled>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 820d 	bne.w	80023de <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6819      	ldr	r1, [r3, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	f7ff fc85 	bl	80018e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4a0c      	ldr	r2, [pc, #48]	; (800200c <HAL_ADC_ConfigChannel+0x290>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	f040 8133 	bne.w	8002248 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d110      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x298>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b09      	cmp	r3, #9
 8002000:	bf94      	ite	ls
 8002002:	2301      	movls	r3, #1
 8002004:	2300      	movhi	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	e01e      	b.n	8002048 <HAL_ADC_ConfigChannel+0x2cc>
 800200a:	bf00      	nop
 800200c:	47ff0000 	.word	0x47ff0000
 8002010:	5c001000 	.word	0x5c001000
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002024:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002026:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800202c:	2320      	movs	r3, #32
 800202e:	e003      	b.n	8002038 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002030:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f003 031f 	and.w	r3, r3, #31
 800203e:	2b09      	cmp	r3, #9
 8002040:	bf94      	ite	ls
 8002042:	2301      	movls	r3, #1
 8002044:	2300      	movhi	r3, #0
 8002046:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002048:	2b00      	cmp	r3, #0
 800204a:	d079      	beq.n	8002140 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x2ec>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	3301      	adds	r3, #1
 8002060:	069b      	lsls	r3, r3, #26
 8002062:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002066:	e015      	b.n	8002094 <HAL_ADC_ConfigChannel+0x318>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002078:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800207a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e003      	b.n	800208c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	3301      	adds	r3, #1
 800208e:	069b      	lsls	r3, r3, #26
 8002090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x338>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	3301      	adds	r3, #1
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2101      	movs	r1, #1
 80020ae:	fa01 f303 	lsl.w	r3, r1, r3
 80020b2:	e017      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x368>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80020c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80020d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	ea42 0103 	orr.w	r1, r2, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <HAL_ADC_ConfigChannel+0x38e>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	3301      	adds	r3, #1
 80020fc:	f003 021f 	and.w	r2, r3, #31
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	051b      	lsls	r3, r3, #20
 8002108:	e018      	b.n	800213c <HAL_ADC_ConfigChannel+0x3c0>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e003      	b.n	800212e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f003 021f 	and.w	r2, r3, #31
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213c:	430b      	orrs	r3, r1
 800213e:	e07e      	b.n	800223e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002148:	2b00      	cmp	r3, #0
 800214a:	d107      	bne.n	800215c <HAL_ADC_ConfigChannel+0x3e0>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e9b      	lsrs	r3, r3, #26
 8002152:	3301      	adds	r3, #1
 8002154:	069b      	lsls	r3, r3, #26
 8002156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215a:	e015      	b.n	8002188 <HAL_ADC_ConfigChannel+0x40c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800216e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	069b      	lsls	r3, r3, #26
 8002184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002190:	2b00      	cmp	r3, #0
 8002192:	d109      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x42c>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	3301      	adds	r3, #1
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	e017      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x45c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	61bb      	str	r3, [r7, #24]
  return result;
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80021c0:	2320      	movs	r3, #32
 80021c2:	e003      	b.n	80021cc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f303 	lsl.w	r3, r1, r3
 80021d8:	ea42 0103 	orr.w	r1, r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10d      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x488>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	3301      	adds	r3, #1
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	3b1e      	subs	r3, #30
 80021fc:	051b      	lsls	r3, r3, #20
 80021fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002202:	e01b      	b.n	800223c <HAL_ADC_ConfigChannel+0x4c0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	60fb      	str	r3, [r7, #12]
  return result;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 021f 	and.w	r2, r3, #31
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	3b1e      	subs	r3, #30
 8002236:	051b      	lsls	r3, r3, #20
 8002238:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800223c:	430b      	orrs	r3, r1
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	6892      	ldr	r2, [r2, #8]
 8002242:	4619      	mov	r1, r3
 8002244:	f7ff fb20 	bl	8001888 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	f280 80c6 	bge.w	80023de <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a67      	ldr	r2, [pc, #412]	; (80023f4 <HAL_ADC_ConfigChannel+0x678>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x4ea>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a65      	ldr	r2, [pc, #404]	; (80023f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x4ee>
 8002266:	4b65      	ldr	r3, [pc, #404]	; (80023fc <HAL_ADC_ConfigChannel+0x680>)
 8002268:	e000      	b.n	800226c <HAL_ADC_ConfigChannel+0x4f0>
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_ADC_ConfigChannel+0x684>)
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fa7d 	bl	800176c <LL_ADC_GetCommonPathInternalCh>
 8002272:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a5e      	ldr	r2, [pc, #376]	; (80023f4 <HAL_ADC_ConfigChannel+0x678>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_ADC_ConfigChannel+0x50c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5d      	ldr	r2, [pc, #372]	; (80023f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d10e      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x52a>
 8002288:	485a      	ldr	r0, [pc, #360]	; (80023f4 <HAL_ADC_ConfigChannel+0x678>)
 800228a:	f7ff fb9b 	bl	80019c4 <LL_ADC_IsEnabled>
 800228e:	4604      	mov	r4, r0
 8002290:	4859      	ldr	r0, [pc, #356]	; (80023f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002292:	f7ff fb97 	bl	80019c4 <LL_ADC_IsEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	4323      	orrs	r3, r4
 800229a:	2b00      	cmp	r3, #0
 800229c:	bf0c      	ite	eq
 800229e:	2301      	moveq	r3, #1
 80022a0:	2300      	movne	r3, #0
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	e008      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x53c>
 80022a6:	4857      	ldr	r0, [pc, #348]	; (8002404 <HAL_ADC_ConfigChannel+0x688>)
 80022a8:	f7ff fb8c 	bl	80019c4 <LL_ADC_IsEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	bf0c      	ite	eq
 80022b2:	2301      	moveq	r3, #1
 80022b4:	2300      	movne	r3, #0
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d07d      	beq.n	80023b8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_ADC_ConfigChannel+0x68c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d130      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x5ac>
 80022c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d12b      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	; (8002404 <HAL_ADC_ConfigChannel+0x688>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	f040 8081 	bne.w	80023de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a44      	ldr	r2, [pc, #272]	; (80023f4 <HAL_ADC_ConfigChannel+0x678>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x574>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a43      	ldr	r2, [pc, #268]	; (80023f8 <HAL_ADC_ConfigChannel+0x67c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x578>
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_ADC_ConfigChannel+0x680>)
 80022f2:	e000      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x57a>
 80022f4:	4a42      	ldr	r2, [pc, #264]	; (8002400 <HAL_ADC_ConfigChannel+0x684>)
 80022f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f7ff fa21 	bl	8001746 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002304:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_ADC_ConfigChannel+0x690>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	4a41      	ldr	r2, [pc, #260]	; (8002410 <HAL_ADC_ConfigChannel+0x694>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	099b      	lsrs	r3, r3, #6
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002318:	e002      	b.n	8002320 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3b01      	subs	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f9      	bne.n	800231a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002326:	e05a      	b.n	80023de <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a39      	ldr	r2, [pc, #228]	; (8002414 <HAL_ADC_ConfigChannel+0x698>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11e      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x5f4>
 8002332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002334:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d119      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a30      	ldr	r2, [pc, #192]	; (8002404 <HAL_ADC_ConfigChannel+0x688>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d14b      	bne.n	80023de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_ADC_ConfigChannel+0x678>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d004      	beq.n	800235a <HAL_ADC_ConfigChannel+0x5de>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a28      	ldr	r2, [pc, #160]	; (80023f8 <HAL_ADC_ConfigChannel+0x67c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x5e2>
 800235a:	4a28      	ldr	r2, [pc, #160]	; (80023fc <HAL_ADC_ConfigChannel+0x680>)
 800235c:	e000      	b.n	8002360 <HAL_ADC_ConfigChannel+0x5e4>
 800235e:	4a28      	ldr	r2, [pc, #160]	; (8002400 <HAL_ADC_ConfigChannel+0x684>)
 8002360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7ff f9ec 	bl	8001746 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800236e:	e036      	b.n	80023de <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a28      	ldr	r2, [pc, #160]	; (8002418 <HAL_ADC_ConfigChannel+0x69c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d131      	bne.n	80023de <HAL_ADC_ConfigChannel+0x662>
 800237a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800237c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d12c      	bne.n	80023de <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <HAL_ADC_ConfigChannel+0x688>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d127      	bne.n	80023de <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_ADC_ConfigChannel+0x678>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_ConfigChannel+0x626>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <HAL_ADC_ConfigChannel+0x67c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x62a>
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_ADC_ConfigChannel+0x680>)
 80023a4:	e000      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x62c>
 80023a6:	4a16      	ldr	r2, [pc, #88]	; (8002400 <HAL_ADC_ConfigChannel+0x684>)
 80023a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7ff f9c8 	bl	8001746 <LL_ADC_SetCommonPathInternalCh>
 80023b6:	e012      	b.n	80023de <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023bc:	f043 0220 	orr.w	r2, r3, #32
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023ca:	e008      	b.n	80023de <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f043 0220 	orr.w	r2, r3, #32
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3784      	adds	r7, #132	; 0x84
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40022000 	.word	0x40022000
 80023f8:	40022100 	.word	0x40022100
 80023fc:	40022300 	.word	0x40022300
 8002400:	58026300 	.word	0x58026300
 8002404:	58026000 	.word	0x58026000
 8002408:	cb840000 	.word	0xcb840000
 800240c:	24000000 	.word	0x24000000
 8002410:	053e2d63 	.word	0x053e2d63
 8002414:	c7520000 	.word	0xc7520000
 8002418:	cfb80000 	.word	0xcfb80000

0800241c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a79      	ldr	r2, [pc, #484]	; (8002610 <ADC_ConfigureBoostMode+0x1f4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d004      	beq.n	8002438 <ADC_ConfigureBoostMode+0x1c>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a78      	ldr	r2, [pc, #480]	; (8002614 <ADC_ConfigureBoostMode+0x1f8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d109      	bne.n	800244c <ADC_ConfigureBoostMode+0x30>
 8002438:	4b77      	ldr	r3, [pc, #476]	; (8002618 <ADC_ConfigureBoostMode+0x1fc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf14      	ite	ne
 8002444:	2301      	movne	r3, #1
 8002446:	2300      	moveq	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e008      	b.n	800245e <ADC_ConfigureBoostMode+0x42>
 800244c:	4b73      	ldr	r3, [pc, #460]	; (800261c <ADC_ConfigureBoostMode+0x200>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d01c      	beq.n	800249c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002462:	f002 fd4f 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8002466:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002470:	d010      	beq.n	8002494 <ADC_ConfigureBoostMode+0x78>
 8002472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002476:	d871      	bhi.n	800255c <ADC_ConfigureBoostMode+0x140>
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d002      	beq.n	8002484 <ADC_ConfigureBoostMode+0x68>
 800247e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002482:	d16b      	bne.n	800255c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	60fb      	str	r3, [r7, #12]
        break;
 8002492:	e066      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	089b      	lsrs	r3, r3, #2
 8002498:	60fb      	str	r3, [r7, #12]
        break;
 800249a:	e062      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800249c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80024a0:	f003 fcd2 	bl	8005e48 <HAL_RCCEx_GetPeriphCLKFreq>
 80024a4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024ae:	d051      	beq.n	8002554 <ADC_ConfigureBoostMode+0x138>
 80024b0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80024b4:	d854      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024b6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024ba:	d047      	beq.n	800254c <ADC_ConfigureBoostMode+0x130>
 80024bc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80024c0:	d84e      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024c2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024c6:	d03d      	beq.n	8002544 <ADC_ConfigureBoostMode+0x128>
 80024c8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80024cc:	d848      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d2:	d033      	beq.n	800253c <ADC_ConfigureBoostMode+0x120>
 80024d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d8:	d842      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024da:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024de:	d029      	beq.n	8002534 <ADC_ConfigureBoostMode+0x118>
 80024e0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80024e4:	d83c      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024ea:	d01a      	beq.n	8002522 <ADC_ConfigureBoostMode+0x106>
 80024ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80024f0:	d836      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024f6:	d014      	beq.n	8002522 <ADC_ConfigureBoostMode+0x106>
 80024f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024fc:	d830      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 80024fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002502:	d00e      	beq.n	8002522 <ADC_ConfigureBoostMode+0x106>
 8002504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002508:	d82a      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 800250a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800250e:	d008      	beq.n	8002522 <ADC_ConfigureBoostMode+0x106>
 8002510:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002514:	d824      	bhi.n	8002560 <ADC_ConfigureBoostMode+0x144>
 8002516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800251a:	d002      	beq.n	8002522 <ADC_ConfigureBoostMode+0x106>
 800251c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002520:	d11e      	bne.n	8002560 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	60fb      	str	r3, [r7, #12]
        break;
 8002532:	e016      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	091b      	lsrs	r3, r3, #4
 8002538:	60fb      	str	r3, [r7, #12]
        break;
 800253a:	e012      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	60fb      	str	r3, [r7, #12]
        break;
 8002542:	e00e      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	099b      	lsrs	r3, r3, #6
 8002548:	60fb      	str	r3, [r7, #12]
        break;
 800254a:	e00a      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	09db      	lsrs	r3, r3, #7
 8002550:	60fb      	str	r3, [r7, #12]
        break;
 8002552:	e006      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	0a1b      	lsrs	r3, r3, #8
 8002558:	60fb      	str	r3, [r7, #12]
        break;
 800255a:	e002      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
        break;
 800255c:	bf00      	nop
 800255e:	e000      	b.n	8002562 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002560:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002562:	f7ff f8d1 	bl	8001708 <HAL_GetREVID>
 8002566:	4603      	mov	r3, r0
 8002568:	f241 0203 	movw	r2, #4099	; 0x1003
 800256c:	4293      	cmp	r3, r2
 800256e:	d815      	bhi.n	800259c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	4a2b      	ldr	r2, [pc, #172]	; (8002620 <ADC_ConfigureBoostMode+0x204>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d908      	bls.n	800258a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002586:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002588:	e03e      	b.n	8002608 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002598:	609a      	str	r2, [r3, #8]
}
 800259a:	e035      	b.n	8002608 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	085b      	lsrs	r3, r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <ADC_ConfigureBoostMode+0x208>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d808      	bhi.n	80025bc <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025b8:	609a      	str	r2, [r3, #8]
}
 80025ba:	e025      	b.n	8002608 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <ADC_ConfigureBoostMode+0x20c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d80a      	bhi.n	80025da <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	e016      	b.n	8002608 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <ADC_ConfigureBoostMode+0x210>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d80a      	bhi.n	80025f8 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f4:	609a      	str	r2, [r3, #8]
}
 80025f6:	e007      	b.n	8002608 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002606:	609a      	str	r2, [r3, #8]
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40022000 	.word	0x40022000
 8002614:	40022100 	.word	0x40022100
 8002618:	40022300 	.word	0x40022300
 800261c:	58026300 	.word	0x58026300
 8002620:	01312d00 	.word	0x01312d00
 8002624:	005f5e10 	.word	0x005f5e10
 8002628:	00bebc20 	.word	0x00bebc20
 800262c:	017d7840 	.word	0x017d7840

08002630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <__NVIC_SetPriorityGrouping+0x40>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800264c:	4013      	ands	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x40>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00
 8002674:	05fa0000 	.word	0x05fa0000

08002678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <__NVIC_GetPriorityGrouping+0x18>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	0a1b      	lsrs	r3, r3, #8
 8002682:	f003 0307 	and.w	r3, r3, #7
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff47 	bl	8002630 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027b8:	f7ff ff5e 	bl	8002678 <__NVIC_GetPriorityGrouping>
 80027bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6978      	ldr	r0, [r7, #20]
 80027c4:	f7ff ff90 	bl	80026e8 <NVIC_EncodePriority>
 80027c8:	4602      	mov	r2, r0
 80027ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff5f 	bl	8002694 <__NVIC_SetPriority>
}
 80027d6:	bf00      	nop
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffb2 	bl	8002750 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7fe ff76 	bl	80016f0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e316      	b.n	8002e3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a66      	ldr	r2, [pc, #408]	; (80029b0 <HAL_DMA_Init+0x1b8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d04a      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a65      	ldr	r2, [pc, #404]	; (80029b4 <HAL_DMA_Init+0x1bc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d045      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a63      	ldr	r2, [pc, #396]	; (80029b8 <HAL_DMA_Init+0x1c0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d040      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a62      	ldr	r2, [pc, #392]	; (80029bc <HAL_DMA_Init+0x1c4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d03b      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a60      	ldr	r2, [pc, #384]	; (80029c0 <HAL_DMA_Init+0x1c8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d036      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a5f      	ldr	r2, [pc, #380]	; (80029c4 <HAL_DMA_Init+0x1cc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d031      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5d      	ldr	r2, [pc, #372]	; (80029c8 <HAL_DMA_Init+0x1d0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d02c      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a5c      	ldr	r2, [pc, #368]	; (80029cc <HAL_DMA_Init+0x1d4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d027      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_DMA_Init+0x1d8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d022      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a59      	ldr	r2, [pc, #356]	; (80029d4 <HAL_DMA_Init+0x1dc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d01d      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a57      	ldr	r2, [pc, #348]	; (80029d8 <HAL_DMA_Init+0x1e0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d018      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a56      	ldr	r2, [pc, #344]	; (80029dc <HAL_DMA_Init+0x1e4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a54      	ldr	r2, [pc, #336]	; (80029e0 <HAL_DMA_Init+0x1e8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00e      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a53      	ldr	r2, [pc, #332]	; (80029e4 <HAL_DMA_Init+0x1ec>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a51      	ldr	r2, [pc, #324]	; (80029e8 <HAL_DMA_Init+0x1f0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d004      	beq.n	80028b0 <HAL_DMA_Init+0xb8>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a50      	ldr	r2, [pc, #320]	; (80029ec <HAL_DMA_Init+0x1f4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d101      	bne.n	80028b4 <HAL_DMA_Init+0xbc>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_DMA_Init+0xbe>
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 813b 	beq.w	8002b32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <HAL_DMA_Init+0x1b8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d04a      	beq.n	800296c <HAL_DMA_Init+0x174>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a36      	ldr	r2, [pc, #216]	; (80029b4 <HAL_DMA_Init+0x1bc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d045      	beq.n	800296c <HAL_DMA_Init+0x174>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a34      	ldr	r2, [pc, #208]	; (80029b8 <HAL_DMA_Init+0x1c0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d040      	beq.n	800296c <HAL_DMA_Init+0x174>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <HAL_DMA_Init+0x1c4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d03b      	beq.n	800296c <HAL_DMA_Init+0x174>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a31      	ldr	r2, [pc, #196]	; (80029c0 <HAL_DMA_Init+0x1c8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d036      	beq.n	800296c <HAL_DMA_Init+0x174>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a30      	ldr	r2, [pc, #192]	; (80029c4 <HAL_DMA_Init+0x1cc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d031      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2e      	ldr	r2, [pc, #184]	; (80029c8 <HAL_DMA_Init+0x1d0>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02c      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <HAL_DMA_Init+0x1d4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d027      	beq.n	800296c <HAL_DMA_Init+0x174>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <HAL_DMA_Init+0x1d8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d022      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <HAL_DMA_Init+0x1dc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d01d      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <HAL_DMA_Init+0x1e0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d018      	beq.n	800296c <HAL_DMA_Init+0x174>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_DMA_Init+0x1e4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d013      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <HAL_DMA_Init+0x1e8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00e      	beq.n	800296c <HAL_DMA_Init+0x174>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_DMA_Init+0x1ec>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d009      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <HAL_DMA_Init+0x1f0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d004      	beq.n	800296c <HAL_DMA_Init+0x174>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_DMA_Init+0x1f4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d108      	bne.n	800297e <HAL_DMA_Init+0x186>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e007      	b.n	800298e <HAL_DMA_Init+0x196>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800298e:	e02f      	b.n	80029f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002990:	f7fe feae 	bl	80016f0 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b05      	cmp	r3, #5
 800299c:	d928      	bls.n	80029f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2203      	movs	r2, #3
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e246      	b.n	8002e3e <HAL_DMA_Init+0x646>
 80029b0:	40020010 	.word	0x40020010
 80029b4:	40020028 	.word	0x40020028
 80029b8:	40020040 	.word	0x40020040
 80029bc:	40020058 	.word	0x40020058
 80029c0:	40020070 	.word	0x40020070
 80029c4:	40020088 	.word	0x40020088
 80029c8:	400200a0 	.word	0x400200a0
 80029cc:	400200b8 	.word	0x400200b8
 80029d0:	40020410 	.word	0x40020410
 80029d4:	40020428 	.word	0x40020428
 80029d8:	40020440 	.word	0x40020440
 80029dc:	40020458 	.word	0x40020458
 80029e0:	40020470 	.word	0x40020470
 80029e4:	40020488 	.word	0x40020488
 80029e8:	400204a0 	.word	0x400204a0
 80029ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1c8      	bne.n	8002990 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <HAL_DMA_Init+0x420>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002a16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d107      	bne.n	8002a54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002a54:	4b71      	ldr	r3, [pc, #452]	; (8002c1c <HAL_DMA_Init+0x424>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4b71      	ldr	r3, [pc, #452]	; (8002c20 <HAL_DMA_Init+0x428>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a60:	d328      	bcc.n	8002ab4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b28      	cmp	r3, #40	; 0x28
 8002a68:	d903      	bls.n	8002a72 <HAL_DMA_Init+0x27a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8002a70:	d917      	bls.n	8002aa2 <HAL_DMA_Init+0x2aa>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b3e      	cmp	r3, #62	; 0x3e
 8002a78:	d903      	bls.n	8002a82 <HAL_DMA_Init+0x28a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b42      	cmp	r3, #66	; 0x42
 8002a80:	d90f      	bls.n	8002aa2 <HAL_DMA_Init+0x2aa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b46      	cmp	r3, #70	; 0x46
 8002a88:	d903      	bls.n	8002a92 <HAL_DMA_Init+0x29a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b48      	cmp	r3, #72	; 0x48
 8002a90:	d907      	bls.n	8002aa2 <HAL_DMA_Init+0x2aa>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b4e      	cmp	r3, #78	; 0x4e
 8002a98:	d905      	bls.n	8002aa6 <HAL_DMA_Init+0x2ae>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b52      	cmp	r3, #82	; 0x52
 8002aa0:	d801      	bhi.n	8002aa6 <HAL_DMA_Init+0x2ae>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_DMA_Init+0x2b0>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d117      	bne.n	8002b0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fa8f 	bl	8003014 <DMA_CheckFifoParam>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e197      	b.n	8002e3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f9ca 	bl	8002eb0 <DMA_CalcBaseAndBitshift>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	f003 031f 	and.w	r3, r3, #31
 8002b28:	223f      	movs	r2, #63	; 0x3f
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
 8002b30:	e0cd      	b.n	8002cce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <HAL_DMA_Init+0x42c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a39      	ldr	r2, [pc, #228]	; (8002c28 <HAL_DMA_Init+0x430>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a38      	ldr	r2, [pc, #224]	; (8002c2c <HAL_DMA_Init+0x434>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a36      	ldr	r2, [pc, #216]	; (8002c30 <HAL_DMA_Init+0x438>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a35      	ldr	r2, [pc, #212]	; (8002c34 <HAL_DMA_Init+0x43c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a33      	ldr	r2, [pc, #204]	; (8002c38 <HAL_DMA_Init+0x440>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a32      	ldr	r2, [pc, #200]	; (8002c3c <HAL_DMA_Init+0x444>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_Init+0x38a>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_DMA_Init+0x448>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Init+0x38e>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <HAL_DMA_Init+0x390>
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8097 	beq.w	8002cbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a24      	ldr	r2, [pc, #144]	; (8002c24 <HAL_DMA_Init+0x42c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d021      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a22      	ldr	r2, [pc, #136]	; (8002c28 <HAL_DMA_Init+0x430>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01c      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_DMA_Init+0x434>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d017      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1f      	ldr	r2, [pc, #124]	; (8002c30 <HAL_DMA_Init+0x438>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d012      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a1e      	ldr	r2, [pc, #120]	; (8002c34 <HAL_DMA_Init+0x43c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00d      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1c      	ldr	r2, [pc, #112]	; (8002c38 <HAL_DMA_Init+0x440>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d008      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1b      	ldr	r2, [pc, #108]	; (8002c3c <HAL_DMA_Init+0x444>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d003      	beq.n	8002bdc <HAL_DMA_Init+0x3e4>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_DMA_Init+0x448>)
 8002bda:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_DMA_Init+0x44c>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b40      	cmp	r3, #64	; 0x40
 8002c02:	d021      	beq.n	8002c48 <HAL_DMA_Init+0x450>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b80      	cmp	r3, #128	; 0x80
 8002c0a:	d102      	bne.n	8002c12 <HAL_DMA_Init+0x41a>
 8002c0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c10:	e01b      	b.n	8002c4a <HAL_DMA_Init+0x452>
 8002c12:	2300      	movs	r3, #0
 8002c14:	e019      	b.n	8002c4a <HAL_DMA_Init+0x452>
 8002c16:	bf00      	nop
 8002c18:	fe10803f 	.word	0xfe10803f
 8002c1c:	5c001000 	.word	0x5c001000
 8002c20:	ffff0000 	.word	0xffff0000
 8002c24:	58025408 	.word	0x58025408
 8002c28:	5802541c 	.word	0x5802541c
 8002c2c:	58025430 	.word	0x58025430
 8002c30:	58025444 	.word	0x58025444
 8002c34:	58025458 	.word	0x58025458
 8002c38:	5802546c 	.word	0x5802546c
 8002c3c:	58025480 	.word	0x58025480
 8002c40:	58025494 	.word	0x58025494
 8002c44:	fffe000f 	.word	0xfffe000f
 8002c48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68d2      	ldr	r2, [r2, #12]
 8002c4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002c58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002c78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b6e      	ldr	r3, [pc, #440]	; (8002e48 <HAL_DMA_Init+0x650>)
 8002c90:	4413      	add	r3, r2
 8002c92:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_DMA_Init+0x654>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f905 	bl	8002eb0 <DMA_CalcBaseAndBitshift>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	e008      	b.n	8002cce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e0b7      	b.n	8002e3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5f      	ldr	r2, [pc, #380]	; (8002e50 <HAL_DMA_Init+0x658>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d072      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5d      	ldr	r2, [pc, #372]	; (8002e54 <HAL_DMA_Init+0x65c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d06d      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a5c      	ldr	r2, [pc, #368]	; (8002e58 <HAL_DMA_Init+0x660>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d068      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <HAL_DMA_Init+0x664>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d063      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a59      	ldr	r2, [pc, #356]	; (8002e60 <HAL_DMA_Init+0x668>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d05e      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a57      	ldr	r2, [pc, #348]	; (8002e64 <HAL_DMA_Init+0x66c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d059      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a56      	ldr	r2, [pc, #344]	; (8002e68 <HAL_DMA_Init+0x670>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d054      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a54      	ldr	r2, [pc, #336]	; (8002e6c <HAL_DMA_Init+0x674>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d04f      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a53      	ldr	r2, [pc, #332]	; (8002e70 <HAL_DMA_Init+0x678>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a51      	ldr	r2, [pc, #324]	; (8002e74 <HAL_DMA_Init+0x67c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a50      	ldr	r2, [pc, #320]	; (8002e78 <HAL_DMA_Init+0x680>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a4e      	ldr	r2, [pc, #312]	; (8002e7c <HAL_DMA_Init+0x684>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a4d      	ldr	r2, [pc, #308]	; (8002e80 <HAL_DMA_Init+0x688>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a4b      	ldr	r2, [pc, #300]	; (8002e84 <HAL_DMA_Init+0x68c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a4a      	ldr	r2, [pc, #296]	; (8002e88 <HAL_DMA_Init+0x690>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a48      	ldr	r2, [pc, #288]	; (8002e8c <HAL_DMA_Init+0x694>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a47      	ldr	r2, [pc, #284]	; (8002e90 <HAL_DMA_Init+0x698>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a45      	ldr	r2, [pc, #276]	; (8002e94 <HAL_DMA_Init+0x69c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a44      	ldr	r2, [pc, #272]	; (8002e98 <HAL_DMA_Init+0x6a0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a42      	ldr	r2, [pc, #264]	; (8002e9c <HAL_DMA_Init+0x6a4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a41      	ldr	r2, [pc, #260]	; (8002ea0 <HAL_DMA_Init+0x6a8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <HAL_DMA_Init+0x6ac>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a3e      	ldr	r2, [pc, #248]	; (8002ea8 <HAL_DMA_Init+0x6b0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_Init+0x5c6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a3c      	ldr	r2, [pc, #240]	; (8002eac <HAL_DMA_Init+0x6b4>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d101      	bne.n	8002dc2 <HAL_DMA_Init+0x5ca>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_DMA_Init+0x5cc>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d032      	beq.n	8002e2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f99f 	bl	800310c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d102      	bne.n	8002ddc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	b2d2      	uxtb	r2, r2
 8002de6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002df0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_DMA_Init+0x624>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d80c      	bhi.n	8002e1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa1c 	bl	8003240 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	e008      	b.n	8002e2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	a7fdabf8 	.word	0xa7fdabf8
 8002e4c:	cccccccd 	.word	0xcccccccd
 8002e50:	40020010 	.word	0x40020010
 8002e54:	40020028 	.word	0x40020028
 8002e58:	40020040 	.word	0x40020040
 8002e5c:	40020058 	.word	0x40020058
 8002e60:	40020070 	.word	0x40020070
 8002e64:	40020088 	.word	0x40020088
 8002e68:	400200a0 	.word	0x400200a0
 8002e6c:	400200b8 	.word	0x400200b8
 8002e70:	40020410 	.word	0x40020410
 8002e74:	40020428 	.word	0x40020428
 8002e78:	40020440 	.word	0x40020440
 8002e7c:	40020458 	.word	0x40020458
 8002e80:	40020470 	.word	0x40020470
 8002e84:	40020488 	.word	0x40020488
 8002e88:	400204a0 	.word	0x400204a0
 8002e8c:	400204b8 	.word	0x400204b8
 8002e90:	58025408 	.word	0x58025408
 8002e94:	5802541c 	.word	0x5802541c
 8002e98:	58025430 	.word	0x58025430
 8002e9c:	58025444 	.word	0x58025444
 8002ea0:	58025458 	.word	0x58025458
 8002ea4:	5802546c 	.word	0x5802546c
 8002ea8:	58025480 	.word	0x58025480
 8002eac:	58025494 	.word	0x58025494

08002eb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a42      	ldr	r2, [pc, #264]	; (8002fc8 <DMA_CalcBaseAndBitshift+0x118>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d04a      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <DMA_CalcBaseAndBitshift+0x11c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d045      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a3f      	ldr	r2, [pc, #252]	; (8002fd0 <DMA_CalcBaseAndBitshift+0x120>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d040      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a3e      	ldr	r2, [pc, #248]	; (8002fd4 <DMA_CalcBaseAndBitshift+0x124>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d03b      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <DMA_CalcBaseAndBitshift+0x128>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d036      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <DMA_CalcBaseAndBitshift+0x12c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d031      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a39      	ldr	r2, [pc, #228]	; (8002fe0 <DMA_CalcBaseAndBitshift+0x130>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d02c      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a38      	ldr	r2, [pc, #224]	; (8002fe4 <DMA_CalcBaseAndBitshift+0x134>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d027      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a36      	ldr	r2, [pc, #216]	; (8002fe8 <DMA_CalcBaseAndBitshift+0x138>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d022      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a35      	ldr	r2, [pc, #212]	; (8002fec <DMA_CalcBaseAndBitshift+0x13c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d01d      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a33      	ldr	r2, [pc, #204]	; (8002ff0 <DMA_CalcBaseAndBitshift+0x140>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d018      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a32      	ldr	r2, [pc, #200]	; (8002ff4 <DMA_CalcBaseAndBitshift+0x144>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d013      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a30      	ldr	r2, [pc, #192]	; (8002ff8 <DMA_CalcBaseAndBitshift+0x148>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00e      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a2f      	ldr	r2, [pc, #188]	; (8002ffc <DMA_CalcBaseAndBitshift+0x14c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d009      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <DMA_CalcBaseAndBitshift+0x150>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d004      	beq.n	8002f58 <DMA_CalcBaseAndBitshift+0xa8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <DMA_CalcBaseAndBitshift+0x154>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <DMA_CalcBaseAndBitshift+0xac>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <DMA_CalcBaseAndBitshift+0xae>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d024      	beq.n	8002fac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	3b10      	subs	r3, #16
 8002f6a:	4a27      	ldr	r2, [pc, #156]	; (8003008 <DMA_CalcBaseAndBitshift+0x158>)
 8002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	4a24      	ldr	r2, [pc, #144]	; (800300c <DMA_CalcBaseAndBitshift+0x15c>)
 8002f7c:	5cd3      	ldrb	r3, [r2, r3]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d908      	bls.n	8002f9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b1f      	ldr	r3, [pc, #124]	; (8003010 <DMA_CalcBaseAndBitshift+0x160>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	1d1a      	adds	r2, r3, #4
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	659a      	str	r2, [r3, #88]	; 0x58
 8002f9a:	e00d      	b.n	8002fb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	; (8003010 <DMA_CalcBaseAndBitshift+0x160>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8002faa:	e005      	b.n	8002fb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr
 8002fc8:	40020010 	.word	0x40020010
 8002fcc:	40020028 	.word	0x40020028
 8002fd0:	40020040 	.word	0x40020040
 8002fd4:	40020058 	.word	0x40020058
 8002fd8:	40020070 	.word	0x40020070
 8002fdc:	40020088 	.word	0x40020088
 8002fe0:	400200a0 	.word	0x400200a0
 8002fe4:	400200b8 	.word	0x400200b8
 8002fe8:	40020410 	.word	0x40020410
 8002fec:	40020428 	.word	0x40020428
 8002ff0:	40020440 	.word	0x40020440
 8002ff4:	40020458 	.word	0x40020458
 8002ff8:	40020470 	.word	0x40020470
 8002ffc:	40020488 	.word	0x40020488
 8003000:	400204a0 	.word	0x400204a0
 8003004:	400204b8 	.word	0x400204b8
 8003008:	aaaaaaab 	.word	0xaaaaaaab
 800300c:	08008b74 	.word	0x08008b74
 8003010:	fffffc00 	.word	0xfffffc00

08003014 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d120      	bne.n	800306a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b03      	cmp	r3, #3
 800302e:	d858      	bhi.n	80030e2 <DMA_CheckFifoParam+0xce>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <DMA_CheckFifoParam+0x24>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	0800305b 	.word	0x0800305b
 8003040:	08003049 	.word	0x08003049
 8003044:	080030e3 	.word	0x080030e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d048      	beq.n	80030e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003058:	e045      	b.n	80030e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003062:	d142      	bne.n	80030ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003068:	e03f      	b.n	80030ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003072:	d123      	bne.n	80030bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	2b03      	cmp	r3, #3
 800307a:	d838      	bhi.n	80030ee <DMA_CheckFifoParam+0xda>
 800307c:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <DMA_CheckFifoParam+0x70>)
 800307e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003082:	bf00      	nop
 8003084:	08003095 	.word	0x08003095
 8003088:	0800309b 	.word	0x0800309b
 800308c:	08003095 	.word	0x08003095
 8003090:	080030ad 	.word	0x080030ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
        break;
 8003098:	e030      	b.n	80030fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d025      	beq.n	80030f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030aa:	e022      	b.n	80030f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b4:	d11f      	bne.n	80030f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80030ba:	e01c      	b.n	80030f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d902      	bls.n	80030ca <DMA_CheckFifoParam+0xb6>
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d003      	beq.n	80030d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80030c8:	e018      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
        break;
 80030ce:	e015      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00e      	beq.n	80030fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
    break;
 80030e0:	e00b      	b.n	80030fa <DMA_CheckFifoParam+0xe6>
        break;
 80030e2:	bf00      	nop
 80030e4:	e00a      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        break;
 80030e6:	bf00      	nop
 80030e8:	e008      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        break;
 80030ea:	bf00      	nop
 80030ec:	e006      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        break;
 80030ee:	bf00      	nop
 80030f0:	e004      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        break;
 80030f2:	bf00      	nop
 80030f4:	e002      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
        break;
 80030f6:	bf00      	nop
 80030f8:	e000      	b.n	80030fc <DMA_CheckFifoParam+0xe8>
    break;
 80030fa:	bf00      	nop
    }
  }

  return status;
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop

0800310c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a38      	ldr	r2, [pc, #224]	; (8003200 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d022      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a36      	ldr	r2, [pc, #216]	; (8003204 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01d      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a35      	ldr	r2, [pc, #212]	; (8003208 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d018      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a33      	ldr	r2, [pc, #204]	; (800320c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a32      	ldr	r2, [pc, #200]	; (8003210 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00e      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a30      	ldr	r2, [pc, #192]	; (8003214 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a2f      	ldr	r2, [pc, #188]	; (8003218 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d004      	beq.n	800316a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	; (800321c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01a      	beq.n	80031aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3b08      	subs	r3, #8
 800317c:	4a28      	ldr	r2, [pc, #160]	; (8003220 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003198:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2201      	movs	r2, #1
 80031a2:	409a      	lsls	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80031a8:	e024      	b.n	80031f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3b10      	subs	r3, #16
 80031b2:	4a1e      	ldr	r2, [pc, #120]	; (800322c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a1c      	ldr	r2, [pc, #112]	; (8003230 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d806      	bhi.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4a1b      	ldr	r2, [pc, #108]	; (8003234 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d902      	bls.n	80031d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3308      	adds	r3, #8
 80031d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4b18      	ldr	r3, [pc, #96]	; (8003238 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a16      	ldr	r2, [pc, #88]	; (800323c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80031e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 031f 	and.w	r3, r3, #31
 80031ec:	2201      	movs	r2, #1
 80031ee:	409a      	lsls	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	58025408 	.word	0x58025408
 8003204:	5802541c 	.word	0x5802541c
 8003208:	58025430 	.word	0x58025430
 800320c:	58025444 	.word	0x58025444
 8003210:	58025458 	.word	0x58025458
 8003214:	5802546c 	.word	0x5802546c
 8003218:	58025480 	.word	0x58025480
 800321c:	58025494 	.word	0x58025494
 8003220:	cccccccd 	.word	0xcccccccd
 8003224:	16009600 	.word	0x16009600
 8003228:	58025880 	.word	0x58025880
 800322c:	aaaaaaab 	.word	0xaaaaaaab
 8003230:	400204b8 	.word	0x400204b8
 8003234:	4002040f 	.word	0x4002040f
 8003238:	10008200 	.word	0x10008200
 800323c:	40020880 	.word	0x40020880

08003240 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d04a      	beq.n	80032ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d847      	bhi.n	80032ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d022      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a24      	ldr	r2, [pc, #144]	; (80032fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d01d      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a22      	ldr	r2, [pc, #136]	; (8003300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d018      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d013      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00e      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1e      	ldr	r2, [pc, #120]	; (800330c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d009      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d004      	beq.n	80032ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d101      	bne.n	80032b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80032b0:	2300      	movs	r3, #0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4b17      	ldr	r3, [pc, #92]	; (8003318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a15      	ldr	r2, [pc, #84]	; (800331c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80032c8:	671a      	str	r2, [r3, #112]	; 0x70
 80032ca:	e009      	b.n	80032e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4b14      	ldr	r3, [pc, #80]	; (8003320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	461a      	mov	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80032de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	2201      	movs	r2, #1
 80032e6:	409a      	lsls	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	58025408 	.word	0x58025408
 80032fc:	5802541c 	.word	0x5802541c
 8003300:	58025430 	.word	0x58025430
 8003304:	58025444 	.word	0x58025444
 8003308:	58025458 	.word	0x58025458
 800330c:	5802546c 	.word	0x5802546c
 8003310:	58025480 	.word	0x58025480
 8003314:	58025494 	.word	0x58025494
 8003318:	1600963f 	.word	0x1600963f
 800331c:	58025940 	.word	0x58025940
 8003320:	1000823f 	.word	0x1000823f
 8003324:	40020940 	.word	0x40020940

08003328 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b098      	sub	sp, #96	; 0x60
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003330:	4a84      	ldr	r2, [pc, #528]	; (8003544 <HAL_FDCAN_Init+0x21c>)
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4611      	mov	r1, r2
 8003338:	224c      	movs	r2, #76	; 0x4c
 800333a:	4618      	mov	r0, r3
 800333c:	f005 fbd2 	bl	8008ae4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e1c6      	b.n	80036d8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_FDCAN_Init+0x220>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d106      	bne.n	8003362 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d106      	bne.n	800337c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fd fe8c 	bl	8001094 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0210 	bic.w	r2, r2, #16
 800338a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800338c:	f7fe f9b0 	bl	80016f0 <HAL_GetTick>
 8003390:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003392:	e014      	b.n	80033be <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003394:	f7fe f9ac 	bl	80016f0 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b0a      	cmp	r3, #10
 80033a0:	d90d      	bls.n	80033be <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2203      	movs	r2, #3
 80033b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e18c      	b.n	80036d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d0e3      	beq.n	8003394 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033dc:	f7fe f988 	bl	80016f0 <HAL_GetTick>
 80033e0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80033e2:	e014      	b.n	800340e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80033e4:	f7fe f984 	bl	80016f0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b0a      	cmp	r3, #10
 80033f0:	d90d      	bls.n	800340e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e164      	b.n	80036d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0e3      	beq.n	80033e4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f042 0202 	orr.w	r2, r2, #2
 800342a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7c1b      	ldrb	r3, [r3, #16]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d108      	bne.n	8003446 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003442:	619a      	str	r2, [r3, #24]
 8003444:	e007      	b.n	8003456 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003454:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7c5b      	ldrb	r3, [r3, #17]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800346c:	619a      	str	r2, [r3, #24]
 800346e:	e007      	b.n	8003480 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800347e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7c9b      	ldrb	r3, [r3, #18]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d108      	bne.n	800349a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003496:	619a      	str	r2, [r3, #24]
 8003498:	e007      	b.n	80034aa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034a8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689a      	ldr	r2, [r3, #8]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80034ce:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691a      	ldr	r2, [r3, #16]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0210 	bic.w	r2, r2, #16
 80034de:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d108      	bne.n	80034fa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0204 	orr.w	r2, r2, #4
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	e030      	b.n	800355c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d02c      	beq.n	800355c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	2b02      	cmp	r3, #2
 8003508:	d020      	beq.n	800354c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699a      	ldr	r2, [r3, #24]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003518:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0210 	orr.w	r2, r2, #16
 8003528:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b03      	cmp	r3, #3
 8003530:	d114      	bne.n	800355c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699a      	ldr	r2, [r3, #24]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0220 	orr.w	r2, r2, #32
 8003540:	619a      	str	r2, [r3, #24]
 8003542:	e00b      	b.n	800355c <HAL_FDCAN_Init+0x234>
 8003544:	08008b18 	.word	0x08008b18
 8003548:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	3b01      	subs	r3, #1
 8003562:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	3b01      	subs	r3, #1
 800356a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800356c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003574:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	3b01      	subs	r3, #1
 800357e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003584:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003586:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003590:	d115      	bne.n	80035be <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	3b01      	subs	r3, #1
 800359e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035a0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	3b01      	subs	r3, #1
 80035a8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80035aa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80035ba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80035bc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	4413      	add	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d011      	beq.n	800360e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80035f2:	f023 0107 	bic.w	r1, r3, #7
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	443b      	add	r3, r7
 8003600:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b00      	cmp	r3, #0
 8003614:	d011      	beq.n	800363a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800361e:	f023 0107 	bic.w	r1, r3, #7
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	3360      	adds	r3, #96	; 0x60
 800362a:	443b      	add	r3, r7
 800362c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d012      	beq.n	8003668 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800364a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	3360      	adds	r3, #96	; 0x60
 8003656:	443b      	add	r3, r7
 8003658:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800365c:	011a      	lsls	r2, r3, #4
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003678:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	3360      	adds	r3, #96	; 0x60
 8003684:	443b      	add	r3, r7
 8003686:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	430a      	orrs	r2, r1
 8003692:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a11      	ldr	r2, [pc, #68]	; (80036e0 <HAL_FDCAN_Init+0x3b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d107      	bne.n	80036b0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f022 0203 	bic.w	r2, r2, #3
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f80b 	bl	80036e4 <FDCAN_CalcultateRamBlockAddresses>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80036d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3760      	adds	r7, #96	; 0x60
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	4000a000 	.word	0x4000a000

080036e4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80036fa:	4ba7      	ldr	r3, [pc, #668]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	0091      	lsls	r1, r2, #2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	430b      	orrs	r3, r1
 8003708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003714:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371c:	041a      	lsls	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	4413      	add	r3, r2
 8003730:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800373a:	4b97      	ldr	r3, [pc, #604]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800373c:	4013      	ands	r3, r2
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	0091      	lsls	r1, r2, #2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	430b      	orrs	r3, r1
 8003748:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	041a      	lsls	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	4413      	add	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800377c:	4b86      	ldr	r3, [pc, #536]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800377e:	4013      	ands	r3, r2
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	0091      	lsls	r1, r2, #2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	430b      	orrs	r3, r1
 800378a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003796:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	041a      	lsls	r2, r3, #16
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	4413      	add	r3, r2
 80037ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80037c4:	4b74      	ldr	r3, [pc, #464]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	0091      	lsls	r1, r2, #2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037de:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	041a      	lsls	r2, r3, #16
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4413      	add	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800380c:	4b62      	ldr	r3, [pc, #392]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800380e:	4013      	ands	r3, r2
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	0091      	lsls	r1, r2, #2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	430b      	orrs	r3, r1
 800381a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	4413      	add	r3, r2
 800382e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003838:	4b57      	ldr	r3, [pc, #348]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800383a:	4013      	ands	r3, r2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	0091      	lsls	r1, r2, #2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003852:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	041a      	lsls	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4413      	add	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800387a:	4b47      	ldr	r3, [pc, #284]	; (8003998 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800387c:	4013      	ands	r3, r2
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	0091      	lsls	r1, r2, #2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	430b      	orrs	r3, r1
 8003888:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003894:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80038b0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b8:	061a      	lsls	r2, r3, #24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c8:	4b34      	ldr	r3, [pc, #208]	; (800399c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80038ca:	4413      	add	r3, r2
 80038cc:	009a      	lsls	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	441a      	add	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	441a      	add	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	441a      	add	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	441a      	add	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d915      	bls.n	80039c0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003994:	e006      	b.n	80039a4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003996:	bf00      	nop
 8003998:	ffff0003 	.word	0xffff0003
 800399c:	10002b00 	.word	0x10002b00
 80039a0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039aa:	f043 0220 	orr.w	r2, r3, #32
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2203      	movs	r2, #3
 80039b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e010      	b.n	80039e2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e005      	b.n	80039d4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	3304      	adds	r3, #4
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d3f3      	bcc.n	80039c8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039fe:	4b89      	ldr	r3, [pc, #548]	; (8003c24 <HAL_GPIO_Init+0x234>)
 8003a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a02:	e194      	b.n	8003d2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8186 	beq.w	8003d28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d005      	beq.n	8003a34 <HAL_GPIO_Init+0x44>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d130      	bne.n	8003a96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4013      	ands	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d017      	beq.n	8003ad2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d123      	bne.n	8003b26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	08da      	lsrs	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3208      	adds	r2, #8
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80e0 	beq.w	8003d28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b68:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <HAL_GPIO_Init+0x238>)
 8003b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b6e:	4a2e      	ldr	r2, [pc, #184]	; (8003c28 <HAL_GPIO_Init+0x238>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b78:	4b2b      	ldr	r3, [pc, #172]	; (8003c28 <HAL_GPIO_Init+0x238>)
 8003b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b86:	4a29      	ldr	r2, [pc, #164]	; (8003c2c <HAL_GPIO_Init+0x23c>)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	220f      	movs	r2, #15
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <HAL_GPIO_Init+0x240>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d052      	beq.n	8003c58 <HAL_GPIO_Init+0x268>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <HAL_GPIO_Init+0x244>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_GPIO_Init+0x22e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <HAL_GPIO_Init+0x248>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d02b      	beq.n	8003c1a <HAL_GPIO_Init+0x22a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <HAL_GPIO_Init+0x24c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d025      	beq.n	8003c16 <HAL_GPIO_Init+0x226>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1c      	ldr	r2, [pc, #112]	; (8003c40 <HAL_GPIO_Init+0x250>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01f      	beq.n	8003c12 <HAL_GPIO_Init+0x222>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <HAL_GPIO_Init+0x254>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d019      	beq.n	8003c0e <HAL_GPIO_Init+0x21e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_GPIO_Init+0x258>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d013      	beq.n	8003c0a <HAL_GPIO_Init+0x21a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a19      	ldr	r2, [pc, #100]	; (8003c4c <HAL_GPIO_Init+0x25c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00d      	beq.n	8003c06 <HAL_GPIO_Init+0x216>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a18      	ldr	r2, [pc, #96]	; (8003c50 <HAL_GPIO_Init+0x260>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d007      	beq.n	8003c02 <HAL_GPIO_Init+0x212>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_GPIO_Init+0x264>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d101      	bne.n	8003bfe <HAL_GPIO_Init+0x20e>
 8003bfa:	2309      	movs	r3, #9
 8003bfc:	e02d      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003bfe:	230a      	movs	r3, #10
 8003c00:	e02b      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c02:	2308      	movs	r3, #8
 8003c04:	e029      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c06:	2307      	movs	r3, #7
 8003c08:	e027      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c0a:	2306      	movs	r3, #6
 8003c0c:	e025      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c0e:	2305      	movs	r3, #5
 8003c10:	e023      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c12:	2304      	movs	r3, #4
 8003c14:	e021      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e01f      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	e01d      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e01b      	b.n	8003c5a <HAL_GPIO_Init+0x26a>
 8003c22:	bf00      	nop
 8003c24:	58000080 	.word	0x58000080
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	58000400 	.word	0x58000400
 8003c30:	58020000 	.word	0x58020000
 8003c34:	58020400 	.word	0x58020400
 8003c38:	58020800 	.word	0x58020800
 8003c3c:	58020c00 	.word	0x58020c00
 8003c40:	58021000 	.word	0x58021000
 8003c44:	58021400 	.word	0x58021400
 8003c48:	58021800 	.word	0x58021800
 8003c4c:	58021c00 	.word	0x58021c00
 8003c50:	58022000 	.word	0x58022000
 8003c54:	58022400 	.word	0x58022400
 8003c58:	2300      	movs	r3, #0
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	f002 0203 	and.w	r2, r2, #3
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	4093      	lsls	r3, r2
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c6a:	4938      	ldr	r1, [pc, #224]	; (8003d4c <HAL_GPIO_Init+0x35c>)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	089b      	lsrs	r3, r3, #2
 8003c70:	3302      	adds	r3, #2
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f47f ae63 	bne.w	8003a04 <HAL_GPIO_Init+0x14>
  }
}
 8003d3e:	bf00      	nop
 8003d40:	bf00      	nop
 8003d42:	3724      	adds	r7, #36	; 0x24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	58000400 	.word	0x58000400

08003d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d6c:	e003      	b.n	8003d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	041a      	lsls	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	619a      	str	r2, [r3, #24]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e07f      	b.n	8003e96 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d106      	bne.n	8003db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f9d8 	bl	8001160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2224      	movs	r2, #36	; 0x24
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0201 	bic.w	r2, r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d107      	bne.n	8003dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	e006      	b.n	8003e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d104      	bne.n	8003e1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6859      	ldr	r1, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <HAL_I2C_Init+0x11c>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e3c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691a      	ldr	r2, [r3, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69d9      	ldr	r1, [r3, #28]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	02008000 	.word	0x02008000

08003ea4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b20      	cmp	r3, #32
 8003eb8:	d138      	bne.n	8003f2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e032      	b.n	8003f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	; 0x24
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ef6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6819      	ldr	r1, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e000      	b.n	8003f2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f2c:	2302      	movs	r3, #2
  }
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b20      	cmp	r3, #32
 8003f4e:	d139      	bne.n	8003fc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e033      	b.n	8003fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2224      	movs	r2, #36	; 0x24
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e000      	b.n	8003fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fc4:	2302      	movs	r3, #2
  }
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_PWREx_ConfigSupply+0x70>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d00a      	beq.n	8003ffe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_PWREx_ConfigSupply+0x70>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d001      	beq.n	8003ffa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e01f      	b.n	800403a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e01d      	b.n	800403a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_PWREx_ConfigSupply+0x70>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	490f      	ldr	r1, [pc, #60]	; (8004044 <HAL_PWREx_ConfigSupply+0x70>)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4313      	orrs	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800400e:	f7fd fb6f 	bl	80016f0 <HAL_GetTick>
 8004012:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004014:	e009      	b.n	800402a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004016:	f7fd fb6b 	bl	80016f0 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004024:	d901      	bls.n	800402a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e007      	b.n	800403a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_PWREx_ConfigSupply+0x70>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004036:	d1ee      	bne.n	8004016 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	58024800 	.word	0x58024800

08004048 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08c      	sub	sp, #48	; 0x30
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f000 bc1d 	b.w	8004896 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8087 	beq.w	8004178 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406a:	4b99      	ldr	r3, [pc, #612]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004072:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004074:	4b96      	ldr	r3, [pc, #600]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407c:	2b10      	cmp	r3, #16
 800407e:	d007      	beq.n	8004090 <HAL_RCC_OscConfig+0x48>
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	2b18      	cmp	r3, #24
 8004084:	d110      	bne.n	80040a8 <HAL_RCC_OscConfig+0x60>
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d10b      	bne.n	80040a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004090:	4b8f      	ldr	r3, [pc, #572]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d06c      	beq.n	8004176 <HAL_RCC_OscConfig+0x12e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d168      	bne.n	8004176 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e3f6      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d106      	bne.n	80040c0 <HAL_RCC_OscConfig+0x78>
 80040b2:	4b87      	ldr	r3, [pc, #540]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a86      	ldr	r2, [pc, #536]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e02e      	b.n	800411e <HAL_RCC_OscConfig+0xd6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x9a>
 80040c8:	4b81      	ldr	r3, [pc, #516]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a80      	ldr	r2, [pc, #512]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	6013      	str	r3, [r2, #0]
 80040d4:	4b7e      	ldr	r3, [pc, #504]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a7d      	ldr	r2, [pc, #500]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e01d      	b.n	800411e <HAL_RCC_OscConfig+0xd6>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040ea:	d10c      	bne.n	8004106 <HAL_RCC_OscConfig+0xbe>
 80040ec:	4b78      	ldr	r3, [pc, #480]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a77      	ldr	r2, [pc, #476]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a74      	ldr	r2, [pc, #464]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80040fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e00b      	b.n	800411e <HAL_RCC_OscConfig+0xd6>
 8004106:	4b72      	ldr	r3, [pc, #456]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a71      	ldr	r2, [pc, #452]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b6f      	ldr	r3, [pc, #444]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a6e      	ldr	r2, [pc, #440]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800411c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d013      	beq.n	800414e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fd fae3 	bl	80016f0 <HAL_GetTick>
 800412a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800412e:	f7fd fadf 	bl	80016f0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b64      	cmp	r3, #100	; 0x64
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e3aa      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004140:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0f0      	beq.n	800412e <HAL_RCC_OscConfig+0xe6>
 800414c:	e014      	b.n	8004178 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fd facf 	bl	80016f0 <HAL_GetTick>
 8004152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004156:	f7fd facb 	bl	80016f0 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b64      	cmp	r3, #100	; 0x64
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e396      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004168:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1f0      	bne.n	8004156 <HAL_RCC_OscConfig+0x10e>
 8004174:	e000      	b.n	8004178 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004176:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80cb 	beq.w	800431c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004186:	4b52      	ldr	r3, [pc, #328]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004190:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_RCC_OscConfig+0x164>
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	2b18      	cmp	r3, #24
 80041a0:	d156      	bne.n	8004250 <HAL_RCC_OscConfig+0x208>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d151      	bne.n	8004250 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <HAL_RCC_OscConfig+0x17c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e368      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041c4:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 0219 	bic.w	r2, r3, #25
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	493f      	ldr	r1, [pc, #252]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041d6:	f7fd fa8b 	bl	80016f0 <HAL_GetTick>
 80041da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041de:	f7fd fa87 	bl	80016f0 <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e352      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041f0:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0304 	and.w	r3, r3, #4
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d0f0      	beq.n	80041de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fc:	f7fd fa84 	bl	8001708 <HAL_GetREVID>
 8004200:	4603      	mov	r3, r0
 8004202:	f241 0203 	movw	r2, #4099	; 0x1003
 8004206:	4293      	cmp	r3, r2
 8004208:	d817      	bhi.n	800423a <HAL_RCC_OscConfig+0x1f2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b40      	cmp	r3, #64	; 0x40
 8004210:	d108      	bne.n	8004224 <HAL_RCC_OscConfig+0x1dc>
 8004212:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800421a:	4a2d      	ldr	r2, [pc, #180]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800421c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004220:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004222:	e07b      	b.n	800431c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	031b      	lsls	r3, r3, #12
 8004232:	4927      	ldr	r1, [pc, #156]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004238:	e070      	b.n	800431c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	061b      	lsls	r3, r3, #24
 8004248:	4921      	ldr	r1, [pc, #132]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800424a:	4313      	orrs	r3, r2
 800424c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424e:	e065      	b.n	800431c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d048      	beq.n	80042ea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f023 0219 	bic.w	r2, r3, #25
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	491a      	ldr	r1, [pc, #104]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fd fa41 	bl	80016f0 <HAL_GetTick>
 800426e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004272:	f7fd fa3d 	bl	80016f0 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e308      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	f7fd fa3a 	bl	8001708 <HAL_GetREVID>
 8004294:	4603      	mov	r3, r0
 8004296:	f241 0203 	movw	r2, #4099	; 0x1003
 800429a:	4293      	cmp	r3, r2
 800429c:	d81a      	bhi.n	80042d4 <HAL_RCC_OscConfig+0x28c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b40      	cmp	r3, #64	; 0x40
 80042a4:	d108      	bne.n	80042b8 <HAL_RCC_OscConfig+0x270>
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80042b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b4:	6053      	str	r3, [r2, #4]
 80042b6:	e031      	b.n	800431c <HAL_RCC_OscConfig+0x2d4>
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	031b      	lsls	r3, r3, #12
 80042c6:	4902      	ldr	r1, [pc, #8]	; (80042d0 <HAL_RCC_OscConfig+0x288>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	604b      	str	r3, [r1, #4]
 80042cc:	e026      	b.n	800431c <HAL_RCC_OscConfig+0x2d4>
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	4b9a      	ldr	r3, [pc, #616]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	061b      	lsls	r3, r3, #24
 80042e2:	4997      	ldr	r1, [pc, #604]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	e018      	b.n	800431c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ea:	4b95      	ldr	r3, [pc, #596]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a94      	ldr	r2, [pc, #592]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f6:	f7fd f9fb 	bl	80016f0 <HAL_GetTick>
 80042fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fe:	f7fd f9f7 	bl	80016f0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e2c2      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004310:	4b8b      	ldr	r3, [pc, #556]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a9 	beq.w	800447c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b85      	ldr	r3, [pc, #532]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004332:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004334:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d007      	beq.n	8004350 <HAL_RCC_OscConfig+0x308>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b18      	cmp	r3, #24
 8004344:	d13a      	bne.n	80043bc <HAL_RCC_OscConfig+0x374>
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b01      	cmp	r3, #1
 800434e:	d135      	bne.n	80043bc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004350:	4b7b      	ldr	r3, [pc, #492]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_OscConfig+0x320>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e296      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004368:	f7fd f9ce 	bl	8001708 <HAL_GetREVID>
 800436c:	4603      	mov	r3, r0
 800436e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004372:	4293      	cmp	r3, r2
 8004374:	d817      	bhi.n	80043a6 <HAL_RCC_OscConfig+0x35e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	2b20      	cmp	r3, #32
 800437c:	d108      	bne.n	8004390 <HAL_RCC_OscConfig+0x348>
 800437e:	4b70      	ldr	r3, [pc, #448]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004386:	4a6e      	ldr	r2, [pc, #440]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800438c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800438e:	e075      	b.n	800447c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004390:	4b6b      	ldr	r3, [pc, #428]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	069b      	lsls	r3, r3, #26
 800439e:	4968      	ldr	r1, [pc, #416]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a4:	e06a      	b.n	800447c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a6:	4b66      	ldr	r3, [pc, #408]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	4962      	ldr	r1, [pc, #392]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043ba:	e05f      	b.n	800447c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d042      	beq.n	800444a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043c4:	4b5e      	ldr	r3, [pc, #376]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5d      	ldr	r2, [pc, #372]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd f98e 	bl	80016f0 <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80043d8:	f7fd f98a 	bl	80016f0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e255      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043ea:	4b55      	ldr	r3, [pc, #340]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043f6:	f7fd f987 	bl	8001708 <HAL_GetREVID>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004400:	4293      	cmp	r3, r2
 8004402:	d817      	bhi.n	8004434 <HAL_RCC_OscConfig+0x3ec>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	2b20      	cmp	r3, #32
 800440a:	d108      	bne.n	800441e <HAL_RCC_OscConfig+0x3d6>
 800440c:	4b4c      	ldr	r3, [pc, #304]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004414:	4a4a      	ldr	r2, [pc, #296]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441a:	6053      	str	r3, [r2, #4]
 800441c:	e02e      	b.n	800447c <HAL_RCC_OscConfig+0x434>
 800441e:	4b48      	ldr	r3, [pc, #288]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	069b      	lsls	r3, r3, #26
 800442c:	4944      	ldr	r1, [pc, #272]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
 8004432:	e023      	b.n	800447c <HAL_RCC_OscConfig+0x434>
 8004434:	4b42      	ldr	r3, [pc, #264]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	061b      	lsls	r3, r3, #24
 8004442:	493f      	ldr	r1, [pc, #252]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004444:	4313      	orrs	r3, r2
 8004446:	60cb      	str	r3, [r1, #12]
 8004448:	e018      	b.n	800447c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800444a:	4b3d      	ldr	r3, [pc, #244]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd f94b 	bl	80016f0 <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800445e:	f7fd f947 	bl	80016f0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e212      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004470:	4b33      	ldr	r3, [pc, #204]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d036      	beq.n	80044f6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d019      	beq.n	80044c4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004494:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449c:	f7fd f928 	bl	80016f0 <HAL_GetTick>
 80044a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fd f924 	bl	80016f0 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e1ef      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x45c>
 80044c2:	e018      	b.n	80044f6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	4a1d      	ldr	r2, [pc, #116]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd f90e 	bl	80016f0 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fd f90a 	bl	80016f0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e1d5      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0320 	and.w	r3, r3, #32
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d039      	beq.n	8004576 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d01c      	beq.n	8004544 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004510:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004514:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004516:	f7fd f8eb 	bl	80016f0 <HAL_GetTick>
 800451a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800451e:	f7fd f8e7 	bl	80016f0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e1b2      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCC_OscConfig+0x4f8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x4d6>
 800453c:	e01b      	b.n	8004576 <HAL_RCC_OscConfig+0x52e>
 800453e:	bf00      	nop
 8004540:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004544:	4b9b      	ldr	r3, [pc, #620]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a9a      	ldr	r2, [pc, #616]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800454a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800454e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004550:	f7fd f8ce 	bl	80016f0 <HAL_GetTick>
 8004554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004558:	f7fd f8ca 	bl	80016f0 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e195      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800456a:	4b92      	ldr	r3, [pc, #584]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8081 	beq.w	8004686 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004584:	4b8c      	ldr	r3, [pc, #560]	; (80047b8 <HAL_RCC_OscConfig+0x770>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a8b      	ldr	r2, [pc, #556]	; (80047b8 <HAL_RCC_OscConfig+0x770>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004590:	f7fd f8ae 	bl	80016f0 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004598:	f7fd f8aa 	bl	80016f0 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e175      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045aa:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCC_OscConfig+0x770>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x584>
 80045be:	4b7d      	ldr	r3, [pc, #500]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ca:	e02d      	b.n	8004628 <HAL_RCC_OscConfig+0x5e0>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10c      	bne.n	80045ee <HAL_RCC_OscConfig+0x5a6>
 80045d4:	4b77      	ldr	r3, [pc, #476]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	4a76      	ldr	r2, [pc, #472]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	6713      	str	r3, [r2, #112]	; 0x70
 80045e0:	4b74      	ldr	r3, [pc, #464]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e4:	4a73      	ldr	r2, [pc, #460]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045e6:	f023 0304 	bic.w	r3, r3, #4
 80045ea:	6713      	str	r3, [r2, #112]	; 0x70
 80045ec:	e01c      	b.n	8004628 <HAL_RCC_OscConfig+0x5e0>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d10c      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c8>
 80045f6:	4b6f      	ldr	r3, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80045fc:	f043 0304 	orr.w	r3, r3, #4
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	4b6c      	ldr	r3, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	4a6b      	ldr	r2, [pc, #428]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
 800460e:	e00b      	b.n	8004628 <HAL_RCC_OscConfig+0x5e0>
 8004610:	4b68      	ldr	r3, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a67      	ldr	r2, [pc, #412]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	4b65      	ldr	r3, [pc, #404]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a64      	ldr	r2, [pc, #400]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004630:	f7fd f85e 	bl	80016f0 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fd f85a 	bl	80016f0 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e123      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800464e:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ee      	beq.n	8004638 <HAL_RCC_OscConfig+0x5f0>
 800465a:	e014      	b.n	8004686 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465c:	f7fd f848 	bl	80016f0 <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004662:	e00a      	b.n	800467a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004664:	f7fd f844 	bl	80016f0 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e10d      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800467a:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1ee      	bne.n	8004664 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8102 	beq.w	8004894 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004690:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004698:	2b18      	cmp	r3, #24
 800469a:	f000 80bd 	beq.w	8004818 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	f040 809e 	bne.w	80047e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a41      	ldr	r2, [pc, #260]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80046ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b4:	f7fd f81c 	bl	80016f0 <HAL_GetTick>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046bc:	f7fd f818 	bl	80016f0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0e3      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ce:	4b39      	ldr	r3, [pc, #228]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046da:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80046dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046de:	4b37      	ldr	r3, [pc, #220]	; (80047bc <HAL_RCC_OscConfig+0x774>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	430a      	orrs	r2, r1
 80046ee:	4931      	ldr	r1, [pc, #196]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	628b      	str	r3, [r1, #40]	; 0x28
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	3b01      	subs	r3, #1
 80046fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	3b01      	subs	r3, #1
 8004704:	025b      	lsls	r3, r3, #9
 8004706:	b29b      	uxth	r3, r3
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	3b01      	subs	r3, #1
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471c:	3b01      	subs	r3, #1
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004724:	4923      	ldr	r1, [pc, #140]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800472a:	4b22      	ldr	r3, [pc, #136]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	4a21      	ldr	r2, [pc, #132]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004736:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800473a:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <HAL_RCC_OscConfig+0x778>)
 800473c:	4013      	ands	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004742:	00d2      	lsls	r2, r2, #3
 8004744:	491b      	ldr	r1, [pc, #108]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004746:	4313      	orrs	r3, r2
 8004748:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	f023 020c 	bic.w	r2, r3, #12
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	4917      	ldr	r1, [pc, #92]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800475c:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	f023 0202 	bic.w	r2, r3, #2
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004768:	4912      	ldr	r1, [pc, #72]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800476a:	4313      	orrs	r3, r2
 800476c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004778:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004790:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004792:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <HAL_RCC_OscConfig+0x76c>)
 80047a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047aa:	f7fc ffa1 	bl	80016f0 <HAL_GetTick>
 80047ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047b0:	e011      	b.n	80047d6 <HAL_RCC_OscConfig+0x78e>
 80047b2:	bf00      	nop
 80047b4:	58024400 	.word	0x58024400
 80047b8:	58024800 	.word	0x58024800
 80047bc:	fffffc0c 	.word	0xfffffc0c
 80047c0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fc ff94 	bl	80016f0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e05f      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d6:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <HAL_RCC_OscConfig+0x858>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x77c>
 80047e2:	e057      	b.n	8004894 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e4:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <HAL_RCC_OscConfig+0x858>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a2d      	ldr	r2, [pc, #180]	; (80048a0 <HAL_RCC_OscConfig+0x858>)
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fc ff7e 	bl	80016f0 <HAL_GetTick>
 80047f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f8:	f7fc ff7a 	bl	80016f0 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e045      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800480a:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <HAL_RCC_OscConfig+0x858>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x7b0>
 8004816:	e03d      	b.n	8004894 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004818:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <HAL_RCC_OscConfig+0x858>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800481e:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_RCC_OscConfig+0x858>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b01      	cmp	r3, #1
 800482a:	d031      	beq.n	8004890 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d12a      	bne.n	8004890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d122      	bne.n	8004890 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d11a      	bne.n	8004890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	0a5b      	lsrs	r3, r3, #9
 800485e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004868:	429a      	cmp	r2, r3
 800486a:	d111      	bne.n	8004890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	0c1b      	lsrs	r3, r3, #16
 8004870:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800487a:	429a      	cmp	r2, r3
 800487c:	d108      	bne.n	8004890 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	0e1b      	lsrs	r3, r3, #24
 8004882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3730      	adds	r7, #48	; 0x30
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400

080048a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e19c      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048b8:	4b8a      	ldr	r3, [pc, #552]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d910      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b87      	ldr	r3, [pc, #540]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 020f 	bic.w	r2, r3, #15
 80048ce:	4985      	ldr	r1, [pc, #532]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b83      	ldr	r3, [pc, #524]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e184      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d010      	beq.n	8004916 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	4b7b      	ldr	r3, [pc, #492]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004900:	429a      	cmp	r2, r3
 8004902:	d908      	bls.n	8004916 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004904:	4b78      	ldr	r3, [pc, #480]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	4975      	ldr	r1, [pc, #468]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004912:	4313      	orrs	r3, r2
 8004914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	4b70      	ldr	r3, [pc, #448]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800492e:	429a      	cmp	r2, r3
 8004930:	d908      	bls.n	8004944 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004932:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	496a      	ldr	r1, [pc, #424]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004940:	4313      	orrs	r3, r2
 8004942:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0310 	and.w	r3, r3, #16
 800494c:	2b00      	cmp	r3, #0
 800494e:	d010      	beq.n	8004972 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	4b64      	ldr	r3, [pc, #400]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800495c:	429a      	cmp	r2, r3
 800495e:	d908      	bls.n	8004972 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004960:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	495e      	ldr	r1, [pc, #376]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 800496e:	4313      	orrs	r3, r2
 8004970:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d010      	beq.n	80049a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	4b59      	ldr	r3, [pc, #356]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800498a:	429a      	cmp	r2, r3
 800498c:	d908      	bls.n	80049a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800498e:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4953      	ldr	r1, [pc, #332]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 800499c:	4313      	orrs	r3, r2
 800499e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d908      	bls.n	80049ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f023 020f 	bic.w	r2, r3, #15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	4947      	ldr	r1, [pc, #284]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d055      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	4940      	ldr	r1, [pc, #256]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049f4:	4b3c      	ldr	r3, [pc, #240]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d121      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0f6      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d107      	bne.n	8004a1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a0c:	4b36      	ldr	r3, [pc, #216]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d115      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0ea      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d107      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d109      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0de      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e0d6      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a44:	4b28      	ldr	r3, [pc, #160]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f023 0207 	bic.w	r2, r3, #7
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4925      	ldr	r1, [pc, #148]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a56:	f7fc fe4b 	bl	80016f0 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5c:	e00a      	b.n	8004a74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a5e:	f7fc fe47 	bl	80016f0 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0be      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d1eb      	bne.n	8004a5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d010      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d208      	bcs.n	8004ab4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa2:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	f023 020f 	bic.w	r2, r3, #15
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	490e      	ldr	r1, [pc, #56]	; (8004ae8 <HAL_RCC_ClockConfig+0x244>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d214      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 020f 	bic.w	r2, r3, #15
 8004aca:	4906      	ldr	r1, [pc, #24]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <HAL_RCC_ClockConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e086      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x34e>
 8004ae4:	52002000 	.word	0x52002000
 8004ae8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d208      	bcs.n	8004b1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b08:	4b3c      	ldr	r3, [pc, #240]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	4939      	ldr	r1, [pc, #228]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d010      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	4b34      	ldr	r3, [pc, #208]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d208      	bcs.n	8004b48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b36:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	492e      	ldr	r1, [pc, #184]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d010      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699a      	ldr	r2, [r3, #24]
 8004b58:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d208      	bcs.n	8004b76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	4922      	ldr	r1, [pc, #136]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d010      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69da      	ldr	r2, [r3, #28]
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d208      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	4917      	ldr	r1, [pc, #92]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ba4:	f000 f834 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	4912      	ldr	r1, [pc, #72]	; (8004c00 <HAL_RCC_ClockConfig+0x35c>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	f003 031f 	and.w	r3, r3, #31
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004bc2:	4b0e      	ldr	r3, [pc, #56]	; (8004bfc <HAL_RCC_ClockConfig+0x358>)
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	4a0d      	ldr	r2, [pc, #52]	; (8004c00 <HAL_RCC_ClockConfig+0x35c>)
 8004bcc:	5cd3      	ldrb	r3, [r2, r3]
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <HAL_RCC_ClockConfig+0x360>)
 8004bda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004bdc:	4a0a      	ldr	r2, [pc, #40]	; (8004c08 <HAL_RCC_ClockConfig+0x364>)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <HAL_RCC_ClockConfig+0x368>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fc fd38 	bl	800165c <HAL_InitTick>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	08008b64 	.word	0x08008b64
 8004c04:	24000004 	.word	0x24000004
 8004c08:	24000000 	.word	0x24000000
 8004c0c:	24000008 	.word	0x24000008

08004c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b089      	sub	sp, #36	; 0x24
 8004c14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c16:	4bb3      	ldr	r3, [pc, #716]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c1e:	2b18      	cmp	r3, #24
 8004c20:	f200 8155 	bhi.w	8004ece <HAL_RCC_GetSysClockFreq+0x2be>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004ecf 	.word	0x08004ecf
 8004c34:	08004ecf 	.word	0x08004ecf
 8004c38:	08004ecf 	.word	0x08004ecf
 8004c3c:	08004ecf 	.word	0x08004ecf
 8004c40:	08004ecf 	.word	0x08004ecf
 8004c44:	08004ecf 	.word	0x08004ecf
 8004c48:	08004ecf 	.word	0x08004ecf
 8004c4c:	08004cb7 	.word	0x08004cb7
 8004c50:	08004ecf 	.word	0x08004ecf
 8004c54:	08004ecf 	.word	0x08004ecf
 8004c58:	08004ecf 	.word	0x08004ecf
 8004c5c:	08004ecf 	.word	0x08004ecf
 8004c60:	08004ecf 	.word	0x08004ecf
 8004c64:	08004ecf 	.word	0x08004ecf
 8004c68:	08004ecf 	.word	0x08004ecf
 8004c6c:	08004cbd 	.word	0x08004cbd
 8004c70:	08004ecf 	.word	0x08004ecf
 8004c74:	08004ecf 	.word	0x08004ecf
 8004c78:	08004ecf 	.word	0x08004ecf
 8004c7c:	08004ecf 	.word	0x08004ecf
 8004c80:	08004ecf 	.word	0x08004ecf
 8004c84:	08004ecf 	.word	0x08004ecf
 8004c88:	08004ecf 	.word	0x08004ecf
 8004c8c:	08004cc3 	.word	0x08004cc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c90:	4b94      	ldr	r3, [pc, #592]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d009      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c9c:	4b91      	ldr	r3, [pc, #580]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	08db      	lsrs	r3, r3, #3
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	4a90      	ldr	r2, [pc, #576]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004cae:	e111      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004cb0:	4b8d      	ldr	r3, [pc, #564]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cb2:	61bb      	str	r3, [r7, #24]
    break;
 8004cb4:	e10e      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004cb6:	4b8d      	ldr	r3, [pc, #564]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004cb8:	61bb      	str	r3, [r7, #24]
    break;
 8004cba:	e10b      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004cbc:	4b8c      	ldr	r3, [pc, #560]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004cbe:	61bb      	str	r3, [r7, #24]
    break;
 8004cc0:	e108      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cc2:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004ccc:	4b85      	ldr	r3, [pc, #532]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004cd8:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ce2:	4b80      	ldr	r3, [pc, #512]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	fb02 f303 	mul.w	r3, r2, r3
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80e1 	beq.w	8004ec8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	f000 8083 	beq.w	8004e14 <HAL_RCC_GetSysClockFreq+0x204>
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	f200 80a1 	bhi.w	8004e58 <HAL_RCC_GetSysClockFreq+0x248>
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x114>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d056      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d22:	e099      	b.n	8004e58 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d24:	4b6f      	ldr	r3, [pc, #444]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d02d      	beq.n	8004d8c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d30:	4b6c      	ldr	r3, [pc, #432]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	08db      	lsrs	r3, r3, #3
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	4a6b      	ldr	r2, [pc, #428]	; (8004ee8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d40:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d5a:	4b62      	ldr	r3, [pc, #392]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004d6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004d8a:	e087      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004ef8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d9e:	4b51      	ldr	r3, [pc, #324]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004db2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dce:	e065      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	ee07 3a90 	vmov	s15, r3
 8004dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dda:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	4b40      	ldr	r3, [pc, #256]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004df6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e12:	e043      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	ee07 3a90 	vmov	s15, r3
 8004e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e3a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e56:	e021      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004efc <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b1e      	ldr	r3, [pc, #120]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e7e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004ef4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e9a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	0a5b      	lsrs	r3, r3, #9
 8004ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec0:	ee17 3a90 	vmov	r3, s15
 8004ec4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004ec6:	e005      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
    break;
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004ece:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ed0:	61bb      	str	r3, [r7, #24]
    break;
 8004ed2:	bf00      	nop
  }

  return sysclockfreq;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	03d09000 	.word	0x03d09000
 8004eec:	003d0900 	.word	0x003d0900
 8004ef0:	017d7840 	.word	0x017d7840
 8004ef4:	46000000 	.word	0x46000000
 8004ef8:	4c742400 	.word	0x4c742400
 8004efc:	4a742400 	.word	0x4a742400
 8004f00:	4bbebc20 	.word	0x4bbebc20

08004f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f0a:	f7ff fe81 	bl	8004c10 <HAL_RCC_GetSysClockFreq>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	0a1b      	lsrs	r3, r3, #8
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	490f      	ldr	r1, [pc, #60]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f1c:	5ccb      	ldrb	r3, [r1, r3]
 8004f1e:	f003 031f 	and.w	r3, r3, #31
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <HAL_RCC_GetHCLKFreq+0x54>)
 8004f32:	5cd3      	ldrb	r3, [r2, r3]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8004f40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f42:	4a07      	ldr	r2, [pc, #28]	; (8004f60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <HAL_RCC_GetHCLKFreq+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	58024400 	.word	0x58024400
 8004f58:	08008b64 	.word	0x08008b64
 8004f5c:	24000004 	.word	0x24000004
 8004f60:	24000000 	.word	0x24000000

08004f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004f68:	f7ff ffcc 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	4904      	ldr	r1, [pc, #16]	; (8004f8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004f7a:	5ccb      	ldrb	r3, [r1, r3]
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	58024400 	.word	0x58024400
 8004f8c:	08008b64 	.word	0x08008b64

08004f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004f94:	f7ff ffb6 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b06      	ldr	r3, [pc, #24]	; (8004fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4904      	ldr	r1, [pc, #16]	; (8004fb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	08008b64 	.word	0x08008b64

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d03f      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fe0:	d02a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fe6:	d824      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fec:	d018      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff2:	d81e      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffc:	d007      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ffe:	e018      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4ba3      	ldr	r3, [pc, #652]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4aa2      	ldr	r2, [pc, #648]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800500c:	e015      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	2102      	movs	r1, #2
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fff9 	bl	800700c <RCCEx_PLL2_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800501e:	e00c      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3324      	adds	r3, #36	; 0x24
 8005024:	2102      	movs	r1, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f002 f8a2 	bl	8007170 <RCCEx_PLL3_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005030:	e003      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	75fb      	strb	r3, [r7, #23]
      break;
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005040:	4b93      	ldr	r3, [pc, #588]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504c:	4990      	ldr	r1, [pc, #576]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800504e:	4313      	orrs	r3, r2
 8005050:	650b      	str	r3, [r1, #80]	; 0x50
 8005052:	e001      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d03d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	2b04      	cmp	r3, #4
 800506a:	d826      	bhi.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800506c:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800506e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005072:	bf00      	nop
 8005074:	08005089 	.word	0x08005089
 8005078:	08005097 	.word	0x08005097
 800507c:	080050a9 	.word	0x080050a9
 8005080:	080050c1 	.word	0x080050c1
 8005084:	080050c1 	.word	0x080050c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005088:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a80      	ldr	r2, [pc, #512]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800508e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005094:	e015      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	2100      	movs	r1, #0
 800509c:	4618      	mov	r0, r3
 800509e:	f001 ffb5 	bl	800700c <RCCEx_PLL2_Config>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050a6:	e00c      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3324      	adds	r3, #36	; 0x24
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f002 f85e 	bl	8007170 <RCCEx_PLL3_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050b8:	e003      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
      break;
 80050be:	e000      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80050c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c2:	7dfb      	ldrb	r3, [r7, #23]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c8:	4b71      	ldr	r3, [pc, #452]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050cc:	f023 0207 	bic.w	r2, r3, #7
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d4:	496e      	ldr	r1, [pc, #440]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	650b      	str	r3, [r1, #80]	; 0x50
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d042      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f4:	d02b      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80050f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fa:	d825      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80050fc:	2bc0      	cmp	r3, #192	; 0xc0
 80050fe:	d028      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005100:	2bc0      	cmp	r3, #192	; 0xc0
 8005102:	d821      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d016      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d81d      	bhi.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005110:	2b40      	cmp	r3, #64	; 0x40
 8005112:	d007      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005114:	e018      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005116:	4b5e      	ldr	r3, [pc, #376]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	4a5d      	ldr	r2, [pc, #372]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800511c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005122:	e017      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	2100      	movs	r1, #0
 800512a:	4618      	mov	r0, r3
 800512c:	f001 ff6e 	bl	800700c <RCCEx_PLL2_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005134:	e00e      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3324      	adds	r3, #36	; 0x24
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f002 f817 	bl	8007170 <RCCEx_PLL3_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005146:	e005      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	e002      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005152:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800515a:	4b4d      	ldr	r3, [pc, #308]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005166:	494a      	ldr	r1, [pc, #296]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	650b      	str	r3, [r1, #80]	; 0x50
 800516c:	e001      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	7dfb      	ldrb	r3, [r7, #23]
 8005170:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517a:	2b00      	cmp	r3, #0
 800517c:	d049      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005188:	d030      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x230>
 800518a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800518e:	d82a      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005190:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005194:	d02c      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005196:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800519a:	d824      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800519c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a0:	d018      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80051a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051a6:	d81e      	bhi.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80051ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051b0:	d007      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80051b2:	e018      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b4:	4b36      	ldr	r3, [pc, #216]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a35      	ldr	r2, [pc, #212]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051c0:	e017      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3304      	adds	r3, #4
 80051c6:	2100      	movs	r1, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 ff1f 	bl	800700c <RCCEx_PLL2_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80051d2:	e00e      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3324      	adds	r3, #36	; 0x24
 80051d8:	2100      	movs	r1, #0
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 ffc8 	bl	8007170 <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80051e4:	e005      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ea:	e002      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80051ec:	bf00      	nop
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80051f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f2:	7dfb      	ldrb	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005206:	4922      	ldr	r1, [pc, #136]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005208:	4313      	orrs	r3, r2
 800520a:	658b      	str	r3, [r1, #88]	; 0x58
 800520c:	e001      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800521a:	2b00      	cmp	r3, #0
 800521c:	d04b      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005228:	d030      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800522a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800522e:	d82a      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005230:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005234:	d02e      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800523a:	d824      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800523c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005240:	d018      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005246:	d81e      	bhi.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800524c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005250:	d007      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005252:	e018      	b.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005254:	4b0e      	ldr	r3, [pc, #56]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	4a0d      	ldr	r2, [pc, #52]	; (8005290 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800525a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800525e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005260:	e019      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f001 fecf 	bl	800700c <RCCEx_PLL2_Config>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005272:	e010      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3324      	adds	r3, #36	; 0x24
 8005278:	2100      	movs	r1, #0
 800527a:	4618      	mov	r0, r3
 800527c:	f001 ff78 	bl	8007170 <RCCEx_PLL3_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005284:	e007      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	75fb      	strb	r3, [r7, #23]
      break;
 800528a:	e004      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800528c:	bf00      	nop
 800528e:	e002      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005290:	58024400 	.word	0x58024400
      break;
 8005294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800529c:	4b99      	ldr	r3, [pc, #612]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800529e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80052aa:	4996      	ldr	r1, [pc, #600]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	658b      	str	r3, [r1, #88]	; 0x58
 80052b0:	e001      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d032      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c6:	2b30      	cmp	r3, #48	; 0x30
 80052c8:	d01c      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80052ca:	2b30      	cmp	r3, #48	; 0x30
 80052cc:	d817      	bhi.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	d00c      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d813      	bhi.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d016      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80052da:	2b10      	cmp	r3, #16
 80052dc:	d10f      	bne.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052de:	4b89      	ldr	r3, [pc, #548]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	4a88      	ldr	r2, [pc, #544]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80052e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80052ea:	e00e      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2102      	movs	r1, #2
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 fe8a 	bl	800700c <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80052fc:	e005      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
      break;
 8005302:	e002      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005304:	bf00      	nop
 8005306:	e000      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005308:	bf00      	nop
    }

    if(ret == HAL_OK)
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d109      	bne.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005310:	4b7c      	ldr	r3, [pc, #496]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005314:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531c:	4979      	ldr	r1, [pc, #484]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800531e:	4313      	orrs	r3, r2
 8005320:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005322:	e001      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d047      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800533c:	d030      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800533e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005342:	d82a      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005344:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005348:	d02c      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800534a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800534e:	d824      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005354:	d018      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800535a:	d81e      	bhi.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d007      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005366:	e018      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005368:	4b66      	ldr	r3, [pc, #408]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	4a65      	ldr	r2, [pc, #404]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800536e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005374:	e017      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	2100      	movs	r1, #0
 800537c:	4618      	mov	r0, r3
 800537e:	f001 fe45 	bl	800700c <RCCEx_PLL2_Config>
 8005382:	4603      	mov	r3, r0
 8005384:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005386:	e00e      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3324      	adds	r3, #36	; 0x24
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f001 feee 	bl	8007170 <RCCEx_PLL3_Config>
 8005394:	4603      	mov	r3, r0
 8005396:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005398:	e005      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	75fb      	strb	r3, [r7, #23]
      break;
 800539e:	e002      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80053a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d109      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80053ac:	4b55      	ldr	r3, [pc, #340]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	4952      	ldr	r1, [pc, #328]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	650b      	str	r3, [r1, #80]	; 0x50
 80053be:	e001      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	7dfb      	ldrb	r3, [r7, #23]
 80053c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d049      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053d8:	d02e      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80053da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053de:	d828      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80053e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053e4:	d02a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80053e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ea:	d822      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80053ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f0:	d026      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80053f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f6:	d81c      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80053f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053fc:	d010      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80053fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005402:	d816      	bhi.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01d      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800540c:	d111      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	2101      	movs	r1, #1
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fdf9 	bl	800700c <RCCEx_PLL2_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800541e:	e012      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3324      	adds	r3, #36	; 0x24
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fea2 	bl	8007170 <RCCEx_PLL3_Config>
 800542c:	4603      	mov	r3, r0
 800542e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005430:	e009      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	75fb      	strb	r3, [r7, #23]
      break;
 8005436:	e006      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005438:	bf00      	nop
 800543a:	e004      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800543c:	bf00      	nop
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005440:	bf00      	nop
 8005442:	e000      	b.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005444:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800544c:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005458:	492a      	ldr	r1, [pc, #168]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800545a:	4313      	orrs	r3, r2
 800545c:	650b      	str	r3, [r1, #80]	; 0x50
 800545e:	e001      	b.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d04d      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800547a:	d02e      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800547c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005480:	d828      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005486:	d02a      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548c:	d822      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800548e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005492:	d026      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005494:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005498:	d81c      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800549a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549e:	d010      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d816      	bhi.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01d      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80054aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ae:	d111      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	2101      	movs	r1, #1
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 fda8 	bl	800700c <RCCEx_PLL2_Config>
 80054bc:	4603      	mov	r3, r0
 80054be:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054c0:	e012      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3324      	adds	r3, #36	; 0x24
 80054c6:	2101      	movs	r1, #1
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 fe51 	bl	8007170 <RCCEx_PLL3_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80054d2:	e009      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	75fb      	strb	r3, [r7, #23]
      break;
 80054d8:	e006      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80054da:	bf00      	nop
 80054dc:	e004      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80054de:	bf00      	nop
 80054e0:	e002      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80054e2:	bf00      	nop
 80054e4:	e000      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80054e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e8:	7dfb      	ldrb	r3, [r7, #23]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10c      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054fc:	4901      	ldr	r1, [pc, #4]	; (8005504 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	658b      	str	r3, [r1, #88]	; 0x58
 8005502:	e003      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005504:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
 800550a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005520:	d00e      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005526:	d814      	bhi.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800552c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005530:	d10f      	bne.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005532:	4baf      	ldr	r3, [pc, #700]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	4aae      	ldr	r2, [pc, #696]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800553e:	e00c      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	2101      	movs	r1, #1
 8005546:	4618      	mov	r0, r3
 8005548:	f001 fd60 	bl	800700c <RCCEx_PLL2_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005550:	e003      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
      break;
 8005556:	e000      	b.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800555a:	7dfb      	ldrb	r3, [r7, #23]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d109      	bne.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005560:	4ba3      	ldr	r3, [pc, #652]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005564:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800556c:	49a0      	ldr	r1, [pc, #640]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800556e:	4313      	orrs	r3, r2
 8005570:	650b      	str	r3, [r1, #80]	; 0x50
 8005572:	e001      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d032      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005588:	2b03      	cmp	r3, #3
 800558a:	d81b      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055cb 	.word	0x080055cb
 8005598:	080055a5 	.word	0x080055a5
 800559c:	080055b3 	.word	0x080055b3
 80055a0:	080055cb 	.word	0x080055cb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a4:	4b92      	ldr	r3, [pc, #584]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a8:	4a91      	ldr	r2, [pc, #580]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055b0:	e00c      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	2102      	movs	r1, #2
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 fd27 	bl	800700c <RCCEx_PLL2_Config>
 80055be:	4603      	mov	r3, r0
 80055c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80055c2:	e003      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
      break;
 80055c8:	e000      	b.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80055ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80055d2:	4b87      	ldr	r3, [pc, #540]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	f023 0203 	bic.w	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	4984      	ldr	r1, [pc, #528]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055e4:	e001      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 8086 	beq.w	8005704 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055f8:	4b7e      	ldr	r3, [pc, #504]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7d      	ldr	r2, [pc, #500]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80055fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005602:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005604:	f7fc f874 	bl	80016f0 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800560a:	e009      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560c:	f7fc f870 	bl	80016f0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d902      	bls.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	75fb      	strb	r3, [r7, #23]
        break;
 800561e:	e005      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005620:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0ef      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d166      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005632:	4b6f      	ldr	r3, [pc, #444]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800563c:	4053      	eors	r3, r2
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005642:	2b00      	cmp	r3, #0
 8005644:	d013      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005646:	4b6a      	ldr	r3, [pc, #424]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005650:	4b67      	ldr	r3, [pc, #412]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a66      	ldr	r2, [pc, #408]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800565c:	4b64      	ldr	r3, [pc, #400]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a63      	ldr	r2, [pc, #396]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005668:	4a61      	ldr	r2, [pc, #388]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005678:	d115      	bne.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fc f839 	bl	80016f0 <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005680:	e00b      	b.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005682:	f7fc f835 	bl	80016f0 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005690:	4293      	cmp	r3, r2
 8005692:	d902      	bls.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	75fb      	strb	r3, [r7, #23]
            break;
 8005698:	e005      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569a:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0ed      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d126      	bne.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ba:	d10d      	bne.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80056bc:	4b4c      	ldr	r3, [pc, #304]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ca:	0919      	lsrs	r1, r3, #4
 80056cc:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80056ce:	400b      	ands	r3, r1
 80056d0:	4947      	ldr	r1, [pc, #284]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	610b      	str	r3, [r1, #16]
 80056d6:	e005      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80056d8:	4b45      	ldr	r3, [pc, #276]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	4a44      	ldr	r2, [pc, #272]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80056e2:	6113      	str	r3, [r2, #16]
 80056e4:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f2:	493f      	ldr	r1, [pc, #252]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	670b      	str	r3, [r1, #112]	; 0x70
 80056f8:	e004      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	75bb      	strb	r3, [r7, #22]
 80056fe:	e001      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	7dfb      	ldrb	r3, [r7, #23]
 8005702:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8085 	beq.w	800581c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005716:	2b28      	cmp	r3, #40	; 0x28
 8005718:	d866      	bhi.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	080057fd 	.word	0x080057fd
 8005724:	080057e9 	.word	0x080057e9
 8005728:	080057e9 	.word	0x080057e9
 800572c:	080057e9 	.word	0x080057e9
 8005730:	080057e9 	.word	0x080057e9
 8005734:	080057e9 	.word	0x080057e9
 8005738:	080057e9 	.word	0x080057e9
 800573c:	080057e9 	.word	0x080057e9
 8005740:	080057c5 	.word	0x080057c5
 8005744:	080057e9 	.word	0x080057e9
 8005748:	080057e9 	.word	0x080057e9
 800574c:	080057e9 	.word	0x080057e9
 8005750:	080057e9 	.word	0x080057e9
 8005754:	080057e9 	.word	0x080057e9
 8005758:	080057e9 	.word	0x080057e9
 800575c:	080057e9 	.word	0x080057e9
 8005760:	080057d7 	.word	0x080057d7
 8005764:	080057e9 	.word	0x080057e9
 8005768:	080057e9 	.word	0x080057e9
 800576c:	080057e9 	.word	0x080057e9
 8005770:	080057e9 	.word	0x080057e9
 8005774:	080057e9 	.word	0x080057e9
 8005778:	080057e9 	.word	0x080057e9
 800577c:	080057e9 	.word	0x080057e9
 8005780:	080057fd 	.word	0x080057fd
 8005784:	080057e9 	.word	0x080057e9
 8005788:	080057e9 	.word	0x080057e9
 800578c:	080057e9 	.word	0x080057e9
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057e9 	.word	0x080057e9
 8005798:	080057e9 	.word	0x080057e9
 800579c:	080057e9 	.word	0x080057e9
 80057a0:	080057fd 	.word	0x080057fd
 80057a4:	080057e9 	.word	0x080057e9
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	080057e9 	.word	0x080057e9
 80057b0:	080057e9 	.word	0x080057e9
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080057e9 	.word	0x080057e9
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057fd 	.word	0x080057fd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	2101      	movs	r1, #1
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 fc1e 	bl	800700c <RCCEx_PLL2_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057d4:	e013      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3324      	adds	r3, #36	; 0x24
 80057da:	2101      	movs	r1, #1
 80057dc:	4618      	mov	r0, r3
 80057de:	f001 fcc7 	bl	8007170 <RCCEx_PLL3_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80057e6:	e00a      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
      break;
 80057ec:	e007      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 80057ee:	bf00      	nop
 80057f0:	58024400 	.word	0x58024400
 80057f4:	58024800 	.word	0x58024800
 80057f8:	00ffffcf 	.word	0x00ffffcf
      break;
 80057fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d109      	bne.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005804:	4b96      	ldr	r3, [pc, #600]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005808:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005810:	4993      	ldr	r1, [pc, #588]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005812:	4313      	orrs	r3, r2
 8005814:	654b      	str	r3, [r1, #84]	; 0x54
 8005816:	e001      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d038      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800582c:	2b05      	cmp	r3, #5
 800582e:	d821      	bhi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	0800587b 	.word	0x0800587b
 800583c:	08005851 	.word	0x08005851
 8005840:	08005863 	.word	0x08005863
 8005844:	0800587b 	.word	0x0800587b
 8005848:	0800587b 	.word	0x0800587b
 800584c:	0800587b 	.word	0x0800587b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	2101      	movs	r1, #1
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fbd8 	bl	800700c <RCCEx_PLL2_Config>
 800585c:	4603      	mov	r3, r0
 800585e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005860:	e00c      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	3324      	adds	r3, #36	; 0x24
 8005866:	2101      	movs	r1, #1
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fc81 	bl	8007170 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005872:	e003      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	75fb      	strb	r3, [r7, #23]
      break;
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800587a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005882:	4b77      	ldr	r3, [pc, #476]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f023 0207 	bic.w	r2, r3, #7
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800588e:	4974      	ldr	r1, [pc, #464]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005890:	4313      	orrs	r3, r2
 8005892:	654b      	str	r3, [r1, #84]	; 0x54
 8005894:	e001      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03a      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	2b05      	cmp	r3, #5
 80058ae:	d821      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058fb 	.word	0x080058fb
 80058bc:	080058d1 	.word	0x080058d1
 80058c0:	080058e3 	.word	0x080058e3
 80058c4:	080058fb 	.word	0x080058fb
 80058c8:	080058fb 	.word	0x080058fb
 80058cc:	080058fb 	.word	0x080058fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	2101      	movs	r1, #1
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fb98 	bl	800700c <RCCEx_PLL2_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80058e0:	e00c      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3324      	adds	r3, #36	; 0x24
 80058e6:	2101      	movs	r1, #1
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 fc41 	bl	8007170 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80058f2:	e003      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	e000      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80058fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10a      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005902:	4b57      	ldr	r3, [pc, #348]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005906:	f023 0207 	bic.w	r2, r3, #7
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005910:	4953      	ldr	r1, [pc, #332]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005912:	4313      	orrs	r3, r2
 8005914:	658b      	str	r3, [r1, #88]	; 0x58
 8005916:	e001      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d04b      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005932:	d02e      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005934:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005938:	d828      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800593a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800593e:	d02a      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005944:	d822      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005946:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800594a:	d026      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800594c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005950:	d81c      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005956:	d010      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595c:	d816      	bhi.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01d      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005962:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005966:	d111      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f001 fb4c 	bl	800700c <RCCEx_PLL2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005978:	e012      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3324      	adds	r3, #36	; 0x24
 800597e:	2102      	movs	r1, #2
 8005980:	4618      	mov	r0, r3
 8005982:	f001 fbf5 	bl	8007170 <RCCEx_PLL3_Config>
 8005986:	4603      	mov	r3, r0
 8005988:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800598a:	e009      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	75fb      	strb	r3, [r7, #23]
      break;
 8005990:	e006      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005992:	bf00      	nop
 8005994:	e004      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005996:	bf00      	nop
 8005998:	e002      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800599e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059a6:	4b2e      	ldr	r3, [pc, #184]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	492a      	ldr	r1, [pc, #168]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	654b      	str	r3, [r1, #84]	; 0x54
 80059ba:	e001      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059bc:	7dfb      	ldrb	r3, [r7, #23]
 80059be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d04d      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059d6:	d02e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80059d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80059dc:	d828      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80059de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e2:	d02a      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80059e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e8:	d822      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80059ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059ee:	d026      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80059f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059f4:	d81c      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fa:	d010      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80059fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a00:	d816      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01d      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a0a:	d111      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	2100      	movs	r1, #0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f001 fafa 	bl	800700c <RCCEx_PLL2_Config>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a1c:	e012      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	3324      	adds	r3, #36	; 0x24
 8005a22:	2102      	movs	r1, #2
 8005a24:	4618      	mov	r0, r3
 8005a26:	f001 fba3 	bl	8007170 <RCCEx_PLL3_Config>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005a2e:	e009      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
      break;
 8005a34:	e006      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a36:	bf00      	nop
 8005a38:	e004      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e002      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a3e:	bf00      	nop
 8005a40:	e000      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a44:	7dfb      	ldrb	r3, [r7, #23]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a4a:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a58:	4901      	ldr	r1, [pc, #4]	; (8005a60 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a5e:	e003      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005a60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	7dfb      	ldrb	r3, [r7, #23]
 8005a66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d04b      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a7e:	d02e      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005a80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005a84:	d828      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a8a:	d02a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	d822      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a96:	d026      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005a98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005a9c:	d81c      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005a9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa2:	d010      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aa8:	d816      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d01d      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab2:	d111      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f001 faa6 	bl	800700c <RCCEx_PLL2_Config>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ac4:	e012      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3324      	adds	r3, #36	; 0x24
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f001 fb4f 	bl	8007170 <RCCEx_PLL3_Config>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005ad6:	e009      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	e006      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005ade:	bf00      	nop
 8005ae0:	e004      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005aea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005af2:	4b9d      	ldr	r3, [pc, #628]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b00:	4999      	ldr	r1, [pc, #612]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	658b      	str	r3, [r1, #88]	; 0x58
 8005b06:	e001      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b08:	7dfb      	ldrb	r3, [r7, #23]
 8005b0a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d01a      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	d10a      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3324      	adds	r3, #36	; 0x24
 8005b28:	2102      	movs	r1, #2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fb20 	bl	8007170 <RCCEx_PLL3_Config>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005b3a:	4b8b      	ldr	r3, [pc, #556]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b48:	4987      	ldr	r1, [pc, #540]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d01a      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b64:	d10a      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	3324      	adds	r3, #36	; 0x24
 8005b6a:	2102      	movs	r1, #2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 faff 	bl	8007170 <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b7c:	4b7a      	ldr	r3, [pc, #488]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b8a:	4977      	ldr	r1, [pc, #476]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d034      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba6:	d01d      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bac:	d817      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb6:	d009      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005bb8:	e011      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fa23 	bl	800700c <RCCEx_PLL2_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005bca:	e00c      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3324      	adds	r3, #36	; 0x24
 8005bd0:	2102      	movs	r1, #2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 facc 	bl	8007170 <RCCEx_PLL3_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005bdc:	e003      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	75fb      	strb	r3, [r7, #23]
      break;
 8005be2:	e000      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bec:	4b5e      	ldr	r3, [pc, #376]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bfa:	495b      	ldr	r1, [pc, #364]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	658b      	str	r3, [r1, #88]	; 0x58
 8005c00:	e001      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d033      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c1c:	d01c      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005c1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c22:	d816      	bhi.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005c24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c28:	d003      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c2e:	d007      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005c30:	e00f      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c32:	4b4d      	ldr	r3, [pc, #308]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4a4c      	ldr	r2, [pc, #304]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c3e:	e00c      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3324      	adds	r3, #36	; 0x24
 8005c44:	2101      	movs	r1, #1
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 fa92 	bl	8007170 <RCCEx_PLL3_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
      break;
 8005c56:	e000      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c5a:	7dfb      	ldrb	r3, [r7, #23]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c60:	4b41      	ldr	r3, [pc, #260]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c6e:	493e      	ldr	r1, [pc, #248]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	654b      	str	r3, [r1, #84]	; 0x54
 8005c74:	e001      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c76:	7dfb      	ldrb	r3, [r7, #23]
 8005c78:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d029      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d003      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c92:	d007      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005c94:	e00f      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9a:	4a33      	ldr	r2, [pc, #204]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ca2:	e00b      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	2102      	movs	r1, #2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 f9ae 	bl	800700c <RCCEx_PLL2_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005cb4:	e002      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cbc:	7dfb      	ldrb	r3, [r7, #23]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005cc2:	4b29      	ldr	r3, [pc, #164]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cce:	4926      	ldr	r1, [pc, #152]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cd4:	e001      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd6:	7dfb      	ldrb	r3, [r7, #23]
 8005cd8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00a      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3324      	adds	r3, #36	; 0x24
 8005cea:	2102      	movs	r1, #2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fa3f 	bl	8007170 <RCCEx_PLL3_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d033      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d10:	d017      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d16:	d811      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1c:	d013      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d80b      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d010      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d2e:	4b0e      	ldr	r3, [pc, #56]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005d3a:	e007      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d40:	e004      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d42:	bf00      	nop
 8005d44:	e002      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10c      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5e:	4902      	ldr	r1, [pc, #8]	; (8005d68 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	654b      	str	r3, [r1, #84]	; 0x54
 8005d64:	e004      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005d66:	bf00      	nop
 8005d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
 8005d6e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005d7c:	4b31      	ldr	r3, [pc, #196]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d88:	492e      	ldr	r1, [pc, #184]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d009      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005d9a:	4b2a      	ldr	r3, [pc, #168]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005da8:	4926      	ldr	r1, [pc, #152]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d008      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dba:	4b22      	ldr	r3, [pc, #136]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dc6:	491f      	ldr	r1, [pc, #124]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00d      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005dd8:	4b1a      	ldr	r3, [pc, #104]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	4a19      	ldr	r2, [pc, #100]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005de2:	6113      	str	r3, [r2, #16]
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005dee:	4915      	ldr	r1, [pc, #84]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	da08      	bge.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005dfc:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e08:	490e      	ldr	r1, [pc, #56]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d009      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e28:	4906      	ldr	r1, [pc, #24]	; (8005e44 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005e2e:	7dbb      	ldrb	r3, [r7, #22]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	58024400 	.word	0x58024400

08005e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b090      	sub	sp, #64	; 0x40
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e56:	f040 8095 	bne.w	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005e5a:	4b97      	ldr	r3, [pc, #604]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	f200 8088 	bhi.w	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005e6c:	a201      	add	r2, pc, #4	; (adr r2, 8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e72:	bf00      	nop
 8005e74:	08005e89 	.word	0x08005e89
 8005e78:	08005eb1 	.word	0x08005eb1
 8005e7c:	08005ed9 	.word	0x08005ed9
 8005e80:	08005f75 	.word	0x08005f75
 8005e84:	08005f01 	.word	0x08005f01
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005e88:	4b8b      	ldr	r3, [pc, #556]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e94:	d108      	bne.n	8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 ff64 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ea4:	f000 bc94 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eac:	f000 bc90 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005eb0:	4b81      	ldr	r3, [pc, #516]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ebc:	d108      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ebe:	f107 0318 	add.w	r3, r7, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fca8 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ecc:	f000 bc80 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed4:	f000 bc7c 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ed8:	4b77      	ldr	r3, [pc, #476]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee4:	d108      	bne.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ee6:	f107 030c 	add.w	r3, r7, #12
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fde8 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ef4:	f000 bc6c 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005efc:	f000 bc68 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005f00:	4b6d      	ldr	r3, [pc, #436]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f08:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f0a:	4b6b      	ldr	r3, [pc, #428]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	d10c      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f1c:	4b66      	ldr	r3, [pc, #408]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	08db      	lsrs	r3, r3, #3
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	4a65      	ldr	r2, [pc, #404]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f2e:	e01f      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f30:	4b61      	ldr	r3, [pc, #388]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f3c:	d106      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f44:	d102      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f46:	4b5e      	ldr	r3, [pc, #376]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f4a:	e011      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f4c:	4b5a      	ldr	r3, [pc, #360]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f58:	d106      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f60:	d102      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f62:	4b58      	ldr	r3, [pc, #352]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005f6c:	f000 bc30 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f70:	f000 bc2e 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f74:	4b54      	ldr	r3, [pc, #336]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f78:	f000 bc2a 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f80:	f000 bc26 	b.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f8a:	f040 809f 	bne.w	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005f8e:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005f96:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f9e:	d04d      	beq.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa6:	f200 8084 	bhi.w	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2bc0      	cmp	r3, #192	; 0xc0
 8005fae:	d07d      	beq.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8005fb4:	d87d      	bhi.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d02d      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d877      	bhi.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d012      	beq.n	8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005fce:	e070      	b.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005fd0:	4b39      	ldr	r3, [pc, #228]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fdc:	d107      	bne.n	8005fee <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fec0 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005fec:	e3f0      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ff2:	e3ed      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ff4:	4b30      	ldr	r3, [pc, #192]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006000:	d107      	bne.n	8006012 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006002:	f107 0318 	add.w	r3, r7, #24
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc06 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006010:	e3de      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006016:	e3db      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006024:	d107      	bne.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006026:	f107 030c 	add.w	r3, r7, #12
 800602a:	4618      	mov	r0, r3
 800602c:	f000 fd48 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006034:	e3cc      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800603a:	e3c9      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800603c:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006044:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006046:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d10c      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006054:	2b00      	cmp	r3, #0
 8006056:	d109      	bne.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006058:	4b17      	ldr	r3, [pc, #92]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	08db      	lsrs	r3, r3, #3
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	4a16      	ldr	r2, [pc, #88]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800606a:	e01e      	b.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800606c:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d106      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800607a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006080:	d102      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006082:	4b0f      	ldr	r3, [pc, #60]	; (80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006086:	e010      	b.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006088:	4b0b      	ldr	r3, [pc, #44]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006094:	d106      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800609c:	d102      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a2:	e002      	b.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80060a8:	e392      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80060aa:	e391      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80060ac:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060b0:	e38e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060b6:	e38b      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80060b8:	58024400 	.word	0x58024400
 80060bc:	03d09000 	.word	0x03d09000
 80060c0:	003d0900 	.word	0x003d0900
 80060c4:	017d7840 	.word	0x017d7840
 80060c8:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d2:	f040 809c 	bne.w	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80060d6:	4b9d      	ldr	r3, [pc, #628]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80060d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060da:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80060de:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060e6:	d054      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060ee:	f200 808b 	bhi.w	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80060f8:	f000 8083 	beq.w	8006202 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006102:	f200 8081 	bhi.w	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800610c:	d02f      	beq.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006114:	d878      	bhi.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006122:	d012      	beq.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006124:	e070      	b.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006126:	4b89      	ldr	r3, [pc, #548]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006132:	d107      	bne.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fe15 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006142:	e345      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006148:	e342      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800614a:	4b80      	ldr	r3, [pc, #512]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006156:	d107      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006158:	f107 0318 	add.w	r3, r7, #24
 800615c:	4618      	mov	r0, r3
 800615e:	f000 fb5b 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006166:	e333      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800616c:	e330      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800616e:	4b77      	ldr	r3, [pc, #476]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617a:	d107      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617c:	f107 030c 	add.w	r3, r7, #12
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fc9d 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800618a:	e321      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006190:	e31e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006192:	4b6e      	ldr	r3, [pc, #440]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006196:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800619a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800619c:	4b6b      	ldr	r3, [pc, #428]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b04      	cmp	r3, #4
 80061a6:	d10c      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80061a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061ae:	4b67      	ldr	r3, [pc, #412]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	08db      	lsrs	r3, r3, #3
 80061b4:	f003 0303 	and.w	r3, r3, #3
 80061b8:	4a65      	ldr	r2, [pc, #404]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80061ba:	fa22 f303 	lsr.w	r3, r2, r3
 80061be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061c0:	e01e      	b.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061c2:	4b62      	ldr	r3, [pc, #392]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ce:	d106      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80061d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061d6:	d102      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80061d8:	4b5e      	ldr	r3, [pc, #376]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80061da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061dc:	e010      	b.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061de:	4b5b      	ldr	r3, [pc, #364]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061ea:	d106      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061f2:	d102      	bne.n	80061fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80061f4:	4b58      	ldr	r3, [pc, #352]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80061f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f8:	e002      	b.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80061fe:	e2e7      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006200:	e2e6      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006202:	4b56      	ldr	r3, [pc, #344]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006206:	e2e3      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800620c:	e2e0      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006214:	f040 80a7 	bne.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006218:	4b4c      	ldr	r3, [pc, #304]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800621a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006220:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006228:	d055      	beq.n	80062d6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006230:	f200 8096 	bhi.w	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800623a:	f000 8084 	beq.w	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006244:	f200 808c 	bhi.w	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800624e:	d030      	beq.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006256:	f200 8083 	bhi.w	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006266:	d012      	beq.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006268:	e07a      	b.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006276:	d107      	bne.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fd73 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006284:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006286:	e2a3      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006288:	2300      	movs	r3, #0
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800628c:	e2a0      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800629a:	d107      	bne.n	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800629c:	f107 0318 	add.w	r3, r7, #24
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fab9 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80062aa:	e291      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062ac:	2300      	movs	r3, #0
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062b0:	e28e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80062b2:	4b26      	ldr	r3, [pc, #152]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062be:	d107      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062c0:	f107 030c 	add.w	r3, r7, #12
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fbfb 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062ce:	e27f      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062d4:	e27c      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062d6:	4b1d      	ldr	r3, [pc, #116]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062e0:	4b1a      	ldr	r3, [pc, #104]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0304 	and.w	r3, r3, #4
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d10c      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80062ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d109      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	08db      	lsrs	r3, r3, #3
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	4a14      	ldr	r2, [pc, #80]	; (8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006304:	e01e      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006312:	d106      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800631a:	d102      	bne.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800631c:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800631e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006320:	e010      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006322:	4b0a      	ldr	r3, [pc, #40]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800632e:	d106      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006336:	d102      	bne.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006338:	4b07      	ldr	r3, [pc, #28]	; (8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800633c:	e002      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006342:	e245      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006344:	e244      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006348:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800634a:	e241      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800634c:	58024400 	.word	0x58024400
 8006350:	03d09000 	.word	0x03d09000
 8006354:	003d0900 	.word	0x003d0900
 8006358:	017d7840 	.word	0x017d7840
 800635c:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006364:	e234      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800636c:	f040 809c 	bne.w	80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006370:	4b9b      	ldr	r3, [pc, #620]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006378:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006380:	d054      	beq.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006388:	f200 808b 	bhi.w	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006392:	f000 8083 	beq.w	800649c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639c:	f200 8081 	bhi.w	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	d02f      	beq.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ae:	d878      	bhi.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80063b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063bc:	d012      	beq.n	80063e4 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80063be:	e070      	b.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063c0:	4b87      	ldr	r3, [pc, #540]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063cc:	d107      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fcc8 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063dc:	e1f8      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e2:	e1f5      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063e4:	4b7e      	ldr	r3, [pc, #504]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f0:	d107      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fa0e 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006400:	e1e6      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006406:	e1e3      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006408:	4b75      	ldr	r3, [pc, #468]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006414:	d107      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fb50 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006424:	e1d4      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800642a:	e1d1      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800642c:	4b6c      	ldr	r3, [pc, #432]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800642e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006430:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006434:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006436:	4b6a      	ldr	r3, [pc, #424]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b04      	cmp	r3, #4
 8006440:	d10c      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d109      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006448:	4b65      	ldr	r3, [pc, #404]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	4a64      	ldr	r2, [pc, #400]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645a:	e01e      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800645c:	4b60      	ldr	r3, [pc, #384]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006468:	d106      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800646a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800646c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006470:	d102      	bne.n	8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006472:	4b5d      	ldr	r3, [pc, #372]	; (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006476:	e010      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006478:	4b59      	ldr	r3, [pc, #356]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006484:	d106      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	d102      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800648e:	4b57      	ldr	r3, [pc, #348]	; (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006492:	e002      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006498:	e19a      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800649a:	e199      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800649c:	4b54      	ldr	r3, [pc, #336]	; (80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800649e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a0:	e196      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80064a2:	2300      	movs	r3, #0
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064a6:	e193      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80064ae:	d173      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80064b0:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80064b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80064ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c0:	d02f      	beq.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064c8:	d863      	bhi.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d004      	beq.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80064d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d6:	d012      	beq.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80064d8:	e05b      	b.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064da:	4b41      	ldr	r3, [pc, #260]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e6:	d107      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e8:	f107 0318 	add.w	r3, r7, #24
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f993 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064f6:	e16b      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064fc:	e168      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064fe:	4b38      	ldr	r3, [pc, #224]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800650a:	d107      	bne.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fad5 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800651a:	e159      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800651c:	2300      	movs	r3, #0
 800651e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006520:	e156      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006522:	4b2f      	ldr	r3, [pc, #188]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800652a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800652c:	4b2c      	ldr	r3, [pc, #176]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d10c      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8006538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800653e:	4b28      	ldr	r3, [pc, #160]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	08db      	lsrs	r3, r3, #3
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	4a26      	ldr	r2, [pc, #152]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800654a:	fa22 f303 	lsr.w	r3, r2, r3
 800654e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006550:	e01e      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006552:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655e:	d106      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006566:	d102      	bne.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006568:	4b1f      	ldr	r3, [pc, #124]	; (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656c:	e010      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800656e:	4b1c      	ldr	r3, [pc, #112]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800657a:	d106      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006582:	d102      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006584:	4b19      	ldr	r3, [pc, #100]	; (80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006588:	e002      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800658e:	e11f      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006590:	e11e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006592:	2300      	movs	r3, #0
 8006594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006596:	e11b      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800659e:	d13e      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80065a0:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80065aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80065b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b6:	d01d      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80065b8:	e02e      	b.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065c6:	d107      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fbcb 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80065d6:	e0fb      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065dc:	e0f8      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065de:	bf00      	nop
 80065e0:	58024400 	.word	0x58024400
 80065e4:	03d09000 	.word	0x03d09000
 80065e8:	003d0900 	.word	0x003d0900
 80065ec:	017d7840 	.word	0x017d7840
 80065f0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065f4:	4b79      	ldr	r3, [pc, #484]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006600:	d107      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006602:	f107 0318 	add.w	r3, r7, #24
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f906 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006610:	e0de      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006616:	e0db      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800661c:	e0d8      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006624:	f040 8085 	bne.w	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006628:	4b6c      	ldr	r3, [pc, #432]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800662a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006630:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006638:	d06b      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006640:	d874      	bhi.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006648:	d056      	beq.n	80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006650:	d86c      	bhi.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006654:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006658:	d03b      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006660:	d864      	bhi.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006668:	d021      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800666a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006670:	d85c      	bhi.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d004      	beq.n	8006682 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667e:	d004      	beq.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006680:	e054      	b.n	800672c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006682:	f000 f8b3 	bl	80067ec <HAL_RCCEx_GetD3PCLK1Freq>
 8006686:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006688:	e0a2      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800668a:	4b54      	ldr	r3, [pc, #336]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006696:	d107      	bne.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006698:	f107 0318 	add.w	r3, r7, #24
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f8bb 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066a6:	e093      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ac:	e090      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066ae:	4b4b      	ldr	r3, [pc, #300]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ba:	d107      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066bc:	f107 030c 	add.w	r3, r7, #12
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f9fd 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066ca:	e081      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d0:	e07e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066d2:	4b42      	ldr	r3, [pc, #264]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b04      	cmp	r3, #4
 80066dc:	d109      	bne.n	80066f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066de:	4b3f      	ldr	r3, [pc, #252]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	4a3d      	ldr	r2, [pc, #244]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80066f0:	e06e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f6:	e06b      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80066f8:	4b38      	ldr	r3, [pc, #224]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006704:	d102      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8006706:	4b37      	ldr	r3, [pc, #220]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800670a:	e061      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006710:	e05e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006712:	4b32      	ldr	r3, [pc, #200]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800671e:	d102      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006720:	4b31      	ldr	r3, [pc, #196]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006724:	e054      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672a:	e051      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006730:	e04e      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006738:	d148      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800673a:	4b28      	ldr	r3, [pc, #160]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800673c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800674a:	d02a      	beq.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006752:	d838      	bhi.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006760:	d00d      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006762:	e030      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006764:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006770:	d102      	bne.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006776:	e02b      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800677c:	e028      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800677e:	4b17      	ldr	r3, [pc, #92]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800678a:	d107      	bne.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800678c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fae9 	bl	8006d68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800679a:	e019      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067a0:	e016      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067a2:	4b0e      	ldr	r3, [pc, #56]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ae:	d107      	bne.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067b0:	f107 0318 	add.w	r3, r7, #24
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 f82f 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067be:	e007      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c4:	e004      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ca:	e001      	b.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80067d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3740      	adds	r7, #64	; 0x40
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400
 80067e0:	03d09000 	.word	0x03d09000
 80067e4:	003d0900 	.word	0x003d0900
 80067e8:	017d7840 	.word	0x017d7840

080067ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80067f0:	f7fe fb88 	bl	8004f04 <HAL_RCC_GetHCLKFreq>
 80067f4:	4602      	mov	r2, r0
 80067f6:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	091b      	lsrs	r3, r3, #4
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	4904      	ldr	r1, [pc, #16]	; (8006814 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006802:	5ccb      	ldrb	r3, [r1, r3]
 8006804:	f003 031f 	and.w	r3, r3, #31
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	58024400 	.word	0x58024400
 8006814:	08008b64 	.word	0x08008b64

08006818 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	; 0x24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006820:	4ba1      	ldr	r3, [pc, #644]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	f003 0303 	and.w	r3, r3, #3
 8006828:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800682a:	4b9f      	ldr	r3, [pc, #636]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800682c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682e:	0b1b      	lsrs	r3, r3, #12
 8006830:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006834:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006836:	4b9c      	ldr	r3, [pc, #624]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800683a:	091b      	lsrs	r3, r3, #4
 800683c:	f003 0301 	and.w	r3, r3, #1
 8006840:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006842:	4b99      	ldr	r3, [pc, #612]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	08db      	lsrs	r3, r3, #3
 8006848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	fb02 f303 	mul.w	r3, r2, r3
 8006852:	ee07 3a90 	vmov	s15, r3
 8006856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8111 	beq.w	8006a88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	2b02      	cmp	r3, #2
 800686a:	f000 8083 	beq.w	8006974 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b02      	cmp	r3, #2
 8006872:	f200 80a1 	bhi.w	80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b01      	cmp	r3, #1
 8006880:	d056      	beq.n	8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006882:	e099      	b.n	80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006884:	4b88      	ldr	r3, [pc, #544]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d02d      	beq.n	80068ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006890:	4b85      	ldr	r3, [pc, #532]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	4a84      	ldr	r2, [pc, #528]	; (8006aac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
 80068a0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	ee07 3a90 	vmov	s15, r3
 80068a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ba:	4b7b      	ldr	r3, [pc, #492]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c2:	ee07 3a90 	vmov	s15, r3
 80068c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80068ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80068ea:	e087      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80068fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068fe:	4b6a      	ldr	r3, [pc, #424]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800690e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006912:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800691a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800691e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800692e:	e065      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	ee07 3a90 	vmov	s15, r3
 8006936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800693a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800693e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006942:	4b59      	ldr	r3, [pc, #356]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006952:	ed97 6a03 	vldr	s12, [r7, #12]
 8006956:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800695a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800695e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800696a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800696e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006972:	e043      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006abc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006986:	4b48      	ldr	r3, [pc, #288]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006996:	ed97 6a03 	vldr	s12, [r7, #12]
 800699a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800699e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069b6:	e021      	b.n	80069fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ca:	4b37      	ldr	r3, [pc, #220]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069da:	ed97 6a03 	vldr	s12, [r7, #12]
 80069de:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80069fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80069fc:	4b2a      	ldr	r3, [pc, #168]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a00:	0a5b      	lsrs	r3, r3, #9
 8006a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a06:	ee07 3a90 	vmov	s15, r3
 8006a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a22:	ee17 2a90 	vmov	r2, s15
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a2a:	4b1f      	ldr	r3, [pc, #124]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	0c1b      	lsrs	r3, r3, #16
 8006a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a50:	ee17 2a90 	vmov	r2, s15
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006a58:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5c:	0e1b      	lsrs	r3, r3, #24
 8006a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a7e:	ee17 2a90 	vmov	r2, s15
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006a86:	e008      	b.n	8006a9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	609a      	str	r2, [r3, #8]
}
 8006a9a:	bf00      	nop
 8006a9c:	3724      	adds	r7, #36	; 0x24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
 8006aa6:	bf00      	nop
 8006aa8:	58024400 	.word	0x58024400
 8006aac:	03d09000 	.word	0x03d09000
 8006ab0:	46000000 	.word	0x46000000
 8006ab4:	4c742400 	.word	0x4c742400
 8006ab8:	4a742400 	.word	0x4a742400
 8006abc:	4bbebc20 	.word	0x4bbebc20

08006ac0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ac8:	4ba1      	ldr	r3, [pc, #644]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ad2:	4b9f      	ldr	r3, [pc, #636]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	0d1b      	lsrs	r3, r3, #20
 8006ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006adc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006ade:	4b9c      	ldr	r3, [pc, #624]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006aea:	4b99      	ldr	r3, [pc, #612]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aee:	08db      	lsrs	r3, r3, #3
 8006af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8111 	beq.w	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	f000 8083 	beq.w	8006c1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	f200 80a1 	bhi.w	8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d056      	beq.n	8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006b2a:	e099      	b.n	8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b2c:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02d      	beq.n	8006b94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b38:	4b85      	ldr	r3, [pc, #532]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	08db      	lsrs	r3, r3, #3
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	4a84      	ldr	r2, [pc, #528]	; (8006d54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
 8006b48:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	ee07 3a90 	vmov	s15, r3
 8006b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b92:	e087      	b.n	8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd6:	e065      	b.n	8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bea:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c1a:	e043      	b.n	8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2e:	4b48      	ldr	r3, [pc, #288]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c5e:	e021      	b.n	8006ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c72:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ca2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	0a5b      	lsrs	r3, r3, #9
 8006caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cca:	ee17 2a90 	vmov	r2, s15
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	0c1b      	lsrs	r3, r3, #16
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf8:	ee17 2a90 	vmov	r2, s15
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006d00:	4b13      	ldr	r3, [pc, #76]	; (8006d50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	0e1b      	lsrs	r3, r3, #24
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d26:	ee17 2a90 	vmov	r2, s15
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006d2e:	e008      	b.n	8006d42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	609a      	str	r2, [r3, #8]
}
 8006d42:	bf00      	nop
 8006d44:	3724      	adds	r7, #36	; 0x24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	58024400 	.word	0x58024400
 8006d54:	03d09000 	.word	0x03d09000
 8006d58:	46000000 	.word	0x46000000
 8006d5c:	4c742400 	.word	0x4c742400
 8006d60:	4a742400 	.word	0x4a742400
 8006d64:	4bbebc20 	.word	0x4bbebc20

08006d68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d70:	4ba0      	ldr	r3, [pc, #640]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006d7a:	4b9e      	ldr	r3, [pc, #632]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	091b      	lsrs	r3, r3, #4
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006d86:	4b9b      	ldr	r3, [pc, #620]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006d90:	4b98      	ldr	r3, [pc, #608]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	fb02 f303 	mul.w	r3, r2, r3
 8006da0:	ee07 3a90 	vmov	s15, r3
 8006da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f000 8111 	beq.w	8006fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	f000 8083 	beq.w	8006ec2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	f200 80a1 	bhi.w	8006f06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d056      	beq.n	8006e7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006dd0:	e099      	b.n	8006f06 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd2:	4b88      	ldr	r3, [pc, #544]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0320 	and.w	r3, r3, #32
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d02d      	beq.n	8006e3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dde:	4b85      	ldr	r3, [pc, #532]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	08db      	lsrs	r3, r3, #3
 8006de4:	f003 0303 	and.w	r3, r3, #3
 8006de8:	4a83      	ldr	r2, [pc, #524]	; (8006ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006dea:	fa22 f303 	lsr.w	r3, r2, r3
 8006dee:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	ee07 3a90 	vmov	s15, r3
 8006e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e08:	4b7a      	ldr	r3, [pc, #488]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e18:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e34:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e38:	e087      	b.n	8006f4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	ee07 3a90 	vmov	s15, r3
 8006e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4c:	4b69      	ldr	r3, [pc, #420]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e60:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e7c:	e065      	b.n	8006f4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	ee07 3a90 	vmov	s15, r3
 8006e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007004 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e90:	4b58      	ldr	r3, [pc, #352]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea0:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ea8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ec0:	e043      	b.n	8006f4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ecc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007008 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed4:	4b47      	ldr	r3, [pc, #284]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006edc:	ee07 3a90 	vmov	s15, r3
 8006ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee4:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006eec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ef8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f04:	e021      	b.n	8006f4a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f10:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007000 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f18:	4b36      	ldr	r3, [pc, #216]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f28:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006ffc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006f30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f48:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006f4a:	4b2a      	ldr	r3, [pc, #168]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	0a5b      	lsrs	r3, r3, #9
 8006f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f54:	ee07 3a90 	vmov	s15, r3
 8006f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f70:	ee17 2a90 	vmov	r2, s15
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f9e:	ee17 2a90 	vmov	r2, s15
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8006fa6:	4b13      	ldr	r3, [pc, #76]	; (8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006faa:	0e1b      	lsrs	r3, r3, #24
 8006fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fcc:	ee17 2a90 	vmov	r2, s15
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	3724      	adds	r7, #36	; 0x24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	58024400 	.word	0x58024400
 8006ff8:	03d09000 	.word	0x03d09000
 8006ffc:	46000000 	.word	0x46000000
 8007000:	4c742400 	.word	0x4c742400
 8007004:	4a742400 	.word	0x4a742400
 8007008:	4bbebc20 	.word	0x4bbebc20

0800700c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800701a:	4b53      	ldr	r3, [pc, #332]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d101      	bne.n	800702a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e099      	b.n	800715e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800702a:	4b4f      	ldr	r3, [pc, #316]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4e      	ldr	r2, [pc, #312]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007030:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007036:	f7fa fb5b 	bl	80016f0 <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800703c:	e008      	b.n	8007050 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800703e:	f7fa fb57 	bl	80016f0 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e086      	b.n	800715e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007050:	4b45      	ldr	r3, [pc, #276]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1f0      	bne.n	800703e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800705c:	4b42      	ldr	r3, [pc, #264]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 800705e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007060:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	031b      	lsls	r3, r3, #12
 800706a:	493f      	ldr	r1, [pc, #252]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	628b      	str	r3, [r1, #40]	; 0x28
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	3b01      	subs	r3, #1
 8007076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	3b01      	subs	r3, #1
 8007080:	025b      	lsls	r3, r3, #9
 8007082:	b29b      	uxth	r3, r3
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	3b01      	subs	r3, #1
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	3b01      	subs	r3, #1
 800709a:	061b      	lsls	r3, r3, #24
 800709c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070a0:	4931      	ldr	r1, [pc, #196]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070a6:	4b30      	ldr	r3, [pc, #192]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	492d      	ldr	r1, [pc, #180]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070b8:	4b2b      	ldr	r3, [pc, #172]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070bc:	f023 0220 	bic.w	r2, r3, #32
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	4928      	ldr	r1, [pc, #160]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80070ca:	4b27      	ldr	r3, [pc, #156]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	4a26      	ldr	r2, [pc, #152]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070d0:	f023 0310 	bic.w	r3, r3, #16
 80070d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070d6:	4b24      	ldr	r3, [pc, #144]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070da:	4b24      	ldr	r3, [pc, #144]	; (800716c <RCCEx_PLL2_Config+0x160>)
 80070dc:	4013      	ands	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	69d2      	ldr	r2, [r2, #28]
 80070e2:	00d2      	lsls	r2, r2, #3
 80070e4:	4920      	ldr	r1, [pc, #128]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070ea:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070f0:	f043 0310 	orr.w	r3, r3, #16
 80070f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	4a19      	ldr	r2, [pc, #100]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007106:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007108:	e00f      	b.n	800712a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d106      	bne.n	800711e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007110:	4b15      	ldr	r3, [pc, #84]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	4a14      	ldr	r2, [pc, #80]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007116:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800711c:	e005      	b.n	800712a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	4a11      	ldr	r2, [pc, #68]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007128:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800712a:	4b0f      	ldr	r3, [pc, #60]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a0e      	ldr	r2, [pc, #56]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007136:	f7fa fadb 	bl	80016f0 <HAL_GetTick>
 800713a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800713c:	e008      	b.n	8007150 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800713e:	f7fa fad7 	bl	80016f0 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e006      	b.n	800715e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007150:	4b05      	ldr	r3, [pc, #20]	; (8007168 <RCCEx_PLL2_Config+0x15c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	58024400 	.word	0x58024400
 800716c:	ffff0007 	.word	0xffff0007

08007170 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800717e:	4b53      	ldr	r3, [pc, #332]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	2b03      	cmp	r3, #3
 8007188:	d101      	bne.n	800718e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e099      	b.n	80072c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800718e:	4b4f      	ldr	r3, [pc, #316]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a4e      	ldr	r2, [pc, #312]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007198:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719a:	f7fa faa9 	bl	80016f0 <HAL_GetTick>
 800719e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071a0:	e008      	b.n	80071b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071a2:	f7fa faa5 	bl	80016f0 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d901      	bls.n	80071b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e086      	b.n	80072c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071b4:	4b45      	ldr	r3, [pc, #276]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1f0      	bne.n	80071a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071c0:	4b42      	ldr	r3, [pc, #264]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	051b      	lsls	r3, r3, #20
 80071ce:	493f      	ldr	r1, [pc, #252]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	628b      	str	r3, [r1, #40]	; 0x28
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	3b01      	subs	r3, #1
 80071da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	025b      	lsls	r3, r3, #9
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	061b      	lsls	r3, r3, #24
 8007200:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007204:	4931      	ldr	r1, [pc, #196]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007206:	4313      	orrs	r3, r2
 8007208:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800720a:	4b30      	ldr	r3, [pc, #192]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 800720c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	492d      	ldr	r1, [pc, #180]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007218:	4313      	orrs	r3, r2
 800721a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800721c:	4b2b      	ldr	r3, [pc, #172]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	4928      	ldr	r1, [pc, #160]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 800722a:	4313      	orrs	r3, r2
 800722c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800722e:	4b27      	ldr	r3, [pc, #156]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	4a26      	ldr	r2, [pc, #152]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800723a:	4b24      	ldr	r3, [pc, #144]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 800723c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <RCCEx_PLL3_Config+0x160>)
 8007240:	4013      	ands	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	69d2      	ldr	r2, [r2, #28]
 8007246:	00d2      	lsls	r2, r2, #3
 8007248:	4920      	ldr	r1, [pc, #128]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 800724a:	4313      	orrs	r3, r2
 800724c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800724e:	4b1f      	ldr	r3, [pc, #124]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	4a1e      	ldr	r2, [pc, #120]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d106      	bne.n	800726e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007260:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	4a19      	ldr	r2, [pc, #100]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800726a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800726c:	e00f      	b.n	800728e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d106      	bne.n	8007282 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007274:	4b15      	ldr	r3, [pc, #84]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	4a14      	ldr	r2, [pc, #80]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 800727a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800727e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007280:	e005      	b.n	800728e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007282:	4b12      	ldr	r3, [pc, #72]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007286:	4a11      	ldr	r2, [pc, #68]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800728c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a0e      	ldr	r2, [pc, #56]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729a:	f7fa fa29 	bl	80016f0 <HAL_GetTick>
 800729e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072a0:	e008      	b.n	80072b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072a2:	f7fa fa25 	bl	80016f0 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d901      	bls.n	80072b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e006      	b.n	80072c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <RCCEx_PLL3_Config+0x15c>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f0      	beq.n	80072a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	58024400 	.word	0x58024400
 80072d0:	ffff0007 	.word	0xffff0007

080072d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e0f1      	b.n	80074ca <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a78      	ldr	r2, [pc, #480]	; (80074d4 <HAL_SPI_Init+0x200>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00f      	beq.n	8007316 <HAL_SPI_Init+0x42>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a77      	ldr	r2, [pc, #476]	; (80074d8 <HAL_SPI_Init+0x204>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00a      	beq.n	8007316 <HAL_SPI_Init+0x42>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a75      	ldr	r2, [pc, #468]	; (80074dc <HAL_SPI_Init+0x208>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d005      	beq.n	8007316 <HAL_SPI_Init+0x42>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	2b0f      	cmp	r3, #15
 8007310:	d901      	bls.n	8007316 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e0d9      	b.n	80074ca <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 fbd8 	bl	8007acc <SPI_GetPacketSize>
 800731c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a6c      	ldr	r2, [pc, #432]	; (80074d4 <HAL_SPI_Init+0x200>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00c      	beq.n	8007342 <HAL_SPI_Init+0x6e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a6a      	ldr	r2, [pc, #424]	; (80074d8 <HAL_SPI_Init+0x204>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d007      	beq.n	8007342 <HAL_SPI_Init+0x6e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a69      	ldr	r2, [pc, #420]	; (80074dc <HAL_SPI_Init+0x208>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d002      	beq.n	8007342 <HAL_SPI_Init+0x6e>
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2b08      	cmp	r3, #8
 8007340:	d811      	bhi.n	8007366 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007346:	4a63      	ldr	r2, [pc, #396]	; (80074d4 <HAL_SPI_Init+0x200>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d009      	beq.n	8007360 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a61      	ldr	r2, [pc, #388]	; (80074d8 <HAL_SPI_Init+0x204>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d004      	beq.n	8007360 <HAL_SPI_Init+0x8c>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a60      	ldr	r2, [pc, #384]	; (80074dc <HAL_SPI_Init+0x208>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d104      	bne.n	800736a <HAL_SPI_Init+0x96>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b10      	cmp	r3, #16
 8007364:	d901      	bls.n	800736a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0af      	b.n	80074ca <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7f9 ff54 	bl	800122c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0201 	bic.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80073a6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073b0:	d119      	bne.n	80073e6 <HAL_SPI_Init+0x112>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ba:	d103      	bne.n	80073c4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80073d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d4:	d107      	bne.n	80073e6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69da      	ldr	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	ea42 0103 	orr.w	r1, r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68da      	ldr	r2, [r3, #12]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	695b      	ldr	r3, [r3, #20]
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007446:	ea42 0103 	orr.w	r1, r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d113      	bne.n	8007486 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007470:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007484:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40013000 	.word	0x40013000
 80074d8:	40003800 	.word	0x40003800
 80074dc:	40003c00 	.word	0x40003c00

080074e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08e      	sub	sp, #56	; 0x38
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	3320      	adds	r3, #32
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3330      	adds	r3, #48	; 0x30
 8007502:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_SPI_TransmitReceive+0x32>
 800750e:	2302      	movs	r3, #2
 8007510:	e209      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800751a:	f7fa f8e9 	bl	80016f0 <HAL_GetTick>
 800751e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8007520:	887b      	ldrh	r3, [r7, #2]
 8007522:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8007524:	887b      	ldrh	r3, [r7, #2]
 8007526:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800752e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007536:	7efb      	ldrb	r3, [r7, #27]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d014      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x86>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007542:	d106      	bne.n	8007552 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800754c:	7efb      	ldrb	r3, [r7, #27]
 800754e:	2b04      	cmp	r3, #4
 8007550:	d009      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007552:	2302      	movs	r3, #2
 8007554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007560:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007564:	e1df      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_SPI_TransmitReceive+0x98>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_SPI_TransmitReceive+0x98>
 8007572:	887b      	ldrh	r3, [r7, #2]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d109      	bne.n	800758c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800758a:	e1cc      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b04      	cmp	r3, #4
 8007596:	d003      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2205      	movs	r2, #5
 800759c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	887a      	ldrh	r2, [r7, #2]
 80075b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	887a      	ldrh	r2, [r7, #2]
 80075ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	887a      	ldrh	r2, [r7, #2]
 80075c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	887a      	ldrh	r2, [r7, #2]
 80075d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	4b82      	ldr	r3, [pc, #520]	; (80077f0 <HAL_SPI_TransmitReceive+0x310>)
 80075e8:	4013      	ands	r3, r2
 80075ea:	8879      	ldrh	r1, [r7, #2]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	6812      	ldr	r2, [r2, #0]
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0201 	orr.w	r2, r2, #1
 8007602:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800760c:	d107      	bne.n	800761e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800761c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	2b0f      	cmp	r3, #15
 8007624:	d970      	bls.n	8007708 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007626:	e068      	b.n	80076fa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b02      	cmp	r3, #2
 8007634:	d11a      	bne.n	800766c <HAL_SPI_TransmitReceive+0x18c>
 8007636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007638:	2b00      	cmp	r3, #0
 800763a:	d017      	beq.n	800766c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800764c:	1d1a      	adds	r2, r3, #4
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007658:	b29b      	uxth	r3, r3
 800765a:	3b01      	subs	r3, #1
 800765c:	b29a      	uxth	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800766a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695a      	ldr	r2, [r3, #20]
 8007672:	f248 0308 	movw	r3, #32776	; 0x8008
 8007676:	4013      	ands	r3, r2
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01a      	beq.n	80076b2 <HAL_SPI_TransmitReceive+0x1d2>
 800767c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d017      	beq.n	80076b2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800768c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007692:	1d1a      	adds	r2, r3, #4
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80076b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076b2:	f7fa f81d 	bl	80016f0 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076be:	429a      	cmp	r2, r3
 80076c0:	d803      	bhi.n	80076ca <HAL_SPI_TransmitReceive+0x1ea>
 80076c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c8:	d102      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x1f0>
 80076ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d114      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f92d 	bl	8007930 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e115      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80076fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d193      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x148>
 8007700:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d190      	bne.n	8007628 <HAL_SPI_TransmitReceive+0x148>
 8007706:	e0e7      	b.n	80078d8 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b07      	cmp	r3, #7
 800770e:	f240 80dd 	bls.w	80078cc <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007712:	e066      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b02      	cmp	r3, #2
 8007720:	d119      	bne.n	8007756 <HAL_SPI_TransmitReceive+0x276>
 8007722:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007724:	2b00      	cmp	r3, #0
 8007726:	d016      	beq.n	8007756 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772c:	881a      	ldrh	r2, [r3, #0]
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	1c9a      	adds	r2, r3, #2
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007742:	b29b      	uxth	r3, r3
 8007744:	3b01      	subs	r3, #1
 8007746:	b29a      	uxth	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007754:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b01      	cmp	r3, #1
 8007762:	d11a      	bne.n	800779a <HAL_SPI_TransmitReceive+0x2ba>
 8007764:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800776e:	6a3a      	ldr	r2, [r7, #32]
 8007770:	8812      	ldrh	r2, [r2, #0]
 8007772:	b292      	uxth	r2, r2
 8007774:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777a:	1c9a      	adds	r2, r3, #2
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007798:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800779a:	f7f9 ffa9 	bl	80016f0 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d803      	bhi.n	80077b2 <HAL_SPI_TransmitReceive+0x2d2>
 80077aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d102      	bne.n	80077b8 <HAL_SPI_TransmitReceive+0x2d8>
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d114      	bne.n	80077e2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f8b9 	bl	8007930 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e0a1      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d195      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x234>
 80077e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d192      	bne.n	8007714 <HAL_SPI_TransmitReceive+0x234>
 80077ee:	e073      	b.n	80078d8 <HAL_SPI_TransmitReceive+0x3f8>
 80077f0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	695b      	ldr	r3, [r3, #20]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d11b      	bne.n	800783a <HAL_SPI_TransmitReceive+0x35a>
 8007802:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007804:	2b00      	cmp	r3, #0
 8007806:	d018      	beq.n	800783a <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3320      	adds	r3, #32
 8007812:	7812      	ldrb	r2, [r2, #0]
 8007814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007826:	b29b      	uxth	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	b29a      	uxth	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007838:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d11d      	bne.n	8007884 <HAL_SPI_TransmitReceive+0x3a4>
 8007848:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01a      	beq.n	8007884 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800785a:	7812      	ldrb	r2, [r2, #0]
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007882:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007884:	f7f9 ff34 	bl	80016f0 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007890:	429a      	cmp	r2, r3
 8007892:	d803      	bhi.n	800789c <HAL_SPI_TransmitReceive+0x3bc>
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789a:	d102      	bne.n	80078a2 <HAL_SPI_TransmitReceive+0x3c2>
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d114      	bne.n	80078cc <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 f844 	bl	8007930 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e02c      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d190      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x314>
 80078d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d18d      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2200      	movs	r2, #0
 80078e0:	2108      	movs	r1, #8
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f8c4 	bl	8007a70 <SPI_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d007      	beq.n	80078fe <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f816 	bl	8007930 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e001      	b.n	8007926 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007922:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007926:	4618      	mov	r0, r3
 8007928:	3730      	adds	r7, #48	; 0x30
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop

08007930 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0208 	orr.w	r2, r2, #8
 800794e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0210 	orr.w	r2, r2, #16
 800795e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6919      	ldr	r1, [r3, #16]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b3c      	ldr	r3, [pc, #240]	; (8007a6c <SPI_CloseTransfer+0x13c>)
 800797c:	400b      	ands	r3, r1
 800797e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800798e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b04      	cmp	r3, #4
 800799a:	d014      	beq.n	80079c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00f      	beq.n	80079c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0220 	orr.w	r2, r2, #32
 80079c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b03      	cmp	r3, #3
 80079d0:	d014      	beq.n	80079fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00f      	beq.n	80079fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e2:	f043 0204 	orr.w	r2, r3, #4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00f      	beq.n	8007a26 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a0c:	f043 0201 	orr.w	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a24:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00f      	beq.n	8007a50 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a36:	f043 0208 	orr.w	r2, r3, #8
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a4e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	fffffc90 	.word	0xfffffc90

08007a70 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	603b      	str	r3, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007a80:	e010      	b.n	8007aa4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a82:	f7f9 fe35 	bl	80016f0 <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d803      	bhi.n	8007a9a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a98:	d102      	bne.n	8007aa0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e00f      	b.n	8007ac4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	4013      	ands	r3, r2
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2301      	moveq	r3, #1
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d0df      	beq.n	8007a82 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad8:	095b      	lsrs	r3, r3, #5
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	3307      	adds	r3, #7
 8007aea:	08db      	lsrs	r3, r3, #3
 8007aec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	fb02 f303 	mul.w	r3, r2, r3
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e03c      	b.n	8007b8e <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d106      	bne.n	8007b2e <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7f9 fbe3 	bl	80012f4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0201 	bic.w	r2, r2, #1
 8007b44:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f85c 	bl	8007c04 <USART_SetConfig>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e01b      	b.n	8007b8e <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b64:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b74:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0201 	orr.w	r2, r2, #1
 8007b84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fd5c 	bl	8008644 <USART_CheckIdleState>
 8007b8c:	4603      	mov	r3, r0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3708      	adds	r7, #8
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007ba6:	e018      	b.n	8007bda <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bae:	d014      	beq.n	8007bda <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bb0:	f7f9 fd9e 	bl	80016f0 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d302      	bcc.n	8007bc6 <USART_WaitOnFlagUntilTimeout+0x30>
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e00f      	b.n	8007bfa <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69da      	ldr	r2, [r3, #28]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4013      	ands	r3, r2
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	bf0c      	ite	eq
 8007bea:	2301      	moveq	r3, #1
 8007bec:	2300      	movne	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d0d7      	beq.n	8007ba8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08e      	sub	sp, #56	; 0x38
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8007c12:	2300      	movs	r3, #0
 8007c14:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	4bc9      	ldr	r3, [pc, #804]	; (8007f58 <USART_SetConfig+0x354>)
 8007c34:	4013      	ands	r3, r2
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6812      	ldr	r2, [r2, #0]
 8007c3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c3c:	430b      	orrs	r3, r1
 8007c3e:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8007c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	699a      	ldr	r2, [r3, #24]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c66:	4313      	orrs	r3, r2
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	4bba      	ldr	r3, [pc, #744]	; (8007f5c <USART_SetConfig+0x358>)
 8007c72:	4013      	ands	r3, r2
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	6812      	ldr	r2, [r2, #0]
 8007c78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	f023 010f 	bic.w	r1, r3, #15
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4ab1      	ldr	r2, [pc, #708]	; (8007f60 <USART_SetConfig+0x35c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d176      	bne.n	8007d8c <USART_SetConfig+0x188>
 8007c9e:	4bb1      	ldr	r3, [pc, #708]	; (8007f64 <USART_SetConfig+0x360>)
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ca6:	2b28      	cmp	r3, #40	; 0x28
 8007ca8:	d86c      	bhi.n	8007d84 <USART_SetConfig+0x180>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <USART_SetConfig+0xac>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007d55 	.word	0x08007d55
 8007cb4:	08007d85 	.word	0x08007d85
 8007cb8:	08007d85 	.word	0x08007d85
 8007cbc:	08007d85 	.word	0x08007d85
 8007cc0:	08007d85 	.word	0x08007d85
 8007cc4:	08007d85 	.word	0x08007d85
 8007cc8:	08007d85 	.word	0x08007d85
 8007ccc:	08007d85 	.word	0x08007d85
 8007cd0:	08007d5d 	.word	0x08007d5d
 8007cd4:	08007d85 	.word	0x08007d85
 8007cd8:	08007d85 	.word	0x08007d85
 8007cdc:	08007d85 	.word	0x08007d85
 8007ce0:	08007d85 	.word	0x08007d85
 8007ce4:	08007d85 	.word	0x08007d85
 8007ce8:	08007d85 	.word	0x08007d85
 8007cec:	08007d85 	.word	0x08007d85
 8007cf0:	08007d65 	.word	0x08007d65
 8007cf4:	08007d85 	.word	0x08007d85
 8007cf8:	08007d85 	.word	0x08007d85
 8007cfc:	08007d85 	.word	0x08007d85
 8007d00:	08007d85 	.word	0x08007d85
 8007d04:	08007d85 	.word	0x08007d85
 8007d08:	08007d85 	.word	0x08007d85
 8007d0c:	08007d85 	.word	0x08007d85
 8007d10:	08007d6d 	.word	0x08007d6d
 8007d14:	08007d85 	.word	0x08007d85
 8007d18:	08007d85 	.word	0x08007d85
 8007d1c:	08007d85 	.word	0x08007d85
 8007d20:	08007d85 	.word	0x08007d85
 8007d24:	08007d85 	.word	0x08007d85
 8007d28:	08007d85 	.word	0x08007d85
 8007d2c:	08007d85 	.word	0x08007d85
 8007d30:	08007d75 	.word	0x08007d75
 8007d34:	08007d85 	.word	0x08007d85
 8007d38:	08007d85 	.word	0x08007d85
 8007d3c:	08007d85 	.word	0x08007d85
 8007d40:	08007d85 	.word	0x08007d85
 8007d44:	08007d85 	.word	0x08007d85
 8007d48:	08007d85 	.word	0x08007d85
 8007d4c:	08007d85 	.word	0x08007d85
 8007d50:	08007d7d 	.word	0x08007d7d
 8007d54:	2301      	movs	r3, #1
 8007d56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d5a:	e112      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d62:	e10e      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d6a:	e10a      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d72:	e106      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d7a:	e102      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d7c:	2320      	movs	r3, #32
 8007d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d82:	e0fe      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d84:	2340      	movs	r3, #64	; 0x40
 8007d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007d8a:	e0fa      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a75      	ldr	r2, [pc, #468]	; (8007f68 <USART_SetConfig+0x364>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d130      	bne.n	8007df8 <USART_SetConfig+0x1f4>
 8007d96:	4b73      	ldr	r3, [pc, #460]	; (8007f64 <USART_SetConfig+0x360>)
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f003 0307 	and.w	r3, r3, #7
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d826      	bhi.n	8007df0 <USART_SetConfig+0x1ec>
 8007da2:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <USART_SetConfig+0x1a4>)
 8007da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da8:	08007dc1 	.word	0x08007dc1
 8007dac:	08007dc9 	.word	0x08007dc9
 8007db0:	08007dd1 	.word	0x08007dd1
 8007db4:	08007dd9 	.word	0x08007dd9
 8007db8:	08007de1 	.word	0x08007de1
 8007dbc:	08007de9 	.word	0x08007de9
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dc6:	e0dc      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dce:	e0d8      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dd6:	e0d4      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007dd8:	2308      	movs	r3, #8
 8007dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dde:	e0d0      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007de0:	2310      	movs	r3, #16
 8007de2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007de6:	e0cc      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007de8:	2320      	movs	r3, #32
 8007dea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007dee:	e0c8      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007df0:	2340      	movs	r3, #64	; 0x40
 8007df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007df6:	e0c4      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a5b      	ldr	r2, [pc, #364]	; (8007f6c <USART_SetConfig+0x368>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d130      	bne.n	8007e64 <USART_SetConfig+0x260>
 8007e02:	4b58      	ldr	r3, [pc, #352]	; (8007f64 <USART_SetConfig+0x360>)
 8007e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	2b05      	cmp	r3, #5
 8007e0c:	d826      	bhi.n	8007e5c <USART_SetConfig+0x258>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <USART_SetConfig+0x210>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e2d 	.word	0x08007e2d
 8007e18:	08007e35 	.word	0x08007e35
 8007e1c:	08007e3d 	.word	0x08007e3d
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e4d 	.word	0x08007e4d
 8007e28:	08007e55 	.word	0x08007e55
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e32:	e0a6      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e34:	2302      	movs	r3, #2
 8007e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e3a:	e0a2      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e42:	e09e      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e44:	2308      	movs	r3, #8
 8007e46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e4a:	e09a      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e4c:	2310      	movs	r3, #16
 8007e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e52:	e096      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e54:	2320      	movs	r3, #32
 8007e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e5a:	e092      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007e62:	e08e      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a41      	ldr	r2, [pc, #260]	; (8007f70 <USART_SetConfig+0x36c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	f040 8086 	bne.w	8007f7c <USART_SetConfig+0x378>
 8007e70:	4b3c      	ldr	r3, [pc, #240]	; (8007f64 <USART_SetConfig+0x360>)
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e78:	2b28      	cmp	r3, #40	; 0x28
 8007e7a:	d87b      	bhi.n	8007f74 <USART_SetConfig+0x370>
 8007e7c:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <USART_SetConfig+0x280>)
 8007e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e82:	bf00      	nop
 8007e84:	08007f29 	.word	0x08007f29
 8007e88:	08007f75 	.word	0x08007f75
 8007e8c:	08007f75 	.word	0x08007f75
 8007e90:	08007f75 	.word	0x08007f75
 8007e94:	08007f75 	.word	0x08007f75
 8007e98:	08007f75 	.word	0x08007f75
 8007e9c:	08007f75 	.word	0x08007f75
 8007ea0:	08007f75 	.word	0x08007f75
 8007ea4:	08007f31 	.word	0x08007f31
 8007ea8:	08007f75 	.word	0x08007f75
 8007eac:	08007f75 	.word	0x08007f75
 8007eb0:	08007f75 	.word	0x08007f75
 8007eb4:	08007f75 	.word	0x08007f75
 8007eb8:	08007f75 	.word	0x08007f75
 8007ebc:	08007f75 	.word	0x08007f75
 8007ec0:	08007f75 	.word	0x08007f75
 8007ec4:	08007f39 	.word	0x08007f39
 8007ec8:	08007f75 	.word	0x08007f75
 8007ecc:	08007f75 	.word	0x08007f75
 8007ed0:	08007f75 	.word	0x08007f75
 8007ed4:	08007f75 	.word	0x08007f75
 8007ed8:	08007f75 	.word	0x08007f75
 8007edc:	08007f75 	.word	0x08007f75
 8007ee0:	08007f75 	.word	0x08007f75
 8007ee4:	08007f41 	.word	0x08007f41
 8007ee8:	08007f75 	.word	0x08007f75
 8007eec:	08007f75 	.word	0x08007f75
 8007ef0:	08007f75 	.word	0x08007f75
 8007ef4:	08007f75 	.word	0x08007f75
 8007ef8:	08007f75 	.word	0x08007f75
 8007efc:	08007f75 	.word	0x08007f75
 8007f00:	08007f75 	.word	0x08007f75
 8007f04:	08007f49 	.word	0x08007f49
 8007f08:	08007f75 	.word	0x08007f75
 8007f0c:	08007f75 	.word	0x08007f75
 8007f10:	08007f75 	.word	0x08007f75
 8007f14:	08007f75 	.word	0x08007f75
 8007f18:	08007f75 	.word	0x08007f75
 8007f1c:	08007f75 	.word	0x08007f75
 8007f20:	08007f75 	.word	0x08007f75
 8007f24:	08007f51 	.word	0x08007f51
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f2e:	e028      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f30:	2302      	movs	r3, #2
 8007f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f36:	e024      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f38:	2304      	movs	r3, #4
 8007f3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f3e:	e020      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f40:	2308      	movs	r3, #8
 8007f42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f46:	e01c      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f4e:	e018      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f50:	2320      	movs	r3, #32
 8007f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f56:	e014      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f58:	cfff69f3 	.word	0xcfff69f3
 8007f5c:	ffffc0f6 	.word	0xffffc0f6
 8007f60:	40011000 	.word	0x40011000
 8007f64:	58024400 	.word	0x58024400
 8007f68:	40004400 	.word	0x40004400
 8007f6c:	40004800 	.word	0x40004800
 8007f70:	40011400 	.word	0x40011400
 8007f74:	2340      	movs	r3, #64	; 0x40
 8007f76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007f7a:	e002      	b.n	8007f82 <USART_SetConfig+0x37e>
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 8007f82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f86:	2b20      	cmp	r3, #32
 8007f88:	f200 8329 	bhi.w	80085de <USART_SetConfig+0x9da>
 8007f8c:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <USART_SetConfig+0x390>)
 8007f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f92:	bf00      	nop
 8007f94:	08008019 	.word	0x08008019
 8007f98:	080080cf 	.word	0x080080cf
 8007f9c:	08008185 	.word	0x08008185
 8007fa0:	080085df 	.word	0x080085df
 8007fa4:	0800823f 	.word	0x0800823f
 8007fa8:	080085df 	.word	0x080085df
 8007fac:	080085df 	.word	0x080085df
 8007fb0:	080085df 	.word	0x080085df
 8007fb4:	080082f9 	.word	0x080082f9
 8007fb8:	080085df 	.word	0x080085df
 8007fbc:	080085df 	.word	0x080085df
 8007fc0:	080085df 	.word	0x080085df
 8007fc4:	080085df 	.word	0x080085df
 8007fc8:	080085df 	.word	0x080085df
 8007fcc:	080085df 	.word	0x080085df
 8007fd0:	080085df 	.word	0x080085df
 8007fd4:	08008471 	.word	0x08008471
 8007fd8:	080085df 	.word	0x080085df
 8007fdc:	080085df 	.word	0x080085df
 8007fe0:	080085df 	.word	0x080085df
 8007fe4:	080085df 	.word	0x080085df
 8007fe8:	080085df 	.word	0x080085df
 8007fec:	080085df 	.word	0x080085df
 8007ff0:	080085df 	.word	0x080085df
 8007ff4:	080085df 	.word	0x080085df
 8007ff8:	080085df 	.word	0x080085df
 8007ffc:	080085df 	.word	0x080085df
 8008000:	080085df 	.word	0x080085df
 8008004:	080085df 	.word	0x080085df
 8008008:	080085df 	.word	0x080085df
 800800c:	080085df 	.word	0x080085df
 8008010:	080085df 	.word	0x080085df
 8008014:	0800852d 	.word	0x0800852d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008018:	f7fc ffa4 	bl	8004f64 <HAL_RCC_GetPCLK1Freq>
 800801c:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d044      	beq.n	80080b0 <USART_SetConfig+0x4ac>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	2b01      	cmp	r3, #1
 800802c:	d03e      	beq.n	80080ac <USART_SetConfig+0x4a8>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	2b02      	cmp	r3, #2
 8008034:	d038      	beq.n	80080a8 <USART_SetConfig+0x4a4>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	2b03      	cmp	r3, #3
 800803c:	d032      	beq.n	80080a4 <USART_SetConfig+0x4a0>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	2b04      	cmp	r3, #4
 8008044:	d02c      	beq.n	80080a0 <USART_SetConfig+0x49c>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	2b05      	cmp	r3, #5
 800804c:	d026      	beq.n	800809c <USART_SetConfig+0x498>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	2b06      	cmp	r3, #6
 8008054:	d020      	beq.n	8008098 <USART_SetConfig+0x494>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	2b07      	cmp	r3, #7
 800805c:	d01a      	beq.n	8008094 <USART_SetConfig+0x490>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b08      	cmp	r3, #8
 8008064:	d014      	beq.n	8008090 <USART_SetConfig+0x48c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	2b09      	cmp	r3, #9
 800806c:	d00e      	beq.n	800808c <USART_SetConfig+0x488>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b0a      	cmp	r3, #10
 8008074:	d008      	beq.n	8008088 <USART_SetConfig+0x484>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b0b      	cmp	r3, #11
 800807c:	d102      	bne.n	8008084 <USART_SetConfig+0x480>
 800807e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008082:	e016      	b.n	80080b2 <USART_SetConfig+0x4ae>
 8008084:	2301      	movs	r3, #1
 8008086:	e014      	b.n	80080b2 <USART_SetConfig+0x4ae>
 8008088:	2380      	movs	r3, #128	; 0x80
 800808a:	e012      	b.n	80080b2 <USART_SetConfig+0x4ae>
 800808c:	2340      	movs	r3, #64	; 0x40
 800808e:	e010      	b.n	80080b2 <USART_SetConfig+0x4ae>
 8008090:	2320      	movs	r3, #32
 8008092:	e00e      	b.n	80080b2 <USART_SetConfig+0x4ae>
 8008094:	2310      	movs	r3, #16
 8008096:	e00c      	b.n	80080b2 <USART_SetConfig+0x4ae>
 8008098:	230c      	movs	r3, #12
 800809a:	e00a      	b.n	80080b2 <USART_SetConfig+0x4ae>
 800809c:	230a      	movs	r3, #10
 800809e:	e008      	b.n	80080b2 <USART_SetConfig+0x4ae>
 80080a0:	2308      	movs	r3, #8
 80080a2:	e006      	b.n	80080b2 <USART_SetConfig+0x4ae>
 80080a4:	2306      	movs	r3, #6
 80080a6:	e004      	b.n	80080b2 <USART_SetConfig+0x4ae>
 80080a8:	2304      	movs	r3, #4
 80080aa:	e002      	b.n	80080b2 <USART_SetConfig+0x4ae>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e000      	b.n	80080b2 <USART_SetConfig+0x4ae>
 80080b0:	2301      	movs	r3, #1
 80080b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b8:	005a      	lsls	r2, r3, #1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	441a      	add	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80080cc:	e28b      	b.n	80085e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 80080ce:	f7fc ff5f 	bl	8004f90 <HAL_RCC_GetPCLK2Freq>
 80080d2:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d044      	beq.n	8008166 <USART_SetConfig+0x562>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d03e      	beq.n	8008162 <USART_SetConfig+0x55e>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d038      	beq.n	800815e <USART_SetConfig+0x55a>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d032      	beq.n	800815a <USART_SetConfig+0x556>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d02c      	beq.n	8008156 <USART_SetConfig+0x552>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008100:	2b05      	cmp	r3, #5
 8008102:	d026      	beq.n	8008152 <USART_SetConfig+0x54e>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	2b06      	cmp	r3, #6
 800810a:	d020      	beq.n	800814e <USART_SetConfig+0x54a>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	2b07      	cmp	r3, #7
 8008112:	d01a      	beq.n	800814a <USART_SetConfig+0x546>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	2b08      	cmp	r3, #8
 800811a:	d014      	beq.n	8008146 <USART_SetConfig+0x542>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	2b09      	cmp	r3, #9
 8008122:	d00e      	beq.n	8008142 <USART_SetConfig+0x53e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	2b0a      	cmp	r3, #10
 800812a:	d008      	beq.n	800813e <USART_SetConfig+0x53a>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d102      	bne.n	800813a <USART_SetConfig+0x536>
 8008134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008138:	e016      	b.n	8008168 <USART_SetConfig+0x564>
 800813a:	2301      	movs	r3, #1
 800813c:	e014      	b.n	8008168 <USART_SetConfig+0x564>
 800813e:	2380      	movs	r3, #128	; 0x80
 8008140:	e012      	b.n	8008168 <USART_SetConfig+0x564>
 8008142:	2340      	movs	r3, #64	; 0x40
 8008144:	e010      	b.n	8008168 <USART_SetConfig+0x564>
 8008146:	2320      	movs	r3, #32
 8008148:	e00e      	b.n	8008168 <USART_SetConfig+0x564>
 800814a:	2310      	movs	r3, #16
 800814c:	e00c      	b.n	8008168 <USART_SetConfig+0x564>
 800814e:	230c      	movs	r3, #12
 8008150:	e00a      	b.n	8008168 <USART_SetConfig+0x564>
 8008152:	230a      	movs	r3, #10
 8008154:	e008      	b.n	8008168 <USART_SetConfig+0x564>
 8008156:	2308      	movs	r3, #8
 8008158:	e006      	b.n	8008168 <USART_SetConfig+0x564>
 800815a:	2306      	movs	r3, #6
 800815c:	e004      	b.n	8008168 <USART_SetConfig+0x564>
 800815e:	2304      	movs	r3, #4
 8008160:	e002      	b.n	8008168 <USART_SetConfig+0x564>
 8008162:	2302      	movs	r3, #2
 8008164:	e000      	b.n	8008168 <USART_SetConfig+0x564>
 8008166:	2301      	movs	r3, #1
 8008168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800816a:	fbb2 f3f3 	udiv	r3, r2, r3
 800816e:	005a      	lsls	r2, r3, #1
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	685b      	ldr	r3, [r3, #4]
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	441a      	add	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008180:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008182:	e230      	b.n	80085e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008184:	f107 0318 	add.w	r3, r7, #24
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fb45 	bl	8006818 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d044      	beq.n	8008222 <USART_SetConfig+0x61e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b01      	cmp	r3, #1
 800819e:	d03e      	beq.n	800821e <USART_SetConfig+0x61a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d038      	beq.n	800821a <USART_SetConfig+0x616>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d032      	beq.n	8008216 <USART_SetConfig+0x612>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d02c      	beq.n	8008212 <USART_SetConfig+0x60e>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d026      	beq.n	800820e <USART_SetConfig+0x60a>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b06      	cmp	r3, #6
 80081c6:	d020      	beq.n	800820a <USART_SetConfig+0x606>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d01a      	beq.n	8008206 <USART_SetConfig+0x602>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d014      	beq.n	8008202 <USART_SetConfig+0x5fe>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d00e      	beq.n	80081fe <USART_SetConfig+0x5fa>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b0a      	cmp	r3, #10
 80081e6:	d008      	beq.n	80081fa <USART_SetConfig+0x5f6>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b0b      	cmp	r3, #11
 80081ee:	d102      	bne.n	80081f6 <USART_SetConfig+0x5f2>
 80081f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f4:	e016      	b.n	8008224 <USART_SetConfig+0x620>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e014      	b.n	8008224 <USART_SetConfig+0x620>
 80081fa:	2380      	movs	r3, #128	; 0x80
 80081fc:	e012      	b.n	8008224 <USART_SetConfig+0x620>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	e010      	b.n	8008224 <USART_SetConfig+0x620>
 8008202:	2320      	movs	r3, #32
 8008204:	e00e      	b.n	8008224 <USART_SetConfig+0x620>
 8008206:	2310      	movs	r3, #16
 8008208:	e00c      	b.n	8008224 <USART_SetConfig+0x620>
 800820a:	230c      	movs	r3, #12
 800820c:	e00a      	b.n	8008224 <USART_SetConfig+0x620>
 800820e:	230a      	movs	r3, #10
 8008210:	e008      	b.n	8008224 <USART_SetConfig+0x620>
 8008212:	2308      	movs	r3, #8
 8008214:	e006      	b.n	8008224 <USART_SetConfig+0x620>
 8008216:	2306      	movs	r3, #6
 8008218:	e004      	b.n	8008224 <USART_SetConfig+0x620>
 800821a:	2304      	movs	r3, #4
 800821c:	e002      	b.n	8008224 <USART_SetConfig+0x620>
 800821e:	2302      	movs	r3, #2
 8008220:	e000      	b.n	8008224 <USART_SetConfig+0x620>
 8008222:	2301      	movs	r3, #1
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	005a      	lsls	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	441a      	add	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	fbb2 f3f3 	udiv	r3, r2, r3
 800823a:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 800823c:	e1d3      	b.n	80085e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800823e:	f107 030c 	add.w	r3, r7, #12
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe fc3c 	bl	8006ac0 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d044      	beq.n	80082dc <USART_SetConfig+0x6d8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008256:	2b01      	cmp	r3, #1
 8008258:	d03e      	beq.n	80082d8 <USART_SetConfig+0x6d4>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825e:	2b02      	cmp	r3, #2
 8008260:	d038      	beq.n	80082d4 <USART_SetConfig+0x6d0>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008266:	2b03      	cmp	r3, #3
 8008268:	d032      	beq.n	80082d0 <USART_SetConfig+0x6cc>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826e:	2b04      	cmp	r3, #4
 8008270:	d02c      	beq.n	80082cc <USART_SetConfig+0x6c8>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008276:	2b05      	cmp	r3, #5
 8008278:	d026      	beq.n	80082c8 <USART_SetConfig+0x6c4>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827e:	2b06      	cmp	r3, #6
 8008280:	d020      	beq.n	80082c4 <USART_SetConfig+0x6c0>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2b07      	cmp	r3, #7
 8008288:	d01a      	beq.n	80082c0 <USART_SetConfig+0x6bc>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828e:	2b08      	cmp	r3, #8
 8008290:	d014      	beq.n	80082bc <USART_SetConfig+0x6b8>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008296:	2b09      	cmp	r3, #9
 8008298:	d00e      	beq.n	80082b8 <USART_SetConfig+0x6b4>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b0a      	cmp	r3, #10
 80082a0:	d008      	beq.n	80082b4 <USART_SetConfig+0x6b0>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a6:	2b0b      	cmp	r3, #11
 80082a8:	d102      	bne.n	80082b0 <USART_SetConfig+0x6ac>
 80082aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ae:	e016      	b.n	80082de <USART_SetConfig+0x6da>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e014      	b.n	80082de <USART_SetConfig+0x6da>
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	e012      	b.n	80082de <USART_SetConfig+0x6da>
 80082b8:	2340      	movs	r3, #64	; 0x40
 80082ba:	e010      	b.n	80082de <USART_SetConfig+0x6da>
 80082bc:	2320      	movs	r3, #32
 80082be:	e00e      	b.n	80082de <USART_SetConfig+0x6da>
 80082c0:	2310      	movs	r3, #16
 80082c2:	e00c      	b.n	80082de <USART_SetConfig+0x6da>
 80082c4:	230c      	movs	r3, #12
 80082c6:	e00a      	b.n	80082de <USART_SetConfig+0x6da>
 80082c8:	230a      	movs	r3, #10
 80082ca:	e008      	b.n	80082de <USART_SetConfig+0x6da>
 80082cc:	2308      	movs	r3, #8
 80082ce:	e006      	b.n	80082de <USART_SetConfig+0x6da>
 80082d0:	2306      	movs	r3, #6
 80082d2:	e004      	b.n	80082de <USART_SetConfig+0x6da>
 80082d4:	2304      	movs	r3, #4
 80082d6:	e002      	b.n	80082de <USART_SetConfig+0x6da>
 80082d8:	2302      	movs	r3, #2
 80082da:	e000      	b.n	80082de <USART_SetConfig+0x6da>
 80082dc:	2301      	movs	r3, #1
 80082de:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e2:	005a      	lsls	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	085b      	lsrs	r3, r3, #1
 80082ea:	441a      	add	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f4:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80082f6:	e176      	b.n	80085e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082f8:	4b89      	ldr	r3, [pc, #548]	; (8008520 <USART_SetConfig+0x91c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 0320 	and.w	r3, r3, #32
 8008300:	2b00      	cmp	r3, #0
 8008302:	d05d      	beq.n	80083c0 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008304:	4b86      	ldr	r3, [pc, #536]	; (8008520 <USART_SetConfig+0x91c>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	08db      	lsrs	r3, r3, #3
 800830a:	f003 0303 	and.w	r3, r3, #3
 800830e:	4a85      	ldr	r2, [pc, #532]	; (8008524 <USART_SetConfig+0x920>)
 8008310:	40da      	lsrs	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d044      	beq.n	80083a4 <USART_SetConfig+0x7a0>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b01      	cmp	r3, #1
 8008320:	d03e      	beq.n	80083a0 <USART_SetConfig+0x79c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	2b02      	cmp	r3, #2
 8008328:	d038      	beq.n	800839c <USART_SetConfig+0x798>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832e:	2b03      	cmp	r3, #3
 8008330:	d032      	beq.n	8008398 <USART_SetConfig+0x794>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	2b04      	cmp	r3, #4
 8008338:	d02c      	beq.n	8008394 <USART_SetConfig+0x790>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b05      	cmp	r3, #5
 8008340:	d026      	beq.n	8008390 <USART_SetConfig+0x78c>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008346:	2b06      	cmp	r3, #6
 8008348:	d020      	beq.n	800838c <USART_SetConfig+0x788>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834e:	2b07      	cmp	r3, #7
 8008350:	d01a      	beq.n	8008388 <USART_SetConfig+0x784>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008356:	2b08      	cmp	r3, #8
 8008358:	d014      	beq.n	8008384 <USART_SetConfig+0x780>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835e:	2b09      	cmp	r3, #9
 8008360:	d00e      	beq.n	8008380 <USART_SetConfig+0x77c>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	2b0a      	cmp	r3, #10
 8008368:	d008      	beq.n	800837c <USART_SetConfig+0x778>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	2b0b      	cmp	r3, #11
 8008370:	d102      	bne.n	8008378 <USART_SetConfig+0x774>
 8008372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008376:	e016      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008378:	2301      	movs	r3, #1
 800837a:	e014      	b.n	80083a6 <USART_SetConfig+0x7a2>
 800837c:	2380      	movs	r3, #128	; 0x80
 800837e:	e012      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008380:	2340      	movs	r3, #64	; 0x40
 8008382:	e010      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008384:	2320      	movs	r3, #32
 8008386:	e00e      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008388:	2310      	movs	r3, #16
 800838a:	e00c      	b.n	80083a6 <USART_SetConfig+0x7a2>
 800838c:	230c      	movs	r3, #12
 800838e:	e00a      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008390:	230a      	movs	r3, #10
 8008392:	e008      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008394:	2308      	movs	r3, #8
 8008396:	e006      	b.n	80083a6 <USART_SetConfig+0x7a2>
 8008398:	2306      	movs	r3, #6
 800839a:	e004      	b.n	80083a6 <USART_SetConfig+0x7a2>
 800839c:	2304      	movs	r3, #4
 800839e:	e002      	b.n	80083a6 <USART_SetConfig+0x7a2>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e000      	b.n	80083a6 <USART_SetConfig+0x7a2>
 80083a4:	2301      	movs	r3, #1
 80083a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083aa:	005a      	lsls	r2, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	441a      	add	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 80083be:	e112      	b.n	80085e6 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d044      	beq.n	8008452 <USART_SetConfig+0x84e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d03e      	beq.n	800844e <USART_SetConfig+0x84a>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d038      	beq.n	800844a <USART_SetConfig+0x846>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d032      	beq.n	8008446 <USART_SetConfig+0x842>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d02c      	beq.n	8008442 <USART_SetConfig+0x83e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	2b05      	cmp	r3, #5
 80083ee:	d026      	beq.n	800843e <USART_SetConfig+0x83a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	2b06      	cmp	r3, #6
 80083f6:	d020      	beq.n	800843a <USART_SetConfig+0x836>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fc:	2b07      	cmp	r3, #7
 80083fe:	d01a      	beq.n	8008436 <USART_SetConfig+0x832>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b08      	cmp	r3, #8
 8008406:	d014      	beq.n	8008432 <USART_SetConfig+0x82e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	2b09      	cmp	r3, #9
 800840e:	d00e      	beq.n	800842e <USART_SetConfig+0x82a>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008414:	2b0a      	cmp	r3, #10
 8008416:	d008      	beq.n	800842a <USART_SetConfig+0x826>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b0b      	cmp	r3, #11
 800841e:	d102      	bne.n	8008426 <USART_SetConfig+0x822>
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008424:	e016      	b.n	8008454 <USART_SetConfig+0x850>
 8008426:	2301      	movs	r3, #1
 8008428:	e014      	b.n	8008454 <USART_SetConfig+0x850>
 800842a:	2380      	movs	r3, #128	; 0x80
 800842c:	e012      	b.n	8008454 <USART_SetConfig+0x850>
 800842e:	2340      	movs	r3, #64	; 0x40
 8008430:	e010      	b.n	8008454 <USART_SetConfig+0x850>
 8008432:	2320      	movs	r3, #32
 8008434:	e00e      	b.n	8008454 <USART_SetConfig+0x850>
 8008436:	2310      	movs	r3, #16
 8008438:	e00c      	b.n	8008454 <USART_SetConfig+0x850>
 800843a:	230c      	movs	r3, #12
 800843c:	e00a      	b.n	8008454 <USART_SetConfig+0x850>
 800843e:	230a      	movs	r3, #10
 8008440:	e008      	b.n	8008454 <USART_SetConfig+0x850>
 8008442:	2308      	movs	r3, #8
 8008444:	e006      	b.n	8008454 <USART_SetConfig+0x850>
 8008446:	2306      	movs	r3, #6
 8008448:	e004      	b.n	8008454 <USART_SetConfig+0x850>
 800844a:	2304      	movs	r3, #4
 800844c:	e002      	b.n	8008454 <USART_SetConfig+0x850>
 800844e:	2302      	movs	r3, #2
 8008450:	e000      	b.n	8008454 <USART_SetConfig+0x850>
 8008452:	2301      	movs	r3, #1
 8008454:	4a33      	ldr	r2, [pc, #204]	; (8008524 <USART_SetConfig+0x920>)
 8008456:	fbb2 f3f3 	udiv	r3, r2, r3
 800845a:	005a      	lsls	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	441a      	add	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	fbb2 f3f3 	udiv	r3, r2, r3
 800846c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800846e:	e0ba      	b.n	80085e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d044      	beq.n	8008502 <USART_SetConfig+0x8fe>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	2b01      	cmp	r3, #1
 800847e:	d03e      	beq.n	80084fe <USART_SetConfig+0x8fa>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b02      	cmp	r3, #2
 8008486:	d038      	beq.n	80084fa <USART_SetConfig+0x8f6>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	2b03      	cmp	r3, #3
 800848e:	d032      	beq.n	80084f6 <USART_SetConfig+0x8f2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008494:	2b04      	cmp	r3, #4
 8008496:	d02c      	beq.n	80084f2 <USART_SetConfig+0x8ee>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	2b05      	cmp	r3, #5
 800849e:	d026      	beq.n	80084ee <USART_SetConfig+0x8ea>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d020      	beq.n	80084ea <USART_SetConfig+0x8e6>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b07      	cmp	r3, #7
 80084ae:	d01a      	beq.n	80084e6 <USART_SetConfig+0x8e2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d014      	beq.n	80084e2 <USART_SetConfig+0x8de>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d00e      	beq.n	80084de <USART_SetConfig+0x8da>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b0a      	cmp	r3, #10
 80084c6:	d008      	beq.n	80084da <USART_SetConfig+0x8d6>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	2b0b      	cmp	r3, #11
 80084ce:	d102      	bne.n	80084d6 <USART_SetConfig+0x8d2>
 80084d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084d4:	e016      	b.n	8008504 <USART_SetConfig+0x900>
 80084d6:	2301      	movs	r3, #1
 80084d8:	e014      	b.n	8008504 <USART_SetConfig+0x900>
 80084da:	2380      	movs	r3, #128	; 0x80
 80084dc:	e012      	b.n	8008504 <USART_SetConfig+0x900>
 80084de:	2340      	movs	r3, #64	; 0x40
 80084e0:	e010      	b.n	8008504 <USART_SetConfig+0x900>
 80084e2:	2320      	movs	r3, #32
 80084e4:	e00e      	b.n	8008504 <USART_SetConfig+0x900>
 80084e6:	2310      	movs	r3, #16
 80084e8:	e00c      	b.n	8008504 <USART_SetConfig+0x900>
 80084ea:	230c      	movs	r3, #12
 80084ec:	e00a      	b.n	8008504 <USART_SetConfig+0x900>
 80084ee:	230a      	movs	r3, #10
 80084f0:	e008      	b.n	8008504 <USART_SetConfig+0x900>
 80084f2:	2308      	movs	r3, #8
 80084f4:	e006      	b.n	8008504 <USART_SetConfig+0x900>
 80084f6:	2306      	movs	r3, #6
 80084f8:	e004      	b.n	8008504 <USART_SetConfig+0x900>
 80084fa:	2304      	movs	r3, #4
 80084fc:	e002      	b.n	8008504 <USART_SetConfig+0x900>
 80084fe:	2302      	movs	r3, #2
 8008500:	e000      	b.n	8008504 <USART_SetConfig+0x900>
 8008502:	2301      	movs	r3, #1
 8008504:	4a08      	ldr	r2, [pc, #32]	; (8008528 <USART_SetConfig+0x924>)
 8008506:	fbb2 f3f3 	udiv	r3, r2, r3
 800850a:	005a      	lsls	r2, r3, #1
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	085b      	lsrs	r3, r3, #1
 8008512:	441a      	add	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	fbb2 f3f3 	udiv	r3, r2, r3
 800851c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800851e:	e062      	b.n	80085e6 <USART_SetConfig+0x9e2>
 8008520:	58024400 	.word	0x58024400
 8008524:	03d09000 	.word	0x03d09000
 8008528:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008530:	2b00      	cmp	r3, #0
 8008532:	d044      	beq.n	80085be <USART_SetConfig+0x9ba>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	2b01      	cmp	r3, #1
 800853a:	d03e      	beq.n	80085ba <USART_SetConfig+0x9b6>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2b02      	cmp	r3, #2
 8008542:	d038      	beq.n	80085b6 <USART_SetConfig+0x9b2>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008548:	2b03      	cmp	r3, #3
 800854a:	d032      	beq.n	80085b2 <USART_SetConfig+0x9ae>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b04      	cmp	r3, #4
 8008552:	d02c      	beq.n	80085ae <USART_SetConfig+0x9aa>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2b05      	cmp	r3, #5
 800855a:	d026      	beq.n	80085aa <USART_SetConfig+0x9a6>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b06      	cmp	r3, #6
 8008562:	d020      	beq.n	80085a6 <USART_SetConfig+0x9a2>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b07      	cmp	r3, #7
 800856a:	d01a      	beq.n	80085a2 <USART_SetConfig+0x99e>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b08      	cmp	r3, #8
 8008572:	d014      	beq.n	800859e <USART_SetConfig+0x99a>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b09      	cmp	r3, #9
 800857a:	d00e      	beq.n	800859a <USART_SetConfig+0x996>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b0a      	cmp	r3, #10
 8008582:	d008      	beq.n	8008596 <USART_SetConfig+0x992>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b0b      	cmp	r3, #11
 800858a:	d102      	bne.n	8008592 <USART_SetConfig+0x98e>
 800858c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008590:	e016      	b.n	80085c0 <USART_SetConfig+0x9bc>
 8008592:	2301      	movs	r3, #1
 8008594:	e014      	b.n	80085c0 <USART_SetConfig+0x9bc>
 8008596:	2380      	movs	r3, #128	; 0x80
 8008598:	e012      	b.n	80085c0 <USART_SetConfig+0x9bc>
 800859a:	2340      	movs	r3, #64	; 0x40
 800859c:	e010      	b.n	80085c0 <USART_SetConfig+0x9bc>
 800859e:	2320      	movs	r3, #32
 80085a0:	e00e      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085a2:	2310      	movs	r3, #16
 80085a4:	e00c      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085a6:	230c      	movs	r3, #12
 80085a8:	e00a      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085aa:	230a      	movs	r3, #10
 80085ac:	e008      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085ae:	2308      	movs	r3, #8
 80085b0:	e006      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085b2:	2306      	movs	r3, #6
 80085b4:	e004      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085b6:	2304      	movs	r3, #4
 80085b8:	e002      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085ba:	2302      	movs	r3, #2
 80085bc:	e000      	b.n	80085c0 <USART_SetConfig+0x9bc>
 80085be:	2301      	movs	r3, #1
 80085c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80085c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c8:	005a      	lsls	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	085b      	lsrs	r3, r3, #1
 80085d0:	441a      	add	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80085dc:	e003      	b.n	80085e6 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 80085e4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2b0f      	cmp	r3, #15
 80085ea:	d916      	bls.n	800861a <USART_SetConfig+0xa16>
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f2:	d212      	bcs.n	800861a <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f023 030f 	bic.w	r3, r3, #15
 80085fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	b29b      	uxth	r3, r3
 8008604:	f003 0307 	and.w	r3, r3, #7
 8008608:	b29a      	uxth	r2, r3
 800860a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800860c:	4313      	orrs	r3, r2
 800860e:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008616:	60da      	str	r2, [r3, #12]
 8008618:	e002      	b.n	8008620 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8008638:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800863c:	4618      	mov	r0, r3
 800863e:	3738      	adds	r7, #56	; 0x38
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af02      	add	r7, sp, #8
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008652:	f7f9 f84d 	bl	80016f0 <HAL_GetTick>
 8008656:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b08      	cmp	r3, #8
 8008664:	d10e      	bne.n	8008684 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7ff fa8e 	bl	8007b96 <USART_WaitOnFlagUntilTimeout>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e01e      	b.n	80086c2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0304 	and.w	r3, r3, #4
 800868e:	2b04      	cmp	r3, #4
 8008690:	d10e      	bne.n	80086b0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f7ff fa78 	bl	8007b96 <USART_WaitOnFlagUntilTimeout>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086ac:	2303      	movs	r3, #3
 80086ae:	e008      	b.n	80086c2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b085      	sub	sp, #20
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_USARTEx_DisableFifoMode+0x16>
 80086dc:	2302      	movs	r3, #2
 80086de:	e027      	b.n	8008730 <HAL_USARTEx_DisableFifoMode+0x66>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2202      	movs	r2, #2
 80086ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0201 	bic.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800870e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800874c:	2b01      	cmp	r3, #1
 800874e:	d101      	bne.n	8008754 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8008750:	2302      	movs	r3, #2
 8008752:	e02d      	b.n	80087b0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0201 	bic.w	r2, r2, #1
 800877a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	430a      	orrs	r2, r1
 800878e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f84f 	bl	8008834 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e02d      	b.n	800882c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0201 	bic.w	r2, r2, #1
 80087f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f811 	bl	8008834 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	2b00      	cmp	r3, #0
 8008842:	d106      	bne.n	8008852 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008850:	e02f      	b.n	80088b2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008852:	2310      	movs	r3, #16
 8008854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008856:	2310      	movs	r3, #16
 8008858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8008860:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008862:	b2db      	uxtb	r3, r3
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8008870:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0307 	and.w	r3, r3, #7
 8008878:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	7b3a      	ldrb	r2, [r7, #12]
 800887e:	4910      	ldr	r1, [pc, #64]	; (80088c0 <USARTEx_SetNbDataToProcess+0x8c>)
 8008880:	5c8a      	ldrb	r2, [r1, r2]
 8008882:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8008886:	7b3a      	ldrb	r2, [r7, #12]
 8008888:	490e      	ldr	r1, [pc, #56]	; (80088c4 <USARTEx_SetNbDataToProcess+0x90>)
 800888a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800888c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	7b7a      	ldrb	r2, [r7, #13]
 800889a:	4909      	ldr	r1, [pc, #36]	; (80088c0 <USARTEx_SetNbDataToProcess+0x8c>)
 800889c:	5c8a      	ldrb	r2, [r1, r2]
 800889e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80088a2:	7b7a      	ldrb	r2, [r7, #13]
 80088a4:	4907      	ldr	r1, [pc, #28]	; (80088c4 <USARTEx_SetNbDataToProcess+0x90>)
 80088a6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80088b2:	bf00      	nop
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	08008b7c 	.word	0x08008b7c
 80088c4:	08008b84 	.word	0x08008b84

080088c8 <calloc>:
 80088c8:	4b02      	ldr	r3, [pc, #8]	; (80088d4 <calloc+0xc>)
 80088ca:	460a      	mov	r2, r1
 80088cc:	4601      	mov	r1, r0
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	f000 b802 	b.w	80088d8 <_calloc_r>
 80088d4:	2400005c 	.word	0x2400005c

080088d8 <_calloc_r>:
 80088d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088da:	fba1 2402 	umull	r2, r4, r1, r2
 80088de:	b94c      	cbnz	r4, 80088f4 <_calloc_r+0x1c>
 80088e0:	4611      	mov	r1, r2
 80088e2:	9201      	str	r2, [sp, #4]
 80088e4:	f000 f82e 	bl	8008944 <_malloc_r>
 80088e8:	9a01      	ldr	r2, [sp, #4]
 80088ea:	4605      	mov	r5, r0
 80088ec:	b930      	cbnz	r0, 80088fc <_calloc_r+0x24>
 80088ee:	4628      	mov	r0, r5
 80088f0:	b003      	add	sp, #12
 80088f2:	bd30      	pop	{r4, r5, pc}
 80088f4:	220c      	movs	r2, #12
 80088f6:	6002      	str	r2, [r0, #0]
 80088f8:	2500      	movs	r5, #0
 80088fa:	e7f8      	b.n	80088ee <_calloc_r+0x16>
 80088fc:	4621      	mov	r1, r4
 80088fe:	f000 f8ad 	bl	8008a5c <memset>
 8008902:	e7f4      	b.n	80088ee <_calloc_r+0x16>

08008904 <sbrk_aligned>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	4e0e      	ldr	r6, [pc, #56]	; (8008940 <sbrk_aligned+0x3c>)
 8008908:	460c      	mov	r4, r1
 800890a:	6831      	ldr	r1, [r6, #0]
 800890c:	4605      	mov	r5, r0
 800890e:	b911      	cbnz	r1, 8008916 <sbrk_aligned+0x12>
 8008910:	f000 f8ac 	bl	8008a6c <_sbrk_r>
 8008914:	6030      	str	r0, [r6, #0]
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f8a7 	bl	8008a6c <_sbrk_r>
 800891e:	1c43      	adds	r3, r0, #1
 8008920:	d00a      	beq.n	8008938 <sbrk_aligned+0x34>
 8008922:	1cc4      	adds	r4, r0, #3
 8008924:	f024 0403 	bic.w	r4, r4, #3
 8008928:	42a0      	cmp	r0, r4
 800892a:	d007      	beq.n	800893c <sbrk_aligned+0x38>
 800892c:	1a21      	subs	r1, r4, r0
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f89c 	bl	8008a6c <_sbrk_r>
 8008934:	3001      	adds	r0, #1
 8008936:	d101      	bne.n	800893c <sbrk_aligned+0x38>
 8008938:	f04f 34ff 	mov.w	r4, #4294967295
 800893c:	4620      	mov	r0, r4
 800893e:	bd70      	pop	{r4, r5, r6, pc}
 8008940:	24000538 	.word	0x24000538

08008944 <_malloc_r>:
 8008944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008948:	1ccd      	adds	r5, r1, #3
 800894a:	f025 0503 	bic.w	r5, r5, #3
 800894e:	3508      	adds	r5, #8
 8008950:	2d0c      	cmp	r5, #12
 8008952:	bf38      	it	cc
 8008954:	250c      	movcc	r5, #12
 8008956:	2d00      	cmp	r5, #0
 8008958:	4607      	mov	r7, r0
 800895a:	db01      	blt.n	8008960 <_malloc_r+0x1c>
 800895c:	42a9      	cmp	r1, r5
 800895e:	d905      	bls.n	800896c <_malloc_r+0x28>
 8008960:	230c      	movs	r3, #12
 8008962:	603b      	str	r3, [r7, #0]
 8008964:	2600      	movs	r6, #0
 8008966:	4630      	mov	r0, r6
 8008968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a40 <_malloc_r+0xfc>
 8008970:	f000 f868 	bl	8008a44 <__malloc_lock>
 8008974:	f8d8 3000 	ldr.w	r3, [r8]
 8008978:	461c      	mov	r4, r3
 800897a:	bb5c      	cbnz	r4, 80089d4 <_malloc_r+0x90>
 800897c:	4629      	mov	r1, r5
 800897e:	4638      	mov	r0, r7
 8008980:	f7ff ffc0 	bl	8008904 <sbrk_aligned>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	4604      	mov	r4, r0
 8008988:	d155      	bne.n	8008a36 <_malloc_r+0xf2>
 800898a:	f8d8 4000 	ldr.w	r4, [r8]
 800898e:	4626      	mov	r6, r4
 8008990:	2e00      	cmp	r6, #0
 8008992:	d145      	bne.n	8008a20 <_malloc_r+0xdc>
 8008994:	2c00      	cmp	r4, #0
 8008996:	d048      	beq.n	8008a2a <_malloc_r+0xe6>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	4631      	mov	r1, r6
 800899c:	4638      	mov	r0, r7
 800899e:	eb04 0903 	add.w	r9, r4, r3
 80089a2:	f000 f863 	bl	8008a6c <_sbrk_r>
 80089a6:	4581      	cmp	r9, r0
 80089a8:	d13f      	bne.n	8008a2a <_malloc_r+0xe6>
 80089aa:	6821      	ldr	r1, [r4, #0]
 80089ac:	1a6d      	subs	r5, r5, r1
 80089ae:	4629      	mov	r1, r5
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff ffa7 	bl	8008904 <sbrk_aligned>
 80089b6:	3001      	adds	r0, #1
 80089b8:	d037      	beq.n	8008a2a <_malloc_r+0xe6>
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	442b      	add	r3, r5
 80089be:	6023      	str	r3, [r4, #0]
 80089c0:	f8d8 3000 	ldr.w	r3, [r8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d038      	beq.n	8008a3a <_malloc_r+0xf6>
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	42a2      	cmp	r2, r4
 80089cc:	d12b      	bne.n	8008a26 <_malloc_r+0xe2>
 80089ce:	2200      	movs	r2, #0
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	e00f      	b.n	80089f4 <_malloc_r+0xb0>
 80089d4:	6822      	ldr	r2, [r4, #0]
 80089d6:	1b52      	subs	r2, r2, r5
 80089d8:	d41f      	bmi.n	8008a1a <_malloc_r+0xd6>
 80089da:	2a0b      	cmp	r2, #11
 80089dc:	d917      	bls.n	8008a0e <_malloc_r+0xca>
 80089de:	1961      	adds	r1, r4, r5
 80089e0:	42a3      	cmp	r3, r4
 80089e2:	6025      	str	r5, [r4, #0]
 80089e4:	bf18      	it	ne
 80089e6:	6059      	strne	r1, [r3, #4]
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	bf08      	it	eq
 80089ec:	f8c8 1000 	streq.w	r1, [r8]
 80089f0:	5162      	str	r2, [r4, r5]
 80089f2:	604b      	str	r3, [r1, #4]
 80089f4:	4638      	mov	r0, r7
 80089f6:	f104 060b 	add.w	r6, r4, #11
 80089fa:	f000 f829 	bl	8008a50 <__malloc_unlock>
 80089fe:	f026 0607 	bic.w	r6, r6, #7
 8008a02:	1d23      	adds	r3, r4, #4
 8008a04:	1af2      	subs	r2, r6, r3
 8008a06:	d0ae      	beq.n	8008966 <_malloc_r+0x22>
 8008a08:	1b9b      	subs	r3, r3, r6
 8008a0a:	50a3      	str	r3, [r4, r2]
 8008a0c:	e7ab      	b.n	8008966 <_malloc_r+0x22>
 8008a0e:	42a3      	cmp	r3, r4
 8008a10:	6862      	ldr	r2, [r4, #4]
 8008a12:	d1dd      	bne.n	80089d0 <_malloc_r+0x8c>
 8008a14:	f8c8 2000 	str.w	r2, [r8]
 8008a18:	e7ec      	b.n	80089f4 <_malloc_r+0xb0>
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	6864      	ldr	r4, [r4, #4]
 8008a1e:	e7ac      	b.n	800897a <_malloc_r+0x36>
 8008a20:	4634      	mov	r4, r6
 8008a22:	6876      	ldr	r6, [r6, #4]
 8008a24:	e7b4      	b.n	8008990 <_malloc_r+0x4c>
 8008a26:	4613      	mov	r3, r2
 8008a28:	e7cc      	b.n	80089c4 <_malloc_r+0x80>
 8008a2a:	230c      	movs	r3, #12
 8008a2c:	603b      	str	r3, [r7, #0]
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f000 f80e 	bl	8008a50 <__malloc_unlock>
 8008a34:	e797      	b.n	8008966 <_malloc_r+0x22>
 8008a36:	6025      	str	r5, [r4, #0]
 8008a38:	e7dc      	b.n	80089f4 <_malloc_r+0xb0>
 8008a3a:	605b      	str	r3, [r3, #4]
 8008a3c:	deff      	udf	#255	; 0xff
 8008a3e:	bf00      	nop
 8008a40:	24000534 	.word	0x24000534

08008a44 <__malloc_lock>:
 8008a44:	4801      	ldr	r0, [pc, #4]	; (8008a4c <__malloc_lock+0x8>)
 8008a46:	f000 b84b 	b.w	8008ae0 <__retarget_lock_acquire_recursive>
 8008a4a:	bf00      	nop
 8008a4c:	24000678 	.word	0x24000678

08008a50 <__malloc_unlock>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__malloc_unlock+0x8>)
 8008a52:	f000 b846 	b.w	8008ae2 <__retarget_lock_release_recursive>
 8008a56:	bf00      	nop
 8008a58:	24000678 	.word	0x24000678

08008a5c <memset>:
 8008a5c:	4402      	add	r2, r0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d100      	bne.n	8008a66 <memset+0xa>
 8008a64:	4770      	bx	lr
 8008a66:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6a:	e7f9      	b.n	8008a60 <memset+0x4>

08008a6c <_sbrk_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4d06      	ldr	r5, [pc, #24]	; (8008a88 <_sbrk_r+0x1c>)
 8008a70:	2300      	movs	r3, #0
 8008a72:	4604      	mov	r4, r0
 8008a74:	4608      	mov	r0, r1
 8008a76:	602b      	str	r3, [r5, #0]
 8008a78:	f7f8 fccc 	bl	8001414 <_sbrk>
 8008a7c:	1c43      	adds	r3, r0, #1
 8008a7e:	d102      	bne.n	8008a86 <_sbrk_r+0x1a>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	b103      	cbz	r3, 8008a86 <_sbrk_r+0x1a>
 8008a84:	6023      	str	r3, [r4, #0]
 8008a86:	bd38      	pop	{r3, r4, r5, pc}
 8008a88:	24000674 	.word	0x24000674

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	2400005c 	.word	0x2400005c

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4d0d      	ldr	r5, [pc, #52]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9c:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	2600      	movs	r6, #0
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	4d0b      	ldr	r5, [pc, #44]	; (8008ad8 <__libc_init_array+0x40>)
 8008aaa:	4c0c      	ldr	r4, [pc, #48]	; (8008adc <__libc_init_array+0x44>)
 8008aac:	f000 f828 	bl	8008b00 <_init>
 8008ab0:	1b64      	subs	r4, r4, r5
 8008ab2:	10a4      	asrs	r4, r4, #2
 8008ab4:	2600      	movs	r6, #0
 8008ab6:	42a6      	cmp	r6, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac0:	4798      	blx	r3
 8008ac2:	3601      	adds	r6, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aca:	4798      	blx	r3
 8008acc:	3601      	adds	r6, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08008b8c 	.word	0x08008b8c
 8008ad4:	08008b8c 	.word	0x08008b8c
 8008ad8:	08008b8c 	.word	0x08008b8c
 8008adc:	08008b90 	.word	0x08008b90

08008ae0 <__retarget_lock_acquire_recursive>:
 8008ae0:	4770      	bx	lr

08008ae2 <__retarget_lock_release_recursive>:
 8008ae2:	4770      	bx	lr

08008ae4 <memcpy>:
 8008ae4:	440a      	add	r2, r1
 8008ae6:	4291      	cmp	r1, r2
 8008ae8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aec:	d100      	bne.n	8008af0 <memcpy+0xc>
 8008aee:	4770      	bx	lr
 8008af0:	b510      	push	{r4, lr}
 8008af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008af6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008afa:	4291      	cmp	r1, r2
 8008afc:	d1f9      	bne.n	8008af2 <memcpy+0xe>
 8008afe:	bd10      	pop	{r4, pc}

08008b00 <_init>:
 8008b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b02:	bf00      	nop
 8008b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b06:	bc08      	pop	{r3}
 8008b08:	469e      	mov	lr, r3
 8008b0a:	4770      	bx	lr

08008b0c <_fini>:
 8008b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0e:	bf00      	nop
 8008b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b12:	bc08      	pop	{r3}
 8008b14:	469e      	mov	lr, r3
 8008b16:	4770      	bx	lr
