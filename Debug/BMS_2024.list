
BMS_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009380  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009618  08009618  00019618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800968c  0800968c  0001968c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009690  08009690  00019690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  24000000  08009694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000624  24000060  080096f4  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000684  080096f4  00020684  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019b41  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030fa  00000000  00000000  00039c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001548  00000000  00000000  0003cd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001074  00000000  00000000  0003e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6a5  00000000  00000000  0003f2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d9d0  00000000  00000000  00079971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177dd6  00000000  00000000  00097341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005ec0  00000000  00000000  0020f118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000080  00000000  00000000  00214fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009600 	.word	0x08009600

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	08009600 	.word	0x08009600

080002d8 <BMS_Init>:
#include "defines.h"
#include "bms.h"
#include "ltc.h"


void BMS_Init(Master **BMS) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	*BMS = (Master*) calloc(1, sizeof(Master));
 80002e0:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80002e4:	2001      	movs	r0, #1
 80002e6:	f009 f86f 	bl	80093c8 <calloc>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]
	LTC_config* config = (LTC_config*) calloc(1, sizeof(LTC_config));
 80002f2:	210c      	movs	r1, #12
 80002f4:	2001      	movs	r0, #1
 80002f6:	f009 f867 	bl	80093c8 <calloc>
 80002fa:	4603      	mov	r3, r0
 80002fc:	60bb      	str	r3, [r7, #8]
	config->command = (LTC_command*) calloc(1 ,sizeof(LTC_command));
 80002fe:	2112      	movs	r1, #18
 8000300:	2001      	movs	r0, #1
 8000302:	f009 f861 	bl	80093c8 <calloc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
	LTC_Init(config);
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f8e4 	bl	80004dc <LTC_Init>

	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000314:	2300      	movs	r3, #0
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	e015      	b.n	8000346 <BMS_Init+0x6e>
		(*BMS)->slaves[i].config = config;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	215c      	movs	r1, #92	; 0x5c
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	3358      	adds	r3, #88	; 0x58
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
		(*BMS)->slaves[i].sensor.ADDR = i;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	215c      	movs	r1, #92	; 0x5c
 8000336:	fb01 f303 	mul.w	r3, r1, r3
 800033a:	4413      	add	r3, r2
 800033c:	7bfa      	ldrb	r2, [r7, #15]
 800033e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	3301      	adds	r3, #1
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d9e6      	bls.n	800031a <BMS_Init+0x42>
	}

	LTC_PEC_InitTable();
 800034c:	f000 f8fe 	bl	800054c <LTC_PEC_InitTable>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <ElectricalManagement>:

void ElectricalManagement(Master *BMS){
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	LTC_SendBroadcastCommand(BMS->slaves[0].config, LTC_COMMAND_ADCV);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000364:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f93a 	bl	80005e2 <LTC_SendBroadcastCommand>
		uint16_t temp_minV = UINT16_MAX;
 800036e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000372:	81fb      	strh	r3, [r7, #14]
		uint16_t temp_maxV = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	72fb      	strb	r3, [r7, #11]
 800037c:	e034      	b.n	80003e8 <ElectricalManagement+0x90>
			LTC_Read(LTC_READ_CELL, &(BMS->slaves[i]));
 800037e:	7afb      	ldrb	r3, [r7, #11]
 8000380:	225c      	movs	r2, #92	; 0x5c
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	4619      	mov	r1, r3
 800038c:	2001      	movs	r0, #1
 800038e:	f000 f917 	bl	80005c0 <LTC_Read>
			if(BMS->slaves[i].sensor.V_MIN < temp_minV)
 8000392:	7afb      	ldrb	r3, [r7, #11]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	215c      	movs	r1, #92	; 0x5c
 8000398:	fb01 f303 	mul.w	r3, r1, r3
 800039c:	4413      	add	r3, r2
 800039e:	3352      	adds	r3, #82	; 0x52
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	89fa      	ldrh	r2, [r7, #14]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d908      	bls.n	80003ba <ElectricalManagement+0x62>
				temp_minV = BMS->slaves[i].sensor.V_MIN;
 80003a8:	7afb      	ldrb	r3, [r7, #11]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	215c      	movs	r1, #92	; 0x5c
 80003ae:	fb01 f303 	mul.w	r3, r1, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	3352      	adds	r3, #82	; 0x52
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	81fb      	strh	r3, [r7, #14]
			if(BMS->slaves[i].sensor.V_MAX > temp_maxV)
 80003ba:	7afb      	ldrb	r3, [r7, #11]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	215c      	movs	r1, #92	; 0x5c
 80003c0:	fb01 f303 	mul.w	r3, r1, r3
 80003c4:	4413      	add	r3, r2
 80003c6:	3350      	adds	r3, #80	; 0x50
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	89ba      	ldrh	r2, [r7, #12]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d208      	bcs.n	80003e2 <ElectricalManagement+0x8a>
				temp_maxV = BMS->slaves[i].sensor.V_MAX;
 80003d0:	7afb      	ldrb	r3, [r7, #11]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	215c      	movs	r1, #92	; 0x5c
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	4413      	add	r3, r2
 80003dc:	3350      	adds	r3, #80	; 0x50
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	3301      	adds	r3, #1
 80003e6:	72fb      	strb	r3, [r7, #11]
 80003e8:	7afb      	ldrb	r3, [r7, #11]
 80003ea:	2b03      	cmp	r3, #3
 80003ec:	d9c7      	bls.n	800037e <ElectricalManagement+0x26>
		}
		BMS->maxCellVoltage = temp_maxV;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	89ba      	ldrh	r2, [r7, #12]
 80003f2:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
		BMS->minCellVoltage = temp_minV;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	89fa      	ldrh	r2, [r7, #14]
 80003fa:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
		BMS->deltaVoltage = BMS->maxCellVoltage - BMS->minCellVoltage;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f8b3 2170 	ldrh.w	r2, [r3, #368]	; 0x170
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	b29a      	uxth	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <Monitoring>:

void Monitoring(Master *BMS) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	ElectricalManagement(BMS);
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff97 	bl	8000358 <ElectricalManagement>
}
 800042a:	bf00      	nop
 800042c:	3708      	adds	r7, #8
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <DWT_Delay_Init+0x58>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a13      	ldr	r2, [pc, #76]	; (800048c <DWT_Delay_Init+0x58>)
 800043e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000442:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <DWT_Delay_Init+0x58>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	4a10      	ldr	r2, [pc, #64]	; (800048c <DWT_Delay_Init+0x58>)
 800044a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800044e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <DWT_Delay_Init+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <DWT_Delay_Init+0x5c>)
 8000456:	f023 0301 	bic.w	r3, r3, #1
 800045a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800045c:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <DWT_Delay_Init+0x5c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <DWT_Delay_Init+0x5c>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000468:	4b09      	ldr	r3, [pc, #36]	; (8000490 <DWT_Delay_Init+0x5c>)
 800046a:	2200      	movs	r2, #0
 800046c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800046e:	bf00      	nop
     __ASM volatile ("NOP");
 8000470:	bf00      	nop
  __ASM volatile ("NOP");
 8000472:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <DWT_Delay_Init+0x5c>)
 8000476:	685b      	ldr	r3, [r3, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800047c:	2300      	movs	r3, #0
 800047e:	e000      	b.n	8000482 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000480:	2301      	movs	r3, #1
  }
}
 8000482:	4618      	mov	r0, r3
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000edf0 	.word	0xe000edf0
 8000490:	e0001000 	.word	0xe0001000

08000494 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <DWT_Delay_us+0x40>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80004a2:	f004 fe0d 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80004a6:	4603      	mov	r3, r0
 80004a8:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <DWT_Delay_us+0x44>)
 80004aa:	fba2 2303 	umull	r2, r3, r2, r3
 80004ae:	0c9b      	lsrs	r3, r3, #18
 80004b0:	687a      	ldr	r2, [r7, #4]
 80004b2:	fb02 f303 	mul.w	r3, r2, r3
 80004b6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80004b8:	bf00      	nop
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <DWT_Delay_us+0x40>)
 80004bc:	685a      	ldr	r2, [r3, #4]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	1ad2      	subs	r2, r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d3f8      	bcc.n	80004ba <DWT_Delay_us+0x26>
}
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	e0001000 	.word	0xe0001000
 80004d8:	431bde83 	.word	0x431bde83

080004dc <LTC_Init>:
#define BYTESWAP(word) ((word >> 8) + (word << 8))

extern SPI_HandleTypeDef hspi1;
static uint16_t pec_table[LTC_PEC_TABLE_LENGTH];

void LTC_Init(LTC_config *config) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	config->GPIO   = ALL_GPIOS_READ;
 80004e4:	687a      	ldr	r2, [r7, #4]
 80004e6:	7913      	ldrb	r3, [r2, #4]
 80004e8:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 80004ec:	7113      	strb	r3, [r2, #4]
	config->REFON  = REFERENCE_SHUTS_DOWN_AFTER_CONVERSIONS;
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	7913      	ldrb	r3, [r2, #4]
 80004f2:	f36f 1386 	bfc	r3, #6, #1
 80004f6:	7113      	strb	r3, [r2, #4]
	config->SWTRD  = SOFTWARE_TIMER_ENABLE_PIN_LOW;
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7913      	ldrb	r3, [r2, #4]
 80004fc:	f36f 13c7 	bfc	r3, #7, #1
 8000500:	7113      	strb	r3, [r2, #4]
	config->ADCOPT = SELECT_ADC_MODES_FAST;
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	7953      	ldrb	r3, [r2, #5]
 8000506:	f36f 0300 	bfc	r3, #0, #1
 800050a:	7153      	strb	r3, [r2, #5]
	config->VUV    = DEFULT_VOLTAGE;
 800050c:	687a      	ldr	r2, [r7, #4]
 800050e:	88d3      	ldrh	r3, [r2, #6]
 8000510:	f36f 030b 	bfc	r3, #0, #12
 8000514:	80d3      	strh	r3, [r2, #6]
	config->VOV    = DEFULT_VOLTAGE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2200      	movs	r2, #0
 800051a:	811a      	strh	r2, [r3, #8]
	config->DCTO   = DISCHARGE_DISABLE;
 800051c:	687a      	ldr	r2, [r7, #4]
 800051e:	7a93      	ldrb	r3, [r2, #10]
 8000520:	f36f 0303 	bfc	r3, #0, #4
 8000524:	7293      	strb	r3, [r2, #10]
	config->command->MD  = MD_FILTRED;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800052e:	809a      	strh	r2, [r3, #4]
	config->command->DCP = DCP_PERMITED;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2210      	movs	r2, #16
 8000536:	80da      	strh	r2, [r3, #6]
	LTC_SendBroadcastCommand(config, LTC_COMMAND_WRCOMM);
 8000538:	f240 7121 	movw	r1, #1825	; 0x721
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f850 	bl	80005e2 <LTC_SendBroadcastCommand>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
	...

0800054c <LTC_PEC_InitTable>:

void LTC_PEC_InitTable() {
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	e026      	b.n	80005a6 <LTC_PEC_InitTable+0x5a>
		remainder = i << 7;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	b29b      	uxth	r3, r3
 800055c:	01db      	lsls	r3, r3, #7
 800055e:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 8000560:	2308      	movs	r3, #8
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	e014      	b.n	8000590 <LTC_PEC_InitTable+0x44>
			if(remainder & 0x4000) {
 8000566:	89fb      	ldrh	r3, [r7, #14]
 8000568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800056c:	2b00      	cmp	r3, #0
 800056e:	d009      	beq.n	8000584 <LTC_PEC_InitTable+0x38>
				remainder = remainder << 1;
 8000570:	89fb      	ldrh	r3, [r7, #14]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	81fb      	strh	r3, [r7, #14]
				remainder = remainder ^ 0x4599;
 8000576:	89fb      	ldrh	r3, [r7, #14]
 8000578:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 800057c:	f083 0319 	eor.w	r3, r3, #25
 8000580:	81fb      	strh	r3, [r7, #14]
 8000582:	e002      	b.n	800058a <LTC_PEC_InitTable+0x3e>
			}
			else
				remainder = remainder << 1;
 8000584:	89fb      	ldrh	r3, [r7, #14]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3b01      	subs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	dce7      	bgt.n	8000566 <LTC_PEC_InitTable+0x1a>
		}
		pec_table[i] = remainder&0xFFFF;
 8000596:	4909      	ldr	r1, [pc, #36]	; (80005bc <LTC_PEC_InitTable+0x70>)
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	89fa      	ldrh	r2, [r7, #14]
 800059c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	2bff      	cmp	r3, #255	; 0xff
 80005aa:	ddd5      	ble.n	8000558 <LTC_PEC_InitTable+0xc>
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	2400007c 	.word	0x2400007c

080005c0 <LTC_Read>:
	do{
		LTC_SendAddressedCommand(slave, LTC_COMMAND_PLADC);
	}while(!slave->config->ADC_READY);
}

void LTC_Read(uint8_t LTC_READ, Slave *slave){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	6039      	str	r1, [r7, #0]
 80005ca:	71fb      	strb	r3, [r7, #7]
	slave->config->command->BROADCAST = false;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2200      	movs	r2, #0
 80005d4:	709a      	strb	r2, [r3, #2]

}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <LTC_SendBroadcastCommand>:

void LTC_SendBroadcastCommand(LTC_config *config, uint16_t command_name) {
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b086      	sub	sp, #24
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	460b      	mov	r3, r1
 80005ec:	807b      	strh	r3, [r7, #2]
	uint16_t tx_data[4] = {0, 0, 0, 0};
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
	uint16_t rx_data[4] = {0, 0, 0, 0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
	config->command->NAME = command_name;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	887a      	ldrh	r2, [r7, #2]
 8000608:	801a      	strh	r2, [r3, #0]
	LTC_Communication(config, tx_data, rx_data);
 800060a:	f107 0208 	add.w	r2, r7, #8
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f812 	bl	800063e <LTC_Communication>
}
 800061a:	bf00      	nop
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <LTC_StartTrasmission>:
	default:
		break;
	}
}

void LTC_StartTrasmission(){
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
	LTC_ChipSelect(RESET);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f82a 	bl	8000680 <LTC_ChipSelect>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <LTC_EndTramission>:

void LTC_EndTramission() {
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	LTC_ChipSelect(SET);
 8000634:	2001      	movs	r0, #1
 8000636:	f000 f823 	bl	8000680 <LTC_ChipSelect>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}

0800063e <LTC_Communication>:

void LTC_Communication(LTC_config *config, uint16_t* tx_data, uint16_t* rx_data) {
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
	uint16_t command = LTC_MakeCommand(config->command);
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 f84f 	bl	80006f2 <LTC_MakeCommand>
 8000654:	4603      	mov	r3, r0
 8000656:	82fb      	strh	r3, [r7, #22]
	LTC_WakeUp();
 8000658:	f000 f840 	bl	80006dc <LTC_WakeUp>
	LTC_StartTrasmission();
 800065c:	f7ff ffe1 	bl	8000622 <LTC_StartTrasmission>
	LTC_TransmitCommand(command);
 8000660:	8afb      	ldrh	r3, [r7, #22]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f916 	bl	8000894 <LTC_TransmitCommand>
	LTC_TransmitReceive(command, tx_data, rx_data);
 8000668:	8afb      	ldrh	r3, [r7, #22]
 800066a:	687a      	ldr	r2, [r7, #4]
 800066c:	68b9      	ldr	r1, [r7, #8]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f928 	bl	80008c4 <LTC_TransmitReceive>
	LTC_EndTramission();
 8000674:	f7ff ffdc 	bl	8000630 <LTC_EndTramission>
}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <LTC_ChipSelect>:
	tx_data[0] = (slave->config->ADCOPT << 8) | (slave->config->SWTRD << 9) | (slave->config->REFON << 10) | (slave->config->GPIO << 11) | (slave->config->VUV);
	tx_data[1] = (slave->config->VUV >> 8) | (slave->config->VOV << 4);
	tx_data[2] |= ((slave->sensor.CELL_TO_DISCHARGE & 0xff) << 8) | ((slave->sensor.CELL_TO_DISCHARGE & 0xf00) >> 8) | ((slave->config->DCTO & 0xf) << 4);
}

void LTC_ChipSelect(uint8_t level) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin , level);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	461a      	mov	r2, r3
 800068e:	2120      	movs	r1, #32
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <LTC_ChipSelect+0x24>)
 8000692:	f003 fc03 	bl	8003e9c <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8000696:	200a      	movs	r0, #10
 8000698:	f7ff fefc 	bl	8000494 <DWT_Delay_us>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	58020000 	.word	0x58020000

080006a8 <LTC_SPI>:


uint16_t LTC_SPI(uint16_t Tx_data) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af02      	add	r7, sp, #8
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	uint16_t Rx_data = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &Tx_data, (uint8_t *) &Rx_data, 1, 50);
 80006b6:	f107 020e 	add.w	r2, r7, #14
 80006ba:	1db9      	adds	r1, r7, #6
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2301      	movs	r3, #1
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <LTC_SPI+0x30>)
 80006c4:	f007 fb7a 	bl	8007dbc <HAL_SPI_TransmitReceive>
	return(BYTESWAP(Rx_data));
 80006c8:	89fb      	ldrh	r3, [r7, #14]
 80006ca:	ba5b      	rev16	r3, r3
 80006cc:	b29b      	uxth	r3, r3
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	240003d4 	.word	0x240003d4

080006dc <LTC_WakeUp>:

void LTC_WakeUp() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	LTC_StartTrasmission();
 80006e0:	f7ff ff9f 	bl	8000622 <LTC_StartTrasmission>
	LTC_SPI(0);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff ffdf 	bl	80006a8 <LTC_SPI>
	LTC_EndTramission();
 80006ea:	f7ff ffa1 	bl	8000630 <LTC_EndTramission>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <LTC_MakeCommand>:

uint16_t LTC_MakeCommand(LTC_command *command) {
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	switch(command->NAME) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	f240 426f 	movw	r2, #1135	; 0x46f
 8000702:	4293      	cmp	r3, r2
 8000704:	d06d      	beq.n	80007e2 <LTC_MakeCommand+0xf0>
 8000706:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 800070a:	da75      	bge.n	80007f8 <LTC_MakeCommand+0x106>
 800070c:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 8000710:	d05c      	beq.n	80007cc <LTC_MakeCommand+0xda>
 8000712:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 8000716:	dc6f      	bgt.n	80007f8 <LTC_MakeCommand+0x106>
 8000718:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800071c:	d04b      	beq.n	80007b6 <LTC_MakeCommand+0xc4>
 800071e:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000722:	dc69      	bgt.n	80007f8 <LTC_MakeCommand+0x106>
 8000724:	f240 420f 	movw	r2, #1039	; 0x40f
 8000728:	4293      	cmp	r3, r2
 800072a:	d039      	beq.n	80007a0 <LTC_MakeCommand+0xae>
 800072c:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8000730:	da62      	bge.n	80007f8 <LTC_MakeCommand+0x106>
 8000732:	f240 4207 	movw	r2, #1031	; 0x407
 8000736:	4293      	cmp	r3, r2
 8000738:	d032      	beq.n	80007a0 <LTC_MakeCommand+0xae>
 800073a:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 800073e:	da5b      	bge.n	80007f8 <LTC_MakeCommand+0x106>
 8000740:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000744:	d00a      	beq.n	800075c <LTC_MakeCommand+0x6a>
 8000746:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800074a:	dc55      	bgt.n	80007f8 <LTC_MakeCommand+0x106>
 800074c:	f240 2207 	movw	r2, #519	; 0x207
 8000750:	4293      	cmp	r3, r2
 8000752:	d025      	beq.n	80007a0 <LTC_MakeCommand+0xae>
 8000754:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8000758:	d00f      	beq.n	800077a <LTC_MakeCommand+0x88>
 800075a:	e04d      	b.n	80007f8 <LTC_MakeCommand+0x106>
		case LTC_COMMAND_ADCV:
			return command->NAME | command->MD | command->DCP | command->CH;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	881a      	ldrh	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	889b      	ldrh	r3, [r3, #4]
 8000764:	4313      	orrs	r3, r2
 8000766:	b29a      	uxth	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	88db      	ldrh	r3, [r3, #6]
 800076c:	4313      	orrs	r3, r2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	891b      	ldrh	r3, [r3, #8]
 8000774:	4313      	orrs	r3, r2
 8000776:	b29b      	uxth	r3, r3
 8000778:	e040      	b.n	80007fc <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADOW:
			return command->NAME | command->MD | command->PUP | command->DCP | command->CH;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	889b      	ldrh	r3, [r3, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	b29a      	uxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	89db      	ldrh	r3, [r3, #14]
 800078a:	4313      	orrs	r3, r2
 800078c:	b29a      	uxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	88db      	ldrh	r3, [r3, #6]
 8000792:	4313      	orrs	r3, r2
 8000794:	b29a      	uxth	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	891b      	ldrh	r3, [r3, #8]
 800079a:	4313      	orrs	r3, r2
 800079c:	b29b      	uxth	r3, r3
 800079e:	e02d      	b.n	80007fc <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_CVST:
		case LTC_COMMAND_AXST:
		case LTC_COMMAND_STATST:
			return command->NAME | command->MD | command->ST;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	881a      	ldrh	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	889b      	ldrh	r3, [r3, #4]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	8a1b      	ldrh	r3, [r3, #16]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	e022      	b.n	80007fc <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADAX	:
			return command->NAME | command->MD | command->CHG;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	881a      	ldrh	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	889b      	ldrh	r3, [r3, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	895b      	ldrh	r3, [r3, #10]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	e017      	b.n	80007fc <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADSTAT	:
			return command->NAME | command->MD | command->CHST;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	881a      	ldrh	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	889b      	ldrh	r3, [r3, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	899b      	ldrh	r3, [r3, #12]
 80007dc:	4313      	orrs	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	e00c      	b.n	80007fc <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADCVAX	:
			return command->NAME | command->MD | command->CHG;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	881a      	ldrh	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	895b      	ldrh	r3, [r3, #10]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	e001      	b.n	80007fc <LTC_MakeCommand+0x10a>
			break;

		default:
			return command->NAME;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	881b      	ldrh	r3, [r3, #0]
			break;
	}
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LTC_PEC>:

uint16_t LTC_PEC(uint16_t *data , uint8_t len) {
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	int32_t remainder, address;
	remainder = LTC_PEC_SEED;
 8000814:	2310      	movs	r3, #16
 8000816:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000818:	2300      	movs	r3, #0
 800081a:	74fb      	strb	r3, [r7, #19]
 800081c:	e02a      	b.n	8000874 <LTC_PEC+0x6c>
		address   = ((remainder >> 7) ^ ((data[i] >> 8) & 0xFF)) & 0xFF; //calculate PEC table address
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	11da      	asrs	r2, r3, #7
 8000822:	7cfb      	ldrb	r3, [r7, #19]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	440b      	add	r3, r1
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4053      	eors	r3, r2
 8000834:	b2db      	uxtb	r3, r3
 8000836:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	4914      	ldr	r1, [pc, #80]	; (8000890 <LTC_PEC+0x88>)
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000844:	4053      	eors	r3, r2
 8000846:	617b      	str	r3, [r7, #20]
		address   = ((remainder >> 7) ^ (data[i] & 0xFF)) & 0xFF;    	 //calculate PEC table address
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	11da      	asrs	r2, r3, #7
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	440b      	add	r3, r1
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4053      	eors	r3, r2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	490b      	ldr	r1, [pc, #44]	; (8000890 <LTC_PEC+0x88>)
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800086a:	4053      	eors	r3, r2
 800086c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	3301      	adds	r3, #1
 8000872:	74fb      	strb	r3, [r7, #19]
 8000874:	7cfa      	ldrb	r2, [r7, #19]
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	429a      	cmp	r2, r3
 800087a:	d3d0      	bcc.n	800081e <LTC_PEC+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	b29b      	uxth	r3, r3
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	b29b      	uxth	r3, r3
}
 8000884:	4618      	mov	r0, r3
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	2400007c 	.word	0x2400007c

08000894 <LTC_TransmitCommand>:

void LTC_TransmitCommand(uint16_t command) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	uint16_t pec = LTC_PEC(&command, 1);
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff ffb0 	bl	8000808 <LTC_PEC>
 80008a8:	4603      	mov	r3, r0
 80008aa:	81fb      	strh	r3, [r7, #14]
	LTC_SPI(command);
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fefa 	bl	80006a8 <LTC_SPI>
	LTC_SPI(pec);
 80008b4:	89fb      	ldrh	r3, [r7, #14]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fef6 	bl	80006a8 <LTC_SPI>
}
 80008bc:	bf00      	nop
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <LTC_TransmitReceive>:

void LTC_TransmitReceive(uint16_t command, uint16_t* tx_data, uint16_t* rx_data) {
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	81fb      	strh	r3, [r7, #14]
	if((command & 0x07FF) == LTC_COMMAND_WRCFGA) {
 80008d2:	89fb      	ldrh	r3, [r7, #14]
 80008d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d109      	bne.n	80008f0 <LTC_TransmitReceive+0x2c>
		uint16_t pec = LTC_PEC(tx_data, 3);
 80008dc:	2103      	movs	r1, #3
 80008de:	68b8      	ldr	r0, [r7, #8]
 80008e0:	f7ff ff92 	bl	8000808 <LTC_PEC>
 80008e4:	4603      	mov	r3, r0
 80008e6:	82bb      	strh	r3, [r7, #20]
		tx_data[3] = pec;
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	3306      	adds	r3, #6
 80008ec:	8aba      	ldrh	r2, [r7, #20]
 80008ee:	801a      	strh	r2, [r3, #0]
	}
	if((tx_data[0] & 0x07FF) < LTC_COMMAND_ADCV) {
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	881b      	ldrh	r3, [r3, #0]
 80008f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008f8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80008fc:	da16      	bge.n	800092c <LTC_TransmitReceive+0x68>
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 80008fe:	2300      	movs	r3, #0
 8000900:	75fb      	strb	r3, [r7, #23]
 8000902:	e010      	b.n	8000926 <LTC_TransmitReceive+0x62>
			rx_data[i] = LTC_SPI(tx_data[i]);
 8000904:	7dfb      	ldrb	r3, [r7, #23]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	68ba      	ldr	r2, [r7, #8]
 800090a:	4413      	add	r3, r2
 800090c:	8819      	ldrh	r1, [r3, #0]
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	18d4      	adds	r4, r2, r3
 8000916:	4608      	mov	r0, r1
 8000918:	f7ff fec6 	bl	80006a8 <LTC_SPI>
 800091c:	4603      	mov	r3, r0
 800091e:	8023      	strh	r3, [r4, #0]
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 8000920:	7dfb      	ldrb	r3, [r7, #23]
 8000922:	3301      	adds	r3, #1
 8000924:	75fb      	strb	r3, [r7, #23]
 8000926:	7dfb      	ldrb	r3, [r7, #23]
 8000928:	2b03      	cmp	r3, #3
 800092a:	d9eb      	bls.n	8000904 <LTC_TransmitReceive+0x40>
		}
	}
}
 800092c:	bf00      	nop
 800092e:	371c      	adds	r7, #28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd90      	pop	{r4, r7, pc}

08000934 <DWT_Delay_us>:
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <DWT_Delay_us+0x40>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000942:	f004 fbbd 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8000946:	4603      	mov	r3, r0
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <DWT_Delay_us+0x44>)
 800094a:	fba2 2303 	umull	r2, r3, r2, r3
 800094e:	0c9b      	lsrs	r3, r3, #18
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	fb02 f303 	mul.w	r3, r2, r3
 8000956:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000958:	bf00      	nop
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <DWT_Delay_us+0x40>)
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	1ad2      	subs	r2, r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d3f8      	bcc.n	800095a <DWT_Delay_us+0x26>
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e0001000 	.word	0xe0001000
 8000978:	431bde83 	.word	0x431bde83

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fec7 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f81d 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f000 fa89 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 800098e:	f000 fa43 	bl	8000e18 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000992:	f000 f8fb 	bl	8000b8c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000996:	f000 f99d 	bl	8000cd4 <MX_SPI1_Init>
  MX_ADC2_Init();
 800099a:	f000 f891 	bl	8000ac0 <MX_ADC2_Init>
  MX_I2C1_Init();
 800099e:	f000 f959 	bl	8000c54 <MX_I2C1_Init>
  MX_USART1_Init();
 80009a2:	f000 f9ed 	bl	8000d80 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 80009a6:	f7ff fd45 	bl	8000434 <DWT_Delay_Init>


  Master *BMS;
  BMS_Init(&BMS);
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc93 	bl	80002d8 <BMS_Init>


  DWT_Delay_us(50000);
 80009b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009b6:	f7ff ffbd 	bl	8000934 <DWT_Delay_us>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Monitoring(BMS);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fd2d 	bl	800041c <Monitoring>
 80009c2:	e7fa      	b.n	80009ba <main+0x3e>

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b09c      	sub	sp, #112	; 0x70
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	224c      	movs	r2, #76	; 0x4c
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f008 fdc2 	bl	800955c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2220      	movs	r2, #32
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f008 fdbc 	bl	800955c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e4:	2002      	movs	r0, #2
 80009e6:	f003 fba7 	bl	8004138 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b32      	ldr	r3, [pc, #200]	; (8000ab8 <SystemClock_Config+0xf4>)
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <SystemClock_Config+0xf4>)
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009fa:	4b2f      	ldr	r3, [pc, #188]	; (8000ab8 <SystemClock_Config+0xf4>)
 80009fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <SystemClock_Config+0xf8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <SystemClock_Config+0xf8>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b29      	ldr	r3, [pc, #164]	; (8000abc <SystemClock_Config+0xf8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a20:	bf00      	nop
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <SystemClock_Config+0xf8>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a2e:	d1f8      	bne.n	8000a22 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a34:	2301      	movs	r3, #1
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2340      	movs	r3, #64	; 0x40
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a40:	2300      	movs	r3, #0
 8000a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a44:	2304      	movs	r3, #4
 8000a46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a48:	2309      	movs	r3, #9
 8000a4a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a50:	2303      	movs	r3, #3
 8000a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f003 fb9e 	bl	80041ac <HAL_RCC_OscConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a76:	f000 fb01 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7a:	233f      	movs	r3, #63	; 0x3f
 8000a7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a8e:	2340      	movs	r3, #64	; 0x40
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f003 ffdd 	bl	8004a60 <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000aac:	f000 fae6 	bl	800107c <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3770      	adds	r7, #112	; 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	58000400 	.word	0x58000400
 8000abc:	58024800 	.word	0x58024800

08000ac0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]
 8000ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ad8:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000ada:	4a29      	ldr	r2, [pc, #164]	; (8000b80 <MX_ADC2_Init+0xc0>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ade:	4b27      	ldr	r3, [pc, #156]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000ae4:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aea:	4b24      	ldr	r3, [pc, #144]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b1a:	4b18      	ldr	r3, [pc, #96]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b20:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b36:	f001 f817 	bl	8001b68 <HAL_ADC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b40:	f000 fa9c 	bl	800107c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <MX_ADC2_Init+0xc4>)
 8000b46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b48:	2306      	movs	r3, #6
 8000b4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b50:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_ADC2_Init+0xc8>)
 8000b52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b54:	2304      	movs	r3, #4
 8000b56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_ADC2_Init+0xbc>)
 8000b66:	f001 f9a1 	bl	8001eac <HAL_ADC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000b70:	f000 fa84 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2400027c 	.word	0x2400027c
 8000b80:	40022100 	.word	0x40022100
 8000b84:	2a000400 	.word	0x2a000400
 8000b88:	47ff0000 	.word	0x47ff0000

08000b8c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000b92:	4a2f      	ldr	r2, [pc, #188]	; (8000c50 <MX_FDCAN1_Init+0xc4>)
 8000b94:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000bb4:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bb6:	2210      	movs	r2, #16
 8000bb8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bde:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c34:	2204      	movs	r2, #4
 8000c36:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_FDCAN1_Init+0xc0>)
 8000c3a:	f002 fc1b 	bl	8003474 <HAL_FDCAN_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c44:	f000 fa1a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	240002e0 	.word	0x240002e0
 8000c50:	4000a000 	.word	0x4000a000

08000c54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_I2C1_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c60:	4a1b      	ldr	r2, [pc, #108]	; (8000cd0 <MX_I2C1_Init+0x7c>)
 8000c62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c64:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c70:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8e:	480e      	ldr	r0, [pc, #56]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000c90:	f003 f91e 	bl	8003ed0 <HAL_I2C_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c9a:	f000 f9ef 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000ca2:	f003 f9b1 	bl	8004008 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f000 f9e6 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_I2C1_Init+0x74>)
 8000cb4:	f003 f9f3 	bl	800409e <HAL_I2CEx_ConfigDigitalFilter>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f000 f9dd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	24000380 	.word	0x24000380
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	00707cbb 	.word	0x00707cbb

08000cd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000cda:	4a28      	ldr	r2, [pc, #160]	; (8000d7c <MX_SPI1_Init+0xa8>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000ce0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cec:	4b22      	ldr	r3, [pc, #136]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf2:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cfe:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d00:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d24:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_SPI1_Init+0xa4>)
 8000d64:	f006 ff06 	bl	8007b74 <HAL_SPI_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d6e:	f000 f985 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	240003d4 	.word	0x240003d4
 8000d7c:	40013000 	.word	0x40013000

08000d80 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <MX_USART1_Init+0x90>)
 8000d86:	4a23      	ldr	r2, [pc, #140]	; (8000e14 <MX_USART1_Init+0x94>)
 8000d88:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <MX_USART1_Init+0x90>)
 8000d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d90:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <MX_USART1_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <MX_USART1_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <MX_USART1_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_USART1_Init+0x90>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <MX_USART1_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_USART1_Init+0x90>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <MX_USART1_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000dbc:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_USART1_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <MX_USART1_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <MX_USART1_Init+0x90>)
 8000dca:	f007 fc1a 	bl	8008602 <HAL_USART_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000dd4:	f000 f952 	bl	800107c <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd8:	2100      	movs	r1, #0
 8000dda:	480d      	ldr	r0, [pc, #52]	; (8000e10 <MX_USART1_Init+0x90>)
 8000ddc:	f008 fa2e 	bl	800923c <HAL_USARTEx_SetTxFifoThreshold>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f000 f949 	bl	800107c <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4808      	ldr	r0, [pc, #32]	; (8000e10 <MX_USART1_Init+0x90>)
 8000dee:	f008 fa63 	bl	80092b8 <HAL_USARTEx_SetRxFifoThreshold>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000df8:	f000 f940 	bl	800107c <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	; (8000e10 <MX_USART1_Init+0x90>)
 8000dfe:	f008 f9e4 	bl	80091ca <HAL_USARTEx_DisableFifoMode>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000e08:	f000 f938 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2400045c 	.word	0x2400045c
 8000e14:	40011000 	.word	0x40011000

08000e18 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <MX_DMA_Init+0x7c>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <MX_DMA_Init+0x7c>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <MX_DMA_Init+0x7c>)
 8000e30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e3e:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <MX_DMA_Init+0x84>)
 8000e40:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b10      	ldr	r3, [pc, #64]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5a:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000e7a:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_DMA_Init+0x80>)
 8000e7c:	f001 fd62 	bl	8002944 <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_DMA_Init+0x72>
  {
    Error_Handler( );
 8000e86:	f000 f8f9 	bl	800107c <Error_Handler>
  }

}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	58024400 	.word	0x58024400
 8000e98:	240004bc 	.word	0x240004bc
 8000e9c:	40020010 	.word	0x40020010

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b6c      	ldr	r3, [pc, #432]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ebc:	4a6a      	ldr	r2, [pc, #424]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec6:	4b68      	ldr	r3, [pc, #416]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed4:	4b64      	ldr	r3, [pc, #400]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eda:	4a63      	ldr	r2, [pc, #396]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee4:	4b60      	ldr	r3, [pc, #384]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b5d      	ldr	r3, [pc, #372]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a5b      	ldr	r2, [pc, #364]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b59      	ldr	r3, [pc, #356]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f10:	4b55      	ldr	r3, [pc, #340]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f16:	4a54      	ldr	r2, [pc, #336]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f20:	4b51      	ldr	r3, [pc, #324]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	4b4e      	ldr	r3, [pc, #312]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b4a      	ldr	r3, [pc, #296]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4c:	4b46      	ldr	r3, [pc, #280]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	4a45      	ldr	r2, [pc, #276]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5c:	4b42      	ldr	r3, [pc, #264]	; (8001068 <MX_GPIO_Init+0x1c8>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x1cc>)
 8000f70:	f002 ff94 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_ENABLE_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2190      	movs	r1, #144	; 0x90
 8000f78:	483d      	ldr	r0, [pc, #244]	; (8001070 <MX_GPIO_Init+0x1d0>)
 8000f7a:	f002 ff8f 	bl	8003e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_GPIO_Pin PC15_GPIO_Pin PC14_GPIO_Pin */
  GPIO_InitStruct.Pin = PC13_GPIO_Pin|PC15_GPIO_Pin|PC14_GPIO_Pin;
 8000f7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4838      	ldr	r0, [pc, #224]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f94:	f002 fdd2 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4832      	ldr	r0, [pc, #200]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000fac:	f002 fdc6 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Eletrobuild_Pin */
  GPIO_InitStruct.Pin = Reset_Eletrobuild_Pin;
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reset_Eletrobuild_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	482c      	ldr	r0, [pc, #176]	; (8001078 <MX_GPIO_Init+0x1d8>)
 8000fc6:	f002 fdb9 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fdc:	2305      	movs	r3, #5
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4822      	ldr	r0, [pc, #136]	; (8001070 <MX_GPIO_Init+0x1d0>)
 8000fe8:	f002 fda8 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff2:	2312      	movs	r3, #18
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ffe:	2304      	movs	r3, #4
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_GPIO_Init+0x1d0>)
 800100a:	f002 fd97 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4811      	ldr	r0, [pc, #68]	; (800106c <MX_GPIO_Init+0x1cc>)
 8001026:	f002 fd89 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_ENABLE_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = CHARGE_ENABLE_Pin|ERROR_LED_Pin;
 800102a:	2390      	movs	r3, #144	; 0x90
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <MX_GPIO_Init+0x1d0>)
 8001042:	f002 fd7b 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_AUX_MINUS_Pin AIR_AUX_PLUS_Pin */
  GPIO_InitStruct.Pin = AIR_AUX_MINUS_Pin|AIR_AUX_PLUS_Pin;
 8001046:	2360      	movs	r3, #96	; 0x60
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_GPIO_Init+0x1d0>)
 800105a:	f002 fd6f 	bl	8003b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	; 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58024400 	.word	0x58024400
 800106c:	58020c00 	.word	0x58020c00
 8001070:	58020400 	.word	0x58020400
 8001074:	58020800 	.word	0x58020800
 8001078:	58021000 	.word	0x58021000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_MspInit+0x30>)
 8001090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001094:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <HAL_MspInit+0x30>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_MspInit+0x30>)
 80010a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	58024400 	.word	0x58024400

080010bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0ba      	sub	sp, #232	; 0xe8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	22c0      	movs	r2, #192	; 0xc0
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f008 fa3d 	bl	800955c <memset>
  if(hadc->Instance==ADC2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a2c      	ldr	r2, [pc, #176]	; (8001198 <HAL_ADC_MspInit+0xdc>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d150      	bne.n	800118e <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010f8:	2304      	movs	r3, #4
 80010fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80010fc:	2309      	movs	r3, #9
 80010fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001104:	2302      	movs	r3, #2
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800110c:	23c0      	movs	r3, #192	; 0xc0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001110:	2320      	movs	r3, #32
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001114:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f004 f827 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001130:	f7ff ffa4 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0xe0>)
 8001136:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800113a:	4a18      	ldr	r2, [pc, #96]	; (800119c <HAL_ADC_MspInit+0xe0>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_ADC_MspInit+0xe0>)
 8001146:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0xe0>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_ADC_MspInit+0xe0>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_ADC_MspInit+0xe0>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_INP10
    PC1     ------> ADC2_INN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001176:	2303      	movs	r3, #3
 8001178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <HAL_ADC_MspInit+0xe4>)
 800118a:	f002 fcd7 	bl	8003b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800118e:	bf00      	nop
 8001190:	37e8      	adds	r7, #232	; 0xe8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40022100 	.word	0x40022100
 800119c:	58024400 	.word	0x58024400
 80011a0:	58020800 	.word	0x58020800

080011a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b0ba      	sub	sp, #232	; 0xe8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	22c0      	movs	r2, #192	; 0xc0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f008 f9c9 	bl	800955c <memset>
  if(hfdcan->Instance==FDCAN1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <HAL_FDCAN_MspInit+0xc8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d147      	bne.n	8001264 <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 ffc3 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80011f8:	f7ff ff40 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_FDCAN_MspInit+0xcc>)
 80011fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_FDCAN_MspInit+0xcc>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_FDCAN_MspInit+0xcc>)
 800120e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_FDCAN_MspInit+0xcc>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_FDCAN_MspInit+0xcc>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_FDCAN_MspInit+0xcc>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_Rx_Pin|CAN_Tx_Pin;
 8001238:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800123c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001252:	2309      	movs	r3, #9
 8001254:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800125c:	4619      	mov	r1, r3
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_FDCAN_MspInit+0xd0>)
 8001260:	f002 fc6c 	bl	8003b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001264:	bf00      	nop
 8001266:	37e8      	adds	r7, #232	; 0xe8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	4000a000 	.word	0x4000a000
 8001270:	58024400 	.word	0x58024400
 8001274:	58020000 	.word	0x58020000

08001278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0ba      	sub	sp, #232	; 0xe8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	22c0      	movs	r2, #192	; 0xc0
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 f95f 	bl	800955c <memset>
  if(hi2c->Instance==I2C1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_I2C_MspInit+0xc8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d146      	bne.n	8001336 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012a8:	f04f 0208 	mov.w	r2, #8
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4618      	mov	r0, r3
 80012c0:	f003 ff5a 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012ca:	f7ff fed7 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 80012d6:	f043 0302 	orr.w	r3, r3, #2
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f4:	2312      	movs	r3, #18
 80012f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001306:	2304      	movs	r3, #4
 8001308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <HAL_I2C_MspInit+0xd0>)
 8001314:	f002 fc12 	bl	8003b3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 800131a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 800132a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001336:	bf00      	nop
 8001338:	37e8      	adds	r7, #232	; 0xe8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005400 	.word	0x40005400
 8001344:	58024400 	.word	0x58024400
 8001348:	58020400 	.word	0x58020400

0800134c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b0ba      	sub	sp, #232	; 0xe8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0310 	add.w	r3, r7, #16
 8001368:	22c0      	movs	r2, #192	; 0xc0
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f008 f8f5 	bl	800955c <memset>
  if(hspi->Instance==SPI1)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a26      	ldr	r2, [pc, #152]	; (8001410 <HAL_SPI_MspInit+0xc4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d144      	bne.n	8001406 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800137c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001388:	2300      	movs	r3, #0
 800138a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	4618      	mov	r0, r3
 8001392:	f003 fef1 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800139c:	f7ff fe6e 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_SPI_MspInit+0xc8>)
 80013a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_SPI_MspInit+0xc8>)
 80013a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013b0:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_SPI_MspInit+0xc8>)
 80013b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_SPI_MspInit+0xc8>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <HAL_SPI_MspInit+0xc8>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <HAL_SPI_MspInit+0xc8>)
 80013d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013dc:	23e0      	movs	r3, #224	; 0xe0
 80013de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013f4:	2305      	movs	r3, #5
 80013f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <HAL_SPI_MspInit+0xcc>)
 8001402:	f002 fb9b 	bl	8003b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	37e8      	adds	r7, #232	; 0xe8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40013000 	.word	0x40013000
 8001414:	58024400 	.word	0x58024400
 8001418:	58020000 	.word	0x58020000

0800141c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0ba      	sub	sp, #232	; 0xe8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	22c0      	movs	r2, #192	; 0xc0
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f008 f88d 	bl	800955c <memset>
  if(husart->Instance==USART1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_USART_MspInit+0xc8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d146      	bne.n	80014da <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800144c:	f04f 0201 	mov.w	r2, #1
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	4618      	mov	r0, r3
 8001464:	f003 fe88 	bl	8005178 <HAL_RCCEx_PeriphCLKConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 800146e:	f7ff fe05 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_USART_MspInit+0xcc>)
 8001474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_USART_MspInit+0xcc>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_USART_MspInit+0xcc>)
 8001484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001488:	f003 0310 	and.w	r3, r3, #16
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_USART_MspInit+0xcc>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <HAL_USART_MspInit+0xcc>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_USART_MspInit+0xcc>)
 80014a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART1_Tx_Pin|USART1_Rx_Pin;
 80014ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c8:	2307      	movs	r3, #7
 80014ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_USART_MspInit+0xd0>)
 80014d6:	f002 fb31 	bl	8003b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	37e8      	adds	r7, #232	; 0xe8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40011000 	.word	0x40011000
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58020000 	.word	0x58020000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f000 f95c 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <_sbrk>:
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
 8001574:	f008 f80a 	bl	800958c <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	24080000 	.word	0x24080000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	24000534 	.word	0x24000534
 80015ac:	24000688 	.word	0x24000688

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015b4:	4b37      	ldr	r3, [pc, #220]	; (8001694 <SystemInit+0xe4>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a36      	ldr	r2, [pc, #216]	; (8001694 <SystemInit+0xe4>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <SystemInit+0xe8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d807      	bhi.n	80015e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015d0:	4b31      	ldr	r3, [pc, #196]	; (8001698 <SystemInit+0xe8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 030f 	bic.w	r3, r3, #15
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <SystemInit+0xe8>)
 80015da:	f043 0307 	orr.w	r3, r3, #7
 80015de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <SystemInit+0xec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2d      	ldr	r2, [pc, #180]	; (800169c <SystemInit+0xec>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <SystemInit+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <SystemInit+0xec>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4929      	ldr	r1, [pc, #164]	; (800169c <SystemInit+0xec>)
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SystemInit+0xf0>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <SystemInit+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <SystemInit+0xe8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 030f 	bic.w	r3, r3, #15
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <SystemInit+0xe8>)
 8001614:	f043 0307 	orr.w	r3, r3, #7
 8001618:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <SystemInit+0xec>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800162c:	4b1b      	ldr	r3, [pc, #108]	; (800169c <SystemInit+0xec>)
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <SystemInit+0xf4>)
 8001630:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <SystemInit+0xec>)
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <SystemInit+0xf8>)
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <SystemInit+0xec>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	; (80016ac <SystemInit+0xfc>)
 800163c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <SystemInit+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <SystemInit+0xec>)
 8001646:	4a19      	ldr	r2, [pc, #100]	; (80016ac <SystemInit+0xfc>)
 8001648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <SystemInit+0xec>)
 800164c:	2200      	movs	r2, #0
 800164e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <SystemInit+0xec>)
 8001652:	4a16      	ldr	r2, [pc, #88]	; (80016ac <SystemInit+0xfc>)
 8001654:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001656:	4b11      	ldr	r3, [pc, #68]	; (800169c <SystemInit+0xec>)
 8001658:	2200      	movs	r2, #0
 800165a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <SystemInit+0xec>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <SystemInit+0xec>)
 8001662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001666:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <SystemInit+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <SystemInit+0x100>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SystemInit+0x104>)
 8001674:	4013      	ands	r3, r2
 8001676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167a:	d202      	bcs.n	8001682 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <SystemInit+0x108>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <SystemInit+0x10c>)
 8001684:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001688:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	52002000 	.word	0x52002000
 800169c:	58024400 	.word	0x58024400
 80016a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80016a4:	02020200 	.word	0x02020200
 80016a8:	01ff0000 	.word	0x01ff0000
 80016ac:	01010280 	.word	0x01010280
 80016b0:	5c001000 	.word	0x5c001000
 80016b4:	ffff0000 	.word	0xffff0000
 80016b8:	51008108 	.word	0x51008108
 80016bc:	52004000 	.word	0x52004000

080016c0 <Reset_Handler>:
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0xe>
 80016c4:	f7ff ff74 	bl	80015b0 <SystemInit>
 80016c8:	480c      	ldr	r0, [pc, #48]	; (80016fc <LoopFillZerobss+0x12>)
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
 80016cc:	4a0d      	ldr	r2, [pc, #52]	; (8001704 <LoopFillZerobss+0x1a>)
 80016ce:	2300      	movs	r3, #0
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:
 80016d2:	58d4      	ldr	r4, [r2, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:
 80016d8:	18c4      	adds	r4, r0, r3
 80016da:	428c      	cmp	r4, r1
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <LoopFillZerobss+0x1e>)
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <LoopFillZerobss+0x22>)
 80016e2:	2300      	movs	r3, #0
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:
 80016ea:	42a2      	cmp	r2, r4
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>
 80016ee:	f007 ff53 	bl	8009598 <__libc_init_array>
 80016f2:	f7ff f943 	bl	800097c <main>
 80016f6:	4770      	bx	lr
 80016f8:	24080000 	.word	0x24080000
 80016fc:	24000000 	.word	0x24000000
 8001700:	24000060 	.word	0x24000060
 8001704:	08009694 	.word	0x08009694
 8001708:	24000060 	.word	0x24000060
 800170c:	24000684 	.word	0x24000684

08001710 <ADC3_IRQHandler>:
 8001710:	e7fe      	b.n	8001710 <ADC3_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800171a:	2003      	movs	r0, #3
 800171c:	f001 f8e0 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001720:	f003 fb54 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_Init+0x68>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	f003 030f 	and.w	r3, r3, #15
 8001730:	4913      	ldr	r1, [pc, #76]	; (8001780 <HAL_Init+0x6c>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_Init+0x68>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	4a0e      	ldr	r2, [pc, #56]	; (8001780 <HAL_Init+0x6c>)
 8001748:	5cd3      	ldrb	r3, [r2, r3]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_Init+0x70>)
 8001756:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001758:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_Init+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175e:	200f      	movs	r0, #15
 8001760:	f000 f814 	bl	800178c <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e002      	b.n	8001774 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800176e:	f7ff fc8b 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	58024400 	.word	0x58024400
 8001780:	08009664 	.word	0x08009664
 8001784:	24000004 	.word	0x24000004
 8001788:	24000000 	.word	0x24000000

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_InitTick+0x60>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e021      	b.n	80017e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_InitTick+0x64>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_InitTick+0x60>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 f8b7 	bl	800292a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f001 f88f 	bl	80028f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x68>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2400000c 	.word	0x2400000c
 80017f0:	24000000 	.word	0x24000000
 80017f4:	24000008 	.word	0x24000008

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2400000c 	.word	0x2400000c
 800181c:	24000538 	.word	0x24000538

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	24000538 	.word	0x24000538

08001838 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_GetREVID+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0c1b      	lsrs	r3, r3, #16
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	5c001000 	.word	0x5c001000

08001850 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	609a      	str	r2, [r3, #8]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3360      	adds	r3, #96	; 0x60
 80018ca:	461a      	mov	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	430b      	orrs	r3, r1
 80018e6:	431a      	orrs	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018ec:	bf00      	nop
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	611a      	str	r2, [r3, #16]
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800192a:	b480      	push	{r7}
 800192c:	b087      	sub	sp, #28
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	3360      	adds	r3, #96	; 0x60
 800193a:	461a      	mov	r2, r3
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	431a      	orrs	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	601a      	str	r2, [r3, #0]
  }
}
 8001954:	bf00      	nop
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	3330      	adds	r3, #48	; 0x30
 8001970:	461a      	mov	r2, r3
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	4413      	add	r3, r2
 800197e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	211f      	movs	r1, #31
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0e9b      	lsrs	r3, r3, #26
 8001998:	f003 011f 	and.w	r1, r3, #31
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3314      	adds	r3, #20
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	0e5b      	lsrs	r3, r3, #25
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	0d1b      	lsrs	r3, r3, #20
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2107      	movs	r1, #7
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	0d1b      	lsrs	r3, r3, #20
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0318 	and.w	r3, r3, #24
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a34:	40d9      	lsrs	r1, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	400b      	ands	r3, r1
 8001a3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	000fffff 	.word	0x000fffff

08001a58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6093      	str	r3, [r2, #8]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	5fffffc0 	.word	0x5fffffc0

08001a7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a90:	d101      	bne.n	8001a96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	6fffffc0 	.word	0x6fffffc0

08001acc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ae0:	d101      	bne.n	8001ae6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <LL_ADC_IsEnabled+0x18>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <LL_ADC_IsEnabled+0x1a>
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d101      	bne.n	8001b32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d101      	bne.n	8001b58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e18f      	b.n	8001ea2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff fa93 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff67 	bl	8001a7c <LL_ADC_IsDeepPowerDownEnabled>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d004      	beq.n	8001bbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff4d 	bl	8001a58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff ff82 	bl	8001acc <LL_ADC_IsInternalRegulatorEnabled>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d114      	bne.n	8001bf8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff66 	bl	8001aa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bd8:	4b87      	ldr	r3, [pc, #540]	; (8001df8 <HAL_ADC_Init+0x290>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	099b      	lsrs	r3, r3, #6
 8001bde:	4a87      	ldr	r2, [pc, #540]	; (8001dfc <HAL_ADC_Init+0x294>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	3301      	adds	r3, #1
 8001be8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bea:	e002      	b.n	8001bf2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f9      	bne.n	8001bec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff65 	bl	8001acc <LL_ADC_IsInternalRegulatorEnabled>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10d      	bne.n	8001c24 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff76 	bl	8001b1a <LL_ADC_REG_IsConversionOngoing>
 8001c2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f003 0310 	and.w	r3, r3, #16
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f040 8129 	bne.w	8001e90 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f040 8125 	bne.w	8001e90 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff4a 	bl	8001af4 <LL_ADC_IsEnabled>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d136      	bne.n	8001cd4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <HAL_ADC_Init+0x298>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_ADC_Init+0x112>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_ADC_Init+0x29c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10e      	bne.n	8001c98 <HAL_ADC_Init+0x130>
 8001c7a:	4861      	ldr	r0, [pc, #388]	; (8001e00 <HAL_ADC_Init+0x298>)
 8001c7c:	f7ff ff3a 	bl	8001af4 <LL_ADC_IsEnabled>
 8001c80:	4604      	mov	r4, r0
 8001c82:	4860      	ldr	r0, [pc, #384]	; (8001e04 <HAL_ADC_Init+0x29c>)
 8001c84:	f7ff ff36 	bl	8001af4 <LL_ADC_IsEnabled>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4323      	orrs	r3, r4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	bf0c      	ite	eq
 8001c90:	2301      	moveq	r3, #1
 8001c92:	2300      	movne	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	e008      	b.n	8001caa <HAL_ADC_Init+0x142>
 8001c98:	485b      	ldr	r0, [pc, #364]	; (8001e08 <HAL_ADC_Init+0x2a0>)
 8001c9a:	f7ff ff2b 	bl	8001af4 <LL_ADC_IsEnabled>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d012      	beq.n	8001cd4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a53      	ldr	r2, [pc, #332]	; (8001e00 <HAL_ADC_Init+0x298>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_Init+0x15a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a51      	ldr	r2, [pc, #324]	; (8001e04 <HAL_ADC_Init+0x29c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_Init+0x15e>
 8001cc2:	4a52      	ldr	r2, [pc, #328]	; (8001e0c <HAL_ADC_Init+0x2a4>)
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_Init+0x160>
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_ADC_Init+0x2a8>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f7ff fdbe 	bl	8001850 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001cd4:	f7ff fdb0 	bl	8001838 <HAL_GetREVID>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d914      	bls.n	8001d0c <HAL_ADC_Init+0x1a4>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d110      	bne.n	8001d0c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7d5b      	ldrb	r3, [r3, #21]
 8001cee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001cfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	7f1b      	ldrb	r3, [r3, #28]
 8001d00:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d02:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d04:	f043 030c 	orr.w	r3, r3, #12
 8001d08:	61bb      	str	r3, [r7, #24]
 8001d0a:	e00d      	b.n	8001d28 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7d5b      	ldrb	r3, [r3, #21]
 8001d10:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d16:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d1c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7f1b      	ldrb	r3, [r3, #28]
 8001d22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d24:	4313      	orrs	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7f1b      	ldrb	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	045b      	lsls	r3, r3, #17
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <HAL_ADC_Init+0x2ac>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	69b9      	ldr	r1, [r7, #24]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fed1 	bl	8001b1a <LL_ADC_REG_IsConversionOngoing>
 8001d78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fede 	bl	8001b40 <LL_ADC_INJ_IsConversionOngoing>
 8001d84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d15f      	bne.n	8001e4c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d15c      	bne.n	8001e4c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	7d1b      	ldrb	r3, [r3, #20]
 8001d96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68da      	ldr	r2, [r3, #12]
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <HAL_ADC_Init+0x2b0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6812      	ldr	r2, [r2, #0]
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	430b      	orrs	r3, r1
 8001db2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d130      	bne.n	8001e20 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_ADC_Init+0x2b4>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dd2:	3a01      	subs	r2, #1
 8001dd4:	0411      	lsls	r1, r2, #16
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de0:	4311      	orrs	r1, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001de6:	430a      	orrs	r2, r1
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	e01c      	b.n	8001e30 <HAL_ADC_Init+0x2c8>
 8001df6:	bf00      	nop
 8001df8:	24000000 	.word	0x24000000
 8001dfc:	053e2d63 	.word	0x053e2d63
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40022100 	.word	0x40022100
 8001e08:	58026000 	.word	0x58026000
 8001e0c:	40022300 	.word	0x40022300
 8001e10:	58026300 	.word	0x58026300
 8001e14:	fff0c003 	.word	0xfff0c003
 8001e18:	ffffbffc 	.word	0xffffbffc
 8001e1c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fb8c 	bl	8002564 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d10c      	bne.n	8001e6e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f023 010f 	bic.w	r1, r3, #15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	1e5a      	subs	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6c:	e007      	b.n	8001e7e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 020f 	bic.w	r2, r2, #15
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	655a      	str	r2, [r3, #84]	; 0x54
 8001e8e:	e007      	b.n	8001ea0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e94:	f043 0210 	orr.w	r2, r3, #16
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3724      	adds	r7, #36	; 0x24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	bf00      	nop

08001eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b0a1      	sub	sp, #132	; 0x84
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a65      	ldr	r2, [pc, #404]	; (800205c <HAL_ADC_ConfigChannel+0x1b0>)
 8001ec6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x2a>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e32e      	b.n	8002534 <HAL_ADC_ConfigChannel+0x688>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe19 	bl	8001b1a <LL_ADC_REG_IsConversionOngoing>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f040 8313 	bne.w	8002516 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db2c      	blt.n	8001f52 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d108      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x6a>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0e9b      	lsrs	r3, r3, #26
 8001f0a:	f003 031f 	and.w	r3, r3, #31
 8001f0e:	2201      	movs	r2, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	e016      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x98>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f26:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e003      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 031f 	and.w	r3, r3, #31
 8001f3e:	2201      	movs	r2, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	69d1      	ldr	r1, [r2, #28]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	430b      	orrs	r3, r1
 8001f50:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6818      	ldr	r0, [r3, #0]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6859      	ldr	r1, [r3, #4]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f7ff fcfe 	bl	8001960 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff fdd6 	bl	8001b1a <LL_ADC_REG_IsConversionOngoing>
 8001f6e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fde3 	bl	8001b40 <LL_ADC_INJ_IsConversionOngoing>
 8001f7a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 80b8 	bne.w	80020f4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80b4 	bne.w	80020f4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f7ff fd0d 	bl	80019b8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_ADC_ConfigChannel+0x1b4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001faa:	d10b      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x118>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	e01d      	b.n	8002000 <HAL_ADC_ConfigChannel+0x154>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10b      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x13e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	e00a      	b.n	8002000 <HAL_ADC_ConfigChannel+0x154>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	2b04      	cmp	r3, #4
 8002008:	d02c      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	6919      	ldr	r1, [r3, #16]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002018:	f7ff fc4e 	bl	80018b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6919      	ldr	r1, [r3, #16]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	7e5b      	ldrb	r3, [r3, #25]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x186>
 800202c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002030:	e000      	b.n	8002034 <HAL_ADC_ConfigChannel+0x188>
 8002032:	2300      	movs	r3, #0
 8002034:	461a      	mov	r2, r3
 8002036:	f7ff fc78 	bl	800192a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	7e1b      	ldrb	r3, [r3, #24]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1a4>
 800204a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800204e:	e000      	b.n	8002052 <HAL_ADC_ConfigChannel+0x1a6>
 8002050:	2300      	movs	r3, #0
 8002052:	461a      	mov	r2, r3
 8002054:	f7ff fc50 	bl	80018f8 <LL_ADC_SetDataRightShift>
 8002058:	e04c      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x248>
 800205a:	bf00      	nop
 800205c:	47ff0000 	.word	0x47ff0000
 8002060:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	069b      	lsls	r3, r3, #26
 8002074:	429a      	cmp	r2, r3
 8002076:	d107      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002086:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800208e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	429a      	cmp	r2, r3
 800209a:	d107      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020aa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	069b      	lsls	r3, r3, #26
 80020bc:	429a      	cmp	r2, r3
 80020be:	d107      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020ce:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	069b      	lsls	r3, r3, #26
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fcfb 	bl	8001af4 <LL_ADC_IsEnabled>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 8211 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	461a      	mov	r2, r3
 8002114:	f7ff fc7c 	bl	8001a10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4aa1      	ldr	r2, [pc, #644]	; (80023a4 <HAL_ADC_ConfigChannel+0x4f8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	f040 812e 	bne.w	8002380 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_ADC_ConfigChannel+0x2a0>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0e9b      	lsrs	r3, r3, #26
 800213a:	3301      	adds	r3, #1
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	2b09      	cmp	r3, #9
 8002142:	bf94      	ite	ls
 8002144:	2301      	movls	r3, #1
 8002146:	2300      	movhi	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	e019      	b.n	8002180 <HAL_ADC_ConfigChannel+0x2d4>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800215a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800215c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800215e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2b09      	cmp	r3, #9
 8002178:	bf94      	ite	ls
 800217a:	2301      	movls	r3, #1
 800217c:	2300      	movhi	r3, #0
 800217e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002180:	2b00      	cmp	r3, #0
 8002182:	d079      	beq.n	8002278 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x2f4>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	0e9b      	lsrs	r3, r3, #26
 8002196:	3301      	adds	r3, #1
 8002198:	069b      	lsls	r3, r3, #26
 800219a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800219e:	e015      	b.n	80021cc <HAL_ADC_ConfigChannel+0x320>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a8:	fa93 f3a3 	rbit	r3, r3
 80021ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e003      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80021bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021be:	fab3 f383 	clz	r3, r3
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3301      	adds	r3, #1
 80021c6:	069b      	lsls	r3, r3, #26
 80021c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x340>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	3301      	adds	r3, #1
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	e017      	b.n	800221c <HAL_ADC_ConfigChannel+0x370>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f4:	fa93 f3a3 	rbit	r3, r3
 80021f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80021fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002204:	2320      	movs	r3, #32
 8002206:	e003      	b.n	8002210 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	3301      	adds	r3, #1
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f303 	lsl.w	r3, r1, r3
 800221c:	ea42 0103 	orr.w	r1, r2, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10a      	bne.n	8002242 <HAL_ADC_ConfigChannel+0x396>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	3301      	adds	r3, #1
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	051b      	lsls	r3, r3, #20
 8002240:	e018      	b.n	8002274 <HAL_ADC_ConfigChannel+0x3c8>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800225a:	2320      	movs	r3, #32
 800225c:	e003      	b.n	8002266 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3301      	adds	r3, #1
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002274:	430b      	orrs	r3, r1
 8002276:	e07e      	b.n	8002376 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x3e8>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	069b      	lsls	r3, r3, #26
 800228e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002292:	e015      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x414>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e003      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	069b      	lsls	r3, r3, #26
 80022bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x434>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	e017      	b.n	8002310 <HAL_ADC_ConfigChannel+0x464>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	61bb      	str	r3, [r7, #24]
  return result;
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e003      	b.n	8002304 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <HAL_ADC_ConfigChannel+0x490>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	3301      	adds	r3, #1
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	3b1e      	subs	r3, #30
 8002334:	051b      	lsls	r3, r3, #20
 8002336:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800233a:	e01b      	b.n	8002374 <HAL_ADC_ConfigChannel+0x4c8>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	60fb      	str	r3, [r7, #12]
  return result;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002354:	2320      	movs	r3, #32
 8002356:	e003      	b.n	8002360 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	3301      	adds	r3, #1
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	3b1e      	subs	r3, #30
 800236e:	051b      	lsls	r3, r3, #20
 8002370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002374:	430b      	orrs	r3, r1
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	6892      	ldr	r2, [r2, #8]
 800237a:	4619      	mov	r1, r3
 800237c:	f7ff fb1c 	bl	80019b8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f280 80cf 	bge.w	8002528 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <HAL_ADC_ConfigChannel+0x4fc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d004      	beq.n	800239e <HAL_ADC_ConfigChannel+0x4f2>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_ADC_ConfigChannel+0x500>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d10a      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x508>
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_ADC_ConfigChannel+0x504>)
 80023a0:	e009      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x50a>
 80023a2:	bf00      	nop
 80023a4:	47ff0000 	.word	0x47ff0000
 80023a8:	40022000 	.word	0x40022000
 80023ac:	40022100 	.word	0x40022100
 80023b0:	40022300 	.word	0x40022300
 80023b4:	4b61      	ldr	r3, [pc, #388]	; (800253c <HAL_ADC_ConfigChannel+0x690>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fa70 	bl	800189c <LL_ADC_GetCommonPathInternalCh>
 80023bc:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a5f      	ldr	r2, [pc, #380]	; (8002540 <HAL_ADC_ConfigChannel+0x694>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x526>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5d      	ldr	r2, [pc, #372]	; (8002544 <HAL_ADC_ConfigChannel+0x698>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10e      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x544>
 80023d2:	485b      	ldr	r0, [pc, #364]	; (8002540 <HAL_ADC_ConfigChannel+0x694>)
 80023d4:	f7ff fb8e 	bl	8001af4 <LL_ADC_IsEnabled>
 80023d8:	4604      	mov	r4, r0
 80023da:	485a      	ldr	r0, [pc, #360]	; (8002544 <HAL_ADC_ConfigChannel+0x698>)
 80023dc:	f7ff fb8a 	bl	8001af4 <LL_ADC_IsEnabled>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4323      	orrs	r3, r4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf0c      	ite	eq
 80023e8:	2301      	moveq	r3, #1
 80023ea:	2300      	movne	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e008      	b.n	8002402 <HAL_ADC_ConfigChannel+0x556>
 80023f0:	4855      	ldr	r0, [pc, #340]	; (8002548 <HAL_ADC_ConfigChannel+0x69c>)
 80023f2:	f7ff fb7f 	bl	8001af4 <LL_ADC_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d07d      	beq.n	8002502 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a50      	ldr	r2, [pc, #320]	; (800254c <HAL_ADC_ConfigChannel+0x6a0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d130      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x5c6>
 8002410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12b      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <HAL_ADC_ConfigChannel+0x69c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	f040 8081 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a45      	ldr	r2, [pc, #276]	; (8002540 <HAL_ADC_ConfigChannel+0x694>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d004      	beq.n	800243a <HAL_ADC_ConfigChannel+0x58e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a43      	ldr	r2, [pc, #268]	; (8002544 <HAL_ADC_ConfigChannel+0x698>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_ADC_ConfigChannel+0x592>
 800243a:	4a45      	ldr	r2, [pc, #276]	; (8002550 <HAL_ADC_ConfigChannel+0x6a4>)
 800243c:	e000      	b.n	8002440 <HAL_ADC_ConfigChannel+0x594>
 800243e:	4a3f      	ldr	r2, [pc, #252]	; (800253c <HAL_ADC_ConfigChannel+0x690>)
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f7ff fa14 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244e:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_ADC_ConfigChannel+0x6a8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	099b      	lsrs	r3, r3, #6
 8002454:	4a40      	ldr	r2, [pc, #256]	; (8002558 <HAL_ADC_ConfigChannel+0x6ac>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	3301      	adds	r3, #1
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002462:	e002      	b.n	800246a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3b01      	subs	r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f9      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002470:	e05a      	b.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a39      	ldr	r2, [pc, #228]	; (800255c <HAL_ADC_ConfigChannel+0x6b0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d11e      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x60e>
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <HAL_ADC_ConfigChannel+0x69c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d14b      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <HAL_ADC_ConfigChannel+0x694>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x5f8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a29      	ldr	r2, [pc, #164]	; (8002544 <HAL_ADC_ConfigChannel+0x698>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x5fc>
 80024a4:	4a2a      	ldr	r2, [pc, #168]	; (8002550 <HAL_ADC_ConfigChannel+0x6a4>)
 80024a6:	e000      	b.n	80024aa <HAL_ADC_ConfigChannel+0x5fe>
 80024a8:	4a24      	ldr	r2, [pc, #144]	; (800253c <HAL_ADC_ConfigChannel+0x690>)
 80024aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f7ff f9df 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b8:	e036      	b.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a28      	ldr	r2, [pc, #160]	; (8002560 <HAL_ADC_ConfigChannel+0x6b4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d131      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d12c      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <HAL_ADC_ConfigChannel+0x69c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d127      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_ADC_ConfigChannel+0x694>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_ConfigChannel+0x640>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_ADC_ConfigChannel+0x698>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x644>
 80024ec:	4a18      	ldr	r2, [pc, #96]	; (8002550 <HAL_ADC_ConfigChannel+0x6a4>)
 80024ee:	e000      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x646>
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <HAL_ADC_ConfigChannel+0x690>)
 80024f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7ff f9bb 	bl	8001876 <LL_ADC_SetCommonPathInternalCh>
 8002500:	e012      	b.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002514:	e008      	b.n	8002528 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002530:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002534:	4618      	mov	r0, r3
 8002536:	3784      	adds	r7, #132	; 0x84
 8002538:	46bd      	mov	sp, r7
 800253a:	bd90      	pop	{r4, r7, pc}
 800253c:	58026300 	.word	0x58026300
 8002540:	40022000 	.word	0x40022000
 8002544:	40022100 	.word	0x40022100
 8002548:	58026000 	.word	0x58026000
 800254c:	cb840000 	.word	0xcb840000
 8002550:	40022300 	.word	0x40022300
 8002554:	24000000 	.word	0x24000000
 8002558:	053e2d63 	.word	0x053e2d63
 800255c:	c7520000 	.word	0xc7520000
 8002560:	cfb80000 	.word	0xcfb80000

08002564 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a7a      	ldr	r2, [pc, #488]	; (800275c <ADC_ConfigureBoostMode+0x1f8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <ADC_ConfigureBoostMode+0x1c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a79      	ldr	r2, [pc, #484]	; (8002760 <ADC_ConfigureBoostMode+0x1fc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d109      	bne.n	8002594 <ADC_ConfigureBoostMode+0x30>
 8002580:	4b78      	ldr	r3, [pc, #480]	; (8002764 <ADC_ConfigureBoostMode+0x200>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	e008      	b.n	80025a6 <ADC_ConfigureBoostMode+0x42>
 8002594:	4b74      	ldr	r3, [pc, #464]	; (8002768 <ADC_ConfigureBoostMode+0x204>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d01c      	beq.n	80025e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025aa:	f002 fd89 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80025ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025b8:	d010      	beq.n	80025dc <ADC_ConfigureBoostMode+0x78>
 80025ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025be:	d873      	bhi.n	80026a8 <ADC_ConfigureBoostMode+0x144>
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d002      	beq.n	80025cc <ADC_ConfigureBoostMode+0x68>
 80025c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ca:	d16d      	bne.n	80026a8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	60fb      	str	r3, [r7, #12]
        break;
 80025da:	e068      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	60fb      	str	r3, [r7, #12]
        break;
 80025e2:	e064      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	f003 ffce 	bl	800658c <HAL_RCCEx_GetPeriphCLKFreq>
 80025f0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025fa:	d051      	beq.n	80026a0 <ADC_ConfigureBoostMode+0x13c>
 80025fc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002600:	d854      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 8002602:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002606:	d047      	beq.n	8002698 <ADC_ConfigureBoostMode+0x134>
 8002608:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800260c:	d84e      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 800260e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002612:	d03d      	beq.n	8002690 <ADC_ConfigureBoostMode+0x12c>
 8002614:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002618:	d848      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 800261a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800261e:	d033      	beq.n	8002688 <ADC_ConfigureBoostMode+0x124>
 8002620:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002624:	d842      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 8002626:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800262a:	d029      	beq.n	8002680 <ADC_ConfigureBoostMode+0x11c>
 800262c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002630:	d83c      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 8002632:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002636:	d01a      	beq.n	800266e <ADC_ConfigureBoostMode+0x10a>
 8002638:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800263c:	d836      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 800263e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002642:	d014      	beq.n	800266e <ADC_ConfigureBoostMode+0x10a>
 8002644:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002648:	d830      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 800264a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800264e:	d00e      	beq.n	800266e <ADC_ConfigureBoostMode+0x10a>
 8002650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002654:	d82a      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 8002656:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800265a:	d008      	beq.n	800266e <ADC_ConfigureBoostMode+0x10a>
 800265c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002660:	d824      	bhi.n	80026ac <ADC_ConfigureBoostMode+0x148>
 8002662:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002666:	d002      	beq.n	800266e <ADC_ConfigureBoostMode+0x10a>
 8002668:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800266c:	d11e      	bne.n	80026ac <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0c9b      	lsrs	r3, r3, #18
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	60fb      	str	r3, [r7, #12]
        break;
 800267e:	e016      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	60fb      	str	r3, [r7, #12]
        break;
 8002686:	e012      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	60fb      	str	r3, [r7, #12]
        break;
 800268e:	e00e      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	60fb      	str	r3, [r7, #12]
        break;
 8002696:	e00a      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	09db      	lsrs	r3, r3, #7
 800269c:	60fb      	str	r3, [r7, #12]
        break;
 800269e:	e006      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	0a1b      	lsrs	r3, r3, #8
 80026a4:	60fb      	str	r3, [r7, #12]
        break;
 80026a6:	e002      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
        break;
 80026a8:	bf00      	nop
 80026aa:	e000      	b.n	80026ae <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80026ac:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026ae:	f7ff f8c3 	bl	8001838 <HAL_GetREVID>
 80026b2:	4603      	mov	r3, r0
 80026b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d815      	bhi.n	80026e8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a2b      	ldr	r2, [pc, #172]	; (800276c <ADC_ConfigureBoostMode+0x208>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d908      	bls.n	80026d6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026d4:	e03e      	b.n	8002754 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	e035      	b.n	8002754 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	085b      	lsrs	r3, r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <ADC_ConfigureBoostMode+0x20c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d808      	bhi.n	8002708 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002704:	609a      	str	r2, [r3, #8]
}
 8002706:	e025      	b.n	8002754 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a1a      	ldr	r2, [pc, #104]	; (8002774 <ADC_ConfigureBoostMode+0x210>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d80a      	bhi.n	8002726 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002722:	609a      	str	r2, [r3, #8]
}
 8002724:	e016      	b.n	8002754 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a13      	ldr	r2, [pc, #76]	; (8002778 <ADC_ConfigureBoostMode+0x214>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d80a      	bhi.n	8002744 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002740:	609a      	str	r2, [r3, #8]
}
 8002742:	e007      	b.n	8002754 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002752:	609a      	str	r2, [r3, #8]
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40022000 	.word	0x40022000
 8002760:	40022100 	.word	0x40022100
 8002764:	40022300 	.word	0x40022300
 8002768:	58026300 	.word	0x58026300
 800276c:	01312d00 	.word	0x01312d00
 8002770:	005f5e10 	.word	0x005f5e10
 8002774:	00bebc20 	.word	0x00bebc20
 8002778:	017d7840 	.word	0x017d7840

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <__NVIC_SetPriorityGrouping+0x40>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x40>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00
 80027c0:	05fa0000 	.word	0x05fa0000

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	; (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	; (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	88fb      	ldrh	r3, [r7, #6]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	; 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff47 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002904:	f7ff ff5e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002908:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68b9      	ldr	r1, [r7, #8]
 800290e:	6978      	ldr	r0, [r7, #20]
 8002910:	f7ff ff90 	bl	8002834 <NVIC_EncodePriority>
 8002914:	4602      	mov	r2, r0
 8002916:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff5f 	bl	80027e0 <__NVIC_SetPriority>
}
 8002922:	bf00      	nop
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffb2 	bl	800289c <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7fe ff68 	bl	8001820 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e316      	b.n	8002f8a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a66      	ldr	r2, [pc, #408]	; (8002afc <HAL_DMA_Init+0x1b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04a      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_DMA_Init+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d045      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <HAL_DMA_Init+0x1c0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a62      	ldr	r2, [pc, #392]	; (8002b08 <HAL_DMA_Init+0x1c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d03b      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_DMA_Init+0x1c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d036      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5f      	ldr	r2, [pc, #380]	; (8002b10 <HAL_DMA_Init+0x1cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d031      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5d      	ldr	r2, [pc, #372]	; (8002b14 <HAL_DMA_Init+0x1d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02c      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_DMA_Init+0x1d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d027      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_DMA_Init+0x1d8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d022      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a59      	ldr	r2, [pc, #356]	; (8002b20 <HAL_DMA_Init+0x1dc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d01d      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <HAL_DMA_Init+0x1e0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a56      	ldr	r2, [pc, #344]	; (8002b28 <HAL_DMA_Init+0x1e4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_DMA_Init+0x1e8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a53      	ldr	r2, [pc, #332]	; (8002b30 <HAL_DMA_Init+0x1ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_DMA_Init+0x1f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Init+0xbc>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_Init+0xbe>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 813b 	beq.w	8002c7e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_DMA_Init+0x1b8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04a      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <HAL_DMA_Init+0x1bc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d045      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_DMA_Init+0x1c0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d040      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a33      	ldr	r2, [pc, #204]	; (8002b08 <HAL_DMA_Init+0x1c4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d03b      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_DMA_Init+0x1c8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d036      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_DMA_Init+0x1cc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d031      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <HAL_DMA_Init+0x1d0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02c      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <HAL_DMA_Init+0x1d4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d027      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <HAL_DMA_Init+0x1d8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_DMA_Init+0x1dc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d01d      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_DMA_Init+0x1e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d018      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_DMA_Init+0x1e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <HAL_DMA_Init+0x1e8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00e      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_DMA_Init+0x1ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_DMA_Init+0x1f0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d108      	bne.n	8002aca <HAL_DMA_Init+0x186>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e007      	b.n	8002ada <HAL_DMA_Init+0x196>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ada:	e02f      	b.n	8002b3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002adc:	f7fe fea0 	bl	8001820 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d928      	bls.n	8002b3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2203      	movs	r2, #3
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e246      	b.n	8002f8a <HAL_DMA_Init+0x646>
 8002afc:	40020010 	.word	0x40020010
 8002b00:	40020028 	.word	0x40020028
 8002b04:	40020040 	.word	0x40020040
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020088 	.word	0x40020088
 8002b14:	400200a0 	.word	0x400200a0
 8002b18:	400200b8 	.word	0x400200b8
 8002b1c:	40020410 	.word	0x40020410
 8002b20:	40020428 	.word	0x40020428
 8002b24:	40020440 	.word	0x40020440
 8002b28:	40020458 	.word	0x40020458
 8002b2c:	40020470 	.word	0x40020470
 8002b30:	40020488 	.word	0x40020488
 8002b34:	400204a0 	.word	0x400204a0
 8002b38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1c8      	bne.n	8002adc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4b83      	ldr	r3, [pc, #524]	; (8002d64 <HAL_DMA_Init+0x420>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ba0:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <HAL_DMA_Init+0x424>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <HAL_DMA_Init+0x428>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bac:	d328      	bcc.n	8002c00 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b28      	cmp	r3, #40	; 0x28
 8002bb4:	d903      	bls.n	8002bbe <HAL_DMA_Init+0x27a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b2e      	cmp	r3, #46	; 0x2e
 8002bbc:	d917      	bls.n	8002bee <HAL_DMA_Init+0x2aa>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8002bc4:	d903      	bls.n	8002bce <HAL_DMA_Init+0x28a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b42      	cmp	r3, #66	; 0x42
 8002bcc:	d90f      	bls.n	8002bee <HAL_DMA_Init+0x2aa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b46      	cmp	r3, #70	; 0x46
 8002bd4:	d903      	bls.n	8002bde <HAL_DMA_Init+0x29a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b48      	cmp	r3, #72	; 0x48
 8002bdc:	d907      	bls.n	8002bee <HAL_DMA_Init+0x2aa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b4e      	cmp	r3, #78	; 0x4e
 8002be4:	d905      	bls.n	8002bf2 <HAL_DMA_Init+0x2ae>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b52      	cmp	r3, #82	; 0x52
 8002bec:	d801      	bhi.n	8002bf2 <HAL_DMA_Init+0x2ae>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_DMA_Init+0x2b0>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0307 	bic.w	r3, r3, #7
 8002c16:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d117      	bne.n	8002c5a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa8f 	bl	8003160 <DMA_CheckFifoParam>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e197      	b.n	8002f8a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f9ca 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e0cd      	b.n	8002e1a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_DMA_Init+0x42c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <HAL_DMA_Init+0x430>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_DMA_Init+0x434>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a36      	ldr	r2, [pc, #216]	; (8002d7c <HAL_DMA_Init+0x438>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a35      	ldr	r2, [pc, #212]	; (8002d80 <HAL_DMA_Init+0x43c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_DMA_Init+0x440>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a32      	ldr	r2, [pc, #200]	; (8002d88 <HAL_DMA_Init+0x444>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <HAL_DMA_Init+0x448>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Init+0x38e>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_Init+0x390>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8097 	beq.w	8002e08 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <HAL_DMA_Init+0x42c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d021      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_DMA_Init+0x430>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01c      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_DMA_Init+0x434>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d017      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <HAL_DMA_Init+0x438>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d012      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_DMA_Init+0x43c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00d      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <HAL_DMA_Init+0x440>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d008      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_DMA_Init+0x444>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <HAL_DMA_Init+0x448>)
 8002d26:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_DMA_Init+0x44c>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d021      	beq.n	8002d94 <HAL_DMA_Init+0x450>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b80      	cmp	r3, #128	; 0x80
 8002d56:	d102      	bne.n	8002d5e <HAL_DMA_Init+0x41a>
 8002d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5c:	e01b      	b.n	8002d96 <HAL_DMA_Init+0x452>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e019      	b.n	8002d96 <HAL_DMA_Init+0x452>
 8002d62:	bf00      	nop
 8002d64:	fe10803f 	.word	0xfe10803f
 8002d68:	5c001000 	.word	0x5c001000
 8002d6c:	ffff0000 	.word	0xffff0000
 8002d70:	58025408 	.word	0x58025408
 8002d74:	5802541c 	.word	0x5802541c
 8002d78:	58025430 	.word	0x58025430
 8002d7c:	58025444 	.word	0x58025444
 8002d80:	58025458 	.word	0x58025458
 8002d84:	5802546c 	.word	0x5802546c
 8002d88:	58025480 	.word	0x58025480
 8002d8c:	58025494 	.word	0x58025494
 8002d90:	fffe000f 	.word	0xfffe000f
 8002d94:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dc4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_DMA_Init+0x650>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_DMA_Init+0x654>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f905 	bl	8002ffc <DMA_CalcBaseAndBitshift>
 8002df2:	4603      	mov	r3, r0
 8002df4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2201      	movs	r2, #1
 8002e00:	409a      	lsls	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e008      	b.n	8002e1a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0b7      	b.n	8002f8a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a5f      	ldr	r2, [pc, #380]	; (8002f9c <HAL_DMA_Init+0x658>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d072      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_DMA_Init+0x65c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d06d      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <HAL_DMA_Init+0x660>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d068      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5a      	ldr	r2, [pc, #360]	; (8002fa8 <HAL_DMA_Init+0x664>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d063      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a59      	ldr	r2, [pc, #356]	; (8002fac <HAL_DMA_Init+0x668>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d05e      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <HAL_DMA_Init+0x66c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d059      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a56      	ldr	r2, [pc, #344]	; (8002fb4 <HAL_DMA_Init+0x670>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d054      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <HAL_DMA_Init+0x674>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04f      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <HAL_DMA_Init+0x678>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d04a      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_DMA_Init+0x67c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d045      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_DMA_Init+0x680>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d040      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a4e      	ldr	r2, [pc, #312]	; (8002fc8 <HAL_DMA_Init+0x684>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d03b      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4d      	ldr	r2, [pc, #308]	; (8002fcc <HAL_DMA_Init+0x688>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d036      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	; (8002fd0 <HAL_DMA_Init+0x68c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d031      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <HAL_DMA_Init+0x690>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d02c      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_DMA_Init+0x694>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d027      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a47      	ldr	r2, [pc, #284]	; (8002fdc <HAL_DMA_Init+0x698>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_DMA_Init+0x69c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01d      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <HAL_DMA_Init+0x6a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d018      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_DMA_Init+0x6a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a41      	ldr	r2, [pc, #260]	; (8002fec <HAL_DMA_Init+0x6a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3f      	ldr	r2, [pc, #252]	; (8002ff0 <HAL_DMA_Init+0x6ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d009      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3e      	ldr	r2, [pc, #248]	; (8002ff4 <HAL_DMA_Init+0x6b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <HAL_DMA_Init+0x6b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Init+0x5ca>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_DMA_Init+0x5cc>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d032      	beq.n	8002f7a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 f99f 	bl	8003258 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b80      	cmp	r3, #128	; 0x80
 8002f20:	d102      	bne.n	8002f28 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f3c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_DMA_Init+0x624>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d80c      	bhi.n	8002f68 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa1c 	bl	800338c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	e008      	b.n	8002f7a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	a7fdabf8 	.word	0xa7fdabf8
 8002f98:	cccccccd 	.word	0xcccccccd
 8002f9c:	40020010 	.word	0x40020010
 8002fa0:	40020028 	.word	0x40020028
 8002fa4:	40020040 	.word	0x40020040
 8002fa8:	40020058 	.word	0x40020058
 8002fac:	40020070 	.word	0x40020070
 8002fb0:	40020088 	.word	0x40020088
 8002fb4:	400200a0 	.word	0x400200a0
 8002fb8:	400200b8 	.word	0x400200b8
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	40020428 	.word	0x40020428
 8002fc4:	40020440 	.word	0x40020440
 8002fc8:	40020458 	.word	0x40020458
 8002fcc:	40020470 	.word	0x40020470
 8002fd0:	40020488 	.word	0x40020488
 8002fd4:	400204a0 	.word	0x400204a0
 8002fd8:	400204b8 	.word	0x400204b8
 8002fdc:	58025408 	.word	0x58025408
 8002fe0:	5802541c 	.word	0x5802541c
 8002fe4:	58025430 	.word	0x58025430
 8002fe8:	58025444 	.word	0x58025444
 8002fec:	58025458 	.word	0x58025458
 8002ff0:	5802546c 	.word	0x5802546c
 8002ff4:	58025480 	.word	0x58025480
 8002ff8:	58025494 	.word	0x58025494

08002ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a42      	ldr	r2, [pc, #264]	; (8003114 <DMA_CalcBaseAndBitshift+0x118>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d04a      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a41      	ldr	r2, [pc, #260]	; (8003118 <DMA_CalcBaseAndBitshift+0x11c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d045      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a3f      	ldr	r2, [pc, #252]	; (800311c <DMA_CalcBaseAndBitshift+0x120>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d040      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3e      	ldr	r2, [pc, #248]	; (8003120 <DMA_CalcBaseAndBitshift+0x124>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d03b      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <DMA_CalcBaseAndBitshift+0x128>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d036      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a3b      	ldr	r2, [pc, #236]	; (8003128 <DMA_CalcBaseAndBitshift+0x12c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d031      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a39      	ldr	r2, [pc, #228]	; (800312c <DMA_CalcBaseAndBitshift+0x130>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d02c      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a38      	ldr	r2, [pc, #224]	; (8003130 <DMA_CalcBaseAndBitshift+0x134>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d027      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a36      	ldr	r2, [pc, #216]	; (8003134 <DMA_CalcBaseAndBitshift+0x138>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d022      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a35      	ldr	r2, [pc, #212]	; (8003138 <DMA_CalcBaseAndBitshift+0x13c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d01d      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a33      	ldr	r2, [pc, #204]	; (800313c <DMA_CalcBaseAndBitshift+0x140>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d018      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a32      	ldr	r2, [pc, #200]	; (8003140 <DMA_CalcBaseAndBitshift+0x144>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d013      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a30      	ldr	r2, [pc, #192]	; (8003144 <DMA_CalcBaseAndBitshift+0x148>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00e      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <DMA_CalcBaseAndBitshift+0x14c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d009      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a2d      	ldr	r2, [pc, #180]	; (800314c <DMA_CalcBaseAndBitshift+0x150>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d004      	beq.n	80030a4 <DMA_CalcBaseAndBitshift+0xa8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2c      	ldr	r2, [pc, #176]	; (8003150 <DMA_CalcBaseAndBitshift+0x154>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d101      	bne.n	80030a8 <DMA_CalcBaseAndBitshift+0xac>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <DMA_CalcBaseAndBitshift+0xae>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d024      	beq.n	80030f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3b10      	subs	r3, #16
 80030b6:	4a27      	ldr	r2, [pc, #156]	; (8003154 <DMA_CalcBaseAndBitshift+0x158>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	4a24      	ldr	r2, [pc, #144]	; (8003158 <DMA_CalcBaseAndBitshift+0x15c>)
 80030c8:	5cd3      	ldrb	r3, [r2, r3]
 80030ca:	461a      	mov	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d908      	bls.n	80030e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	4b1f      	ldr	r3, [pc, #124]	; (800315c <DMA_CalcBaseAndBitshift+0x160>)
 80030de:	4013      	ands	r3, r2
 80030e0:	1d1a      	adds	r2, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	659a      	str	r2, [r3, #88]	; 0x58
 80030e6:	e00d      	b.n	8003104 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b1b      	ldr	r3, [pc, #108]	; (800315c <DMA_CalcBaseAndBitshift+0x160>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6593      	str	r3, [r2, #88]	; 0x58
 80030f6:	e005      	b.n	8003104 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40020010 	.word	0x40020010
 8003118:	40020028 	.word	0x40020028
 800311c:	40020040 	.word	0x40020040
 8003120:	40020058 	.word	0x40020058
 8003124:	40020070 	.word	0x40020070
 8003128:	40020088 	.word	0x40020088
 800312c:	400200a0 	.word	0x400200a0
 8003130:	400200b8 	.word	0x400200b8
 8003134:	40020410 	.word	0x40020410
 8003138:	40020428 	.word	0x40020428
 800313c:	40020440 	.word	0x40020440
 8003140:	40020458 	.word	0x40020458
 8003144:	40020470 	.word	0x40020470
 8003148:	40020488 	.word	0x40020488
 800314c:	400204a0 	.word	0x400204a0
 8003150:	400204b8 	.word	0x400204b8
 8003154:	aaaaaaab 	.word	0xaaaaaaab
 8003158:	08009674 	.word	0x08009674
 800315c:	fffffc00 	.word	0xfffffc00

08003160 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d120      	bne.n	80031b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b03      	cmp	r3, #3
 800317a:	d858      	bhi.n	800322e <DMA_CheckFifoParam+0xce>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <DMA_CheckFifoParam+0x24>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a7 	.word	0x080031a7
 800318c:	08003195 	.word	0x08003195
 8003190:	0800322f 	.word	0x0800322f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d048      	beq.n	8003232 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031a4:	e045      	b.n	8003232 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ae:	d142      	bne.n	8003236 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031b4:	e03f      	b.n	8003236 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d123      	bne.n	8003208 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d838      	bhi.n	800323a <DMA_CheckFifoParam+0xda>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <DMA_CheckFifoParam+0x70>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031e7 	.word	0x080031e7
 80031d8:	080031e1 	.word	0x080031e1
 80031dc:	080031f9 	.word	0x080031f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
        break;
 80031e4:	e030      	b.n	8003248 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d025      	beq.n	800323e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031f6:	e022      	b.n	800323e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003200:	d11f      	bne.n	8003242 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003206:	e01c      	b.n	8003242 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	2b02      	cmp	r3, #2
 800320e:	d902      	bls.n	8003216 <DMA_CheckFifoParam+0xb6>
 8003210:	2b03      	cmp	r3, #3
 8003212:	d003      	beq.n	800321c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003214:	e018      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
        break;
 800321a:	e015      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00e      	beq.n	8003246 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
    break;
 800322c:	e00b      	b.n	8003246 <DMA_CheckFifoParam+0xe6>
        break;
 800322e:	bf00      	nop
 8003230:	e00a      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        break;
 8003232:	bf00      	nop
 8003234:	e008      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        break;
 8003236:	bf00      	nop
 8003238:	e006      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        break;
 800323a:	bf00      	nop
 800323c:	e004      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        break;
 800323e:	bf00      	nop
 8003240:	e002      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
        break;
 8003242:	bf00      	nop
 8003244:	e000      	b.n	8003248 <DMA_CheckFifoParam+0xe8>
    break;
 8003246:	bf00      	nop
    }
  }

  return status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop

08003258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a38      	ldr	r2, [pc, #224]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d022      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a36      	ldr	r2, [pc, #216]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01d      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a35      	ldr	r2, [pc, #212]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d018      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a33      	ldr	r2, [pc, #204]	; (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d013      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a32      	ldr	r2, [pc, #200]	; (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00e      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d009      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a2f      	ldr	r2, [pc, #188]	; (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d004      	beq.n	80032b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d101      	bne.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032ba:	2300      	movs	r3, #0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01a      	beq.n	80032f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3b08      	subs	r3, #8
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a24      	ldr	r2, [pc, #144]	; (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032f4:	e024      	b.n	8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3b10      	subs	r3, #16
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	091b      	lsrs	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d806      	bhi.n	800331e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d902      	bls.n	800331e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3308      	adds	r3, #8
 800331c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	461a      	mov	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a16      	ldr	r2, [pc, #88]	; (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003330:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2201      	movs	r2, #1
 800333a:	409a      	lsls	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	58025408 	.word	0x58025408
 8003350:	5802541c 	.word	0x5802541c
 8003354:	58025430 	.word	0x58025430
 8003358:	58025444 	.word	0x58025444
 800335c:	58025458 	.word	0x58025458
 8003360:	5802546c 	.word	0x5802546c
 8003364:	58025480 	.word	0x58025480
 8003368:	58025494 	.word	0x58025494
 800336c:	cccccccd 	.word	0xcccccccd
 8003370:	16009600 	.word	0x16009600
 8003374:	58025880 	.word	0x58025880
 8003378:	aaaaaaab 	.word	0xaaaaaaab
 800337c:	400204b8 	.word	0x400204b8
 8003380:	4002040f 	.word	0x4002040f
 8003384:	10008200 	.word	0x10008200
 8003388:	40020880 	.word	0x40020880

0800338c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d04a      	beq.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d847      	bhi.n	8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a25      	ldr	r2, [pc, #148]	; (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d022      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a24      	ldr	r2, [pc, #144]	; (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d01d      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a22      	ldr	r2, [pc, #136]	; (800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d018      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a21      	ldr	r2, [pc, #132]	; (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d013      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1c      	ldr	r2, [pc, #112]	; (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00a      	beq.n	8003418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a15      	ldr	r2, [pc, #84]	; (8003468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003414:	671a      	str	r2, [r3, #112]	; 0x70
 8003416:	e009      	b.n	800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800342a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3b01      	subs	r3, #1
 8003430:	2201      	movs	r2, #1
 8003432:	409a      	lsls	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	58025408 	.word	0x58025408
 8003448:	5802541c 	.word	0x5802541c
 800344c:	58025430 	.word	0x58025430
 8003450:	58025444 	.word	0x58025444
 8003454:	58025458 	.word	0x58025458
 8003458:	5802546c 	.word	0x5802546c
 800345c:	58025480 	.word	0x58025480
 8003460:	58025494 	.word	0x58025494
 8003464:	1600963f 	.word	0x1600963f
 8003468:	58025940 	.word	0x58025940
 800346c:	1000823f 	.word	0x1000823f
 8003470:	40020940 	.word	0x40020940

08003474 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b098      	sub	sp, #96	; 0x60
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800347c:	4a84      	ldr	r2, [pc, #528]	; (8003690 <HAL_FDCAN_Init+0x21c>)
 800347e:	f107 030c 	add.w	r3, r7, #12
 8003482:	4611      	mov	r1, r2
 8003484:	224c      	movs	r2, #76	; 0x4c
 8003486:	4618      	mov	r0, r3
 8003488:	f006 f8ac 	bl	80095e4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1c6      	b.n	8003824 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a7e      	ldr	r2, [pc, #504]	; (8003694 <HAL_FDCAN_Init+0x220>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d106      	bne.n	80034ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fd fe6e 	bl	80011a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0210 	bic.w	r2, r2, #16
 80034d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034d8:	f7fe f9a2 	bl	8001820 <HAL_GetTick>
 80034dc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034de:	e014      	b.n	800350a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034e0:	f7fe f99e 	bl	8001820 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b0a      	cmp	r3, #10
 80034ec:	d90d      	bls.n	800350a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f4:	f043 0201 	orr.w	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2203      	movs	r2, #3
 8003502:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e18c      	b.n	8003824 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d0e3      	beq.n	80034e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003528:	f7fe f97a 	bl	8001820 <HAL_GetTick>
 800352c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800352e:	e014      	b.n	800355a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003530:	f7fe f976 	bl	8001820 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b0a      	cmp	r3, #10
 800353c:	d90d      	bls.n	800355a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2203      	movs	r2, #3
 8003552:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e164      	b.n	8003824 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0e3      	beq.n	8003530 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0202 	orr.w	r2, r2, #2
 8003576:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7c1b      	ldrb	r3, [r3, #16]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d108      	bne.n	8003592 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699a      	ldr	r2, [r3, #24]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358e:	619a      	str	r2, [r3, #24]
 8003590:	e007      	b.n	80035a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7c5b      	ldrb	r3, [r3, #17]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035b8:	619a      	str	r2, [r3, #24]
 80035ba:	e007      	b.n	80035cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7c9b      	ldrb	r3, [r3, #18]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035e2:	619a      	str	r2, [r3, #24]
 80035e4:	e007      	b.n	80035f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699a      	ldr	r2, [r3, #24]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800361a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691a      	ldr	r2, [r3, #16]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0210 	bic.w	r2, r2, #16
 800362a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699a      	ldr	r2, [r3, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0204 	orr.w	r2, r2, #4
 8003642:	619a      	str	r2, [r3, #24]
 8003644:	e030      	b.n	80036a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d02c      	beq.n	80036a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d020      	beq.n	8003698 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003664:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0210 	orr.w	r2, r2, #16
 8003674:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d114      	bne.n	80036a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0220 	orr.w	r2, r2, #32
 800368c:	619a      	str	r2, [r3, #24]
 800368e:	e00b      	b.n	80036a8 <HAL_FDCAN_Init+0x234>
 8003690:	08009618 	.word	0x08009618
 8003694:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0220 	orr.w	r2, r2, #32
 80036a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	3b01      	subs	r3, #1
 80036ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036dc:	d115      	bne.n	800370a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	3b01      	subs	r3, #1
 80036ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	3b01      	subs	r3, #1
 80036f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	3b01      	subs	r3, #1
 8003700:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003706:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003708:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00a      	beq.n	8003728 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003730:	4413      	add	r3, r2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d011      	beq.n	800375a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800373e:	f023 0107 	bic.w	r1, r3, #7
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	3360      	adds	r3, #96	; 0x60
 800374a:	443b      	add	r3, r7
 800374c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800376a:	f023 0107 	bic.w	r1, r3, #7
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	3360      	adds	r3, #96	; 0x60
 8003776:	443b      	add	r3, r7
 8003778:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003796:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	3360      	adds	r3, #96	; 0x60
 80037a2:	443b      	add	r3, r7
 80037a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037a8:	011a      	lsls	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d012      	beq.n	80037e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037c4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	3360      	adds	r3, #96	; 0x60
 80037d0:	443b      	add	r3, r7
 80037d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a11      	ldr	r2, [pc, #68]	; (800382c <HAL_FDCAN_Init+0x3b8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d107      	bne.n	80037fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f022 0203 	bic.w	r2, r2, #3
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f80b 	bl	8003830 <FDCAN_CalcultateRamBlockAddresses>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003820:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003824:	4618      	mov	r0, r3
 8003826:	3760      	adds	r7, #96	; 0x60
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	4000a000 	.word	0x4000a000

08003830 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800383c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003846:	4ba7      	ldr	r3, [pc, #668]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003848:	4013      	ands	r3, r2
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	0091      	lsls	r1, r2, #2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	430b      	orrs	r3, r1
 8003854:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003860:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	041a      	lsls	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	4413      	add	r3, r2
 800387c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003886:	4b97      	ldr	r3, [pc, #604]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003888:	4013      	ands	r3, r2
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	0091      	lsls	r1, r2, #2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	430b      	orrs	r3, r1
 8003894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	4413      	add	r3, r2
 80038be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80038c8:	4b86      	ldr	r3, [pc, #536]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	0091      	lsls	r1, r2, #2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	041a      	lsls	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	68ba      	ldr	r2, [r7, #8]
 8003904:	4413      	add	r3, r2
 8003906:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003910:	4b74      	ldr	r3, [pc, #464]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003912:	4013      	ands	r3, r2
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	0091      	lsls	r1, r2, #2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	430b      	orrs	r3, r1
 800391e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800392a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003932:	041a      	lsls	r2, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003946:	fb02 f303 	mul.w	r3, r2, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4413      	add	r3, r2
 800394e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003958:	4b62      	ldr	r3, [pc, #392]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800395a:	4013      	ands	r3, r2
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	0091      	lsls	r1, r2, #2
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	430b      	orrs	r3, r1
 8003966:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003972:	fb02 f303 	mul.w	r3, r2, r3
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4413      	add	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003984:	4b57      	ldr	r3, [pc, #348]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003986:	4013      	ands	r3, r2
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	0091      	lsls	r1, r2, #2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800399e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	041a      	lsls	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	68ba      	ldr	r2, [r7, #8]
 80039ba:	4413      	add	r3, r2
 80039bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	0091      	lsls	r1, r2, #2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039e0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039fc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a04:	061a      	lsls	r2, r3, #24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a14:	4b34      	ldr	r3, [pc, #208]	; (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003a16:	4413      	add	r3, r2
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	441a      	add	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003a7a:	fb01 f303 	mul.w	r3, r1, r3
 8003a7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003a80:	441a      	add	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	441a      	add	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	441a      	add	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003acc:	441a      	add	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	4a04      	ldr	r2, [pc, #16]	; (8003aec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d915      	bls.n	8003b0c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003ae0:	e006      	b.n	8003af0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003ae2:	bf00      	nop
 8003ae4:	ffff0003 	.word	0xffff0003
 8003ae8:	10002b00 	.word	0x10002b00
 8003aec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e010      	b.n	8003b2e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	e005      	b.n	8003b20 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3f3      	bcc.n	8003b14 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b4a:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <HAL_GPIO_Init+0x234>)
 8003b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b4e:	e194      	b.n	8003e7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	2101      	movs	r1, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8186 	beq.w	8003e74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d005      	beq.n	8003b80 <HAL_GPIO_Init+0x44>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d130      	bne.n	8003be2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 0201 	and.w	r2, r3, #1
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 0303 	and.w	r3, r3, #3
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d017      	beq.n	8003c1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4013      	ands	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d123      	bne.n	8003c72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	08da      	lsrs	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3208      	adds	r2, #8
 8003c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	220f      	movs	r2, #15
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 0307 	and.w	r3, r3, #7
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	08da      	lsrs	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3208      	adds	r2, #8
 8003c6c:	69b9      	ldr	r1, [r7, #24]
 8003c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0203 	and.w	r2, r3, #3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80e0 	beq.w	8003e74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb4:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <HAL_GPIO_Init+0x238>)
 8003cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cba:	4a2e      	ldr	r2, [pc, #184]	; (8003d74 <HAL_GPIO_Init+0x238>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	; (8003d74 <HAL_GPIO_Init+0x238>)
 8003cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd2:	4a29      	ldr	r2, [pc, #164]	; (8003d78 <HAL_GPIO_Init+0x23c>)
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	220f      	movs	r2, #15
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <HAL_GPIO_Init+0x240>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d052      	beq.n	8003da4 <HAL_GPIO_Init+0x268>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	; (8003d80 <HAL_GPIO_Init+0x244>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d031      	beq.n	8003d6a <HAL_GPIO_Init+0x22e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <HAL_GPIO_Init+0x248>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d02b      	beq.n	8003d66 <HAL_GPIO_Init+0x22a>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_GPIO_Init+0x24c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d025      	beq.n	8003d62 <HAL_GPIO_Init+0x226>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1c      	ldr	r2, [pc, #112]	; (8003d8c <HAL_GPIO_Init+0x250>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <HAL_GPIO_Init+0x222>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <HAL_GPIO_Init+0x254>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x21e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <HAL_GPIO_Init+0x258>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x21a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a19      	ldr	r2, [pc, #100]	; (8003d98 <HAL_GPIO_Init+0x25c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x216>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a18      	ldr	r2, [pc, #96]	; (8003d9c <HAL_GPIO_Init+0x260>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x212>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <HAL_GPIO_Init+0x264>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x20e>
 8003d46:	2309      	movs	r3, #9
 8003d48:	e02d      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	e02b      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	e029      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d52:	2307      	movs	r3, #7
 8003d54:	e027      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d56:	2306      	movs	r3, #6
 8003d58:	e025      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d5a:	2305      	movs	r3, #5
 8003d5c:	e023      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e021      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d62:	2303      	movs	r3, #3
 8003d64:	e01f      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e01d      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e01b      	b.n	8003da6 <HAL_GPIO_Init+0x26a>
 8003d6e:	bf00      	nop
 8003d70:	58000080 	.word	0x58000080
 8003d74:	58024400 	.word	0x58024400
 8003d78:	58000400 	.word	0x58000400
 8003d7c:	58020000 	.word	0x58020000
 8003d80:	58020400 	.word	0x58020400
 8003d84:	58020800 	.word	0x58020800
 8003d88:	58020c00 	.word	0x58020c00
 8003d8c:	58021000 	.word	0x58021000
 8003d90:	58021400 	.word	0x58021400
 8003d94:	58021800 	.word	0x58021800
 8003d98:	58021c00 	.word	0x58021c00
 8003d9c:	58022000 	.word	0x58022000
 8003da0:	58022400 	.word	0x58022400
 8003da4:	2300      	movs	r3, #0
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	f002 0203 	and.w	r2, r2, #3
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	4093      	lsls	r3, r2
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003db6:	4938      	ldr	r1, [pc, #224]	; (8003e98 <HAL_GPIO_Init+0x35c>)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3301      	adds	r3, #1
 8003e78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f47f ae63 	bne.w	8003b50 <HAL_GPIO_Init+0x14>
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	3724      	adds	r7, #36	; 0x24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	58000400 	.word	0x58000400

08003e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	807b      	strh	r3, [r7, #2]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eac:	787b      	ldrb	r3, [r7, #1]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003eb8:	e003      	b.n	8003ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	041a      	lsls	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	619a      	str	r2, [r3, #24]
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e08b      	b.n	8003ffa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd f9be 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d107      	bne.n	8003f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e006      	b.n	8003f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d108      	bne.n	8003f72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	e007      	b.n	8003f82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <HAL_I2C_Init+0x134>)
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69d9      	ldr	r1, [r3, #28]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1a      	ldr	r2, [r3, #32]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	02008000 	.word	0x02008000

08004008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b20      	cmp	r3, #32
 800401c:	d138      	bne.n	8004090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004028:	2302      	movs	r3, #2
 800402a:	e032      	b.n	8004092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	; 0x24
 8004038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800405a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	e000      	b.n	8004092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004090:	2302      	movs	r3, #2
  }
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d139      	bne.n	8004128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040be:	2302      	movs	r3, #2
 80040c0:	e033      	b.n	800412a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2224      	movs	r2, #36	; 0x24
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	e000      	b.n	800412a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b04      	cmp	r3, #4
 800414a:	d00a      	beq.n	8004162 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800414c:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <HAL_PWREx_ConfigSupply+0x70>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e01f      	b.n	800419e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e01d      	b.n	800419e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f023 0207 	bic.w	r2, r3, #7
 800416a:	490f      	ldr	r1, [pc, #60]	; (80041a8 <HAL_PWREx_ConfigSupply+0x70>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4313      	orrs	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004172:	f7fd fb55 	bl	8001820 <HAL_GetTick>
 8004176:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004178:	e009      	b.n	800418e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800417a:	f7fd fb51 	bl	8001820 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004188:	d901      	bls.n	800418e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_PWREx_ConfigSupply+0x70>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800419a:	d1ee      	bne.n	800417a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	58024800 	.word	0x58024800

080041ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d102      	bne.n	80041c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f000 bc48 	b.w	8004a50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 8088 	beq.w	80042de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ce:	4b99      	ldr	r3, [pc, #612]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041d8:	4b96      	ldr	r3, [pc, #600]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d007      	beq.n	80041f4 <HAL_RCC_OscConfig+0x48>
 80041e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e6:	2b18      	cmp	r3, #24
 80041e8:	d111      	bne.n	800420e <HAL_RCC_OscConfig+0x62>
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	f003 0303 	and.w	r3, r3, #3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	4b8f      	ldr	r3, [pc, #572]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d06d      	beq.n	80042dc <HAL_RCC_OscConfig+0x130>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d169      	bne.n	80042dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	f000 bc21 	b.w	8004a50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004216:	d106      	bne.n	8004226 <HAL_RCC_OscConfig+0x7a>
 8004218:	4b86      	ldr	r3, [pc, #536]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a85      	ldr	r2, [pc, #532]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800421e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e02e      	b.n	8004284 <HAL_RCC_OscConfig+0xd8>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCC_OscConfig+0x9c>
 800422e:	4b81      	ldr	r3, [pc, #516]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a80      	ldr	r2, [pc, #512]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b7e      	ldr	r3, [pc, #504]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e01d      	b.n	8004284 <HAL_RCC_OscConfig+0xd8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004250:	d10c      	bne.n	800426c <HAL_RCC_OscConfig+0xc0>
 8004252:	4b78      	ldr	r3, [pc, #480]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a77      	ldr	r2, [pc, #476]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b75      	ldr	r3, [pc, #468]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a74      	ldr	r2, [pc, #464]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	e00b      	b.n	8004284 <HAL_RCC_OscConfig+0xd8>
 800426c:	4b71      	ldr	r3, [pc, #452]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a70      	ldr	r2, [pc, #448]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b6e      	ldr	r3, [pc, #440]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6d      	ldr	r2, [pc, #436]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800427e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fac8 	bl	8001820 <HAL_GetTick>
 8004290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7fd fac4 	bl	8001820 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e3d4      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80042a6:	4b63      	ldr	r3, [pc, #396]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0xe8>
 80042b2:	e014      	b.n	80042de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fd fab4 	bl	8001820 <HAL_GetTick>
 80042b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fd fab0 	bl	8001820 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e3c0      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ce:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x110>
 80042da:	e000      	b.n	80042de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80ca 	beq.w	8004480 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ec:	4b51      	ldr	r3, [pc, #324]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042f6:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_RCC_OscConfig+0x166>
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	2b18      	cmp	r3, #24
 8004306:	d156      	bne.n	80043b6 <HAL_RCC_OscConfig+0x20a>
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d151      	bne.n	80043b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004312:	4b48      	ldr	r3, [pc, #288]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x17e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e392      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800432a:	4b42      	ldr	r3, [pc, #264]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 0219 	bic.w	r2, r3, #25
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	493f      	ldr	r1, [pc, #252]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fa70 	bl	8001820 <HAL_GetTick>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fd fa6c 	bl	8001820 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e37c      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004356:	4b37      	ldr	r3, [pc, #220]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	f7fd fa69 	bl	8001838 <HAL_GetREVID>
 8004366:	4603      	mov	r3, r0
 8004368:	f241 0203 	movw	r2, #4099	; 0x1003
 800436c:	4293      	cmp	r3, r2
 800436e:	d817      	bhi.n	80043a0 <HAL_RCC_OscConfig+0x1f4>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b40      	cmp	r3, #64	; 0x40
 8004376:	d108      	bne.n	800438a <HAL_RCC_OscConfig+0x1de>
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004380:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004386:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004388:	e07a      	b.n	8004480 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b2a      	ldr	r3, [pc, #168]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	031b      	lsls	r3, r3, #12
 8004398:	4926      	ldr	r1, [pc, #152]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800439e:	e06f      	b.n	8004480 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	4921      	ldr	r1, [pc, #132]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043b4:	e064      	b.n	8004480 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d047      	beq.n	800444e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043be:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 0219 	bic.w	r2, r3, #25
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	491a      	ldr	r1, [pc, #104]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7fd fa26 	bl	8001820 <HAL_GetTick>
 80043d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d8:	f7fd fa22 	bl	8001820 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e332      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043ea:	4b12      	ldr	r3, [pc, #72]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f6:	f7fd fa1f 	bl	8001838 <HAL_GetREVID>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8004400:	4293      	cmp	r3, r2
 8004402:	d819      	bhi.n	8004438 <HAL_RCC_OscConfig+0x28c>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d108      	bne.n	800441e <HAL_RCC_OscConfig+0x272>
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004414:	4a07      	ldr	r2, [pc, #28]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441a:	6053      	str	r3, [r2, #4]
 800441c:	e030      	b.n	8004480 <HAL_RCC_OscConfig+0x2d4>
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	031b      	lsls	r3, r3, #12
 800442c:	4901      	ldr	r1, [pc, #4]	; (8004434 <HAL_RCC_OscConfig+0x288>)
 800442e:	4313      	orrs	r3, r2
 8004430:	604b      	str	r3, [r1, #4]
 8004432:	e025      	b.n	8004480 <HAL_RCC_OscConfig+0x2d4>
 8004434:	58024400 	.word	0x58024400
 8004438:	4b9a      	ldr	r3, [pc, #616]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	4997      	ldr	r1, [pc, #604]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
 800444c:	e018      	b.n	8004480 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444e:	4b95      	ldr	r3, [pc, #596]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a94      	ldr	r2, [pc, #592]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004454:	f023 0301 	bic.w	r3, r3, #1
 8004458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fd f9e1 	bl	8001820 <HAL_GetTick>
 800445e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fd f9dd 	bl	8001820 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e2ed      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004474:	4b8b      	ldr	r3, [pc, #556]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 80a9 	beq.w	80045e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448e:	4b85      	ldr	r3, [pc, #532]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004496:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004498:	4b82      	ldr	r3, [pc, #520]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d007      	beq.n	80044b4 <HAL_RCC_OscConfig+0x308>
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b18      	cmp	r3, #24
 80044a8:	d13a      	bne.n	8004520 <HAL_RCC_OscConfig+0x374>
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d135      	bne.n	8004520 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044b4:	4b7b      	ldr	r3, [pc, #492]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_RCC_OscConfig+0x320>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e2c1      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044cc:	f7fd f9b4 	bl	8001838 <HAL_GetREVID>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d817      	bhi.n	800450a <HAL_RCC_OscConfig+0x35e>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d108      	bne.n	80044f4 <HAL_RCC_OscConfig+0x348>
 80044e2:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044ea:	4a6e      	ldr	r2, [pc, #440]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044f2:	e075      	b.n	80045e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044f4:	4b6b      	ldr	r3, [pc, #428]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	069b      	lsls	r3, r3, #26
 8004502:	4968      	ldr	r1, [pc, #416]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004508:	e06a      	b.n	80045e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800450a:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	4962      	ldr	r1, [pc, #392]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800451e:	e05f      	b.n	80045e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d042      	beq.n	80045ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004528:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a5d      	ldr	r2, [pc, #372]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd f974 	bl	8001820 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800453c:	f7fd f970 	bl	8001820 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e280      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800454e:	4b55      	ldr	r3, [pc, #340]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800455a:	f7fd f96d 	bl	8001838 <HAL_GetREVID>
 800455e:	4603      	mov	r3, r0
 8004560:	f241 0203 	movw	r2, #4099	; 0x1003
 8004564:	4293      	cmp	r3, r2
 8004566:	d817      	bhi.n	8004598 <HAL_RCC_OscConfig+0x3ec>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	2b20      	cmp	r3, #32
 800456e:	d108      	bne.n	8004582 <HAL_RCC_OscConfig+0x3d6>
 8004570:	4b4c      	ldr	r3, [pc, #304]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004578:	4a4a      	ldr	r2, [pc, #296]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800457a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800457e:	6053      	str	r3, [r2, #4]
 8004580:	e02e      	b.n	80045e0 <HAL_RCC_OscConfig+0x434>
 8004582:	4b48      	ldr	r3, [pc, #288]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	069b      	lsls	r3, r3, #26
 8004590:	4944      	ldr	r1, [pc, #272]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
 8004596:	e023      	b.n	80045e0 <HAL_RCC_OscConfig+0x434>
 8004598:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	493f      	ldr	r1, [pc, #252]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60cb      	str	r3, [r1, #12]
 80045ac:	e018      	b.n	80045e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80045ae:	4b3d      	ldr	r3, [pc, #244]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a3c      	ldr	r2, [pc, #240]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ba:	f7fd f931 	bl	8001820 <HAL_GetTick>
 80045be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045c2:	f7fd f92d 	bl	8001820 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e23d      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045d4:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d036      	beq.n	800465a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d019      	beq.n	8004628 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f4:	4b2b      	ldr	r3, [pc, #172]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7fd f90e 	bl	8001820 <HAL_GetTick>
 8004604:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004608:	f7fd f90a 	bl	8001820 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e21a      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800461a:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x45c>
 8004626:	e018      	b.n	800465a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800462a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800462c:	4a1d      	ldr	r2, [pc, #116]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fd f8f4 	bl	8001820 <HAL_GetTick>
 8004638:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463c:	f7fd f8f0 	bl	8001820 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e200      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d039      	beq.n	80046da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d01c      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a0c      	ldr	r2, [pc, #48]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004678:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800467a:	f7fd f8d1 	bl	8001820 <HAL_GetTick>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004682:	f7fd f8cd 	bl	8001820 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1dd      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004694:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <HAL_RCC_OscConfig+0x4f8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x4d6>
 80046a0:	e01b      	b.n	80046da <HAL_RCC_OscConfig+0x52e>
 80046a2:	bf00      	nop
 80046a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046a8:	4b9b      	ldr	r3, [pc, #620]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a9a      	ldr	r2, [pc, #616]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80046ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046b4:	f7fd f8b4 	bl	8001820 <HAL_GetTick>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046ba:	e008      	b.n	80046ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046bc:	f7fd f8b0 	bl	8001820 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e1c0      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046ce:	4b92      	ldr	r3, [pc, #584]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1f0      	bne.n	80046bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8081 	beq.w	80047ea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046e8:	4b8c      	ldr	r3, [pc, #560]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a8b      	ldr	r2, [pc, #556]	; (800491c <HAL_RCC_OscConfig+0x770>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046f4:	f7fd f894 	bl	8001820 <HAL_GetTick>
 80046f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fc:	f7fd f890 	bl	8001820 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e1a0      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800470e:	4b83      	ldr	r3, [pc, #524]	; (800491c <HAL_RCC_OscConfig+0x770>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d106      	bne.n	8004730 <HAL_RCC_OscConfig+0x584>
 8004722:	4b7d      	ldr	r3, [pc, #500]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a7c      	ldr	r2, [pc, #496]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	e02d      	b.n	800478c <HAL_RCC_OscConfig+0x5e0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10c      	bne.n	8004752 <HAL_RCC_OscConfig+0x5a6>
 8004738:	4b77      	ldr	r3, [pc, #476]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a76      	ldr	r2, [pc, #472]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	4b74      	ldr	r3, [pc, #464]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004748:	4a73      	ldr	r2, [pc, #460]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	; 0x70
 8004750:	e01c      	b.n	800478c <HAL_RCC_OscConfig+0x5e0>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b05      	cmp	r3, #5
 8004758:	d10c      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c8>
 800475a:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	4a6e      	ldr	r2, [pc, #440]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	6713      	str	r3, [r2, #112]	; 0x70
 8004766:	4b6c      	ldr	r3, [pc, #432]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a6b      	ldr	r2, [pc, #428]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	6713      	str	r3, [r2, #112]	; 0x70
 8004772:	e00b      	b.n	800478c <HAL_RCC_OscConfig+0x5e0>
 8004774:	4b68      	ldr	r3, [pc, #416]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a67      	ldr	r2, [pc, #412]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
 8004780:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004784:	4a64      	ldr	r2, [pc, #400]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004786:	f023 0304 	bic.w	r3, r3, #4
 800478a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d015      	beq.n	80047c0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004794:	f7fd f844 	bl	8001820 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fd f840 	bl	8001820 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e14e      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047b2:	4b59      	ldr	r3, [pc, #356]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0ee      	beq.n	800479c <HAL_RCC_OscConfig+0x5f0>
 80047be:	e014      	b.n	80047ea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c0:	f7fd f82e 	bl	8001820 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047c6:	e00a      	b.n	80047de <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c8:	f7fd f82a 	bl	8001820 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e138      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047de:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80047e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1ee      	bne.n	80047c8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 812d 	beq.w	8004a4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047fc:	2b18      	cmp	r3, #24
 80047fe:	f000 80bd 	beq.w	800497c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b02      	cmp	r3, #2
 8004808:	f040 809e 	bne.w	8004948 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a41      	ldr	r2, [pc, #260]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004818:	f7fd f802 	bl	8001820 <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004820:	f7fc fffe 	bl	8001820 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e10e      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800483e:	4b36      	ldr	r3, [pc, #216]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004842:	4b37      	ldr	r3, [pc, #220]	; (8004920 <HAL_RCC_OscConfig+0x774>)
 8004844:	4013      	ands	r3, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	430a      	orrs	r2, r1
 8004852:	4931      	ldr	r1, [pc, #196]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	628b      	str	r3, [r1, #40]	; 0x28
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	3b01      	subs	r3, #1
 800485e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	3b01      	subs	r3, #1
 8004868:	025b      	lsls	r3, r3, #9
 800486a:	b29b      	uxth	r3, r3
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	3b01      	subs	r3, #1
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	3b01      	subs	r3, #1
 8004882:	061b      	lsls	r3, r3, #24
 8004884:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004888:	4923      	ldr	r1, [pc, #140]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800488e:	4b22      	ldr	r3, [pc, #136]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4a21      	ldr	r2, [pc, #132]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800489a:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 800489c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489e:	4b21      	ldr	r3, [pc, #132]	; (8004924 <HAL_RCC_OscConfig+0x778>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80048a6:	00d2      	lsls	r2, r2, #3
 80048a8:	491b      	ldr	r1, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	f023 020c 	bic.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	4917      	ldr	r1, [pc, #92]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048c0:	4b15      	ldr	r3, [pc, #84]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	f023 0202 	bic.w	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048cc:	4912      	ldr	r1, [pc, #72]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	4a10      	ldr	r2, [pc, #64]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048de:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a0d      	ldr	r2, [pc, #52]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	4a0a      	ldr	r2, [pc, #40]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048f6:	4b08      	ldr	r3, [pc, #32]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	4a07      	ldr	r2, [pc, #28]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_RCC_OscConfig+0x76c>)
 8004908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7fc ff87 	bl	8001820 <HAL_GetTick>
 8004912:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004914:	e011      	b.n	800493a <HAL_RCC_OscConfig+0x78e>
 8004916:	bf00      	nop
 8004918:	58024400 	.word	0x58024400
 800491c:	58024800 	.word	0x58024800
 8004920:	fffffc0c 	.word	0xfffffc0c
 8004924:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004928:	f7fc ff7a 	bl	8001820 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e08a      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800493a:	4b47      	ldr	r3, [pc, #284]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d0f0      	beq.n	8004928 <HAL_RCC_OscConfig+0x77c>
 8004946:	e082      	b.n	8004a4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004948:	4b43      	ldr	r3, [pc, #268]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a42      	ldr	r2, [pc, #264]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 800494e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fc ff64 	bl	8001820 <HAL_GetTick>
 8004958:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495c:	f7fc ff60 	bl	8001820 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e070      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800496e:	4b3a      	ldr	r3, [pc, #232]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x7b0>
 800497a:	e068      	b.n	8004a4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800497c:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004982:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498c:	2b01      	cmp	r3, #1
 800498e:	d031      	beq.n	80049f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d12a      	bne.n	80049f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d122      	bne.n	80049f4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d11a      	bne.n	80049f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	0a5b      	lsrs	r3, r3, #9
 80049c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d111      	bne.n	80049f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d108      	bne.n	80049f4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	0e1b      	lsrs	r3, r3, #24
 80049e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d001      	beq.n	80049f8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e02b      	b.n	8004a50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049f8:	4b17      	ldr	r3, [pc, #92]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	08db      	lsrs	r3, r3, #3
 80049fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d01f      	beq.n	8004a4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004a0e:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004a14:	f023 0301 	bic.w	r3, r3, #1
 8004a18:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a1a:	f7fc ff01 	bl	8001820 <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a20:	bf00      	nop
 8004a22:	f7fc fefd 	bl	8001820 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d0f9      	beq.n	8004a22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a2e:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <HAL_RCC_OscConfig+0x8b0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	4906      	ldr	r1, [pc, #24]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4a04      	ldr	r2, [pc, #16]	; (8004a58 <HAL_RCC_OscConfig+0x8ac>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3730      	adds	r7, #48	; 0x30
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	58024400 	.word	0x58024400
 8004a5c:	ffff0007 	.word	0xffff0007

08004a60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e19c      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	4b8a      	ldr	r3, [pc, #552]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d910      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b87      	ldr	r3, [pc, #540]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 020f 	bic.w	r2, r3, #15
 8004a8a:	4985      	ldr	r1, [pc, #532]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b83      	ldr	r3, [pc, #524]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e184      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d010      	beq.n	8004ad2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	4b7b      	ldr	r3, [pc, #492]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d908      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ac0:	4b78      	ldr	r3, [pc, #480]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	4975      	ldr	r1, [pc, #468]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0308 	and.w	r3, r3, #8
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d010      	beq.n	8004b00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	4b70      	ldr	r3, [pc, #448]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d908      	bls.n	8004b00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004aee:	4b6d      	ldr	r3, [pc, #436]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	496a      	ldr	r1, [pc, #424]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699a      	ldr	r2, [r3, #24]
 8004b10:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d908      	bls.n	8004b2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b1c:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	69db      	ldr	r3, [r3, #28]
 8004b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	495e      	ldr	r1, [pc, #376]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0320 	and.w	r3, r3, #32
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d908      	bls.n	8004b5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b4a:	4b56      	ldr	r3, [pc, #344]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	4953      	ldr	r1, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d908      	bls.n	8004b8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b78:	4b4a      	ldr	r3, [pc, #296]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f023 020f 	bic.w	r2, r3, #15
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4947      	ldr	r1, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d055      	beq.n	8004c42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b96:	4b43      	ldr	r3, [pc, #268]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	4940      	ldr	r1, [pc, #256]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004bb0:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d121      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0f6      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d115      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0ea      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004be0:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e0de      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bf0:	4b2c      	ldr	r3, [pc, #176]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0304 	and.w	r3, r3, #4
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0d6      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f023 0207 	bic.w	r2, r3, #7
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4925      	ldr	r1, [pc, #148]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c12:	f7fc fe05 	bl	8001820 <HAL_GetTick>
 8004c16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c1a:	f7fc fe01 	bl	8001820 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0be      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d1eb      	bne.n	8004c1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d010      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d208      	bcs.n	8004c70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5e:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f023 020f 	bic.w	r2, r3, #15
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d214      	bcs.n	8004ca8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 020f 	bic.w	r2, r3, #15
 8004c86:	4906      	ldr	r1, [pc, #24]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8e:	4b04      	ldr	r3, [pc, #16]	; (8004ca0 <HAL_RCC_ClockConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e086      	b.n	8004dae <HAL_RCC_ClockConfig+0x34e>
 8004ca0:	52002000 	.word	0x52002000
 8004ca4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d010      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d208      	bcs.n	8004cd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cc4:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	4939      	ldr	r1, [pc, #228]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d010      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d208      	bcs.n	8004d04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cf2:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	492e      	ldr	r1, [pc, #184]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d010      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	4b28      	ldr	r3, [pc, #160]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d208      	bcs.n	8004d32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d20:	4b25      	ldr	r3, [pc, #148]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4922      	ldr	r1, [pc, #136]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69da      	ldr	r2, [r3, #28]
 8004d42:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d208      	bcs.n	8004d60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	4917      	ldr	r1, [pc, #92]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d60:	f000 f834 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004d64:	4602      	mov	r2, r0
 8004d66:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	4912      	ldr	r1, [pc, #72]	; (8004dbc <HAL_RCC_ClockConfig+0x35c>)
 8004d72:	5ccb      	ldrb	r3, [r1, r3]
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_RCC_ClockConfig+0x358>)
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f003 030f 	and.w	r3, r3, #15
 8004d86:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <HAL_RCC_ClockConfig+0x35c>)
 8004d88:	5cd3      	ldrb	r3, [r2, r3]
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <HAL_RCC_ClockConfig+0x360>)
 8004d96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d98:	4a0a      	ldr	r2, [pc, #40]	; (8004dc4 <HAL_RCC_ClockConfig+0x364>)
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	; (8004dc8 <HAL_RCC_ClockConfig+0x368>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fc fcf2 	bl	800178c <HAL_InitTick>
 8004da8:	4603      	mov	r3, r0
 8004daa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	08009664 	.word	0x08009664
 8004dc0:	24000004 	.word	0x24000004
 8004dc4:	24000000 	.word	0x24000000
 8004dc8:	24000008 	.word	0x24000008

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd2:	4bb3      	ldr	r3, [pc, #716]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dda:	2b18      	cmp	r3, #24
 8004ddc:	f200 8155 	bhi.w	800508a <HAL_RCC_GetSysClockFreq+0x2be>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e4d 	.word	0x08004e4d
 8004dec:	0800508b 	.word	0x0800508b
 8004df0:	0800508b 	.word	0x0800508b
 8004df4:	0800508b 	.word	0x0800508b
 8004df8:	0800508b 	.word	0x0800508b
 8004dfc:	0800508b 	.word	0x0800508b
 8004e00:	0800508b 	.word	0x0800508b
 8004e04:	0800508b 	.word	0x0800508b
 8004e08:	08004e73 	.word	0x08004e73
 8004e0c:	0800508b 	.word	0x0800508b
 8004e10:	0800508b 	.word	0x0800508b
 8004e14:	0800508b 	.word	0x0800508b
 8004e18:	0800508b 	.word	0x0800508b
 8004e1c:	0800508b 	.word	0x0800508b
 8004e20:	0800508b 	.word	0x0800508b
 8004e24:	0800508b 	.word	0x0800508b
 8004e28:	08004e79 	.word	0x08004e79
 8004e2c:	0800508b 	.word	0x0800508b
 8004e30:	0800508b 	.word	0x0800508b
 8004e34:	0800508b 	.word	0x0800508b
 8004e38:	0800508b 	.word	0x0800508b
 8004e3c:	0800508b 	.word	0x0800508b
 8004e40:	0800508b 	.word	0x0800508b
 8004e44:	0800508b 	.word	0x0800508b
 8004e48:	08004e7f 	.word	0x08004e7f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e4c:	4b94      	ldr	r3, [pc, #592]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d009      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e58:	4b91      	ldr	r3, [pc, #580]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	4a90      	ldr	r2, [pc, #576]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e6a:	e111      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e6c:	4b8d      	ldr	r3, [pc, #564]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e6e:	61bb      	str	r3, [r7, #24]
      break;
 8004e70:	e10e      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e72:	4b8d      	ldr	r3, [pc, #564]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e74:	61bb      	str	r3, [r7, #24]
      break;
 8004e76:	e10b      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e78:	4b8c      	ldr	r3, [pc, #560]	; (80050ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e7a:	61bb      	str	r3, [r7, #24]
      break;
 8004e7c:	e108      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e7e:	4b88      	ldr	r3, [pc, #544]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e88:	4b85      	ldr	r3, [pc, #532]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e92:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e94:	4b82      	ldr	r3, [pc, #520]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e9e:	4b80      	ldr	r3, [pc, #512]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	08db      	lsrs	r3, r3, #3
 8004ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	fb02 f303 	mul.w	r3, r2, r3
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80e1 	beq.w	8005084 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	f000 8083 	beq.w	8004fd0 <HAL_RCC_GetSysClockFreq+0x204>
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	f200 80a1 	bhi.w	8005014 <HAL_RCC_GetSysClockFreq+0x248>
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x114>
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d056      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ede:	e099      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d02d      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eec:	4b6c      	ldr	r3, [pc, #432]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	4a6b      	ldr	r2, [pc, #428]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	ee07 3a90 	vmov	s15, r3
 8004f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f16:	4b62      	ldr	r3, [pc, #392]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f2a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80050b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f46:	e087      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eddf 6a58 	vldr	s13, [pc, #352]	; 80050b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b51      	ldr	r3, [pc, #324]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f6e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80050b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f8a:	e065      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9e:	4b40      	ldr	r3, [pc, #256]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fb2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80050b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fce:	e043      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050bc <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe2:	4b2f      	ldr	r3, [pc, #188]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80050b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005012:	e021      	b.n	8005058 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005036:	ed97 6a02 	vldr	s12, [r7, #8]
 800503a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80050b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800504a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005056:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	0a5b      	lsrs	r3, r3, #9
 800505e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005062:	3301      	adds	r3, #1
 8005064:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	ee07 3a90 	vmov	s15, r3
 800506c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005070:	edd7 6a07 	vldr	s13, [r7, #28]
 8005074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800507c:	ee17 3a90 	vmov	r3, s15
 8005080:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005082:	e005      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005084:	2300      	movs	r3, #0
 8005086:	61bb      	str	r3, [r7, #24]
      break;
 8005088:	e002      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800508c:	61bb      	str	r3, [r7, #24]
      break;
 800508e:	bf00      	nop
  }

  return sysclockfreq;
 8005090:	69bb      	ldr	r3, [r7, #24]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	58024400 	.word	0x58024400
 80050a4:	03d09000 	.word	0x03d09000
 80050a8:	003d0900 	.word	0x003d0900
 80050ac:	017d7840 	.word	0x017d7840
 80050b0:	46000000 	.word	0x46000000
 80050b4:	4c742400 	.word	0x4c742400
 80050b8:	4a742400 	.word	0x4a742400
 80050bc:	4bbebc20 	.word	0x4bbebc20

080050c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050c6:	f7ff fe81 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	490f      	ldr	r1, [pc, #60]	; (8005114 <HAL_RCC_GetHCLKFreq+0x54>)
 80050d8:	5ccb      	ldrb	r3, [r1, r3]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <HAL_RCC_GetHCLKFreq+0x50>)
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	4a09      	ldr	r2, [pc, #36]	; (8005114 <HAL_RCC_GetHCLKFreq+0x54>)
 80050ee:	5cd3      	ldrb	r3, [r2, r3]
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	4a07      	ldr	r2, [pc, #28]	; (8005118 <HAL_RCC_GetHCLKFreq+0x58>)
 80050fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050fe:	4a07      	ldr	r2, [pc, #28]	; (800511c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_RCC_GetHCLKFreq+0x58>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	58024400 	.word	0x58024400
 8005114:	08009664 	.word	0x08009664
 8005118:	24000004 	.word	0x24000004
 800511c:	24000000 	.word	0x24000000

08005120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005124:	f7ff ffcc 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8005128:	4602      	mov	r2, r0
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x24>)
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	091b      	lsrs	r3, r3, #4
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4904      	ldr	r1, [pc, #16]	; (8005148 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}
 8005144:	58024400 	.word	0x58024400
 8005148:	08009664 	.word	0x08009664

0800514c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005150:	f7ff ffb6 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	4904      	ldr	r1, [pc, #16]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800516c:	4618      	mov	r0, r3
 800516e:	bd80      	pop	{r7, pc}
 8005170:	58024400 	.word	0x58024400
 8005174:	08009664 	.word	0x08009664

08005178 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b0ca      	sub	sp, #296	; 0x128
 800517e:	af00      	add	r7, sp, #0
 8005180:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800518a:	2300      	movs	r3, #0
 800518c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800519c:	2500      	movs	r5, #0
 800519e:	ea54 0305 	orrs.w	r3, r4, r5
 80051a2:	d049      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051ae:	d02f      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80051b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80051b4:	d828      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051ba:	d01a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c0:	d822      	bhi.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051ca:	d007      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051cc:	e01c      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051ce:	4bb8      	ldr	r3, [pc, #736]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d2:	4ab7      	ldr	r2, [pc, #732]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051da:	e01a      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e0:	3308      	adds	r3, #8
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f002 fb61 	bl	80078ac <RCCEx_PLL2_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051f0:	e00f      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f6:	3328      	adds	r3, #40	; 0x28
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f002 fc08 	bl	8007a10 <RCCEx_PLL3_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005206:	e004      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800520e:	e000      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800521a:	4ba5      	ldr	r3, [pc, #660]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800521c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005228:	4aa1      	ldr	r2, [pc, #644]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800522a:	430b      	orrs	r3, r1
 800522c:	6513      	str	r3, [r2, #80]	; 0x50
 800522e:	e003      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005230:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005234:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005240:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005244:	f04f 0900 	mov.w	r9, #0
 8005248:	ea58 0309 	orrs.w	r3, r8, r9
 800524c:	d047      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800524e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005254:	2b04      	cmp	r3, #4
 8005256:	d82a      	bhi.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005258:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800525a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525e:	bf00      	nop
 8005260:	08005275 	.word	0x08005275
 8005264:	08005283 	.word	0x08005283
 8005268:	08005299 	.word	0x08005299
 800526c:	080052b7 	.word	0x080052b7
 8005270:	080052b7 	.word	0x080052b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005274:	4b8e      	ldr	r3, [pc, #568]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	4a8d      	ldr	r2, [pc, #564]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800527a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005280:	e01a      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	3308      	adds	r3, #8
 8005288:	2100      	movs	r1, #0
 800528a:	4618      	mov	r0, r3
 800528c:	f002 fb0e 	bl	80078ac <RCCEx_PLL2_Config>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005296:	e00f      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529c:	3328      	adds	r3, #40	; 0x28
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 fbb5 	bl	8007a10 <RCCEx_PLL3_Config>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052ac:	e004      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052b4:	e000      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80052b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10a      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052c0:	4b7b      	ldr	r3, [pc, #492]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c4:	f023 0107 	bic.w	r1, r3, #7
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ce:	4a78      	ldr	r2, [pc, #480]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d0:	430b      	orrs	r3, r1
 80052d2:	6513      	str	r3, [r2, #80]	; 0x50
 80052d4:	e003      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80052ea:	f04f 0b00 	mov.w	fp, #0
 80052ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80052f2:	d04c      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fe:	d030      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005300:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005304:	d829      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005306:	2bc0      	cmp	r3, #192	; 0xc0
 8005308:	d02d      	beq.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800530a:	2bc0      	cmp	r3, #192	; 0xc0
 800530c:	d825      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	d018      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005312:	2b80      	cmp	r3, #128	; 0x80
 8005314:	d821      	bhi.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d002      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d007      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800531e:	e01c      	b.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005320:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	4a62      	ldr	r2, [pc, #392]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800532a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800532c:	e01c      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800532e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005332:	3308      	adds	r3, #8
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f002 fab8 	bl	80078ac <RCCEx_PLL2_Config>
 800533c:	4603      	mov	r3, r0
 800533e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005342:	e011      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005348:	3328      	adds	r3, #40	; 0x28
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fb5f 	bl	8007a10 <RCCEx_PLL3_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005360:	e002      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005362:	bf00      	nop
 8005364:	e000      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005368:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005370:	4b4f      	ldr	r3, [pc, #316]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005374:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	4a4c      	ldr	r2, [pc, #304]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005380:	430b      	orrs	r3, r1
 8005382:	6513      	str	r3, [r2, #80]	; 0x50
 8005384:	e003      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800538a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800538e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005396:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800539a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800539e:	2300      	movs	r3, #0
 80053a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80053a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80053a8:	460b      	mov	r3, r1
 80053aa:	4313      	orrs	r3, r2
 80053ac:	d053      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80053ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80053b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053ba:	d035      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053c0:	d82e      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053c6:	d031      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053cc:	d828      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d2:	d01a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80053d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d8:	d822      	bhi.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80053de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e2:	d007      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053e4:	e01c      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e6:	4b32      	ldr	r3, [pc, #200]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	4a31      	ldr	r2, [pc, #196]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053f2:	e01c      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f8:	3308      	adds	r3, #8
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 fa55 	bl	80078ac <RCCEx_PLL2_Config>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005408:	e011      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800540a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800540e:	3328      	adds	r3, #40	; 0x28
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f002 fafc 	bl	8007a10 <RCCEx_PLL3_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800541e:	e006      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005426:	e002      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005428:	bf00      	nop
 800542a:	e000      	b.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800542c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005446:	4a1a      	ldr	r2, [pc, #104]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6593      	str	r3, [r2, #88]	; 0x58
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005462:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800546c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005470:	460b      	mov	r3, r1
 8005472:	4313      	orrs	r3, r2
 8005474:	d056      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800547e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005482:	d038      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005484:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005488:	d831      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800548a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800548e:	d034      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005490:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005494:	d82b      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800549a:	d01d      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800549c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a0:	d825      	bhi.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d006      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80054a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054aa:	d00a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80054ac:	e01f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80054ae:	bf00      	nop
 80054b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b4:	4ba2      	ldr	r3, [pc, #648]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4aa1      	ldr	r2, [pc, #644]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054c0:	e01c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c6:	3308      	adds	r3, #8
 80054c8:	2100      	movs	r1, #0
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f9ee 	bl	80078ac <RCCEx_PLL2_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054d6:	e011      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054dc:	3328      	adds	r3, #40	; 0x28
 80054de:	2100      	movs	r1, #0
 80054e0:	4618      	mov	r0, r3
 80054e2:	f002 fa95 	bl	8007a10 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ec:	e006      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054f4:	e002      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054f6:	bf00      	nop
 80054f8:	e000      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005504:	4b8e      	ldr	r3, [pc, #568]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005510:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005514:	4a8a      	ldr	r2, [pc, #552]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005516:	430b      	orrs	r3, r1
 8005518:	6593      	str	r3, [r2, #88]	; 0x58
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005520:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800553a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d03a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	2b30      	cmp	r3, #48	; 0x30
 800554c:	d01f      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800554e:	2b30      	cmp	r3, #48	; 0x30
 8005550:	d819      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005552:	2b20      	cmp	r3, #32
 8005554:	d00c      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005556:	2b20      	cmp	r3, #32
 8005558:	d815      	bhi.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d019      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800555e:	2b10      	cmp	r3, #16
 8005560:	d111      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005562:	4b77      	ldr	r3, [pc, #476]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	4a76      	ldr	r2, [pc, #472]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800556e:	e011      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005574:	3308      	adds	r3, #8
 8005576:	2102      	movs	r1, #2
 8005578:	4618      	mov	r0, r3
 800557a:	f002 f997 	bl	80078ac <RCCEx_PLL2_Config>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800559c:	4b68      	ldr	r3, [pc, #416]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800559e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	4a65      	ldr	r2, [pc, #404]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ac:	430b      	orrs	r3, r1
 80055ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055b0:	e003      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80055c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4313      	orrs	r3, r2
 80055d8:	d051      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e4:	d035      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ea:	d82e      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055f0:	d031      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055f6:	d828      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055fc:	d01a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005602:	d822      	bhi.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560c:	d007      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800560e:	e01c      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a4a      	ldr	r2, [pc, #296]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800561c:	e01c      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005622:	3308      	adds	r3, #8
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f002 f940 	bl	80078ac <RCCEx_PLL2_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005632:	e011      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005638:	3328      	adds	r3, #40	; 0x28
 800563a:	2100      	movs	r1, #0
 800563c:	4618      	mov	r0, r3
 800563e:	f002 f9e7 	bl	8007a10 <RCCEx_PLL3_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005648:	e006      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005650:	e002      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005652:	bf00      	nop
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005658:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005660:	4b37      	ldr	r3, [pc, #220]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005664:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566e:	4a34      	ldr	r2, [pc, #208]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005670:	430b      	orrs	r3, r1
 8005672:	6513      	str	r3, [r2, #80]	; 0x50
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800567a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005694:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005698:	460b      	mov	r3, r1
 800569a:	4313      	orrs	r3, r2
 800569c:	d056      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056a8:	d033      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80056aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056ae:	d82c      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056b4:	d02f      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80056b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056ba:	d826      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056c0:	d02b      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80056c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056c6:	d820      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056cc:	d012      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80056ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056d2:	d81a      	bhi.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d022      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056dc:	d115      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e2:	3308      	adds	r3, #8
 80056e4:	2101      	movs	r1, #1
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 f8e0 	bl	80078ac <RCCEx_PLL2_Config>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056f2:	e015      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f8:	3328      	adds	r3, #40	; 0x28
 80056fa:	2101      	movs	r1, #1
 80056fc:	4618      	mov	r0, r3
 80056fe:	f002 f987 	bl	8007a10 <RCCEx_PLL3_Config>
 8005702:	4603      	mov	r3, r0
 8005704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005708:	e00a      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005712:	bf00      	nop
 8005714:	e004      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10d      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005736:	4a02      	ldr	r2, [pc, #8]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6513      	str	r3, [r2, #80]	; 0x50
 800573c:	e006      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800573e:	bf00      	nop
 8005740:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800574c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005762:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005766:	460b      	mov	r3, r1
 8005768:	4313      	orrs	r3, r2
 800576a:	d055      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005778:	d033      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800577a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800577e:	d82c      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005784:	d02f      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578a:	d826      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x662>
 800578c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005790:	d02b      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005792:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005796:	d820      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800579c:	d012      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800579e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a2:	d81a      	bhi.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x662>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d022      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x676>
 80057a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ac:	d115      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b2:	3308      	adds	r3, #8
 80057b4:	2101      	movs	r1, #1
 80057b6:	4618      	mov	r0, r3
 80057b8:	f002 f878 	bl	80078ac <RCCEx_PLL2_Config>
 80057bc:	4603      	mov	r3, r0
 80057be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057c2:	e015      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c8:	3328      	adds	r3, #40	; 0x28
 80057ca:	2101      	movs	r1, #1
 80057cc:	4618      	mov	r0, r3
 80057ce:	f002 f91f 	bl	8007a10 <RCCEx_PLL3_Config>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057d8:	e00a      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057e2:	bf00      	nop
 80057e4:	e004      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057f8:	4ba3      	ldr	r3, [pc, #652]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005808:	4a9f      	ldr	r2, [pc, #636]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800580a:	430b      	orrs	r3, r1
 800580c:	6593      	str	r3, [r2, #88]	; 0x58
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005814:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005824:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800582e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d037      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005842:	d00e      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d816      	bhi.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d018      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800584e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005852:	d111      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005854:	4b8c      	ldr	r3, [pc, #560]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	4a8b      	ldr	r2, [pc, #556]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800585a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800585e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005860:	e00f      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005866:	3308      	adds	r3, #8
 8005868:	2101      	movs	r1, #1
 800586a:	4618      	mov	r0, r3
 800586c:	f002 f81e 	bl	80078ac <RCCEx_PLL2_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005876:	e004      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800587e:	e000      	b.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800588a:	4b7f      	ldr	r3, [pc, #508]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4a7b      	ldr	r2, [pc, #492]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800589a:	430b      	orrs	r3, r1
 800589c:	6513      	str	r3, [r2, #80]	; 0x50
 800589e:	e003      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80058a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80058b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058b8:	2300      	movs	r3, #0
 80058ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058be:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4313      	orrs	r3, r2
 80058c6:	d039      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d81c      	bhi.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x794>
 80058d2:	a201      	add	r2, pc, #4	; (adr r2, 80058d8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	08005915 	.word	0x08005915
 80058dc:	080058e9 	.word	0x080058e9
 80058e0:	080058f7 	.word	0x080058f7
 80058e4:	08005915 	.word	0x08005915
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e8:	4b67      	ldr	r3, [pc, #412]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	4a66      	ldr	r2, [pc, #408]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058f4:	e00f      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fa:	3308      	adds	r3, #8
 80058fc:	2102      	movs	r1, #2
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 ffd4 	bl	80078ac <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800590a:	e004      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005912:	e000      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800591e:	4b5a      	ldr	r3, [pc, #360]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005922:	f023 0103 	bic.w	r1, r3, #3
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800592a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592c:	4a56      	ldr	r2, [pc, #344]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800592e:	430b      	orrs	r3, r1
 8005930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005932:	e003      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800593c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005948:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005952:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	f000 809f 	beq.w	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800595e:	4b4b      	ldr	r3, [pc, #300]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4a      	ldr	r2, [pc, #296]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005968:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800596a:	f7fb ff59 	bl	8001820 <HAL_GetTick>
 800596e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005972:	e00b      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005974:	f7fb ff54 	bl	8001820 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b64      	cmp	r3, #100	; 0x64
 8005982:	d903      	bls.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800598a:	e005      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800598c:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0ed      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005998:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800599c:	2b00      	cmp	r3, #0
 800599e:	d179      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059a0:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ac:	4053      	eors	r3, r2
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d015      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059b6:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c2:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	4a30      	ldr	r2, [pc, #192]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ce:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	4a2d      	ldr	r2, [pc, #180]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059da:	4a2b      	ldr	r2, [pc, #172]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ee:	d118      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fb ff16 	bl	8001820 <HAL_GetTick>
 80059f4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059f8:	e00d      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fa:	f7fb ff11 	bl	8001820 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d903      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8005a14:	e005      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0eb      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d129      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a3a:	d10e      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a3c:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a4c:	091a      	lsrs	r2, r3, #4
 8005a4e:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a50:	4013      	ands	r3, r2
 8005a52:	4a0d      	ldr	r2, [pc, #52]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	6113      	str	r3, [r2, #16]
 8005a58:	e005      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a64:	6113      	str	r3, [r2, #16]
 8005a66:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a76:	4a04      	ldr	r2, [pc, #16]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7c:	e00e      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005a86:	e009      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	58024800 	.word	0x58024800
 8005a90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa4:	f002 0301 	and.w	r3, r2, #1
 8005aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ab2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	f000 8089 	beq.w	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac4:	2b28      	cmp	r3, #40	; 0x28
 8005ac6:	d86b      	bhi.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005ba9 	.word	0x08005ba9
 8005ad4:	08005ba1 	.word	0x08005ba1
 8005ad8:	08005ba1 	.word	0x08005ba1
 8005adc:	08005ba1 	.word	0x08005ba1
 8005ae0:	08005ba1 	.word	0x08005ba1
 8005ae4:	08005ba1 	.word	0x08005ba1
 8005ae8:	08005ba1 	.word	0x08005ba1
 8005aec:	08005ba1 	.word	0x08005ba1
 8005af0:	08005b75 	.word	0x08005b75
 8005af4:	08005ba1 	.word	0x08005ba1
 8005af8:	08005ba1 	.word	0x08005ba1
 8005afc:	08005ba1 	.word	0x08005ba1
 8005b00:	08005ba1 	.word	0x08005ba1
 8005b04:	08005ba1 	.word	0x08005ba1
 8005b08:	08005ba1 	.word	0x08005ba1
 8005b0c:	08005ba1 	.word	0x08005ba1
 8005b10:	08005b8b 	.word	0x08005b8b
 8005b14:	08005ba1 	.word	0x08005ba1
 8005b18:	08005ba1 	.word	0x08005ba1
 8005b1c:	08005ba1 	.word	0x08005ba1
 8005b20:	08005ba1 	.word	0x08005ba1
 8005b24:	08005ba1 	.word	0x08005ba1
 8005b28:	08005ba1 	.word	0x08005ba1
 8005b2c:	08005ba1 	.word	0x08005ba1
 8005b30:	08005ba9 	.word	0x08005ba9
 8005b34:	08005ba1 	.word	0x08005ba1
 8005b38:	08005ba1 	.word	0x08005ba1
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005ba1 	.word	0x08005ba1
 8005b44:	08005ba1 	.word	0x08005ba1
 8005b48:	08005ba1 	.word	0x08005ba1
 8005b4c:	08005ba1 	.word	0x08005ba1
 8005b50:	08005ba9 	.word	0x08005ba9
 8005b54:	08005ba1 	.word	0x08005ba1
 8005b58:	08005ba1 	.word	0x08005ba1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005ba1 	.word	0x08005ba1
 8005b64:	08005ba1 	.word	0x08005ba1
 8005b68:	08005ba1 	.word	0x08005ba1
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005ba9 	.word	0x08005ba9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b78:	3308      	adds	r3, #8
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fe95 	bl	80078ac <RCCEx_PLL2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b88:	e00f      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8e:	3328      	adds	r3, #40	; 0x28
 8005b90:	2101      	movs	r1, #1
 8005b92:	4618      	mov	r0, r3
 8005b94:	f001 ff3c 	bl	8007a10 <RCCEx_PLL3_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b9e:	e004      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ba6:	e000      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10a      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005bb2:	4bbf      	ldr	r3, [pc, #764]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc0:	4abb      	ldr	r2, [pc, #748]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	6553      	str	r3, [r2, #84]	; 0x54
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f002 0302 	and.w	r3, r2, #2
 8005bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005be6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d041      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d824      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c19 	.word	0x08005c19
 8005c08:	08005c2f 	.word	0x08005c2f
 8005c0c:	08005c4d 	.word	0x08005c4d
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c4d 	.word	0x08005c4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 fe43 	bl	80078ac <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e00f      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c32:	3328      	adds	r3, #40	; 0x28
 8005c34:	2101      	movs	r1, #1
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 feea 	bl	8007a10 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c42:	e004      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c4a:	e000      	b.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c56:	4b96      	ldr	r3, [pc, #600]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c5a:	f023 0107 	bic.w	r1, r3, #7
 8005c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c64:	4a92      	ldr	r2, [pc, #584]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	6553      	str	r3, [r2, #84]	; 0x54
 8005c6a:	e003      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7c:	f002 0304 	and.w	r3, r2, #4
 8005c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d044      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d825      	bhi.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005cf5 	.word	0x08005cf5
 8005cac:	08005cc1 	.word	0x08005cc1
 8005cb0:	08005cd7 	.word	0x08005cd7
 8005cb4:	08005cf5 	.word	0x08005cf5
 8005cb8:	08005cf5 	.word	0x08005cf5
 8005cbc:	08005cf5 	.word	0x08005cf5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 fdef 	bl	80078ac <RCCEx_PLL2_Config>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cd4:	e00f      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cda:	3328      	adds	r3, #40	; 0x28
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fe96 	bl	8007a10 <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cea:	e004      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10b      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cfe:	4b6c      	ldr	r3, [pc, #432]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d02:	f023 0107 	bic.w	r1, r3, #7
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d0e:	4a68      	ldr	r2, [pc, #416]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6593      	str	r3, [r2, #88]	; 0x58
 8005d14:	e003      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d26:	f002 0320 	and.w	r3, r2, #32
 8005d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	d055      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d4a:	d033      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d50:	d82c      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d02f      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5c:	d826      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d62:	d02b      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d68:	d820      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d6e:	d012      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d74:	d81a      	bhi.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d022      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7e:	d115      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d84:	3308      	adds	r3, #8
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 fd8f 	bl	80078ac <RCCEx_PLL2_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d94:	e015      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d9a:	3328      	adds	r3, #40	; 0x28
 8005d9c:	2102      	movs	r1, #2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 fe36 	bl	8007a10 <RCCEx_PLL3_Config>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005daa:	e00a      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005db2:	e006      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005db4:	bf00      	nop
 8005db6:	e004      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005db8:	bf00      	nop
 8005dba:	e002      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005dbc:	bf00      	nop
 8005dbe:	e000      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10b      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dca:	4b39      	ldr	r3, [pc, #228]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dda:	4a35      	ldr	r2, [pc, #212]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ddc:	430b      	orrs	r3, r1
 8005dde:	6553      	str	r3, [r2, #84]	; 0x54
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005de6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005e00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005e04:	460b      	mov	r3, r1
 8005e06:	4313      	orrs	r3, r2
 8005e08:	d058      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e12:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e16:	d033      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005e18:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e1c:	d82c      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e22:	d02f      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e28:	d826      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e2e:	d02b      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005e30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e34:	d820      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e3a:	d012      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d81a      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d022      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e4a:	d115      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e50:	3308      	adds	r3, #8
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fd29 	bl	80078ac <RCCEx_PLL2_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e60:	e015      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e66:	3328      	adds	r3, #40	; 0x28
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fdd0 	bl	8007a10 <RCCEx_PLL3_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e76:	e00a      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e7e:	e006      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e80:	bf00      	nop
 8005e82:	e004      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e84:	bf00      	nop
 8005e86:	e002      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e88:	bf00      	nop
 8005e8a:	e000      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10e      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ea6:	4a02      	ldr	r2, [pc, #8]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea8:	430b      	orrs	r3, r1
 8005eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8005eac:	e006      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005eae:	bf00      	nop
 8005eb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005eb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ed2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	d055      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ee4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ee8:	d033      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005eea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005eee:	d82c      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef4:	d02f      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efa:	d826      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005efc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f00:	d02b      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005f02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005f06:	d820      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f0c:	d012      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005f0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f12:	d81a      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d022      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1c:	d115      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f22:	3308      	adds	r3, #8
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fcc0 	bl	80078ac <RCCEx_PLL2_Config>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f32:	e015      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f38:	3328      	adds	r3, #40	; 0x28
 8005f3a:	2102      	movs	r1, #2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 fd67 	bl	8007a10 <RCCEx_PLL3_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f48:	e00a      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f52:	bf00      	nop
 8005f54:	e004      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f68:	4ba1      	ldr	r3, [pc, #644]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f78:	4a9d      	ldr	r2, [pc, #628]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f7a:	430b      	orrs	r3, r1
 8005f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f7e:	e003      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f90:	f002 0308 	and.w	r3, r2, #8
 8005f94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	d01e      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fba:	3328      	adds	r3, #40	; 0x28
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f001 fd26 	bl	8007a10 <RCCEx_PLL3_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fd0:	4b87      	ldr	r3, [pc, #540]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe0:	4a83      	ldr	r2, [pc, #524]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f002 0310 	and.w	r3, r2, #16
 8005ff2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ffc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006000:	460b      	mov	r3, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	d01e      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800600e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006012:	d10c      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006018:	3328      	adds	r3, #40	; 0x28
 800601a:	2102      	movs	r1, #2
 800601c:	4618      	mov	r0, r3
 800601e:	f001 fcf7 	bl	8007a10 <RCCEx_PLL3_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800602e:	4b70      	ldr	r3, [pc, #448]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800603a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800603e:	4a6c      	ldr	r2, [pc, #432]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006040:	430b      	orrs	r3, r1
 8006042:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800605a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800605e:	460b      	mov	r3, r1
 8006060:	4313      	orrs	r3, r2
 8006062:	d03e      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800606c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006070:	d022      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006076:	d81b      	bhi.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d00b      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006082:	e015      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006088:	3308      	adds	r3, #8
 800608a:	2100      	movs	r1, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f001 fc0d 	bl	80078ac <RCCEx_PLL2_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006098:	e00f      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	3328      	adds	r3, #40	; 0x28
 80060a0:	2102      	movs	r1, #2
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 fcb4 	bl	8007a10 <RCCEx_PLL3_Config>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80060ae:	e004      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060b6:	e000      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80060b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c2:	4b4b      	ldr	r3, [pc, #300]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060d2:	4a47      	ldr	r2, [pc, #284]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6593      	str	r3, [r2, #88]	; 0x58
 80060d8:	e003      	b.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80060f0:	2300      	movs	r3, #0
 80060f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060f8:	460b      	mov	r3, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	d03b      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800610a:	d01f      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800610c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006110:	d818      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006112:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006116:	d003      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006118:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800611c:	d007      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800611e:	e011      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006120:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006124:	4a32      	ldr	r2, [pc, #200]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800612a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800612c:	e00f      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006132:	3328      	adds	r3, #40	; 0x28
 8006134:	2101      	movs	r1, #1
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fc6a 	bl	8007a10 <RCCEx_PLL3_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006142:	e004      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800614c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10b      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006156:	4b26      	ldr	r3, [pc, #152]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006168:	430b      	orrs	r3, r1
 800616a:	6553      	str	r3, [r2, #84]	; 0x54
 800616c:	e003      	b.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006172:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006182:	673b      	str	r3, [r7, #112]	; 0x70
 8006184:	2300      	movs	r3, #0
 8006186:	677b      	str	r3, [r7, #116]	; 0x74
 8006188:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800618c:	460b      	mov	r3, r1
 800618e:	4313      	orrs	r3, r2
 8006190:	d034      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a0:	d007      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80061a2:	e011      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a4:	4b12      	ldr	r3, [pc, #72]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	4a11      	ldr	r2, [pc, #68]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061b0:	e00e      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80061b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061b6:	3308      	adds	r3, #8
 80061b8:	2102      	movs	r1, #2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 fb76 	bl	80078ac <RCCEx_PLL2_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061c6:	e003      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10d      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061d8:	4b05      	ldr	r3, [pc, #20]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e6:	4a02      	ldr	r2, [pc, #8]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061e8:	430b      	orrs	r3, r1
 80061ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061ec:	e006      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006208:	66bb      	str	r3, [r7, #104]	; 0x68
 800620a:	2300      	movs	r3, #0
 800620c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800620e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006212:	460b      	mov	r3, r1
 8006214:	4313      	orrs	r3, r2
 8006216:	d00c      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	3328      	adds	r3, #40	; 0x28
 800621e:	2102      	movs	r1, #2
 8006220:	4618      	mov	r0, r3
 8006222:	f001 fbf5 	bl	8007a10 <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006232:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800623e:	663b      	str	r3, [r7, #96]	; 0x60
 8006240:	2300      	movs	r3, #0
 8006242:	667b      	str	r3, [r7, #100]	; 0x64
 8006244:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006248:	460b      	mov	r3, r1
 800624a:	4313      	orrs	r3, r2
 800624c:	d038      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800624e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625a:	d018      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800625c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006260:	d811      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006266:	d014      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626c:	d80b      	bhi.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d011      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006276:	d106      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006278:	4bc3      	ldr	r3, [pc, #780]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	4ac2      	ldr	r2, [pc, #776]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006284:	e008      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800628c:	e004      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800628e:	bf00      	nop
 8006290:	e002      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006298:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a0:	4bb9      	ldr	r3, [pc, #740]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062b0:	4ab5      	ldr	r2, [pc, #724]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062b2:	430b      	orrs	r3, r1
 80062b4:	6553      	str	r3, [r2, #84]	; 0x54
 80062b6:	e003      	b.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ce:	2300      	movs	r3, #0
 80062d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062d6:	460b      	mov	r3, r1
 80062d8:	4313      	orrs	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062dc:	4baa      	ldr	r3, [pc, #680]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ea:	4aa7      	ldr	r2, [pc, #668]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80062fc:	653b      	str	r3, [r7, #80]	; 0x50
 80062fe:	2300      	movs	r3, #0
 8006300:	657b      	str	r3, [r7, #84]	; 0x54
 8006302:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d00a      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800630c:	4b9e      	ldr	r3, [pc, #632]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006318:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800631c:	4a9a      	ldr	r2, [pc, #616]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800631e:	430b      	orrs	r3, r1
 8006320:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800632e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006330:	2300      	movs	r3, #0
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006334:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006338:	460b      	mov	r3, r1
 800633a:	4313      	orrs	r3, r2
 800633c:	d009      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800633e:	4b92      	ldr	r3, [pc, #584]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006342:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634c:	4a8e      	ldr	r2, [pc, #568]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800634e:	430b      	orrs	r3, r1
 8006350:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006352:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800635e:	643b      	str	r3, [r7, #64]	; 0x40
 8006360:	2300      	movs	r3, #0
 8006362:	647b      	str	r3, [r7, #68]	; 0x44
 8006364:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006368:	460b      	mov	r3, r1
 800636a:	4313      	orrs	r3, r2
 800636c:	d00e      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800636e:	4b86      	ldr	r3, [pc, #536]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	4a85      	ldr	r2, [pc, #532]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006374:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006378:	6113      	str	r3, [r2, #16]
 800637a:	4b83      	ldr	r3, [pc, #524]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800637c:	6919      	ldr	r1, [r3, #16]
 800637e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006382:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006386:	4a80      	ldr	r2, [pc, #512]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006388:	430b      	orrs	r3, r1
 800638a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800638c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
 800639a:	2300      	movs	r3, #0
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800639e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80063a2:	460b      	mov	r3, r1
 80063a4:	4313      	orrs	r3, r2
 80063a6:	d009      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80063a8:	4b77      	ldr	r3, [pc, #476]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	4a74      	ldr	r2, [pc, #464]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063b8:	430b      	orrs	r3, r1
 80063ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80063c8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	d00a      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063d8:	4b6b      	ldr	r3, [pc, #428]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80063e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063e8:	4a67      	ldr	r2, [pc, #412]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063ea:	430b      	orrs	r3, r1
 80063ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	2100      	movs	r1, #0
 80063f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006400:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006404:	460b      	mov	r3, r1
 8006406:	4313      	orrs	r3, r2
 8006408:	d011      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640e:	3308      	adds	r3, #8
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f001 fa4a 	bl	80078ac <RCCEx_PLL2_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800641e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800642a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	2100      	movs	r1, #0
 8006438:	6239      	str	r1, [r7, #32]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
 8006440:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006444:	460b      	mov	r3, r1
 8006446:	4313      	orrs	r3, r2
 8006448:	d011      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800644a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644e:	3308      	adds	r3, #8
 8006450:	2101      	movs	r1, #1
 8006452:	4618      	mov	r0, r3
 8006454:	f001 fa2a 	bl	80078ac <RCCEx_PLL2_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800645e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800646a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	2100      	movs	r1, #0
 8006478:	61b9      	str	r1, [r7, #24]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d011      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648e:	3308      	adds	r3, #8
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fa0a 	bl	80078ac <RCCEx_PLL2_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800649e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80064ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	2100      	movs	r1, #0
 80064b8:	6139      	str	r1, [r7, #16]
 80064ba:	f003 0308 	and.w	r3, r3, #8
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064c4:	460b      	mov	r3, r1
 80064c6:	4313      	orrs	r3, r2
 80064c8:	d011      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ce:	3328      	adds	r3, #40	; 0x28
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fa9c 	bl	8007a10 <RCCEx_PLL3_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80064de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	2100      	movs	r1, #0
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	f003 0310 	and.w	r3, r3, #16
 80064fe:	60fb      	str	r3, [r7, #12]
 8006500:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006504:	460b      	mov	r3, r1
 8006506:	4313      	orrs	r3, r2
 8006508:	d011      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800650a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650e:	3328      	adds	r3, #40	; 0x28
 8006510:	2101      	movs	r1, #1
 8006512:	4618      	mov	r0, r3
 8006514:	f001 fa7c 	bl	8007a10 <RCCEx_PLL3_Config>
 8006518:	4603      	mov	r3, r0
 800651a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800651e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800652a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	2100      	movs	r1, #0
 8006538:	6039      	str	r1, [r7, #0]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	607b      	str	r3, [r7, #4]
 8006540:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d011      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800654a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800654e:	3328      	adds	r3, #40	; 0x28
 8006550:	2102      	movs	r1, #2
 8006552:	4618      	mov	r0, r3
 8006554:	f001 fa5c 	bl	8007a10 <RCCEx_PLL3_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800655e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800656a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800656e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	e000      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
}
 800657c:	4618      	mov	r0, r3
 800657e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006582:	46bd      	mov	sp, r7
 8006584:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006588:	58024400 	.word	0x58024400

0800658c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b090      	sub	sp, #64	; 0x40
 8006590:	af00      	add	r7, sp, #0
 8006592:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800659a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800659e:	430b      	orrs	r3, r1
 80065a0:	f040 8094 	bne.w	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80065a4:	4b9e      	ldr	r3, [pc, #632]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	f200 8087 	bhi.w	80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065d1 	.word	0x080065d1
 80065c0:	080065f9 	.word	0x080065f9
 80065c4:	08006621 	.word	0x08006621
 80065c8:	080066bd 	.word	0x080066bd
 80065cc:	08006649 	.word	0x08006649
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065d0:	4b93      	ldr	r3, [pc, #588]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065dc:	d108      	bne.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e2:	4618      	mov	r0, r3
 80065e4:	f001 f810 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065ec:	f000 bd45 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065f4:	f000 bd41 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065f8:	4b89      	ldr	r3, [pc, #548]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006604:	d108      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006606:	f107 0318 	add.w	r3, r7, #24
 800660a:	4618      	mov	r0, r3
 800660c:	f000 fd54 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006614:	f000 bd31 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006618:	2300      	movs	r3, #0
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661c:	f000 bd2d 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006620:	4b7f      	ldr	r3, [pc, #508]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662c:	d108      	bne.n	8006640 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800662e:	f107 030c 	add.w	r3, r7, #12
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fe94 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663c:	f000 bd1d 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006640:	2300      	movs	r3, #0
 8006642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006644:	f000 bd19 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006648:	4b75      	ldr	r3, [pc, #468]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800664a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006650:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006652:	4b73      	ldr	r3, [pc, #460]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b04      	cmp	r3, #4
 800665c:	d10c      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006664:	4b6e      	ldr	r3, [pc, #440]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	08db      	lsrs	r3, r3, #3
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	4a6d      	ldr	r2, [pc, #436]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006676:	e01f      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006678:	4b69      	ldr	r3, [pc, #420]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006684:	d106      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800668c:	d102      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800668e:	4b66      	ldr	r3, [pc, #408]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006692:	e011      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006694:	4b62      	ldr	r3, [pc, #392]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800669c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066a0:	d106      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80066a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a8:	d102      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066aa:	4b60      	ldr	r3, [pc, #384]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ae:	e003      	b.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80066b4:	f000 bce1 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066b8:	f000 bcdf 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066bc:	4b5c      	ldr	r3, [pc, #368]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c0:	f000 bcdb 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c8:	f000 bcd7 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80066cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80066d4:	430b      	orrs	r3, r1
 80066d6:	f040 80ad 	bne.w	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80066da:	4b51      	ldr	r3, [pc, #324]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80066e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ea:	d056      	beq.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f2:	f200 8090 	bhi.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	2bc0      	cmp	r3, #192	; 0xc0
 80066fa:	f000 8088 	beq.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006700:	2bc0      	cmp	r3, #192	; 0xc0
 8006702:	f200 8088 	bhi.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2b80      	cmp	r3, #128	; 0x80
 800670a:	d032      	beq.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2b80      	cmp	r3, #128	; 0x80
 8006710:	f200 8081 	bhi.w	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d014      	beq.n	800674a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006720:	e079      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006722:	4b3f      	ldr	r3, [pc, #252]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800672e:	d108      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006734:	4618      	mov	r0, r3
 8006736:	f000 ff67 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800673e:	f000 bc9c 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006746:	f000 bc98 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800674a:	4b35      	ldr	r3, [pc, #212]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006752:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006756:	d108      	bne.n	800676a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fcab 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006766:	f000 bc88 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800676e:	f000 bc84 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006772:	4b2b      	ldr	r3, [pc, #172]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800677a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677e:	d108      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006780:	f107 030c 	add.w	r3, r7, #12
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fdeb 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800678e:	f000 bc74 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006796:	f000 bc70 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800679a:	4b21      	ldr	r3, [pc, #132]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d10c      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067b6:	4b1a      	ldr	r3, [pc, #104]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	08db      	lsrs	r3, r3, #3
 80067bc:	f003 0303 	and.w	r3, r3, #3
 80067c0:	4a18      	ldr	r2, [pc, #96]	; (8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067c2:	fa22 f303 	lsr.w	r3, r2, r3
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c8:	e01f      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d106      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80067d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067de:	d102      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067e0:	4b11      	ldr	r3, [pc, #68]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e4:	e011      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e6:	4b0e      	ldr	r3, [pc, #56]	; (8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f2:	d106      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80067f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067fa:	d102      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067fc:	4b0b      	ldr	r3, [pc, #44]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006800:	e003      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006806:	f000 bc38 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800680a:	f000 bc36 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800680e:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006812:	f000 bc32 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800681a:	f000 bc2e 	b.w	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800681e:	bf00      	nop
 8006820:	58024400 	.word	0x58024400
 8006824:	03d09000 	.word	0x03d09000
 8006828:	003d0900 	.word	0x003d0900
 800682c:	017d7840 	.word	0x017d7840
 8006830:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006838:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800683c:	430b      	orrs	r3, r1
 800683e:	f040 809c 	bne.w	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006842:	4b9e      	ldr	r3, [pc, #632]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800684a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006852:	d054      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800685a:	f200 808b 	bhi.w	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006864:	f000 8083 	beq.w	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800686e:	f200 8081 	bhi.w	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006878:	d02f      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006880:	d878      	bhi.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800688e:	d012      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006890:	e070      	b.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006892:	4b8a      	ldr	r3, [pc, #552]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800689a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800689e:	d107      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 feaf 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ae:	e3e4      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b4:	e3e1      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068b6:	4b81      	ldr	r3, [pc, #516]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c2:	d107      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fbf5 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068d2:	e3d2      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d8:	e3cf      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068da:	4b78      	ldr	r3, [pc, #480]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e6:	d107      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e8:	f107 030c 	add.w	r3, r7, #12
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fd37 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068f6:	e3c0      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068fc:	e3bd      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068fe:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006906:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006908:	4b6c      	ldr	r3, [pc, #432]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b04      	cmp	r3, #4
 8006912:	d10c      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8006914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800691a:	4b68      	ldr	r3, [pc, #416]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	08db      	lsrs	r3, r3, #3
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	4a66      	ldr	r2, [pc, #408]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692c:	e01e      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800692e:	4b63      	ldr	r3, [pc, #396]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693a:	d106      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800693c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006942:	d102      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006944:	4b5f      	ldr	r3, [pc, #380]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006948:	e010      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800694a:	4b5c      	ldr	r3, [pc, #368]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695e:	d102      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006960:	4b59      	ldr	r3, [pc, #356]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	e002      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800696a:	e386      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800696c:	e385      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800696e:	4b57      	ldr	r3, [pc, #348]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006972:	e382      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006978:	e37f      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800697a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800697e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006982:	430b      	orrs	r3, r1
 8006984:	f040 80a7 	bne.w	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006988:	4b4c      	ldr	r3, [pc, #304]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006990:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006998:	d055      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069a0:	f200 8096 	bhi.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069aa:	f000 8084 	beq.w	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80069b4:	f200 808c 	bhi.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069be:	d030      	beq.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069c6:	f200 8083 	bhi.w	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069d6:	d012      	beq.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80069d8:	e07a      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069da:	4b38      	ldr	r3, [pc, #224]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069e6:	d107      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fe0b 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069f6:	e340      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	e33d      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069fe:	4b2f      	ldr	r3, [pc, #188]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a0a:	d107      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a0c:	f107 0318 	add.w	r3, r7, #24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fb51 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a1a:	e32e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a20:	e32b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a22:	4b26      	ldr	r3, [pc, #152]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2e:	d107      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fc93 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a3e:	e31c      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a44:	e319      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a46:	4b1d      	ldr	r3, [pc, #116]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d10c      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d109      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a62:	4b16      	ldr	r3, [pc, #88]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	08db      	lsrs	r3, r3, #3
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a74:	e01e      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a82:	d106      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a8a:	d102      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a8c:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a90:	e010      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a9e:	d106      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa6:	d102      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006aa8:	4b07      	ldr	r3, [pc, #28]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aac:	e002      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ab2:	e2e2      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ab4:	e2e1      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ab6:	4b05      	ldr	r3, [pc, #20]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aba:	e2de      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006abc:	58024400 	.word	0x58024400
 8006ac0:	03d09000 	.word	0x03d09000
 8006ac4:	003d0900 	.word	0x003d0900
 8006ac8:	017d7840 	.word	0x017d7840
 8006acc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ad4:	e2d1      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ada:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006ade:	430b      	orrs	r3, r1
 8006ae0:	f040 809c 	bne.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006ae4:	4b93      	ldr	r3, [pc, #588]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006aec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af4:	d054      	beq.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006afc:	f200 808b 	bhi.w	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b06:	f000 8083 	beq.w	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b10:	f200 8081 	bhi.w	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b1a:	d02f      	beq.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b22:	d878      	bhi.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b30:	d012      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b32:	e070      	b.n	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b34:	4b7f      	ldr	r3, [pc, #508]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b40:	d107      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fd5e 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b50:	e293      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b56:	e290      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b58:	4b76      	ldr	r3, [pc, #472]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b66:	f107 0318 	add.w	r3, r7, #24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 faa4 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b74:	e281      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7a:	e27e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b7c:	4b6d      	ldr	r3, [pc, #436]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b88:	d107      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8a:	f107 030c 	add.w	r3, r7, #12
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 fbe6 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b98:	e26f      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9e:	e26c      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ba0:	4b64      	ldr	r3, [pc, #400]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006baa:	4b62      	ldr	r3, [pc, #392]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d10c      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d109      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bbc:	4b5d      	ldr	r3, [pc, #372]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	08db      	lsrs	r3, r3, #3
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	4a5c      	ldr	r2, [pc, #368]	; (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bce:	e01e      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bd0:	4b58      	ldr	r3, [pc, #352]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bdc:	d106      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be4:	d102      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006be6:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bea:	e010      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bec:	4b51      	ldr	r3, [pc, #324]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c00:	d102      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c02:	4b4f      	ldr	r3, [pc, #316]	; (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c06:	e002      	b.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006c0c:	e235      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c0e:	e234      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c10:	4b4c      	ldr	r3, [pc, #304]	; (8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c14:	e231      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1a:	e22e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c20:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c24:	430b      	orrs	r3, r1
 8006c26:	f040 808f 	bne.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c2a:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c32:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c3a:	d06b      	beq.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c42:	d874      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c4a:	d056      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c52:	d86c      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c5a:	d03b      	beq.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c62:	d864      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6a:	d021      	beq.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c72:	d85c      	bhi.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c80:	d004      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006c82:	e054      	b.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006c84:	f7fe fa4c 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8006c88:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c8a:	e1f6      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c8c:	4b29      	ldr	r3, [pc, #164]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c98:	d107      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c9a:	f107 0318 	add.w	r3, r7, #24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fa0a 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ca8:	e1e7      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cae:	e1e4      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006cb0:	4b20      	ldr	r3, [pc, #128]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cbc:	d107      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 fb4c 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ccc:	e1d5      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cd2:	e1d2      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cd4:	4b17      	ldr	r3, [pc, #92]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d109      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce0:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	08db      	lsrs	r3, r3, #3
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006cec:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf2:	e1c2      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cf8:	e1bf      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006cfa:	4b0e      	ldr	r3, [pc, #56]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d06:	d102      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d0c:	e1b5      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d12:	e1b2      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006d14:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d20:	d102      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006d22:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d26:	e1a8      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d2c:	e1a5      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d32:	e1a2      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d34:	58024400 	.word	0x58024400
 8006d38:	03d09000 	.word	0x03d09000
 8006d3c:	003d0900 	.word	0x003d0900
 8006d40:	017d7840 	.word	0x017d7840
 8006d44:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d4c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006d50:	430b      	orrs	r3, r1
 8006d52:	d173      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d54:	4b9c      	ldr	r3, [pc, #624]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d64:	d02f      	beq.n	8006dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6c:	d863      	bhi.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d004      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d7a:	d012      	beq.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d7c:	e05b      	b.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d7e:	4b92      	ldr	r3, [pc, #584]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d8a:	d107      	bne.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d8c:	f107 0318 	add.w	r3, r7, #24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 f991 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d9a:	e16e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da0:	e16b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006da2:	4b89      	ldr	r3, [pc, #548]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dae:	d107      	bne.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	4618      	mov	r0, r3
 8006db6:	f000 fad3 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dbe:	e15c      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dc4:	e159      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dc6:	4b80      	ldr	r3, [pc, #512]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dd0:	4b7d      	ldr	r3, [pc, #500]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	d10c      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006de2:	4b79      	ldr	r3, [pc, #484]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f003 0303 	and.w	r3, r3, #3
 8006dec:	4a77      	ldr	r2, [pc, #476]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006dee:	fa22 f303 	lsr.w	r3, r2, r3
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	e01e      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006df6:	4b74      	ldr	r3, [pc, #464]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e02:	d106      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0a:	d102      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e0c:	4b70      	ldr	r3, [pc, #448]	; (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e10:	e010      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e12:	4b6d      	ldr	r3, [pc, #436]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1e:	d106      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e26:	d102      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e28:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	e002      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e32:	e122      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e34:	e121      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3a:	e11e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e40:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e44:	430b      	orrs	r3, r1
 8006e46:	d133      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e48:	4b5f      	ldr	r3, [pc, #380]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d004      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5e:	d012      	beq.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006e60:	e023      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e62:	4b59      	ldr	r3, [pc, #356]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e6e:	d107      	bne.n	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fbc7 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e7e:	e0fc      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e84:	e0f9      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e86:	4b50      	ldr	r3, [pc, #320]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e92:	d107      	bne.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e94:	f107 0318 	add.w	r3, r7, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 f90d 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ea2:	e0ea      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ea8:	e0e7      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006eae:	e0e4      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	f040 808d 	bne.w	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ebe:	4b42      	ldr	r3, [pc, #264]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006ec6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ece:	d06b      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed6:	d874      	bhi.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d056      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee6:	d86c      	bhi.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eee:	d03b      	beq.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ef6:	d864      	bhi.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efe:	d021      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f06:	d85c      	bhi.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f14:	d004      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006f16:	e054      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f18:	f000 f8b8 	bl	800708c <HAL_RCCEx_GetD3PCLK1Freq>
 8006f1c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f1e:	e0ac      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f20:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f8c0 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3c:	e09d      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f42:	e09a      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f44:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f50:	d107      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f52:	f107 030c 	add.w	r3, r7, #12
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fa02 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f60:	e08b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f66:	e088      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f68:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0304 	and.w	r3, r3, #4
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	d109      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f74:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	08db      	lsrs	r3, r3, #3
 8006f7a:	f003 0303 	and.w	r3, r3, #3
 8006f7e:	4a13      	ldr	r2, [pc, #76]	; (8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f86:	e078      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8c:	e075      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f8e:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa0:	e06b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa6:	e068      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fa8:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb4:	d102      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006fb6:	4b07      	ldr	r3, [pc, #28]	; (8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fba:	e05e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc0:	e05b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fc6:	e058      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fc8:	58024400 	.word	0x58024400
 8006fcc:	03d09000 	.word	0x03d09000
 8006fd0:	003d0900 	.word	0x003d0900
 8006fd4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fdc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	d148      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff4:	d02a      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffc:	d838      	bhi.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007000:	2b00      	cmp	r3, #0
 8007002:	d004      	beq.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8007004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800700a:	d00d      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800700c:	e030      	b.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800700e:	4b1d      	ldr	r3, [pc, #116]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800701a:	d102      	bne.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800701c:	4b1a      	ldr	r3, [pc, #104]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800701e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007020:	e02b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007026:	e028      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007028:	4b16      	ldr	r3, [pc, #88]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007034:	d107      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fae4 	bl	8007608 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007044:	e019      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800704a:	e016      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007058:	d107      	bne.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800705a:	f107 0318 	add.w	r3, r7, #24
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f82a 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007068:	e007      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800706e:	e004      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007070:	2300      	movs	r3, #0
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007074:	e001      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800707a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800707c:	4618      	mov	r0, r3
 800707e:	3740      	adds	r7, #64	; 0x40
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	58024400 	.word	0x58024400
 8007088:	017d7840 	.word	0x017d7840

0800708c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007090:	f7fe f816 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8007094:	4602      	mov	r2, r0
 8007096:	4b06      	ldr	r3, [pc, #24]	; (80070b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	4904      	ldr	r1, [pc, #16]	; (80070b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070a2:	5ccb      	ldrb	r3, [r1, r3]
 80070a4:	f003 031f 	and.w	r3, r3, #31
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	58024400 	.word	0x58024400
 80070b4:	08009664 	.word	0x08009664

080070b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b089      	sub	sp, #36	; 0x24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070c0:	4ba1      	ldr	r3, [pc, #644]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070ca:	4b9f      	ldr	r3, [pc, #636]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ce:	0b1b      	lsrs	r3, r3, #12
 80070d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070d6:	4b9c      	ldr	r3, [pc, #624]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	091b      	lsrs	r3, r3, #4
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070e2:	4b99      	ldr	r3, [pc, #612]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e6:	08db      	lsrs	r3, r3, #3
 80070e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	fb02 f303 	mul.w	r3, r2, r3
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 8111 	beq.w	8007328 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	2b02      	cmp	r3, #2
 800710a:	f000 8083 	beq.w	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b02      	cmp	r3, #2
 8007112:	f200 80a1 	bhi.w	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d056      	beq.n	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007122:	e099      	b.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007124:	4b88      	ldr	r3, [pc, #544]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0320 	and.w	r3, r3, #32
 800712c:	2b00      	cmp	r3, #0
 800712e:	d02d      	beq.n	800718c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007130:	4b85      	ldr	r3, [pc, #532]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	08db      	lsrs	r3, r3, #3
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	4a84      	ldr	r2, [pc, #528]	; (800734c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800713c:	fa22 f303 	lsr.w	r3, r2, r3
 8007140:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	ee07 3a90 	vmov	s15, r3
 8007148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b7b      	ldr	r3, [pc, #492]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800718a:	e087      	b.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b6a      	ldr	r3, [pc, #424]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ce:	e065      	b.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b59      	ldr	r3, [pc, #356]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007212:	e043      	b.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b48      	ldr	r3, [pc, #288]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a03 	vldr	s12, [r7, #12]
 800723a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007256:	e021      	b.n	800729c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007262:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726a:	4b37      	ldr	r3, [pc, #220]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727a:	ed97 6a03 	vldr	s12, [r7, #12]
 800727e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800729a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800729c:	4b2a      	ldr	r3, [pc, #168]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800729e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a0:	0a5b      	lsrs	r3, r3, #9
 80072a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a6:	ee07 3a90 	vmov	s15, r3
 80072aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80072ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c2:	ee17 2a90 	vmov	r2, s15
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072ca:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	0c1b      	lsrs	r3, r3, #16
 80072d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f0:	ee17 2a90 	vmov	r2, s15
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072f8:	4b13      	ldr	r3, [pc, #76]	; (8007348 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	0e1b      	lsrs	r3, r3, #24
 80072fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007302:	ee07 3a90 	vmov	s15, r3
 8007306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800730e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007312:	edd7 6a07 	vldr	s13, [r7, #28]
 8007316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800731a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800731e:	ee17 2a90 	vmov	r2, s15
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007326:	e008      	b.n	800733a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	609a      	str	r2, [r3, #8]
}
 800733a:	bf00      	nop
 800733c:	3724      	adds	r7, #36	; 0x24
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
 800734c:	03d09000 	.word	0x03d09000
 8007350:	46000000 	.word	0x46000000
 8007354:	4c742400 	.word	0x4c742400
 8007358:	4a742400 	.word	0x4a742400
 800735c:	4bbebc20 	.word	0x4bbebc20

08007360 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007360:	b480      	push	{r7}
 8007362:	b089      	sub	sp, #36	; 0x24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007368:	4ba1      	ldr	r3, [pc, #644]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800736a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007372:	4b9f      	ldr	r3, [pc, #636]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	0d1b      	lsrs	r3, r3, #20
 8007378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800737c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800737e:	4b9c      	ldr	r3, [pc, #624]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800738a:	4b99      	ldr	r3, [pc, #612]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	08db      	lsrs	r3, r3, #3
 8007390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	fb02 f303 	mul.w	r3, r2, r3
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8111 	beq.w	80075d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	f000 8083 	beq.w	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f200 80a1 	bhi.w	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d056      	beq.n	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073ca:	e099      	b.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073cc:	4b88      	ldr	r3, [pc, #544]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d02d      	beq.n	8007434 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073d8:	4b85      	ldr	r3, [pc, #532]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	08db      	lsrs	r3, r3, #3
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	4a84      	ldr	r2, [pc, #528]	; (80075f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
 80073e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	ee07 3a90 	vmov	s15, r3
 80073f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b7b      	ldr	r3, [pc, #492]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	ed97 6a03 	vldr	s12, [r7, #12]
 8007416:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007432:	e087      	b.n	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007446:	4b6a      	ldr	r3, [pc, #424]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	ed97 6a03 	vldr	s12, [r7, #12]
 800745a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007476:	e065      	b.n	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b59      	ldr	r3, [pc, #356]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a03 	vldr	s12, [r7, #12]
 800749e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ba:	e043      	b.n	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b48      	ldr	r3, [pc, #288]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fe:	e021      	b.n	8007544 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b37      	ldr	r3, [pc, #220]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a03 	vldr	s12, [r7, #12]
 8007526:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007542:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007544:	4b2a      	ldr	r3, [pc, #168]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	0a5b      	lsrs	r3, r3, #9
 800754a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754e:	ee07 3a90 	vmov	s15, r3
 8007552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007556:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800755a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800755e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800756a:	ee17 2a90 	vmov	r2, s15
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007572:	4b1f      	ldr	r3, [pc, #124]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	0c1b      	lsrs	r3, r3, #16
 8007578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800757c:	ee07 3a90 	vmov	s15, r3
 8007580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007588:	ee37 7a87 	vadd.f32	s14, s15, s14
 800758c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007598:	ee17 2a90 	vmov	r2, s15
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80075a0:	4b13      	ldr	r3, [pc, #76]	; (80075f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a4:	0e1b      	lsrs	r3, r3, #24
 80075a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80075be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c6:	ee17 2a90 	vmov	r2, s15
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075ce:	e008      	b.n	80075e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	609a      	str	r2, [r3, #8]
}
 80075e2:	bf00      	nop
 80075e4:	3724      	adds	r7, #36	; 0x24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	58024400 	.word	0x58024400
 80075f4:	03d09000 	.word	0x03d09000
 80075f8:	46000000 	.word	0x46000000
 80075fc:	4c742400 	.word	0x4c742400
 8007600:	4a742400 	.word	0x4a742400
 8007604:	4bbebc20 	.word	0x4bbebc20

08007608 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007608:	b480      	push	{r7}
 800760a:	b089      	sub	sp, #36	; 0x24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007610:	4ba0      	ldr	r3, [pc, #640]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	f003 0303 	and.w	r3, r3, #3
 8007618:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800761a:	4b9e      	ldr	r3, [pc, #632]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	091b      	lsrs	r3, r3, #4
 8007620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007624:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007626:	4b9b      	ldr	r3, [pc, #620]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762a:	f003 0301 	and.w	r3, r3, #1
 800762e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007630:	4b98      	ldr	r3, [pc, #608]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007634:	08db      	lsrs	r3, r3, #3
 8007636:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	fb02 f303 	mul.w	r3, r2, r3
 8007640:	ee07 3a90 	vmov	s15, r3
 8007644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007648:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8111 	beq.w	8007876 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b02      	cmp	r3, #2
 8007658:	f000 8083 	beq.w	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	2b02      	cmp	r3, #2
 8007660:	f200 80a1 	bhi.w	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d056      	beq.n	800771e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007670:	e099      	b.n	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007672:	4b88      	ldr	r3, [pc, #544]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d02d      	beq.n	80076da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800767e:	4b85      	ldr	r3, [pc, #532]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	08db      	lsrs	r3, r3, #3
 8007684:	f003 0303 	and.w	r3, r3, #3
 8007688:	4a83      	ldr	r2, [pc, #524]	; (8007898 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800768a:	fa22 f303 	lsr.w	r3, r2, r3
 800768e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a8:	4b7a      	ldr	r3, [pc, #488]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076d8:	e087      	b.n	80077ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ec:	4b69      	ldr	r3, [pc, #420]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007700:	eddf 5a66 	vldr	s11, [pc, #408]	; 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007718:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771c:	e065      	b.n	80077ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80078a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800772c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007730:	4b58      	ldr	r3, [pc, #352]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007740:	ed97 6a03 	vldr	s12, [r7, #12]
 8007744:	eddf 5a55 	vldr	s11, [pc, #340]	; 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007760:	e043      	b.n	80077ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80078a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007774:	4b47      	ldr	r3, [pc, #284]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007784:	ed97 6a03 	vldr	s12, [r7, #12]
 8007788:	eddf 5a44 	vldr	s11, [pc, #272]	; 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800778c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a4:	e021      	b.n	80077ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80078a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80077b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b8:	4b36      	ldr	r3, [pc, #216]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80077cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800789c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80077ea:	4b2a      	ldr	r3, [pc, #168]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	0a5b      	lsrs	r3, r3, #9
 80077f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007800:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007804:	edd7 6a07 	vldr	s13, [r7, #28]
 8007808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800780c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007810:	ee17 2a90 	vmov	r2, s15
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007818:	4b1e      	ldr	r3, [pc, #120]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	0c1b      	lsrs	r3, r3, #16
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800782e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007832:	edd7 6a07 	vldr	s13, [r7, #28]
 8007836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800783a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800783e:	ee17 2a90 	vmov	r2, s15
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007846:	4b13      	ldr	r3, [pc, #76]	; (8007894 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	0e1b      	lsrs	r3, r3, #24
 800784c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800785c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007860:	edd7 6a07 	vldr	s13, [r7, #28]
 8007864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007868:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800786c:	ee17 2a90 	vmov	r2, s15
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007874:	e008      	b.n	8007888 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	609a      	str	r2, [r3, #8]
}
 8007888:	bf00      	nop
 800788a:	3724      	adds	r7, #36	; 0x24
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	58024400 	.word	0x58024400
 8007898:	03d09000 	.word	0x03d09000
 800789c:	46000000 	.word	0x46000000
 80078a0:	4c742400 	.word	0x4c742400
 80078a4:	4a742400 	.word	0x4a742400
 80078a8:	4bbebc20 	.word	0x4bbebc20

080078ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078ba:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80078bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b03      	cmp	r3, #3
 80078c4:	d101      	bne.n	80078ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e099      	b.n	80079fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078ca:	4b4f      	ldr	r3, [pc, #316]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a4e      	ldr	r2, [pc, #312]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7f9 ffa3 	bl	8001820 <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078dc:	e008      	b.n	80078f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078de:	f7f9 ff9f 	bl	8001820 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e086      	b.n	80079fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078f0:	4b45      	ldr	r3, [pc, #276]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1f0      	bne.n	80078de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80078fc:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80078fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007900:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	031b      	lsls	r3, r3, #12
 800790a:	493f      	ldr	r1, [pc, #252]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 800790c:	4313      	orrs	r3, r2
 800790e:	628b      	str	r3, [r1, #40]	; 0x28
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	3b01      	subs	r3, #1
 8007916:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	3b01      	subs	r3, #1
 8007920:	025b      	lsls	r3, r3, #9
 8007922:	b29b      	uxth	r3, r3
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	3b01      	subs	r3, #1
 800792c:	041b      	lsls	r3, r3, #16
 800792e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	3b01      	subs	r3, #1
 800793a:	061b      	lsls	r3, r3, #24
 800793c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007940:	4931      	ldr	r1, [pc, #196]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007946:	4b30      	ldr	r3, [pc, #192]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	492d      	ldr	r1, [pc, #180]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007954:	4313      	orrs	r3, r2
 8007956:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007958:	4b2b      	ldr	r3, [pc, #172]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	f023 0220 	bic.w	r2, r3, #32
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	4928      	ldr	r1, [pc, #160]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800796a:	4b27      	ldr	r3, [pc, #156]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 800796c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796e:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007970:	f023 0310 	bic.w	r3, r3, #16
 8007974:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007976:	4b24      	ldr	r3, [pc, #144]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800797a:	4b24      	ldr	r3, [pc, #144]	; (8007a0c <RCCEx_PLL2_Config+0x160>)
 800797c:	4013      	ands	r3, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	69d2      	ldr	r2, [r2, #28]
 8007982:	00d2      	lsls	r2, r2, #3
 8007984:	4920      	ldr	r1, [pc, #128]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800798a:	4b1f      	ldr	r3, [pc, #124]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	4a1e      	ldr	r2, [pc, #120]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 8007990:	f043 0310 	orr.w	r3, r3, #16
 8007994:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800799c:	4b1a      	ldr	r3, [pc, #104]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a19      	ldr	r2, [pc, #100]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079a8:	e00f      	b.n	80079ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d106      	bne.n	80079be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079b0:	4b15      	ldr	r3, [pc, #84]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b4:	4a14      	ldr	r2, [pc, #80]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079bc:	e005      	b.n	80079ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079be:	4b12      	ldr	r3, [pc, #72]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	4a11      	ldr	r2, [pc, #68]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a0e      	ldr	r2, [pc, #56]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d6:	f7f9 ff23 	bl	8001820 <HAL_GetTick>
 80079da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079dc:	e008      	b.n	80079f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079de:	f7f9 ff1f 	bl	8001820 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e006      	b.n	80079fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079f0:	4b05      	ldr	r3, [pc, #20]	; (8007a08 <RCCEx_PLL2_Config+0x15c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0f0      	beq.n	80079de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	ffff0007 	.word	0xffff0007

08007a10 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a1e:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b03      	cmp	r3, #3
 8007a28:	d101      	bne.n	8007a2e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e099      	b.n	8007b62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a2e:	4b4f      	ldr	r3, [pc, #316]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a4e      	ldr	r2, [pc, #312]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3a:	f7f9 fef1 	bl	8001820 <HAL_GetTick>
 8007a3e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a40:	e008      	b.n	8007a54 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a42:	f7f9 feed 	bl	8001820 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e086      	b.n	8007b62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a54:	4b45      	ldr	r3, [pc, #276]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1f0      	bne.n	8007a42 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a60:	4b42      	ldr	r3, [pc, #264]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a64:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	051b      	lsls	r3, r3, #20
 8007a6e:	493f      	ldr	r1, [pc, #252]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	628b      	str	r3, [r1, #40]	; 0x28
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	3b01      	subs	r3, #1
 8007a84:	025b      	lsls	r3, r3, #9
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	691b      	ldr	r3, [r3, #16]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	061b      	lsls	r3, r3, #24
 8007aa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007aa4:	4931      	ldr	r1, [pc, #196]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007aaa:	4b30      	ldr	r3, [pc, #192]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	492d      	ldr	r1, [pc, #180]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007abc:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	4928      	ldr	r1, [pc, #160]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ace:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ada:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007adc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <RCCEx_PLL3_Config+0x160>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	69d2      	ldr	r2, [r2, #28]
 8007ae6:	00d2      	lsls	r2, r2, #3
 8007ae8:	4920      	ldr	r1, [pc, #128]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007aee:	4b1f      	ldr	r3, [pc, #124]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	4a1e      	ldr	r2, [pc, #120]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d106      	bne.n	8007b0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b0c:	e00f      	b.n	8007b2e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d106      	bne.n	8007b22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b14:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b18:	4a14      	ldr	r2, [pc, #80]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b20:	e005      	b.n	8007b2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b22:	4b12      	ldr	r3, [pc, #72]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	4a11      	ldr	r2, [pc, #68]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b2e:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a0e      	ldr	r2, [pc, #56]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b3a:	f7f9 fe71 	bl	8001820 <HAL_GetTick>
 8007b3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b40:	e008      	b.n	8007b54 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b42:	f7f9 fe6d 	bl	8001820 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e006      	b.n	8007b62 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <RCCEx_PLL3_Config+0x15c>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d0f0      	beq.n	8007b42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	58024400 	.word	0x58024400
 8007b70:	ffff0007 	.word	0xffff0007

08007b74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d101      	bne.n	8007b86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e10f      	b.n	8007da6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a87      	ldr	r2, [pc, #540]	; (8007db0 <HAL_SPI_Init+0x23c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00f      	beq.n	8007bb6 <HAL_SPI_Init+0x42>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a86      	ldr	r2, [pc, #536]	; (8007db4 <HAL_SPI_Init+0x240>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_SPI_Init+0x42>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a84      	ldr	r2, [pc, #528]	; (8007db8 <HAL_SPI_Init+0x244>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d005      	beq.n	8007bb6 <HAL_SPI_Init+0x42>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	2b0f      	cmp	r3, #15
 8007bb0:	d901      	bls.n	8007bb6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e0f7      	b.n	8007da6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fd08 	bl	80085cc <SPI_GetPacketSize>
 8007bbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a7b      	ldr	r2, [pc, #492]	; (8007db0 <HAL_SPI_Init+0x23c>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d00c      	beq.n	8007be2 <HAL_SPI_Init+0x6e>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a79      	ldr	r2, [pc, #484]	; (8007db4 <HAL_SPI_Init+0x240>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d007      	beq.n	8007be2 <HAL_SPI_Init+0x6e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a78      	ldr	r2, [pc, #480]	; (8007db8 <HAL_SPI_Init+0x244>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d002      	beq.n	8007be2 <HAL_SPI_Init+0x6e>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d811      	bhi.n	8007c06 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007be6:	4a72      	ldr	r2, [pc, #456]	; (8007db0 <HAL_SPI_Init+0x23c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d009      	beq.n	8007c00 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a70      	ldr	r2, [pc, #448]	; (8007db4 <HAL_SPI_Init+0x240>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_SPI_Init+0x8c>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a6f      	ldr	r2, [pc, #444]	; (8007db8 <HAL_SPI_Init+0x244>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d104      	bne.n	8007c0a <HAL_SPI_Init+0x96>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b10      	cmp	r3, #16
 8007c04:	d901      	bls.n	8007c0a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e0cd      	b.n	8007da6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d106      	bne.n	8007c24 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7f9 fb94 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0201 	bic.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007c46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c50:	d119      	bne.n	8007c86 <HAL_SPI_Init+0x112>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c5a:	d103      	bne.n	8007c64 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d008      	beq.n	8007c76 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10c      	bne.n	8007c86 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c74:	d107      	bne.n	8007c86 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00f      	beq.n	8007cb2 <HAL_SPI_Init+0x13e>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b06      	cmp	r3, #6
 8007c98:	d90b      	bls.n	8007cb2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e007      	b.n	8007cc2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cc0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69da      	ldr	r2, [r3, #28]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	ea42 0103 	orr.w	r1, r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	431a      	orrs	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d22:	ea42 0103 	orr.w	r1, r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d113      	bne.n	8007d62 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d4c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d60:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0201 	bic.w	r2, r2, #1
 8007d70:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00a      	beq.n	8007d94 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	40013000 	.word	0x40013000
 8007db4:	40003800 	.word	0x40003800
 8007db8:	40003c00 	.word	0x40003c00

08007dbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08e      	sub	sp, #56	; 0x38
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3320      	adds	r3, #32
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3330      	adds	r3, #48	; 0x30
 8007dd8:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dde:	095b      	lsrs	r3, r3, #5
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	3301      	adds	r3, #1
 8007de4:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007de6:	f7f9 fd1b 	bl	8001820 <HAL_GetTick>
 8007dea:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007dec:	887b      	ldrh	r3, [r7, #2]
 8007dee:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007df0:	887b      	ldrh	r3, [r7, #2]
 8007df2:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d001      	beq.n	8007e04 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007e00:	2302      	movs	r3, #2
 8007e02:	e310      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x5a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d002      	beq.n	8007e16 <HAL_SPI_TransmitReceive+0x5a>
 8007e10:	887b      	ldrh	r3, [r7, #2]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e305      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_SPI_TransmitReceive+0x6c>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e2fe      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2205      	movs	r2, #5
 8007e34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	887a      	ldrh	r2, [r7, #2]
 8007e4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	887a      	ldrh	r2, [r7, #2]
 8007e52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	887a      	ldrh	r2, [r7, #2]
 8007e60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	887a      	ldrh	r2, [r7, #2]
 8007e68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68da      	ldr	r2, [r3, #12]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007e86:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a70      	ldr	r2, [pc, #448]	; (8008050 <HAL_SPI_TransmitReceive+0x294>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d009      	beq.n	8007ea6 <HAL_SPI_TransmitReceive+0xea>
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a6f      	ldr	r2, [pc, #444]	; (8008054 <HAL_SPI_TransmitReceive+0x298>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d004      	beq.n	8007ea6 <HAL_SPI_TransmitReceive+0xea>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a6d      	ldr	r2, [pc, #436]	; (8008058 <HAL_SPI_TransmitReceive+0x29c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d102      	bne.n	8007eac <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eaa:	e001      	b.n	8007eb0 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007eac:	2308      	movs	r3, #8
 8007eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4b69      	ldr	r3, [pc, #420]	; (800805c <HAL_SPI_TransmitReceive+0x2a0>)
 8007eb8:	4013      	ands	r3, r2
 8007eba:	8879      	ldrh	r1, [r7, #2]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	6812      	ldr	r2, [r2, #0]
 8007ec0:	430b      	orrs	r3, r1
 8007ec2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0201 	orr.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007edc:	d107      	bne.n	8007eee <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	f240 80a2 	bls.w	800803c <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efa:	089b      	lsrs	r3, r3, #2
 8007efc:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007efe:	e094      	b.n	800802a <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	695b      	ldr	r3, [r3, #20]
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d120      	bne.n	8007f50 <HAL_SPI_TransmitReceive+0x194>
 8007f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d01d      	beq.n	8007f50 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007f14:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007f16:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d217      	bcs.n	8007f50 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f30:	1d1a      	adds	r2, r3, #4
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	b29a      	uxth	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f4e:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007f58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d065      	beq.n	800802a <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d118      	bne.n	8007f9e <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f76:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f9a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f9c:	e045      	b.n	800802a <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007f9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007fa0:	8bfb      	ldrh	r3, [r7, #30]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d21d      	bcs.n	8007fe2 <HAL_SPI_TransmitReceive+0x226>
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d018      	beq.n	8007fe2 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fba:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fc0:	1d1a      	adds	r2, r3, #4
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fde:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fe0:	e023      	b.n	800802a <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fe2:	f7f9 fc1d 	bl	8001820 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d803      	bhi.n	8007ffa <HAL_SPI_TransmitReceive+0x23e>
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff8:	d102      	bne.n	8008000 <HAL_SPI_TransmitReceive+0x244>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d114      	bne.n	800802a <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 fa15 	bl	8008430 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800800c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e1fd      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800802a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800802c:	2b00      	cmp	r3, #0
 800802e:	f47f af67 	bne.w	8007f00 <HAL_SPI_TransmitReceive+0x144>
 8008032:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008034:	2b00      	cmp	r3, #0
 8008036:	f47f af63 	bne.w	8007f00 <HAL_SPI_TransmitReceive+0x144>
 800803a:	e1ce      	b.n	80083da <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b07      	cmp	r3, #7
 8008042:	f240 81c2 	bls.w	80083ca <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	085b      	lsrs	r3, r3, #1
 800804a:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800804c:	e0c9      	b.n	80081e2 <HAL_SPI_TransmitReceive+0x426>
 800804e:	bf00      	nop
 8008050:	40013000 	.word	0x40013000
 8008054:	40003800 	.word	0x40003800
 8008058:	40003c00 	.word	0x40003c00
 800805c:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b02      	cmp	r3, #2
 800806c:	d11f      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x2f2>
 800806e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008070:	2b00      	cmp	r3, #0
 8008072:	d01c      	beq.n	80080ae <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008074:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008076:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800807a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800807c:	429a      	cmp	r2, r3
 800807e:	d216      	bcs.n	80080ae <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008084:	881a      	ldrh	r2, [r3, #0]
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800808e:	1c9a      	adds	r2, r3, #2
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800809a:	b29b      	uxth	r3, r3
 800809c:	3b01      	subs	r3, #1
 800809e:	b29a      	uxth	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080ac:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80080b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 8092 	beq.w	80081e2 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	695b      	ldr	r3, [r3, #20]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d118      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080d0:	6a3a      	ldr	r2, [r7, #32]
 80080d2:	8812      	ldrh	r2, [r2, #0]
 80080d4:	b292      	uxth	r2, r2
 80080d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080dc:	1c9a      	adds	r2, r3, #2
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080fa:	853b      	strh	r3, [r7, #40]	; 0x28
 80080fc:	e071      	b.n	80081e2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80080fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008100:	8bfb      	ldrh	r3, [r7, #30]
 8008102:	429a      	cmp	r2, r3
 8008104:	d228      	bcs.n	8008158 <HAL_SPI_TransmitReceive+0x39c>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d023      	beq.n	8008158 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008114:	6a3a      	ldr	r2, [r7, #32]
 8008116:	8812      	ldrh	r2, [r2, #0]
 8008118:	b292      	uxth	r2, r2
 800811a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008120:	1c9a      	adds	r2, r3, #2
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	8812      	ldrh	r2, [r2, #0]
 800812e:	b292      	uxth	r2, r2
 8008130:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008142:	b29b      	uxth	r3, r3
 8008144:	3b02      	subs	r3, #2
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008154:	853b      	strh	r3, [r7, #40]	; 0x28
 8008156:	e044      	b.n	80081e2 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008158:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800815a:	2b01      	cmp	r3, #1
 800815c:	d11d      	bne.n	800819a <HAL_SPI_TransmitReceive+0x3de>
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d018      	beq.n	800819a <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800816c:	6a3a      	ldr	r2, [r7, #32]
 800816e:	8812      	ldrh	r2, [r2, #0]
 8008170:	b292      	uxth	r2, r2
 8008172:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008178:	1c9a      	adds	r2, r3, #2
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	b29a      	uxth	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008196:	853b      	strh	r3, [r7, #40]	; 0x28
 8008198:	e023      	b.n	80081e2 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800819a:	f7f9 fb41 	bl	8001820 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d803      	bhi.n	80081b2 <HAL_SPI_TransmitReceive+0x3f6>
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b0:	d102      	bne.n	80081b8 <HAL_SPI_TransmitReceive+0x3fc>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d114      	bne.n	80081e2 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f939 	bl	8008430 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e121      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80081e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f47f af3b 	bne.w	8008060 <HAL_SPI_TransmitReceive+0x2a4>
 80081ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f af37 	bne.w	8008060 <HAL_SPI_TransmitReceive+0x2a4>
 80081f2:	e0f2      	b.n	80083da <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d121      	bne.n	8008246 <HAL_SPI_TransmitReceive+0x48a>
 8008202:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008204:	2b00      	cmp	r3, #0
 8008206:	d01e      	beq.n	8008246 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008208:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800820a:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 800820c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008210:	429a      	cmp	r2, r3
 8008212:	d218      	bcs.n	8008246 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3320      	adds	r3, #32
 800821e:	7812      	ldrb	r2, [r2, #0]
 8008220:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008244:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	695b      	ldr	r3, [r3, #20]
 800824c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800824e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	f000 80ba 	beq.w	80083ca <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b01      	cmp	r3, #1
 8008262:	d11b      	bne.n	800829c <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008270:	7812      	ldrb	r2, [r2, #0]
 8008272:	b2d2      	uxtb	r2, r2
 8008274:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008298:	853b      	strh	r3, [r7, #40]	; 0x28
 800829a:	e096      	b.n	80083ca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800829c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800829e:	8bfb      	ldrh	r3, [r7, #30]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d24a      	bcs.n	800833a <HAL_SPI_TransmitReceive+0x57e>
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d045      	beq.n	800833a <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ba:	7812      	ldrb	r2, [r2, #0]
 80082bc:	b2d2      	uxtb	r2, r2
 80082be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800830e:	7812      	ldrb	r2, [r2, #0]
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008324:	b29b      	uxth	r3, r3
 8008326:	3b04      	subs	r3, #4
 8008328:	b29a      	uxth	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008336:	853b      	strh	r3, [r7, #40]	; 0x28
 8008338:	e047      	b.n	80083ca <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800833a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800833c:	2b03      	cmp	r3, #3
 800833e:	d820      	bhi.n	8008382 <HAL_SPI_TransmitReceive+0x5c6>
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01b      	beq.n	8008382 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008356:	7812      	ldrb	r2, [r2, #0]
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008360:	1c5a      	adds	r2, r3, #1
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800837e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008380:	e023      	b.n	80083ca <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008382:	f7f9 fa4d 	bl	8001820 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800838e:	429a      	cmp	r2, r3
 8008390:	d803      	bhi.n	800839a <HAL_SPI_TransmitReceive+0x5de>
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d102      	bne.n	80083a0 <HAL_SPI_TransmitReceive+0x5e4>
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d114      	bne.n	80083ca <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f845 	bl	8008430 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e02d      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80083ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f47f af11 	bne.w	80081f4 <HAL_SPI_TransmitReceive+0x438>
 80083d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f af0d 	bne.w	80081f4 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2200      	movs	r2, #0
 80083e2:	2108      	movs	r1, #8
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f8c3 	bl	8008570 <SPI_WaitOnFlagUntilTimeout>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d007      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f6:	f043 0220 	orr.w	r2, r3, #32
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 f815 	bl	8008430 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e000      	b.n	8008426 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8008424:	2300      	movs	r3, #0
  }
}
 8008426:	4618      	mov	r0, r3
 8008428:	3730      	adds	r7, #48	; 0x30
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
 800842e:	bf00      	nop

08008430 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0208 	orr.w	r2, r2, #8
 800844e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f042 0210 	orr.w	r2, r2, #16
 800845e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f022 0201 	bic.w	r2, r2, #1
 800846e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	6919      	ldr	r1, [r3, #16]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b3c      	ldr	r3, [pc, #240]	; (800856c <SPI_CloseTransfer+0x13c>)
 800847c:	400b      	ands	r3, r1
 800847e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800848e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b04      	cmp	r3, #4
 800849a:	d014      	beq.n	80084c6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f003 0320 	and.w	r3, r3, #32
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00f      	beq.n	80084c6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	699a      	ldr	r2, [r3, #24]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0220 	orr.w	r2, r2, #32
 80084c4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d014      	beq.n	80084fc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00f      	beq.n	80084fc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084e2:	f043 0204 	orr.w	r2, r3, #4
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699a      	ldr	r2, [r3, #24]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084fa:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00f      	beq.n	8008526 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850c:	f043 0201 	orr.w	r2, r3, #1
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008524:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00f      	beq.n	8008550 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	f043 0208 	orr.w	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800854e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008560:	bf00      	nop
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	fffffc90 	.word	0xfffffc90

08008570 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	4613      	mov	r3, r2
 800857e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008580:	e010      	b.n	80085a4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008582:	f7f9 f94d 	bl	8001820 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d803      	bhi.n	800859a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d102      	bne.n	80085a0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e00f      	b.n	80085c4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695a      	ldr	r2, [r3, #20]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	4013      	ands	r3, r2
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	bf0c      	ite	eq
 80085b4:	2301      	moveq	r3, #1
 80085b6:	2300      	movne	r3, #0
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d0df      	beq.n	8008582 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d8:	095b      	lsrs	r3, r3, #5
 80085da:	3301      	adds	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	3307      	adds	r3, #7
 80085ea:	08db      	lsrs	r3, r3, #3
 80085ec:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	fb02 f303 	mul.w	r3, r2, r3
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b082      	sub	sp, #8
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e03c      	b.n	800868e <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7f8 fef7 	bl	800141c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0201 	bic.w	r2, r2, #1
 8008644:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f85c 	bl	8008704 <USART_SetConfig>
 800864c:	4603      	mov	r3, r0
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e01b      	b.n	800868e <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008664:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689a      	ldr	r2, [r3, #8]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008674:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f042 0201 	orr.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fd5c 	bl	8009144 <USART_CheckIdleState>
 800868c:	4603      	mov	r3, r0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	603b      	str	r3, [r7, #0]
 80086a2:	4613      	mov	r3, r2
 80086a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80086a6:	e018      	b.n	80086da <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ae:	d014      	beq.n	80086da <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b0:	f7f9 f8b6 	bl	8001820 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d302      	bcc.n	80086c6 <USART_WaitOnFlagUntilTimeout+0x30>
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e00f      	b.n	80086fa <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69da      	ldr	r2, [r3, #28]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4013      	ands	r3, r2
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d0d7      	beq.n	80086a8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
	...

08008704 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08e      	sub	sp, #56	; 0x38
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008712:	2300      	movs	r3, #0
 8008714:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695b      	ldr	r3, [r3, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800872a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	4bc9      	ldr	r3, [pc, #804]	; (8008a58 <USART_SetConfig+0x354>)
 8008734:	4013      	ands	r3, r2
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800873c:	430b      	orrs	r3, r1
 800873e:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008744:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874c:	4313      	orrs	r3, r2
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	4313      	orrs	r3, r2
 800875a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800875c:	4313      	orrs	r3, r2
 800875e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008766:	4313      	orrs	r3, r2
 8008768:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	4bba      	ldr	r3, [pc, #744]	; (8008a5c <USART_SetConfig+0x358>)
 8008772:	4013      	ands	r3, r2
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6812      	ldr	r2, [r2, #0]
 8008778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800877a:	430b      	orrs	r3, r1
 800877c:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	f023 010f 	bic.w	r1, r3, #15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	430a      	orrs	r2, r1
 8008792:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4ab1      	ldr	r2, [pc, #708]	; (8008a60 <USART_SetConfig+0x35c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d176      	bne.n	800888c <USART_SetConfig+0x188>
 800879e:	4bb1      	ldr	r3, [pc, #708]	; (8008a64 <USART_SetConfig+0x360>)
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087a6:	2b28      	cmp	r3, #40	; 0x28
 80087a8:	d86c      	bhi.n	8008884 <USART_SetConfig+0x180>
 80087aa:	a201      	add	r2, pc, #4	; (adr r2, 80087b0 <USART_SetConfig+0xac>)
 80087ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b0:	08008855 	.word	0x08008855
 80087b4:	08008885 	.word	0x08008885
 80087b8:	08008885 	.word	0x08008885
 80087bc:	08008885 	.word	0x08008885
 80087c0:	08008885 	.word	0x08008885
 80087c4:	08008885 	.word	0x08008885
 80087c8:	08008885 	.word	0x08008885
 80087cc:	08008885 	.word	0x08008885
 80087d0:	0800885d 	.word	0x0800885d
 80087d4:	08008885 	.word	0x08008885
 80087d8:	08008885 	.word	0x08008885
 80087dc:	08008885 	.word	0x08008885
 80087e0:	08008885 	.word	0x08008885
 80087e4:	08008885 	.word	0x08008885
 80087e8:	08008885 	.word	0x08008885
 80087ec:	08008885 	.word	0x08008885
 80087f0:	08008865 	.word	0x08008865
 80087f4:	08008885 	.word	0x08008885
 80087f8:	08008885 	.word	0x08008885
 80087fc:	08008885 	.word	0x08008885
 8008800:	08008885 	.word	0x08008885
 8008804:	08008885 	.word	0x08008885
 8008808:	08008885 	.word	0x08008885
 800880c:	08008885 	.word	0x08008885
 8008810:	0800886d 	.word	0x0800886d
 8008814:	08008885 	.word	0x08008885
 8008818:	08008885 	.word	0x08008885
 800881c:	08008885 	.word	0x08008885
 8008820:	08008885 	.word	0x08008885
 8008824:	08008885 	.word	0x08008885
 8008828:	08008885 	.word	0x08008885
 800882c:	08008885 	.word	0x08008885
 8008830:	08008875 	.word	0x08008875
 8008834:	08008885 	.word	0x08008885
 8008838:	08008885 	.word	0x08008885
 800883c:	08008885 	.word	0x08008885
 8008840:	08008885 	.word	0x08008885
 8008844:	08008885 	.word	0x08008885
 8008848:	08008885 	.word	0x08008885
 800884c:	08008885 	.word	0x08008885
 8008850:	0800887d 	.word	0x0800887d
 8008854:	2301      	movs	r3, #1
 8008856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800885a:	e112      	b.n	8008a82 <USART_SetConfig+0x37e>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008862:	e10e      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800886a:	e10a      	b.n	8008a82 <USART_SetConfig+0x37e>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008872:	e106      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800887a:	e102      	b.n	8008a82 <USART_SetConfig+0x37e>
 800887c:	2320      	movs	r3, #32
 800887e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008882:	e0fe      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800888a:	e0fa      	b.n	8008a82 <USART_SetConfig+0x37e>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a75      	ldr	r2, [pc, #468]	; (8008a68 <USART_SetConfig+0x364>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d130      	bne.n	80088f8 <USART_SetConfig+0x1f4>
 8008896:	4b73      	ldr	r3, [pc, #460]	; (8008a64 <USART_SetConfig+0x360>)
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d826      	bhi.n	80088f0 <USART_SetConfig+0x1ec>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <USART_SetConfig+0x1a4>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	080088d1 	.word	0x080088d1
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088e1 	.word	0x080088e1
 80088bc:	080088e9 	.word	0x080088e9
 80088c0:	2300      	movs	r3, #0
 80088c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088c6:	e0dc      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088c8:	2302      	movs	r3, #2
 80088ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088ce:	e0d8      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088d0:	2304      	movs	r3, #4
 80088d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088d6:	e0d4      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088d8:	2308      	movs	r3, #8
 80088da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088de:	e0d0      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088e0:	2310      	movs	r3, #16
 80088e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088e6:	e0cc      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088e8:	2320      	movs	r3, #32
 80088ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088ee:	e0c8      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088f0:	2340      	movs	r3, #64	; 0x40
 80088f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088f6:	e0c4      	b.n	8008a82 <USART_SetConfig+0x37e>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a5b      	ldr	r2, [pc, #364]	; (8008a6c <USART_SetConfig+0x368>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d130      	bne.n	8008964 <USART_SetConfig+0x260>
 8008902:	4b58      	ldr	r3, [pc, #352]	; (8008a64 <USART_SetConfig+0x360>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	2b05      	cmp	r3, #5
 800890c:	d826      	bhi.n	800895c <USART_SetConfig+0x258>
 800890e:	a201      	add	r2, pc, #4	; (adr r2, 8008914 <USART_SetConfig+0x210>)
 8008910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008914:	0800892d 	.word	0x0800892d
 8008918:	08008935 	.word	0x08008935
 800891c:	0800893d 	.word	0x0800893d
 8008920:	08008945 	.word	0x08008945
 8008924:	0800894d 	.word	0x0800894d
 8008928:	08008955 	.word	0x08008955
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008932:	e0a6      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008934:	2302      	movs	r3, #2
 8008936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800893a:	e0a2      	b.n	8008a82 <USART_SetConfig+0x37e>
 800893c:	2304      	movs	r3, #4
 800893e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008942:	e09e      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800894a:	e09a      	b.n	8008a82 <USART_SetConfig+0x37e>
 800894c:	2310      	movs	r3, #16
 800894e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008952:	e096      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008954:	2320      	movs	r3, #32
 8008956:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800895a:	e092      	b.n	8008a82 <USART_SetConfig+0x37e>
 800895c:	2340      	movs	r3, #64	; 0x40
 800895e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008962:	e08e      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a41      	ldr	r2, [pc, #260]	; (8008a70 <USART_SetConfig+0x36c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	f040 8086 	bne.w	8008a7c <USART_SetConfig+0x378>
 8008970:	4b3c      	ldr	r3, [pc, #240]	; (8008a64 <USART_SetConfig+0x360>)
 8008972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008978:	2b28      	cmp	r3, #40	; 0x28
 800897a:	d87b      	bhi.n	8008a74 <USART_SetConfig+0x370>
 800897c:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <USART_SetConfig+0x280>)
 800897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008982:	bf00      	nop
 8008984:	08008a29 	.word	0x08008a29
 8008988:	08008a75 	.word	0x08008a75
 800898c:	08008a75 	.word	0x08008a75
 8008990:	08008a75 	.word	0x08008a75
 8008994:	08008a75 	.word	0x08008a75
 8008998:	08008a75 	.word	0x08008a75
 800899c:	08008a75 	.word	0x08008a75
 80089a0:	08008a75 	.word	0x08008a75
 80089a4:	08008a31 	.word	0x08008a31
 80089a8:	08008a75 	.word	0x08008a75
 80089ac:	08008a75 	.word	0x08008a75
 80089b0:	08008a75 	.word	0x08008a75
 80089b4:	08008a75 	.word	0x08008a75
 80089b8:	08008a75 	.word	0x08008a75
 80089bc:	08008a75 	.word	0x08008a75
 80089c0:	08008a75 	.word	0x08008a75
 80089c4:	08008a39 	.word	0x08008a39
 80089c8:	08008a75 	.word	0x08008a75
 80089cc:	08008a75 	.word	0x08008a75
 80089d0:	08008a75 	.word	0x08008a75
 80089d4:	08008a75 	.word	0x08008a75
 80089d8:	08008a75 	.word	0x08008a75
 80089dc:	08008a75 	.word	0x08008a75
 80089e0:	08008a75 	.word	0x08008a75
 80089e4:	08008a41 	.word	0x08008a41
 80089e8:	08008a75 	.word	0x08008a75
 80089ec:	08008a75 	.word	0x08008a75
 80089f0:	08008a75 	.word	0x08008a75
 80089f4:	08008a75 	.word	0x08008a75
 80089f8:	08008a75 	.word	0x08008a75
 80089fc:	08008a75 	.word	0x08008a75
 8008a00:	08008a75 	.word	0x08008a75
 8008a04:	08008a49 	.word	0x08008a49
 8008a08:	08008a75 	.word	0x08008a75
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	08008a75 	.word	0x08008a75
 8008a14:	08008a75 	.word	0x08008a75
 8008a18:	08008a75 	.word	0x08008a75
 8008a1c:	08008a75 	.word	0x08008a75
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	08008a51 	.word	0x08008a51
 8008a28:	2301      	movs	r3, #1
 8008a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a2e:	e028      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a30:	2302      	movs	r3, #2
 8008a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a36:	e024      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a3e:	e020      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a40:	2308      	movs	r3, #8
 8008a42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a46:	e01c      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a4e:	e018      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a50:	2320      	movs	r3, #32
 8008a52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a56:	e014      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a58:	cfff69f3 	.word	0xcfff69f3
 8008a5c:	ffffc0f6 	.word	0xffffc0f6
 8008a60:	40011000 	.word	0x40011000
 8008a64:	58024400 	.word	0x58024400
 8008a68:	40004400 	.word	0x40004400
 8008a6c:	40004800 	.word	0x40004800
 8008a70:	40011400 	.word	0x40011400
 8008a74:	2340      	movs	r3, #64	; 0x40
 8008a76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a7a:	e002      	b.n	8008a82 <USART_SetConfig+0x37e>
 8008a7c:	2340      	movs	r3, #64	; 0x40
 8008a7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 8008a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a86:	2b20      	cmp	r3, #32
 8008a88:	f200 8329 	bhi.w	80090de <USART_SetConfig+0x9da>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <USART_SetConfig+0x390>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008b19 	.word	0x08008b19
 8008a98:	08008bcf 	.word	0x08008bcf
 8008a9c:	08008c85 	.word	0x08008c85
 8008aa0:	080090df 	.word	0x080090df
 8008aa4:	08008d3f 	.word	0x08008d3f
 8008aa8:	080090df 	.word	0x080090df
 8008aac:	080090df 	.word	0x080090df
 8008ab0:	080090df 	.word	0x080090df
 8008ab4:	08008df9 	.word	0x08008df9
 8008ab8:	080090df 	.word	0x080090df
 8008abc:	080090df 	.word	0x080090df
 8008ac0:	080090df 	.word	0x080090df
 8008ac4:	080090df 	.word	0x080090df
 8008ac8:	080090df 	.word	0x080090df
 8008acc:	080090df 	.word	0x080090df
 8008ad0:	080090df 	.word	0x080090df
 8008ad4:	08008f71 	.word	0x08008f71
 8008ad8:	080090df 	.word	0x080090df
 8008adc:	080090df 	.word	0x080090df
 8008ae0:	080090df 	.word	0x080090df
 8008ae4:	080090df 	.word	0x080090df
 8008ae8:	080090df 	.word	0x080090df
 8008aec:	080090df 	.word	0x080090df
 8008af0:	080090df 	.word	0x080090df
 8008af4:	080090df 	.word	0x080090df
 8008af8:	080090df 	.word	0x080090df
 8008afc:	080090df 	.word	0x080090df
 8008b00:	080090df 	.word	0x080090df
 8008b04:	080090df 	.word	0x080090df
 8008b08:	080090df 	.word	0x080090df
 8008b0c:	080090df 	.word	0x080090df
 8008b10:	080090df 	.word	0x080090df
 8008b14:	0800902d 	.word	0x0800902d
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b18:	f7fc fb02 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8008b1c:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d044      	beq.n	8008bb0 <USART_SetConfig+0x4ac>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d03e      	beq.n	8008bac <USART_SetConfig+0x4a8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d038      	beq.n	8008ba8 <USART_SetConfig+0x4a4>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	2b03      	cmp	r3, #3
 8008b3c:	d032      	beq.n	8008ba4 <USART_SetConfig+0x4a0>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	2b04      	cmp	r3, #4
 8008b44:	d02c      	beq.n	8008ba0 <USART_SetConfig+0x49c>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d026      	beq.n	8008b9c <USART_SetConfig+0x498>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	2b06      	cmp	r3, #6
 8008b54:	d020      	beq.n	8008b98 <USART_SetConfig+0x494>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	2b07      	cmp	r3, #7
 8008b5c:	d01a      	beq.n	8008b94 <USART_SetConfig+0x490>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d014      	beq.n	8008b90 <USART_SetConfig+0x48c>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d00e      	beq.n	8008b8c <USART_SetConfig+0x488>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	2b0a      	cmp	r3, #10
 8008b74:	d008      	beq.n	8008b88 <USART_SetConfig+0x484>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7a:	2b0b      	cmp	r3, #11
 8008b7c:	d102      	bne.n	8008b84 <USART_SetConfig+0x480>
 8008b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b82:	e016      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e014      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	e012      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b8c:	2340      	movs	r3, #64	; 0x40
 8008b8e:	e010      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b90:	2320      	movs	r3, #32
 8008b92:	e00e      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b94:	2310      	movs	r3, #16
 8008b96:	e00c      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	e00a      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008b9c:	230a      	movs	r3, #10
 8008b9e:	e008      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	e006      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008ba4:	2306      	movs	r3, #6
 8008ba6:	e004      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008ba8:	2304      	movs	r3, #4
 8008baa:	e002      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e000      	b.n	8008bb2 <USART_SetConfig+0x4ae>
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb8:	005a      	lsls	r2, r3, #1
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	085b      	lsrs	r3, r3, #1
 8008bc0:	441a      	add	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008bcc:	e28b      	b.n	80090e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bce:	f7fc fabd 	bl	800514c <HAL_RCC_GetPCLK2Freq>
 8008bd2:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d044      	beq.n	8008c66 <USART_SetConfig+0x562>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d03e      	beq.n	8008c62 <USART_SetConfig+0x55e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d038      	beq.n	8008c5e <USART_SetConfig+0x55a>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d032      	beq.n	8008c5a <USART_SetConfig+0x556>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d02c      	beq.n	8008c56 <USART_SetConfig+0x552>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b05      	cmp	r3, #5
 8008c02:	d026      	beq.n	8008c52 <USART_SetConfig+0x54e>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	2b06      	cmp	r3, #6
 8008c0a:	d020      	beq.n	8008c4e <USART_SetConfig+0x54a>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b07      	cmp	r3, #7
 8008c12:	d01a      	beq.n	8008c4a <USART_SetConfig+0x546>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b08      	cmp	r3, #8
 8008c1a:	d014      	beq.n	8008c46 <USART_SetConfig+0x542>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c20:	2b09      	cmp	r3, #9
 8008c22:	d00e      	beq.n	8008c42 <USART_SetConfig+0x53e>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c28:	2b0a      	cmp	r3, #10
 8008c2a:	d008      	beq.n	8008c3e <USART_SetConfig+0x53a>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b0b      	cmp	r3, #11
 8008c32:	d102      	bne.n	8008c3a <USART_SetConfig+0x536>
 8008c34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c38:	e016      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e014      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c3e:	2380      	movs	r3, #128	; 0x80
 8008c40:	e012      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c42:	2340      	movs	r3, #64	; 0x40
 8008c44:	e010      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c46:	2320      	movs	r3, #32
 8008c48:	e00e      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c4a:	2310      	movs	r3, #16
 8008c4c:	e00c      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	e00a      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c52:	230a      	movs	r3, #10
 8008c54:	e008      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c56:	2308      	movs	r3, #8
 8008c58:	e006      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c5a:	2306      	movs	r3, #6
 8008c5c:	e004      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c5e:	2304      	movs	r3, #4
 8008c60:	e002      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c62:	2302      	movs	r3, #2
 8008c64:	e000      	b.n	8008c68 <USART_SetConfig+0x564>
 8008c66:	2301      	movs	r3, #1
 8008c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6e:	005a      	lsls	r2, r3, #1
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	441a      	add	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008c82:	e230      	b.n	80090e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c84:	f107 0318 	add.w	r3, r7, #24
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fa15 	bl	80070b8 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d044      	beq.n	8008d22 <USART_SetConfig+0x61e>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d03e      	beq.n	8008d1e <USART_SetConfig+0x61a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d038      	beq.n	8008d1a <USART_SetConfig+0x616>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d032      	beq.n	8008d16 <USART_SetConfig+0x612>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d02c      	beq.n	8008d12 <USART_SetConfig+0x60e>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b05      	cmp	r3, #5
 8008cbe:	d026      	beq.n	8008d0e <USART_SetConfig+0x60a>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b06      	cmp	r3, #6
 8008cc6:	d020      	beq.n	8008d0a <USART_SetConfig+0x606>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b07      	cmp	r3, #7
 8008cce:	d01a      	beq.n	8008d06 <USART_SetConfig+0x602>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d014      	beq.n	8008d02 <USART_SetConfig+0x5fe>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d00e      	beq.n	8008cfe <USART_SetConfig+0x5fa>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	2b0a      	cmp	r3, #10
 8008ce6:	d008      	beq.n	8008cfa <USART_SetConfig+0x5f6>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b0b      	cmp	r3, #11
 8008cee:	d102      	bne.n	8008cf6 <USART_SetConfig+0x5f2>
 8008cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf4:	e016      	b.n	8008d24 <USART_SetConfig+0x620>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e014      	b.n	8008d24 <USART_SetConfig+0x620>
 8008cfa:	2380      	movs	r3, #128	; 0x80
 8008cfc:	e012      	b.n	8008d24 <USART_SetConfig+0x620>
 8008cfe:	2340      	movs	r3, #64	; 0x40
 8008d00:	e010      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d02:	2320      	movs	r3, #32
 8008d04:	e00e      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d06:	2310      	movs	r3, #16
 8008d08:	e00c      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d0a:	230c      	movs	r3, #12
 8008d0c:	e00a      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d0e:	230a      	movs	r3, #10
 8008d10:	e008      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d12:	2308      	movs	r3, #8
 8008d14:	e006      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d16:	2306      	movs	r3, #6
 8008d18:	e004      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d1a:	2304      	movs	r3, #4
 8008d1c:	e002      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e000      	b.n	8008d24 <USART_SetConfig+0x620>
 8008d22:	2301      	movs	r3, #1
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	005a      	lsls	r2, r3, #1
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	441a      	add	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3a:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008d3c:	e1d3      	b.n	80090e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d3e:	f107 030c 	add.w	r3, r7, #12
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fb0c 	bl	8007360 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d044      	beq.n	8008ddc <USART_SetConfig+0x6d8>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d03e      	beq.n	8008dd8 <USART_SetConfig+0x6d4>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d038      	beq.n	8008dd4 <USART_SetConfig+0x6d0>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b03      	cmp	r3, #3
 8008d68:	d032      	beq.n	8008dd0 <USART_SetConfig+0x6cc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d02c      	beq.n	8008dcc <USART_SetConfig+0x6c8>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d026      	beq.n	8008dc8 <USART_SetConfig+0x6c4>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b06      	cmp	r3, #6
 8008d80:	d020      	beq.n	8008dc4 <USART_SetConfig+0x6c0>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b07      	cmp	r3, #7
 8008d88:	d01a      	beq.n	8008dc0 <USART_SetConfig+0x6bc>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d014      	beq.n	8008dbc <USART_SetConfig+0x6b8>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b09      	cmp	r3, #9
 8008d98:	d00e      	beq.n	8008db8 <USART_SetConfig+0x6b4>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b0a      	cmp	r3, #10
 8008da0:	d008      	beq.n	8008db4 <USART_SetConfig+0x6b0>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b0b      	cmp	r3, #11
 8008da8:	d102      	bne.n	8008db0 <USART_SetConfig+0x6ac>
 8008daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dae:	e016      	b.n	8008dde <USART_SetConfig+0x6da>
 8008db0:	2301      	movs	r3, #1
 8008db2:	e014      	b.n	8008dde <USART_SetConfig+0x6da>
 8008db4:	2380      	movs	r3, #128	; 0x80
 8008db6:	e012      	b.n	8008dde <USART_SetConfig+0x6da>
 8008db8:	2340      	movs	r3, #64	; 0x40
 8008dba:	e010      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	e00e      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	e00c      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dc4:	230c      	movs	r3, #12
 8008dc6:	e00a      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dc8:	230a      	movs	r3, #10
 8008dca:	e008      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dcc:	2308      	movs	r3, #8
 8008dce:	e006      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dd0:	2306      	movs	r3, #6
 8008dd2:	e004      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	e002      	b.n	8008dde <USART_SetConfig+0x6da>
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e000      	b.n	8008dde <USART_SetConfig+0x6da>
 8008ddc:	2301      	movs	r3, #1
 8008dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008de2:	005a      	lsls	r2, r3, #1
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	085b      	lsrs	r3, r3, #1
 8008dea:	441a      	add	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df4:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008df6:	e176      	b.n	80090e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df8:	4b89      	ldr	r3, [pc, #548]	; (8009020 <USART_SetConfig+0x91c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0320 	and.w	r3, r3, #32
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d05d      	beq.n	8008ec0 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8008e04:	4b86      	ldr	r3, [pc, #536]	; (8009020 <USART_SetConfig+0x91c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	08db      	lsrs	r3, r3, #3
 8008e0a:	f003 0303 	and.w	r3, r3, #3
 8008e0e:	4a85      	ldr	r2, [pc, #532]	; (8009024 <USART_SetConfig+0x920>)
 8008e10:	40da      	lsrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d044      	beq.n	8008ea4 <USART_SetConfig+0x7a0>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d03e      	beq.n	8008ea0 <USART_SetConfig+0x79c>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d038      	beq.n	8008e9c <USART_SetConfig+0x798>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d032      	beq.n	8008e98 <USART_SetConfig+0x794>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d02c      	beq.n	8008e94 <USART_SetConfig+0x790>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d026      	beq.n	8008e90 <USART_SetConfig+0x78c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b06      	cmp	r3, #6
 8008e48:	d020      	beq.n	8008e8c <USART_SetConfig+0x788>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b07      	cmp	r3, #7
 8008e50:	d01a      	beq.n	8008e88 <USART_SetConfig+0x784>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2b08      	cmp	r3, #8
 8008e58:	d014      	beq.n	8008e84 <USART_SetConfig+0x780>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d00e      	beq.n	8008e80 <USART_SetConfig+0x77c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	2b0a      	cmp	r3, #10
 8008e68:	d008      	beq.n	8008e7c <USART_SetConfig+0x778>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6e:	2b0b      	cmp	r3, #11
 8008e70:	d102      	bne.n	8008e78 <USART_SetConfig+0x774>
 8008e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e76:	e016      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e014      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	e012      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e80:	2340      	movs	r3, #64	; 0x40
 8008e82:	e010      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e84:	2320      	movs	r3, #32
 8008e86:	e00e      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e88:	2310      	movs	r3, #16
 8008e8a:	e00c      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e8c:	230c      	movs	r3, #12
 8008e8e:	e00a      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e90:	230a      	movs	r3, #10
 8008e92:	e008      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e94:	2308      	movs	r3, #8
 8008e96:	e006      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e98:	2306      	movs	r3, #6
 8008e9a:	e004      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008e9c:	2304      	movs	r3, #4
 8008e9e:	e002      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e000      	b.n	8008ea6 <USART_SetConfig+0x7a2>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eaa:	005a      	lsls	r2, r3, #1
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	441a      	add	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ebc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8008ebe:	e112      	b.n	80090e6 <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d044      	beq.n	8008f52 <USART_SetConfig+0x84e>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d03e      	beq.n	8008f4e <USART_SetConfig+0x84a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d038      	beq.n	8008f4a <USART_SetConfig+0x846>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d032      	beq.n	8008f46 <USART_SetConfig+0x842>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d02c      	beq.n	8008f42 <USART_SetConfig+0x83e>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b05      	cmp	r3, #5
 8008eee:	d026      	beq.n	8008f3e <USART_SetConfig+0x83a>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b06      	cmp	r3, #6
 8008ef6:	d020      	beq.n	8008f3a <USART_SetConfig+0x836>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b07      	cmp	r3, #7
 8008efe:	d01a      	beq.n	8008f36 <USART_SetConfig+0x832>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b08      	cmp	r3, #8
 8008f06:	d014      	beq.n	8008f32 <USART_SetConfig+0x82e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2b09      	cmp	r3, #9
 8008f0e:	d00e      	beq.n	8008f2e <USART_SetConfig+0x82a>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f14:	2b0a      	cmp	r3, #10
 8008f16:	d008      	beq.n	8008f2a <USART_SetConfig+0x826>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	2b0b      	cmp	r3, #11
 8008f1e:	d102      	bne.n	8008f26 <USART_SetConfig+0x822>
 8008f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f24:	e016      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f26:	2301      	movs	r3, #1
 8008f28:	e014      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f2a:	2380      	movs	r3, #128	; 0x80
 8008f2c:	e012      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	e010      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f32:	2320      	movs	r3, #32
 8008f34:	e00e      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f36:	2310      	movs	r3, #16
 8008f38:	e00c      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	e00a      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f3e:	230a      	movs	r3, #10
 8008f40:	e008      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f42:	2308      	movs	r3, #8
 8008f44:	e006      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f46:	2306      	movs	r3, #6
 8008f48:	e004      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f4a:	2304      	movs	r3, #4
 8008f4c:	e002      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e000      	b.n	8008f54 <USART_SetConfig+0x850>
 8008f52:	2301      	movs	r3, #1
 8008f54:	4a33      	ldr	r2, [pc, #204]	; (8009024 <USART_SetConfig+0x920>)
 8008f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5a:	005a      	lsls	r2, r3, #1
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	085b      	lsrs	r3, r3, #1
 8008f62:	441a      	add	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008f6e:	e0ba      	b.n	80090e6 <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d044      	beq.n	8009002 <USART_SetConfig+0x8fe>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d03e      	beq.n	8008ffe <USART_SetConfig+0x8fa>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d038      	beq.n	8008ffa <USART_SetConfig+0x8f6>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b03      	cmp	r3, #3
 8008f8e:	d032      	beq.n	8008ff6 <USART_SetConfig+0x8f2>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d02c      	beq.n	8008ff2 <USART_SetConfig+0x8ee>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d026      	beq.n	8008fee <USART_SetConfig+0x8ea>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b06      	cmp	r3, #6
 8008fa6:	d020      	beq.n	8008fea <USART_SetConfig+0x8e6>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b07      	cmp	r3, #7
 8008fae:	d01a      	beq.n	8008fe6 <USART_SetConfig+0x8e2>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b08      	cmp	r3, #8
 8008fb6:	d014      	beq.n	8008fe2 <USART_SetConfig+0x8de>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	d00e      	beq.n	8008fde <USART_SetConfig+0x8da>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	2b0a      	cmp	r3, #10
 8008fc6:	d008      	beq.n	8008fda <USART_SetConfig+0x8d6>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fcc:	2b0b      	cmp	r3, #11
 8008fce:	d102      	bne.n	8008fd6 <USART_SetConfig+0x8d2>
 8008fd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fd4:	e016      	b.n	8009004 <USART_SetConfig+0x900>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e014      	b.n	8009004 <USART_SetConfig+0x900>
 8008fda:	2380      	movs	r3, #128	; 0x80
 8008fdc:	e012      	b.n	8009004 <USART_SetConfig+0x900>
 8008fde:	2340      	movs	r3, #64	; 0x40
 8008fe0:	e010      	b.n	8009004 <USART_SetConfig+0x900>
 8008fe2:	2320      	movs	r3, #32
 8008fe4:	e00e      	b.n	8009004 <USART_SetConfig+0x900>
 8008fe6:	2310      	movs	r3, #16
 8008fe8:	e00c      	b.n	8009004 <USART_SetConfig+0x900>
 8008fea:	230c      	movs	r3, #12
 8008fec:	e00a      	b.n	8009004 <USART_SetConfig+0x900>
 8008fee:	230a      	movs	r3, #10
 8008ff0:	e008      	b.n	8009004 <USART_SetConfig+0x900>
 8008ff2:	2308      	movs	r3, #8
 8008ff4:	e006      	b.n	8009004 <USART_SetConfig+0x900>
 8008ff6:	2306      	movs	r3, #6
 8008ff8:	e004      	b.n	8009004 <USART_SetConfig+0x900>
 8008ffa:	2304      	movs	r3, #4
 8008ffc:	e002      	b.n	8009004 <USART_SetConfig+0x900>
 8008ffe:	2302      	movs	r3, #2
 8009000:	e000      	b.n	8009004 <USART_SetConfig+0x900>
 8009002:	2301      	movs	r3, #1
 8009004:	4a08      	ldr	r2, [pc, #32]	; (8009028 <USART_SetConfig+0x924>)
 8009006:	fbb2 f3f3 	udiv	r3, r2, r3
 800900a:	005a      	lsls	r2, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	441a      	add	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	fbb2 f3f3 	udiv	r3, r2, r3
 800901c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800901e:	e062      	b.n	80090e6 <USART_SetConfig+0x9e2>
 8009020:	58024400 	.word	0x58024400
 8009024:	03d09000 	.word	0x03d09000
 8009028:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d044      	beq.n	80090be <USART_SetConfig+0x9ba>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b01      	cmp	r3, #1
 800903a:	d03e      	beq.n	80090ba <USART_SetConfig+0x9b6>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b02      	cmp	r3, #2
 8009042:	d038      	beq.n	80090b6 <USART_SetConfig+0x9b2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b03      	cmp	r3, #3
 800904a:	d032      	beq.n	80090b2 <USART_SetConfig+0x9ae>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2b04      	cmp	r3, #4
 8009052:	d02c      	beq.n	80090ae <USART_SetConfig+0x9aa>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	2b05      	cmp	r3, #5
 800905a:	d026      	beq.n	80090aa <USART_SetConfig+0x9a6>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	2b06      	cmp	r3, #6
 8009062:	d020      	beq.n	80090a6 <USART_SetConfig+0x9a2>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	2b07      	cmp	r3, #7
 800906a:	d01a      	beq.n	80090a2 <USART_SetConfig+0x99e>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	2b08      	cmp	r3, #8
 8009072:	d014      	beq.n	800909e <USART_SetConfig+0x99a>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	2b09      	cmp	r3, #9
 800907a:	d00e      	beq.n	800909a <USART_SetConfig+0x996>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b0a      	cmp	r3, #10
 8009082:	d008      	beq.n	8009096 <USART_SetConfig+0x992>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	2b0b      	cmp	r3, #11
 800908a:	d102      	bne.n	8009092 <USART_SetConfig+0x98e>
 800908c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009090:	e016      	b.n	80090c0 <USART_SetConfig+0x9bc>
 8009092:	2301      	movs	r3, #1
 8009094:	e014      	b.n	80090c0 <USART_SetConfig+0x9bc>
 8009096:	2380      	movs	r3, #128	; 0x80
 8009098:	e012      	b.n	80090c0 <USART_SetConfig+0x9bc>
 800909a:	2340      	movs	r3, #64	; 0x40
 800909c:	e010      	b.n	80090c0 <USART_SetConfig+0x9bc>
 800909e:	2320      	movs	r3, #32
 80090a0:	e00e      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090a2:	2310      	movs	r3, #16
 80090a4:	e00c      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090a6:	230c      	movs	r3, #12
 80090a8:	e00a      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090aa:	230a      	movs	r3, #10
 80090ac:	e008      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090ae:	2308      	movs	r3, #8
 80090b0:	e006      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090b2:	2306      	movs	r3, #6
 80090b4:	e004      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090b6:	2304      	movs	r3, #4
 80090b8:	e002      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090ba:	2302      	movs	r3, #2
 80090bc:	e000      	b.n	80090c0 <USART_SetConfig+0x9bc>
 80090be:	2301      	movs	r3, #1
 80090c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	005a      	lsls	r2, r3, #1
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	441a      	add	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80090dc:	e003      	b.n	80090e6 <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 80090e4:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	2b0f      	cmp	r3, #15
 80090ea:	d916      	bls.n	800911a <USART_SetConfig+0xa16>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f2:	d212      	bcs.n	800911a <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f023 030f 	bic.w	r3, r3, #15
 80090fc:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	b29b      	uxth	r3, r3
 8009104:	f003 0307 	and.w	r3, r3, #7
 8009108:	b29a      	uxth	r2, r3
 800910a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800910c:	4313      	orrs	r3, r2
 800910e:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009116:	60da      	str	r2, [r3, #12]
 8009118:	e002      	b.n	8009120 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009138:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 800913c:	4618      	mov	r0, r3
 800913e:	3738      	adds	r7, #56	; 0x38
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af02      	add	r7, sp, #8
 800914a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009152:	f7f8 fb65 	bl	8001820 <HAL_GetTick>
 8009156:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 0308 	and.w	r3, r3, #8
 8009162:	2b08      	cmp	r3, #8
 8009164:	d10e      	bne.n	8009184 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff fa8e 	bl	8008696 <USART_WaitOnFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e01e      	b.n	80091c2 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b04      	cmp	r3, #4
 8009190:	d10e      	bne.n	80091b0 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8009192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7ff fa78 	bl	8008696 <USART_WaitOnFlagUntilTimeout>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80091ac:	2303      	movs	r3, #3
 80091ae:	e008      	b.n	80091c2 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80091c0:	2300      	movs	r3, #0
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80091ca:	b480      	push	{r7}
 80091cc:	b085      	sub	sp, #20
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d101      	bne.n	80091e0 <HAL_USARTEx_DisableFifoMode+0x16>
 80091dc:	2302      	movs	r3, #2
 80091de:	e027      	b.n	8009230 <HAL_USARTEx_DisableFifoMode+0x66>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 0201 	bic.w	r2, r2, #1
 8009206:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800920e:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8009250:	2302      	movs	r3, #2
 8009252:	e02d      	b.n	80092b0 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0201 	bic.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f84f 	bl	8009334 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e02d      	b.n	800932c <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0201 	bic.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f811 	bl	8009334 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009350:	e02f      	b.n	80093b2 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009352:	2310      	movs	r3, #16
 8009354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009356:	2310      	movs	r3, #16
 8009358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8009360:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8009370:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800937a:	7bbb      	ldrb	r3, [r7, #14]
 800937c:	7b3a      	ldrb	r2, [r7, #12]
 800937e:	4910      	ldr	r1, [pc, #64]	; (80093c0 <USARTEx_SetNbDataToProcess+0x8c>)
 8009380:	5c8a      	ldrb	r2, [r1, r2]
 8009382:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 8009386:	7b3a      	ldrb	r2, [r7, #12]
 8009388:	490e      	ldr	r1, [pc, #56]	; (80093c4 <USARTEx_SetNbDataToProcess+0x90>)
 800938a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800938c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009390:	b29a      	uxth	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	7b7a      	ldrb	r2, [r7, #13]
 800939a:	4909      	ldr	r1, [pc, #36]	; (80093c0 <USARTEx_SetNbDataToProcess+0x8c>)
 800939c:	5c8a      	ldrb	r2, [r1, r2]
 800939e:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 80093a2:	7b7a      	ldrb	r2, [r7, #13]
 80093a4:	4907      	ldr	r1, [pc, #28]	; (80093c4 <USARTEx_SetNbDataToProcess+0x90>)
 80093a6:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80093b2:	bf00      	nop
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	0800967c 	.word	0x0800967c
 80093c4:	08009684 	.word	0x08009684

080093c8 <calloc>:
 80093c8:	4b02      	ldr	r3, [pc, #8]	; (80093d4 <calloc+0xc>)
 80093ca:	460a      	mov	r2, r1
 80093cc:	4601      	mov	r1, r0
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	f000 b802 	b.w	80093d8 <_calloc_r>
 80093d4:	2400005c 	.word	0x2400005c

080093d8 <_calloc_r>:
 80093d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093da:	fba1 2402 	umull	r2, r4, r1, r2
 80093de:	b94c      	cbnz	r4, 80093f4 <_calloc_r+0x1c>
 80093e0:	4611      	mov	r1, r2
 80093e2:	9201      	str	r2, [sp, #4]
 80093e4:	f000 f82e 	bl	8009444 <_malloc_r>
 80093e8:	9a01      	ldr	r2, [sp, #4]
 80093ea:	4605      	mov	r5, r0
 80093ec:	b930      	cbnz	r0, 80093fc <_calloc_r+0x24>
 80093ee:	4628      	mov	r0, r5
 80093f0:	b003      	add	sp, #12
 80093f2:	bd30      	pop	{r4, r5, pc}
 80093f4:	220c      	movs	r2, #12
 80093f6:	6002      	str	r2, [r0, #0]
 80093f8:	2500      	movs	r5, #0
 80093fa:	e7f8      	b.n	80093ee <_calloc_r+0x16>
 80093fc:	4621      	mov	r1, r4
 80093fe:	f000 f8ad 	bl	800955c <memset>
 8009402:	e7f4      	b.n	80093ee <_calloc_r+0x16>

08009404 <sbrk_aligned>:
 8009404:	b570      	push	{r4, r5, r6, lr}
 8009406:	4e0e      	ldr	r6, [pc, #56]	; (8009440 <sbrk_aligned+0x3c>)
 8009408:	460c      	mov	r4, r1
 800940a:	6831      	ldr	r1, [r6, #0]
 800940c:	4605      	mov	r5, r0
 800940e:	b911      	cbnz	r1, 8009416 <sbrk_aligned+0x12>
 8009410:	f000 f8ac 	bl	800956c <_sbrk_r>
 8009414:	6030      	str	r0, [r6, #0]
 8009416:	4621      	mov	r1, r4
 8009418:	4628      	mov	r0, r5
 800941a:	f000 f8a7 	bl	800956c <_sbrk_r>
 800941e:	1c43      	adds	r3, r0, #1
 8009420:	d00a      	beq.n	8009438 <sbrk_aligned+0x34>
 8009422:	1cc4      	adds	r4, r0, #3
 8009424:	f024 0403 	bic.w	r4, r4, #3
 8009428:	42a0      	cmp	r0, r4
 800942a:	d007      	beq.n	800943c <sbrk_aligned+0x38>
 800942c:	1a21      	subs	r1, r4, r0
 800942e:	4628      	mov	r0, r5
 8009430:	f000 f89c 	bl	800956c <_sbrk_r>
 8009434:	3001      	adds	r0, #1
 8009436:	d101      	bne.n	800943c <sbrk_aligned+0x38>
 8009438:	f04f 34ff 	mov.w	r4, #4294967295
 800943c:	4620      	mov	r0, r4
 800943e:	bd70      	pop	{r4, r5, r6, pc}
 8009440:	24000540 	.word	0x24000540

08009444 <_malloc_r>:
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	1ccd      	adds	r5, r1, #3
 800944a:	f025 0503 	bic.w	r5, r5, #3
 800944e:	3508      	adds	r5, #8
 8009450:	2d0c      	cmp	r5, #12
 8009452:	bf38      	it	cc
 8009454:	250c      	movcc	r5, #12
 8009456:	2d00      	cmp	r5, #0
 8009458:	4607      	mov	r7, r0
 800945a:	db01      	blt.n	8009460 <_malloc_r+0x1c>
 800945c:	42a9      	cmp	r1, r5
 800945e:	d905      	bls.n	800946c <_malloc_r+0x28>
 8009460:	230c      	movs	r3, #12
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	2600      	movs	r6, #0
 8009466:	4630      	mov	r0, r6
 8009468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009540 <_malloc_r+0xfc>
 8009470:	f000 f868 	bl	8009544 <__malloc_lock>
 8009474:	f8d8 3000 	ldr.w	r3, [r8]
 8009478:	461c      	mov	r4, r3
 800947a:	bb5c      	cbnz	r4, 80094d4 <_malloc_r+0x90>
 800947c:	4629      	mov	r1, r5
 800947e:	4638      	mov	r0, r7
 8009480:	f7ff ffc0 	bl	8009404 <sbrk_aligned>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	4604      	mov	r4, r0
 8009488:	d155      	bne.n	8009536 <_malloc_r+0xf2>
 800948a:	f8d8 4000 	ldr.w	r4, [r8]
 800948e:	4626      	mov	r6, r4
 8009490:	2e00      	cmp	r6, #0
 8009492:	d145      	bne.n	8009520 <_malloc_r+0xdc>
 8009494:	2c00      	cmp	r4, #0
 8009496:	d048      	beq.n	800952a <_malloc_r+0xe6>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	4631      	mov	r1, r6
 800949c:	4638      	mov	r0, r7
 800949e:	eb04 0903 	add.w	r9, r4, r3
 80094a2:	f000 f863 	bl	800956c <_sbrk_r>
 80094a6:	4581      	cmp	r9, r0
 80094a8:	d13f      	bne.n	800952a <_malloc_r+0xe6>
 80094aa:	6821      	ldr	r1, [r4, #0]
 80094ac:	1a6d      	subs	r5, r5, r1
 80094ae:	4629      	mov	r1, r5
 80094b0:	4638      	mov	r0, r7
 80094b2:	f7ff ffa7 	bl	8009404 <sbrk_aligned>
 80094b6:	3001      	adds	r0, #1
 80094b8:	d037      	beq.n	800952a <_malloc_r+0xe6>
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	442b      	add	r3, r5
 80094be:	6023      	str	r3, [r4, #0]
 80094c0:	f8d8 3000 	ldr.w	r3, [r8]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d038      	beq.n	800953a <_malloc_r+0xf6>
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	42a2      	cmp	r2, r4
 80094cc:	d12b      	bne.n	8009526 <_malloc_r+0xe2>
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
 80094d2:	e00f      	b.n	80094f4 <_malloc_r+0xb0>
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	1b52      	subs	r2, r2, r5
 80094d8:	d41f      	bmi.n	800951a <_malloc_r+0xd6>
 80094da:	2a0b      	cmp	r2, #11
 80094dc:	d917      	bls.n	800950e <_malloc_r+0xca>
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	6025      	str	r5, [r4, #0]
 80094e4:	bf18      	it	ne
 80094e6:	6059      	strne	r1, [r3, #4]
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	bf08      	it	eq
 80094ec:	f8c8 1000 	streq.w	r1, [r8]
 80094f0:	5162      	str	r2, [r4, r5]
 80094f2:	604b      	str	r3, [r1, #4]
 80094f4:	4638      	mov	r0, r7
 80094f6:	f104 060b 	add.w	r6, r4, #11
 80094fa:	f000 f829 	bl	8009550 <__malloc_unlock>
 80094fe:	f026 0607 	bic.w	r6, r6, #7
 8009502:	1d23      	adds	r3, r4, #4
 8009504:	1af2      	subs	r2, r6, r3
 8009506:	d0ae      	beq.n	8009466 <_malloc_r+0x22>
 8009508:	1b9b      	subs	r3, r3, r6
 800950a:	50a3      	str	r3, [r4, r2]
 800950c:	e7ab      	b.n	8009466 <_malloc_r+0x22>
 800950e:	42a3      	cmp	r3, r4
 8009510:	6862      	ldr	r2, [r4, #4]
 8009512:	d1dd      	bne.n	80094d0 <_malloc_r+0x8c>
 8009514:	f8c8 2000 	str.w	r2, [r8]
 8009518:	e7ec      	b.n	80094f4 <_malloc_r+0xb0>
 800951a:	4623      	mov	r3, r4
 800951c:	6864      	ldr	r4, [r4, #4]
 800951e:	e7ac      	b.n	800947a <_malloc_r+0x36>
 8009520:	4634      	mov	r4, r6
 8009522:	6876      	ldr	r6, [r6, #4]
 8009524:	e7b4      	b.n	8009490 <_malloc_r+0x4c>
 8009526:	4613      	mov	r3, r2
 8009528:	e7cc      	b.n	80094c4 <_malloc_r+0x80>
 800952a:	230c      	movs	r3, #12
 800952c:	603b      	str	r3, [r7, #0]
 800952e:	4638      	mov	r0, r7
 8009530:	f000 f80e 	bl	8009550 <__malloc_unlock>
 8009534:	e797      	b.n	8009466 <_malloc_r+0x22>
 8009536:	6025      	str	r5, [r4, #0]
 8009538:	e7dc      	b.n	80094f4 <_malloc_r+0xb0>
 800953a:	605b      	str	r3, [r3, #4]
 800953c:	deff      	udf	#255	; 0xff
 800953e:	bf00      	nop
 8009540:	2400053c 	.word	0x2400053c

08009544 <__malloc_lock>:
 8009544:	4801      	ldr	r0, [pc, #4]	; (800954c <__malloc_lock+0x8>)
 8009546:	f000 b84b 	b.w	80095e0 <__retarget_lock_acquire_recursive>
 800954a:	bf00      	nop
 800954c:	24000680 	.word	0x24000680

08009550 <__malloc_unlock>:
 8009550:	4801      	ldr	r0, [pc, #4]	; (8009558 <__malloc_unlock+0x8>)
 8009552:	f000 b846 	b.w	80095e2 <__retarget_lock_release_recursive>
 8009556:	bf00      	nop
 8009558:	24000680 	.word	0x24000680

0800955c <memset>:
 800955c:	4402      	add	r2, r0
 800955e:	4603      	mov	r3, r0
 8009560:	4293      	cmp	r3, r2
 8009562:	d100      	bne.n	8009566 <memset+0xa>
 8009564:	4770      	bx	lr
 8009566:	f803 1b01 	strb.w	r1, [r3], #1
 800956a:	e7f9      	b.n	8009560 <memset+0x4>

0800956c <_sbrk_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d06      	ldr	r5, [pc, #24]	; (8009588 <_sbrk_r+0x1c>)
 8009570:	2300      	movs	r3, #0
 8009572:	4604      	mov	r4, r0
 8009574:	4608      	mov	r0, r1
 8009576:	602b      	str	r3, [r5, #0]
 8009578:	f7f7 ffe4 	bl	8001544 <_sbrk>
 800957c:	1c43      	adds	r3, r0, #1
 800957e:	d102      	bne.n	8009586 <_sbrk_r+0x1a>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b103      	cbz	r3, 8009586 <_sbrk_r+0x1a>
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	bd38      	pop	{r3, r4, r5, pc}
 8009588:	2400067c 	.word	0x2400067c

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	; (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	2400005c 	.word	0x2400005c

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	4d0d      	ldr	r5, [pc, #52]	; (80095d0 <__libc_init_array+0x38>)
 800959c:	4c0d      	ldr	r4, [pc, #52]	; (80095d4 <__libc_init_array+0x3c>)
 800959e:	1b64      	subs	r4, r4, r5
 80095a0:	10a4      	asrs	r4, r4, #2
 80095a2:	2600      	movs	r6, #0
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	4d0b      	ldr	r5, [pc, #44]	; (80095d8 <__libc_init_array+0x40>)
 80095aa:	4c0c      	ldr	r4, [pc, #48]	; (80095dc <__libc_init_array+0x44>)
 80095ac:	f000 f828 	bl	8009600 <_init>
 80095b0:	1b64      	subs	r4, r4, r5
 80095b2:	10a4      	asrs	r4, r4, #2
 80095b4:	2600      	movs	r6, #0
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	0800968c 	.word	0x0800968c
 80095d4:	0800968c 	.word	0x0800968c
 80095d8:	0800968c 	.word	0x0800968c
 80095dc:	08009690 	.word	0x08009690

080095e0 <__retarget_lock_acquire_recursive>:
 80095e0:	4770      	bx	lr

080095e2 <__retarget_lock_release_recursive>:
 80095e2:	4770      	bx	lr

080095e4 <memcpy>:
 80095e4:	440a      	add	r2, r1
 80095e6:	4291      	cmp	r1, r2
 80095e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095ec:	d100      	bne.n	80095f0 <memcpy+0xc>
 80095ee:	4770      	bx	lr
 80095f0:	b510      	push	{r4, lr}
 80095f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095fa:	4291      	cmp	r1, r2
 80095fc:	d1f9      	bne.n	80095f2 <memcpy+0xe>
 80095fe:	bd10      	pop	{r4, pc}

08009600 <_init>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr

0800960c <_fini>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr
