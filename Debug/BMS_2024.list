
BMS_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a654  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800a8f4  0800a8f4  0000b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a998  0800a998  0000b998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a99c  0800a99c  0000b99c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  24000000  0800a9a0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004660  24000064  0800aa04  0000c064  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240046c4  0800aa04  0000c6c4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
  9 .debug_info   00025c6c  00000000  00000000  0000c092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004791  00000000  00000000  00031cfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001f50  00000000  00000000  00036490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001860  00000000  00000000  000383e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d79f  00000000  00000000  00039c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00027308  00000000  00000000  000773df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018cb30  00000000  00000000  0009e6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0022b217  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00008a64  00000000  00000000  0022b25c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000056  00000000  00000000  00233cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000064 	.word	0x24000064
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a8dc 	.word	0x0800a8dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000068 	.word	0x24000068
 80002dc:	0800a8dc 	.word	0x0800a8dc

080002e0 <BMS_Init>:
#include "defines.h"
#include "bms.h"
#include "ltc.h"


void BMS_Init(Master **BMS) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	*BMS = (Master*) calloc(1, sizeof(Master));
 80002e8:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 80002ec:	2001      	movs	r0, #1
 80002ee:	f00a f939 	bl	800a564 <calloc>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]

	LTC_config* config = (LTC_config*) calloc(1, sizeof(LTC_config));
 80002fa:	210c      	movs	r1, #12
 80002fc:	2001      	movs	r0, #1
 80002fe:	f00a f931 	bl	800a564 <calloc>
 8000302:	4603      	mov	r3, r0
 8000304:	60bb      	str	r3, [r7, #8]
	config->command = (LTC_command*) calloc(1 ,sizeof(LTC_command));
 8000306:	2112      	movs	r1, #18
 8000308:	2001      	movs	r0, #1
 800030a:	f00a f92b 	bl	800a564 <calloc>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	601a      	str	r2, [r3, #0]
	LTC_Init(config);
 8000316:	68b8      	ldr	r0, [r7, #8]
 8000318:	f000 f8c2 	bl	80004a0 <LTC_Init>

	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 800031c:	2300      	movs	r3, #0
 800031e:	73fb      	strb	r3, [r7, #15]
 8000320:	e015      	b.n	800034e <BMS_Init+0x6e>
		(*BMS)->slaves[i].config = config;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	7bfb      	ldrb	r3, [r7, #15]
 8000328:	215c      	movs	r1, #92	@ 0x5c
 800032a:	fb01 f303 	mul.w	r3, r1, r3
 800032e:	4413      	add	r3, r2
 8000330:	3358      	adds	r3, #88	@ 0x58
 8000332:	68ba      	ldr	r2, [r7, #8]
 8000334:	601a      	str	r2, [r3, #0]
		(*BMS)->slaves[i].sensor.ADDR = i;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	7bfb      	ldrb	r3, [r7, #15]
 800033c:	215c      	movs	r1, #92	@ 0x5c
 800033e:	fb01 f303 	mul.w	r3, r1, r3
 8000342:	4413      	add	r3, r2
 8000344:	7bfa      	ldrb	r2, [r7, #15]
 8000346:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000348:	7bfb      	ldrb	r3, [r7, #15]
 800034a:	3301      	adds	r3, #1
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	2b03      	cmp	r3, #3
 8000352:	d9e6      	bls.n	8000322 <BMS_Init+0x42>
	}

	LTC_PEC_InitTable();
 8000354:	f000 f8dc 	bl	8000510 <LTC_PEC_InitTable>
}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}

08000360 <ElectricalManagement>:

void ElectricalManagement(Master *BMS){
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	LTC_SendBroadcastCommand(BMS->slaves[0].config, LTC_COMMAND_ADCV);
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800036c:	f44f 7118 	mov.w	r1, #608	@ 0x260
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f918 	bl	80005a6 <LTC_SendBroadcastCommand>
		uint16_t temp_minV = UINT16_MAX;
 8000376:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800037a:	81fb      	strh	r3, [r7, #14]
		uint16_t temp_maxV = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000380:	2300      	movs	r3, #0
 8000382:	72fb      	strb	r3, [r7, #11]
 8000384:	e034      	b.n	80003f0 <ElectricalManagement+0x90>
			LTC_Read(LTC_READ_CELL, &(BMS->slaves[i]));
 8000386:	7afb      	ldrb	r3, [r7, #11]
 8000388:	225c      	movs	r2, #92	@ 0x5c
 800038a:	fb02 f303 	mul.w	r3, r2, r3
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	4413      	add	r3, r2
 8000392:	4619      	mov	r1, r3
 8000394:	2001      	movs	r0, #1
 8000396:	f000 f8f5 	bl	8000584 <LTC_Read>
			if(BMS->slaves[i].sensor.V_MIN < temp_minV)
 800039a:	7afb      	ldrb	r3, [r7, #11]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	215c      	movs	r1, #92	@ 0x5c
 80003a0:	fb01 f303 	mul.w	r3, r1, r3
 80003a4:	4413      	add	r3, r2
 80003a6:	3352      	adds	r3, #82	@ 0x52
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	89fa      	ldrh	r2, [r7, #14]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d908      	bls.n	80003c2 <ElectricalManagement+0x62>
				temp_minV = BMS->slaves[i].sensor.V_MIN;
 80003b0:	7afb      	ldrb	r3, [r7, #11]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	215c      	movs	r1, #92	@ 0x5c
 80003b6:	fb01 f303 	mul.w	r3, r1, r3
 80003ba:	4413      	add	r3, r2
 80003bc:	3352      	adds	r3, #82	@ 0x52
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	81fb      	strh	r3, [r7, #14]
			if(BMS->slaves[i].sensor.V_MAX > temp_maxV)
 80003c2:	7afb      	ldrb	r3, [r7, #11]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	215c      	movs	r1, #92	@ 0x5c
 80003c8:	fb01 f303 	mul.w	r3, r1, r3
 80003cc:	4413      	add	r3, r2
 80003ce:	3350      	adds	r3, #80	@ 0x50
 80003d0:	881b      	ldrh	r3, [r3, #0]
 80003d2:	89ba      	ldrh	r2, [r7, #12]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d208      	bcs.n	80003ea <ElectricalManagement+0x8a>
				temp_maxV = BMS->slaves[i].sensor.V_MAX;
 80003d8:	7afb      	ldrb	r3, [r7, #11]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	215c      	movs	r1, #92	@ 0x5c
 80003de:	fb01 f303 	mul.w	r3, r1, r3
 80003e2:	4413      	add	r3, r2
 80003e4:	3350      	adds	r3, #80	@ 0x50
 80003e6:	881b      	ldrh	r3, [r3, #0]
 80003e8:	81bb      	strh	r3, [r7, #12]
		for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 80003ea:	7afb      	ldrb	r3, [r7, #11]
 80003ec:	3301      	adds	r3, #1
 80003ee:	72fb      	strb	r3, [r7, #11]
 80003f0:	7afb      	ldrb	r3, [r7, #11]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9c7      	bls.n	8000386 <ElectricalManagement+0x26>
		}
		BMS->maxCellVoltage = temp_maxV;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	89ba      	ldrh	r2, [r7, #12]
 80003fa:	f8a3 2170 	strh.w	r2, [r3, #368]	@ 0x170
		BMS->minCellVoltage = temp_minV;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	89fa      	ldrh	r2, [r7, #14]
 8000402:	f8a3 2172 	strh.w	r2, [r3, #370]	@ 0x172
		BMS->deltaVoltage = BMS->maxCellVoltage - BMS->minCellVoltage;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	f8b3 2170 	ldrh.w	r2, [r3, #368]	@ 0x170
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f8b3 3172 	ldrh.w	r3, [r3, #370]	@ 0x172
 8000412:	1ad3      	subs	r3, r2, r3
 8000414:	b29a      	uxth	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	4a07      	ldr	r2, [pc, #28]	@ (8000450 <vApplicationGetIdleTaskMemory+0x2c>)
 8000434:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	4a06      	ldr	r2, [pc, #24]	@ (8000454 <vApplicationGetIdleTaskMemory+0x30>)
 800043a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	2280      	movs	r2, #128	@ 0x80
 8000440:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	24000080 	.word	0x24000080
 8000454:	24000120 	.word	0x24000120

08000458 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000460:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <DWT_Delay_us+0x40>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000466:	f004 fdf5 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 800046a:	4603      	mov	r3, r0
 800046c:	4a0b      	ldr	r2, [pc, #44]	@ (800049c <DWT_Delay_us+0x44>)
 800046e:	fba2 2303 	umull	r2, r3, r2, r3
 8000472:	0c9b      	lsrs	r3, r3, #18
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	fb02 f303 	mul.w	r3, r2, r3
 800047a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800047c:	bf00      	nop
 800047e:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <DWT_Delay_us+0x40>)
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	1ad2      	subs	r2, r2, r3
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	429a      	cmp	r2, r3
 800048a:	d3f8      	bcc.n	800047e <DWT_Delay_us+0x26>
}
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	e0001000 	.word	0xe0001000
 800049c:	431bde83 	.word	0x431bde83

080004a0 <LTC_Init>:
#define BYTESWAP(word) ((word >> 8) + (word << 8))

extern SPI_HandleTypeDef hspi1;
static uint16_t pec_table[LTC_PEC_TABLE_LENGTH];

void LTC_Init(LTC_config *config) {
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	config->GPIO   = ALL_GPIOS_READ;
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7913      	ldrb	r3, [r2, #4]
 80004ac:	f043 033e 	orr.w	r3, r3, #62	@ 0x3e
 80004b0:	7113      	strb	r3, [r2, #4]
	config->REFON  = REFERENCE_SHUTS_DOWN_AFTER_CONVERSIONS;
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7913      	ldrb	r3, [r2, #4]
 80004b6:	f36f 1386 	bfc	r3, #6, #1
 80004ba:	7113      	strb	r3, [r2, #4]
	config->SWTRD  = SOFTWARE_TIMER_ENABLE_PIN_LOW;
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7913      	ldrb	r3, [r2, #4]
 80004c0:	f36f 13c7 	bfc	r3, #7, #1
 80004c4:	7113      	strb	r3, [r2, #4]
	config->ADCOPT = SELECT_ADC_MODES_FAST;
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	7953      	ldrb	r3, [r2, #5]
 80004ca:	f36f 0300 	bfc	r3, #0, #1
 80004ce:	7153      	strb	r3, [r2, #5]
	config->VUV    = DEFULT_VOLTAGE;
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	88d3      	ldrh	r3, [r2, #6]
 80004d4:	f36f 030b 	bfc	r3, #0, #12
 80004d8:	80d3      	strh	r3, [r2, #6]
	config->VOV    = DEFULT_VOLTAGE;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2200      	movs	r2, #0
 80004de:	811a      	strh	r2, [r3, #8]
	config->DCTO   = DISCHARGE_DISABLE;
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7a93      	ldrb	r3, [r2, #10]
 80004e4:	f36f 0303 	bfc	r3, #0, #4
 80004e8:	7293      	strb	r3, [r2, #10]
	config->command->MD  = MD_FILTRED;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80004f2:	809a      	strh	r2, [r3, #4]
	config->command->DCP = DCP_PERMITED;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2210      	movs	r2, #16
 80004fa:	80da      	strh	r2, [r3, #6]
	LTC_SendBroadcastCommand(config, LTC_COMMAND_WRCOMM);
 80004fc:	f240 7121 	movw	r1, #1825	@ 0x721
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f000 f850 	bl	80005a6 <LTC_SendBroadcastCommand>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <LTC_PEC_InitTable>:

void LTC_PEC_InitTable() {
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	e026      	b.n	800056a <LTC_PEC_InitTable+0x5a>
		remainder = i << 7;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	b29b      	uxth	r3, r3
 8000520:	01db      	lsls	r3, r3, #7
 8000522:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 8000524:	2308      	movs	r3, #8
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	e014      	b.n	8000554 <LTC_PEC_InitTable+0x44>
			if(remainder & 0x4000) {
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000530:	2b00      	cmp	r3, #0
 8000532:	d009      	beq.n	8000548 <LTC_PEC_InitTable+0x38>
				remainder = remainder << 1;
 8000534:	89fb      	ldrh	r3, [r7, #14]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	81fb      	strh	r3, [r7, #14]
				remainder = remainder ^ 0x4599;
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	f483 438b 	eor.w	r3, r3, #17792	@ 0x4580
 8000540:	f083 0319 	eor.w	r3, r3, #25
 8000544:	81fb      	strh	r3, [r7, #14]
 8000546:	e002      	b.n	800054e <LTC_PEC_InitTable+0x3e>
			}
			else
				remainder = remainder << 1;
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	3b01      	subs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	dce7      	bgt.n	800052a <LTC_PEC_InitTable+0x1a>
		}
		pec_table[i] = remainder&0xFFFF;
 800055a:	4909      	ldr	r1, [pc, #36]	@ (8000580 <LTC_PEC_InitTable+0x70>)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	89fa      	ldrh	r2, [r7, #14]
 8000560:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	3301      	adds	r3, #1
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	2bff      	cmp	r3, #255	@ 0xff
 800056e:	ddd5      	ble.n	800051c <LTC_PEC_InitTable+0xc>
	}
}
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	24000320 	.word	0x24000320

08000584 <LTC_Read>:
	do{
		LTC_SendAddressedCommand(slave, LTC_COMMAND_PLADC);
	}while(!slave->config->ADC_READY);
}

void LTC_Read(uint8_t LTC_READ, Slave *slave){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	slave->config->command->BROADCAST = false;
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2200      	movs	r2, #0
 8000598:	709a      	strb	r2, [r3, #2]

}
 800059a:	bf00      	nop
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <LTC_SendBroadcastCommand>:

void LTC_SendBroadcastCommand(LTC_config *config, uint16_t command_name) {
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b086      	sub	sp, #24
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	460b      	mov	r3, r1
 80005b0:	807b      	strh	r3, [r7, #2]
	uint16_t tx_data[4] = {0, 0, 0, 0};
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
	uint16_t rx_data[4] = {0, 0, 0, 0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
	config->command->NAME = command_name;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	887a      	ldrh	r2, [r7, #2]
 80005cc:	801a      	strh	r2, [r3, #0]
	LTC_Communication(config, tx_data, rx_data);
 80005ce:	f107 0208 	add.w	r2, r7, #8
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f812 	bl	8000602 <LTC_Communication>
}
 80005de:	bf00      	nop
 80005e0:	3718      	adds	r7, #24
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <LTC_StartTrasmission>:
	default:
		break;
	}
}

void LTC_StartTrasmission(){
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
	LTC_ChipSelect(RESET);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f82a 	bl	8000644 <LTC_ChipSelect>
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <LTC_EndTramission>:

void LTC_EndTramission() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	LTC_ChipSelect(SET);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f000 f823 	bl	8000644 <LTC_ChipSelect>
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}

08000602 <LTC_Communication>:

void LTC_Communication(LTC_config *config, uint16_t* tx_data, uint16_t* rx_data) {
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
	uint16_t command = LTC_MakeCommand(config->command);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f84f 	bl	80006b6 <LTC_MakeCommand>
 8000618:	4603      	mov	r3, r0
 800061a:	82fb      	strh	r3, [r7, #22]
	LTC_WakeUp();
 800061c:	f000 f840 	bl	80006a0 <LTC_WakeUp>
	LTC_StartTrasmission();
 8000620:	f7ff ffe1 	bl	80005e6 <LTC_StartTrasmission>
	LTC_TransmitCommand(command);
 8000624:	8afb      	ldrh	r3, [r7, #22]
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f916 	bl	8000858 <LTC_TransmitCommand>
	LTC_TransmitReceive(command, tx_data, rx_data);
 800062c:	8afb      	ldrh	r3, [r7, #22]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	68b9      	ldr	r1, [r7, #8]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 f928 	bl	8000888 <LTC_TransmitReceive>
	LTC_EndTramission();
 8000638:	f7ff ffdc 	bl	80005f4 <LTC_EndTramission>
}
 800063c:	bf00      	nop
 800063e:	3718      	adds	r7, #24
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <LTC_ChipSelect>:
	tx_data[0] = (slave->config->ADCOPT << 8) | (slave->config->SWTRD << 9) | (slave->config->REFON << 10) | (slave->config->GPIO << 11) | (slave->config->VUV);
	tx_data[1] = (slave->config->VUV >> 8) | (slave->config->VOV << 4);
	tx_data[2] |= ((slave->sensor.CELL_TO_DISCHARGE & 0xff) << 8) | ((slave->sensor.CELL_TO_DISCHARGE & 0xf00) >> 8) | ((slave->config->DCTO & 0xf) << 4);
}

void LTC_ChipSelect(uint8_t level) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin , level);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	461a      	mov	r2, r3
 8000652:	2120      	movs	r1, #32
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <LTC_ChipSelect+0x24>)
 8000656:	f003 fc23 	bl	8003ea0 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 800065a:	200a      	movs	r0, #10
 800065c:	f7ff fefc 	bl	8000458 <DWT_Delay_us>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	58020000 	.word	0x58020000

0800066c <LTC_SPI>:


uint16_t LTC_SPI(uint16_t Tx_data) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	uint16_t Rx_data = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &Tx_data, (uint8_t *) &Rx_data, 1, 50);
 800067a:	f107 020e 	add.w	r2, r7, #14
 800067e:	1db9      	adds	r1, r7, #6
 8000680:	2332      	movs	r3, #50	@ 0x32
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <LTC_SPI+0x30>)
 8000688:	f007 f814 	bl	80076b4 <HAL_SPI_TransmitReceive>
	return(BYTESWAP(Rx_data));
 800068c:	89fb      	ldrh	r3, [r7, #14]
 800068e:	ba5b      	rev16	r3, r3
 8000690:	b29b      	uxth	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	3710      	adds	r7, #16
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	24000670 	.word	0x24000670

080006a0 <LTC_WakeUp>:

void LTC_WakeUp() {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	LTC_StartTrasmission();
 80006a4:	f7ff ff9f 	bl	80005e6 <LTC_StartTrasmission>
	LTC_SPI(0);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ffdf 	bl	800066c <LTC_SPI>
	LTC_EndTramission();
 80006ae:	f7ff ffa1 	bl	80005f4 <LTC_EndTramission>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <LTC_MakeCommand>:

uint16_t LTC_MakeCommand(LTC_command *command) {
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
	switch(command->NAME) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	f240 426f 	movw	r2, #1135	@ 0x46f
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d06d      	beq.n	80007a6 <LTC_MakeCommand+0xf0>
 80006ca:	f5b3 6f8e 	cmp.w	r3, #1136	@ 0x470
 80006ce:	da75      	bge.n	80007bc <LTC_MakeCommand+0x106>
 80006d0:	f5b3 6f8d 	cmp.w	r3, #1128	@ 0x468
 80006d4:	d05c      	beq.n	8000790 <LTC_MakeCommand+0xda>
 80006d6:	f5b3 6f8d 	cmp.w	r3, #1128	@ 0x468
 80006da:	dc6f      	bgt.n	80007bc <LTC_MakeCommand+0x106>
 80006dc:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 80006e0:	d04b      	beq.n	800077a <LTC_MakeCommand+0xc4>
 80006e2:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 80006e6:	dc69      	bgt.n	80007bc <LTC_MakeCommand+0x106>
 80006e8:	f240 420f 	movw	r2, #1039	@ 0x40f
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d039      	beq.n	8000764 <LTC_MakeCommand+0xae>
 80006f0:	f5b3 6f82 	cmp.w	r3, #1040	@ 0x410
 80006f4:	da62      	bge.n	80007bc <LTC_MakeCommand+0x106>
 80006f6:	f240 4207 	movw	r2, #1031	@ 0x407
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d032      	beq.n	8000764 <LTC_MakeCommand+0xae>
 80006fe:	f5b3 6f81 	cmp.w	r3, #1032	@ 0x408
 8000702:	da5b      	bge.n	80007bc <LTC_MakeCommand+0x106>
 8000704:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8000708:	d00a      	beq.n	8000720 <LTC_MakeCommand+0x6a>
 800070a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800070e:	dc55      	bgt.n	80007bc <LTC_MakeCommand+0x106>
 8000710:	f240 2207 	movw	r2, #519	@ 0x207
 8000714:	4293      	cmp	r3, r2
 8000716:	d025      	beq.n	8000764 <LTC_MakeCommand+0xae>
 8000718:	f5b3 7f0a 	cmp.w	r3, #552	@ 0x228
 800071c:	d00f      	beq.n	800073e <LTC_MakeCommand+0x88>
 800071e:	e04d      	b.n	80007bc <LTC_MakeCommand+0x106>
		case LTC_COMMAND_ADCV:
			return command->NAME | command->MD | command->DCP | command->CH;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	881a      	ldrh	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	4313      	orrs	r3, r2
 800072a:	b29a      	uxth	r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	88db      	ldrh	r3, [r3, #6]
 8000730:	4313      	orrs	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	891b      	ldrh	r3, [r3, #8]
 8000738:	4313      	orrs	r3, r2
 800073a:	b29b      	uxth	r3, r3
 800073c:	e040      	b.n	80007c0 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADOW:
			return command->NAME | command->MD | command->PUP | command->DCP | command->CH;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	881a      	ldrh	r2, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	889b      	ldrh	r3, [r3, #4]
 8000746:	4313      	orrs	r3, r2
 8000748:	b29a      	uxth	r2, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	89db      	ldrh	r3, [r3, #14]
 800074e:	4313      	orrs	r3, r2
 8000750:	b29a      	uxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	88db      	ldrh	r3, [r3, #6]
 8000756:	4313      	orrs	r3, r2
 8000758:	b29a      	uxth	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	891b      	ldrh	r3, [r3, #8]
 800075e:	4313      	orrs	r3, r2
 8000760:	b29b      	uxth	r3, r3
 8000762:	e02d      	b.n	80007c0 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_CVST:
		case LTC_COMMAND_AXST:
		case LTC_COMMAND_STATST:
			return command->NAME | command->MD | command->ST;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	889b      	ldrh	r3, [r3, #4]
 800076c:	4313      	orrs	r3, r2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	8a1b      	ldrh	r3, [r3, #16]
 8000774:	4313      	orrs	r3, r2
 8000776:	b29b      	uxth	r3, r3
 8000778:	e022      	b.n	80007c0 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADAX	:
			return command->NAME | command->MD | command->CHG;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	889b      	ldrh	r3, [r3, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	b29a      	uxth	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	895b      	ldrh	r3, [r3, #10]
 800078a:	4313      	orrs	r3, r2
 800078c:	b29b      	uxth	r3, r3
 800078e:	e017      	b.n	80007c0 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADSTAT	:
			return command->NAME | command->MD | command->CHST;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	889b      	ldrh	r3, [r3, #4]
 8000798:	4313      	orrs	r3, r2
 800079a:	b29a      	uxth	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	899b      	ldrh	r3, [r3, #12]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	e00c      	b.n	80007c0 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADCVAX	:
			return command->NAME | command->MD | command->CHG;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	881a      	ldrh	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	889b      	ldrh	r3, [r3, #4]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	895b      	ldrh	r3, [r3, #10]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	e001      	b.n	80007c0 <LTC_MakeCommand+0x10a>
			break;

		default:
			return command->NAME;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	881b      	ldrh	r3, [r3, #0]
			break;
	}
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LTC_PEC>:

uint16_t LTC_PEC(uint16_t *data , uint8_t len) {
 80007cc:	b480      	push	{r7}
 80007ce:	b087      	sub	sp, #28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	70fb      	strb	r3, [r7, #3]
	int32_t remainder, address;
	remainder = LTC_PEC_SEED;
 80007d8:	2310      	movs	r3, #16
 80007da:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 80007dc:	2300      	movs	r3, #0
 80007de:	74fb      	strb	r3, [r7, #19]
 80007e0:	e02a      	b.n	8000838 <LTC_PEC+0x6c>
		address   = ((remainder >> 7) ^ ((data[i] >> 8) & 0xFF)) & 0xFF; //calculate PEC table address
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	11da      	asrs	r2, r3, #7
 80007e6:	7cfb      	ldrb	r3, [r7, #19]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	440b      	add	r3, r1
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4053      	eors	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	4914      	ldr	r1, [pc, #80]	@ (8000854 <LTC_PEC+0x88>)
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000808:	4053      	eors	r3, r2
 800080a:	617b      	str	r3, [r7, #20]
		address   = ((remainder >> 7) ^ (data[i] & 0xFF)) & 0xFF;    	 //calculate PEC table address
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	11da      	asrs	r2, r3, #7
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	440b      	add	r3, r1
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4053      	eors	r3, r2
 800081e:	b2db      	uxtb	r3, r3
 8000820:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	490b      	ldr	r1, [pc, #44]	@ (8000854 <LTC_PEC+0x88>)
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800082e:	4053      	eors	r3, r2
 8000830:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000832:	7cfb      	ldrb	r3, [r7, #19]
 8000834:	3301      	adds	r3, #1
 8000836:	74fb      	strb	r3, [r7, #19]
 8000838:	7cfa      	ldrb	r2, [r7, #19]
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	429a      	cmp	r2, r3
 800083e:	d3d0      	bcc.n	80007e2 <LTC_PEC+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	b29b      	uxth	r3, r3
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	b29b      	uxth	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	371c      	adds	r7, #28
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	24000320 	.word	0x24000320

08000858 <LTC_TransmitCommand>:

void LTC_TransmitCommand(uint16_t command) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	80fb      	strh	r3, [r7, #6]
	uint16_t pec = LTC_PEC(&command, 1);
 8000862:	1dbb      	adds	r3, r7, #6
 8000864:	2101      	movs	r1, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffb0 	bl	80007cc <LTC_PEC>
 800086c:	4603      	mov	r3, r0
 800086e:	81fb      	strh	r3, [r7, #14]
	LTC_SPI(command);
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fefa 	bl	800066c <LTC_SPI>
	LTC_SPI(pec);
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fef6 	bl	800066c <LTC_SPI>
}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <LTC_TransmitReceive>:

void LTC_TransmitReceive(uint16_t command, uint16_t* tx_data, uint16_t* rx_data) {
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
 8000894:	81fb      	strh	r3, [r7, #14]
	if((command & 0x07FF) == LTC_COMMAND_WRCFGA) {
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800089c:	2b01      	cmp	r3, #1
 800089e:	d109      	bne.n	80008b4 <LTC_TransmitReceive+0x2c>
		uint16_t pec = LTC_PEC(tx_data, 3);
 80008a0:	2103      	movs	r1, #3
 80008a2:	68b8      	ldr	r0, [r7, #8]
 80008a4:	f7ff ff92 	bl	80007cc <LTC_PEC>
 80008a8:	4603      	mov	r3, r0
 80008aa:	82bb      	strh	r3, [r7, #20]
		tx_data[3] = pec;
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	3306      	adds	r3, #6
 80008b0:	8aba      	ldrh	r2, [r7, #20]
 80008b2:	801a      	strh	r2, [r3, #0]
	}
	if((tx_data[0] & 0x07FF) < LTC_COMMAND_ADCV) {
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	881b      	ldrh	r3, [r3, #0]
 80008b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008bc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 80008c0:	da16      	bge.n	80008f0 <LTC_TransmitReceive+0x68>
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 80008c2:	2300      	movs	r3, #0
 80008c4:	75fb      	strb	r3, [r7, #23]
 80008c6:	e010      	b.n	80008ea <LTC_TransmitReceive+0x62>
			rx_data[i] = LTC_SPI(tx_data[i]);
 80008c8:	7dfb      	ldrb	r3, [r7, #23]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	4413      	add	r3, r2
 80008d0:	8819      	ldrh	r1, [r3, #0]
 80008d2:	7dfb      	ldrb	r3, [r7, #23]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	18d4      	adds	r4, r2, r3
 80008da:	4608      	mov	r0, r1
 80008dc:	f7ff fec6 	bl	800066c <LTC_SPI>
 80008e0:	4603      	mov	r3, r0
 80008e2:	8023      	strh	r3, [r4, #0]
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	3301      	adds	r3, #1
 80008e8:	75fb      	strb	r3, [r7, #23]
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d9eb      	bls.n	80008c8 <LTC_TransmitReceive+0x40>
		}
	}
}
 80008f0:	bf00      	nop
 80008f2:	371c      	adds	r7, #28
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b5b0      	push	{r4, r5, r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 ff53 	bl	80017a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f831 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f000 faa5 	bl	8000e54 <MX_GPIO_Init>
  MX_DMA_Init();
 800090a:	f000 fa5f 	bl	8000dcc <MX_DMA_Init>
  MX_FDCAN1_Init();
 800090e:	f000 f917 	bl	8000b40 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000912:	f000 f9b9 	bl	8000c88 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000916:	f000 f8ad 	bl	8000a74 <MX_ADC2_Init>
  MX_I2C1_Init();
 800091a:	f000 f975 	bl	8000c08 <MX_I2C1_Init>
  MX_USART1_Init();
 800091e:	f000 fa09 	bl	8000d34 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  Master* BMS;
  BMS_Init(&BMS);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fcda 	bl	80002e0 <BMS_Init>

  osDelay(5000);
 800092c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000930:	f008 fbf7 	bl	8009122 <osDelay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <main+0x68>)
 8000936:	463c      	mov	r4, r7
 8000938:	461d      	mov	r5, r3
 800093a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800093c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), BMS);
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	463b      	mov	r3, r7
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f008 fb9c 	bl	800908a <osThreadCreate>
 8000952:	4603      	mov	r3, r0
 8000954:	4a03      	ldr	r2, [pc, #12]	@ (8000964 <main+0x6c>)
 8000956:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000958:	f008 fb90 	bl	800907c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <main+0x64>
 8000960:	0800a900 	.word	0x0800a900
 8000964:	240007d0 	.word	0x240007d0

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09c      	sub	sp, #112	@ 0x70
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	224c      	movs	r2, #76	@ 0x4c
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f009 febe 	bl	800a6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f009 feb8 	bl	800a6f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000988:	2002      	movs	r0, #2
 800098a:	f003 fbcb 	bl	8004124 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <SystemClock_Config+0x100>)
 8000994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000996:	4a34      	ldr	r2, [pc, #208]	@ (8000a68 <SystemClock_Config+0x100>)
 8000998:	f023 0301 	bic.w	r3, r3, #1
 800099c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800099e:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <SystemClock_Config+0x100>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b30      	ldr	r3, [pc, #192]	@ (8000a6c <SystemClock_Config+0x104>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b0:	4a2e      	ldr	r2, [pc, #184]	@ (8000a6c <SystemClock_Config+0x104>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a6c <SystemClock_Config+0x104>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c4:	bf00      	nop
 80009c6:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <SystemClock_Config+0x104>)
 80009c8:	699b      	ldr	r3, [r3, #24]
 80009ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d2:	d1f8      	bne.n	80009c6 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <SystemClock_Config+0x108>)
 80009d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009d8:	4a25      	ldr	r2, [pc, #148]	@ (8000a70 <SystemClock_Config+0x108>)
 80009da:	f023 0303 	bic.w	r3, r3, #3
 80009de:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80009f8:	2309      	movs	r3, #9
 80009fa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a10:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a14:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f003 fbbc 	bl	8004198 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a26:	f000 fb25 	bl	8001074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	233f      	movs	r3, #63	@ 0x3f
 8000a2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3e:	2340      	movs	r3, #64	@ 0x40
 8000a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 ffcf 	bl	80049f4 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000a5c:	f000 fb0a 	bl	8001074 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3770      	adds	r7, #112	@ 0x70
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58000400 	.word	0x58000400
 8000a6c:	58024800 	.word	0x58024800
 8000a70:	58024400 	.word	0x58024400

08000a74 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a8c:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000a8e:	4a29      	ldr	r2, [pc, #164]	@ (8000b34 <MX_ADC2_Init+0xc0>)
 8000a90:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a92:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ae8:	4811      	ldr	r0, [pc, #68]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000aea:	f001 f851 	bl	8001b90 <HAL_ADC_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000af4:	f000 fabe 	bl	8001074 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_ADC2_Init+0xc4>)
 8000afa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afc:	2306      	movs	r3, #6
 8000afe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b04:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <MX_ADC2_Init+0xc8>)
 8000b06:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_ADC2_Init+0xbc>)
 8000b1a:	f001 f9db 	bl	8001ed4 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000b24:	f000 faa6 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	24000520 	.word	0x24000520
 8000b34:	40022100 	.word	0x40022100
 8000b38:	2a000400 	.word	0x2a000400
 8000b3c:	47ff0000 	.word	0x47ff0000

08000b40 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b44:	4b2e      	ldr	r3, [pc, #184]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b46:	4a2f      	ldr	r2, [pc, #188]	@ (8000c04 <MX_FDCAN1_Init+0xc4>)
 8000b48:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b56:	4b2a      	ldr	r3, [pc, #168]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b5c:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b62:	4b27      	ldr	r3, [pc, #156]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b6a:	2210      	movs	r2, #16
 8000b6c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000b6e:	4b24      	ldr	r3, [pc, #144]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000b74:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b76:	2202      	movs	r2, #2
 8000b78:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000b7a:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000b80:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000b98:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bbe:	2204      	movs	r2, #4
 8000bc0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_FDCAN1_Init+0xc0>)
 8000bee:	f002 fc43 	bl	8003478 <HAL_FDCAN_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000bf8:	f000 fa3c 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	24000584 	.word	0x24000584
 8000c04:	4000a000 	.word	0x4000a000

08000c08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c80 <MX_I2C1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x7c>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c44:	f003 f946 	bl	8003ed4 <HAL_I2C_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c4e:	f000 fa11 	bl	8001074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c56:	f003 f9cd 	bl	8003ff4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f000 fa08 	bl	8001074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c68:	f003 fa0f 	bl	800408a <HAL_I2CEx_ConfigDigitalFilter>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f9ff 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000624 	.word	0x24000624
 8000c80:	40005400 	.word	0x40005400
 8000c84:	00707cbb 	.word	0x00707cbb

08000c88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000c8e:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <MX_SPI1_Init+0xa8>)
 8000c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000c94:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c9a:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000ca2:	2203      	movs	r2, #3
 8000ca4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000cb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cde:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d16:	4805      	ldr	r0, [pc, #20]	@ (8000d2c <MX_SPI1_Init+0xa4>)
 8000d18:	f006 fbc6 	bl	80074a8 <HAL_SPI_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d22:	f000 f9a7 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	24000670 	.word	0x24000670
 8000d30:	40013000 	.word	0x40013000

08000d34 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <MX_USART1_Init+0x94>)
 8000d3c:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000d64:	4b17      	ldr	r3, [pc, #92]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	@ 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000d7c:	4811      	ldr	r0, [pc, #68]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d7e:	f007 fa83 	bl	8008288 <HAL_USART_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000d88:	f000 f974 	bl	8001074 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	480d      	ldr	r0, [pc, #52]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000d90:	f008 f896 	bl	8008ec0 <HAL_USARTEx_SetTxFifoThreshold>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000d9a:	f000 f96b 	bl	8001074 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4808      	ldr	r0, [pc, #32]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000da2:	f008 f8cb 	bl	8008f3c <HAL_USARTEx_SetRxFifoThreshold>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000dac:	f000 f962 	bl	8001074 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000db0:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <MX_USART1_Init+0x90>)
 8000db2:	f008 f84c 	bl	8008e4e <HAL_USARTEx_DisableFifoMode>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000dbc:	f000 f95a 	bl	8001074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	240006f8 	.word	0x240006f8
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <MX_DMA_Init+0x7c>)
 8000dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e48 <MX_DMA_Init+0x7c>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_DMA_Init+0x7c>)
 8000de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000df2:	4a17      	ldr	r2, [pc, #92]	@ (8000e50 <MX_DMA_Init+0x84>)
 8000df4:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000df6:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e02:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000e08:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0e:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000e2e:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_DMA_Init+0x80>)
 8000e30:	f001 fd8a 	bl	8002948 <HAL_DMA_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_DMA_Init+0x72>
  {
    Error_Handler( );
 8000e3a:	f000 f91b 	bl	8001074 <Error_Handler>
  }

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	24000758 	.word	0x24000758
 8000e50:	40020010 	.word	0x40020010

08000e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	@ 0x30
 8000e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6a:	4b6c      	ldr	r3, [pc, #432]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a6a      	ldr	r2, [pc, #424]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b68      	ldr	r3, [pc, #416]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e88:	4b64      	ldr	r3, [pc, #400]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a63      	ldr	r2, [pc, #396]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b60      	ldr	r3, [pc, #384]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b5d      	ldr	r3, [pc, #372]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	4a5b      	ldr	r2, [pc, #364]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb6:	4b59      	ldr	r3, [pc, #356]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ec4:	4b55      	ldr	r3, [pc, #340]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eca:	4a54      	ldr	r2, [pc, #336]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000ecc:	f043 0310 	orr.w	r3, r3, #16
 8000ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed4:	4b51      	ldr	r3, [pc, #324]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b4e      	ldr	r3, [pc, #312]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b46      	ldr	r3, [pc, #280]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f06:	4a45      	ldr	r2, [pc, #276]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000f08:	f043 0308 	orr.w	r3, r3, #8
 8000f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f10:	4b42      	ldr	r3, [pc, #264]	@ (800101c <MX_GPIO_Init+0x1c8>)
 8000f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	483f      	ldr	r0, [pc, #252]	@ (8001020 <MX_GPIO_Init+0x1cc>)
 8000f24:	f002 ffbc 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_ENABLE_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2190      	movs	r1, #144	@ 0x90
 8000f2c:	483d      	ldr	r0, [pc, #244]	@ (8001024 <MX_GPIO_Init+0x1d0>)
 8000f2e:	f002 ffb7 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_GPIO_Pin PC15_GPIO_Pin PC14_GPIO_Pin */
  GPIO_InitStruct.Pin = PC13_GPIO_Pin|PC15_GPIO_Pin|PC14_GPIO_Pin;
 8000f32:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4838      	ldr	r0, [pc, #224]	@ (8001028 <MX_GPIO_Init+0x1d4>)
 8000f48:	f002 fdfa 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f50:	2303      	movs	r3, #3
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 031c 	add.w	r3, r7, #28
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4832      	ldr	r0, [pc, #200]	@ (8001028 <MX_GPIO_Init+0x1d4>)
 8000f60:	f002 fdee 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Eletrobuild_Pin */
  GPIO_InitStruct.Pin = Reset_Eletrobuild_Pin;
 8000f64:	2380      	movs	r3, #128	@ 0x80
 8000f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f68:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Reset_Eletrobuild_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	482c      	ldr	r0, [pc, #176]	@ (800102c <MX_GPIO_Init+0x1d8>)
 8000f7a:	f002 fde1 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f90:	2305      	movs	r3, #5
 8000f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4822      	ldr	r0, [pc, #136]	@ (8001024 <MX_GPIO_Init+0x1d0>)
 8000f9c:	f002 fdd0 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fa0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa6:	2312      	movs	r3, #18
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fb2:	2304      	movs	r3, #4
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4819      	ldr	r0, [pc, #100]	@ (8001024 <MX_GPIO_Init+0x1d0>)
 8000fbe:	f002 fdbf 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4811      	ldr	r0, [pc, #68]	@ (8001020 <MX_GPIO_Init+0x1cc>)
 8000fda:	f002 fdb1 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_ENABLE_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = CHARGE_ENABLE_Pin|ERROR_LED_Pin;
 8000fde:	2390      	movs	r3, #144	@ 0x90
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <MX_GPIO_Init+0x1d0>)
 8000ff6:	f002 fda3 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_AUX_MINUS_Pin AIR_AUX_PLUS_Pin */
  GPIO_InitStruct.Pin = AIR_AUX_MINUS_Pin|AIR_AUX_PLUS_Pin;
 8000ffa:	2360      	movs	r3, #96	@ 0x60
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <MX_GPIO_Init+0x1d0>)
 800100e:	f002 fd97 	bl	8003b40 <HAL_GPIO_Init>

}
 8001012:	bf00      	nop
 8001014:	3730      	adds	r7, #48	@ 0x30
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	58024400 	.word	0x58024400
 8001020:	58020c00 	.word	0x58020c00
 8001024:	58020400 	.word	0x58020400
 8001028:	58020800 	.word	0x58020800
 800102c:	58021000 	.word	0x58021000

08001030 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Master* BMS = (Master*) argument;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  ElectricalManagement(BMS);
 800103c:	68f8      	ldr	r0, [r7, #12]
 800103e:	f7ff f98f 	bl	8000360 <ElectricalManagement>
	  osDelay(2000);
 8001042:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001046:	f008 f86c 	bl	8009122 <osDelay>
	  ElectricalManagement(BMS);
 800104a:	bf00      	nop
 800104c:	e7f6      	b.n	800103c <StartDefaultTask+0xc>
	...

08001050 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d101      	bne.n	8001066 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001062:	f000 fbdd 	bl	8001820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40010000 	.word	0x40010000

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <Error_Handler+0x8>

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_MspInit+0x38>)
 8001088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_MspInit+0x38>)
 800108e:	f043 0302 	orr.w	r3, r3, #2
 8001092:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <HAL_MspInit+0x38>)
 8001098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	210f      	movs	r1, #15
 80010a8:	f06f 0001 	mvn.w	r0, #1
 80010ac:	f001 fc24 	bl	80028f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	58024400 	.word	0x58024400

080010bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0b8      	sub	sp, #224	@ 0xe0
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	22bc      	movs	r2, #188	@ 0xbc
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f009 fb0b 	bl	800a6f8 <memset>
  if(hadc->Instance==ADC2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001190 <HAL_ADC_MspInit+0xd4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d14d      	bne.n	8001188 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80010f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80010f6:	2309      	movs	r3, #9
 80010f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80010fa:	2304      	movs	r3, #4
 80010fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010fe:	2302      	movs	r3, #2
 8001100:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001102:	2302      	movs	r3, #2
 8001104:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001106:	23c0      	movs	r3, #192	@ 0xc0
 8001108:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800110a:	2320      	movs	r3, #32
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800110e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001112:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f836 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 800112a:	f7ff ffa3 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_ADC_MspInit+0xd8>)
 8001130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_ADC_MspInit+0xd8>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_ADC_MspInit+0xd8>)
 8001140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_ADC_MspInit+0xd8>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a10      	ldr	r2, [pc, #64]	@ (8001194 <HAL_ADC_MspInit+0xd8>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_ADC_MspInit+0xd8>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_INP10
    PC1     ------> ADC2_INN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800116a:	2303      	movs	r3, #3
 800116c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001170:	2303      	movs	r3, #3
 8001172:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <HAL_ADC_MspInit+0xdc>)
 8001184:	f002 fcdc 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	37e0      	adds	r7, #224	@ 0xe0
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40022100 	.word	0x40022100
 8001194:	58024400 	.word	0x58024400
 8001198:	58020800 	.word	0x58020800

0800119c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b0b8      	sub	sp, #224	@ 0xe0
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	22bc      	movs	r2, #188	@ 0xbc
 80011ba:	2100      	movs	r1, #0
 80011bc:	4618      	mov	r0, r3
 80011be:	f009 fa9b 	bl	800a6f8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a25      	ldr	r2, [pc, #148]	@ (800125c <HAL_FDCAN_MspInit+0xc0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d143      	bne.n	8001254 <HAL_FDCAN_MspInit+0xb8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80011d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4618      	mov	r0, r3
 80011de:	f003 ffd7 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80011e8:	f7ff ff44 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <HAL_FDCAN_MspInit+0xc4>)
 80011ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80011f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001260 <HAL_FDCAN_MspInit+0xc4>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <HAL_FDCAN_MspInit+0xc4>)
 80011fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <HAL_FDCAN_MspInit+0xc4>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001210:	4a13      	ldr	r2, [pc, #76]	@ (8001260 <HAL_FDCAN_MspInit+0xc4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_FDCAN_MspInit+0xc4>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001220:	f003 0301 	and.w	r3, r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_Rx_Pin|CAN_Tx_Pin;
 8001228:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800122c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001242:	2309      	movs	r3, #9
 8001244:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001248:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <HAL_FDCAN_MspInit+0xc8>)
 8001250:	f002 fc76 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001254:	bf00      	nop
 8001256:	37e0      	adds	r7, #224	@ 0xe0
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	4000a000 	.word	0x4000a000
 8001260:	58024400 	.word	0x58024400
 8001264:	58020000 	.word	0x58020000

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b0b8      	sub	sp, #224	@ 0xe0
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	22bc      	movs	r2, #188	@ 0xbc
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f009 fa35 	bl	800a6f8 <memset>
  if(hi2c->Instance==I2C1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a25      	ldr	r2, [pc, #148]	@ (8001328 <HAL_I2C_MspInit+0xc0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d142      	bne.n	800131e <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001298:	2308      	movs	r3, #8
 800129a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 ff72 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012b2:	f7ff fedf 	bl	8001074 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b1d      	ldr	r3, [pc, #116]	@ (800132c <HAL_I2C_MspInit+0xc4>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <HAL_I2C_MspInit+0xc4>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_I2C_MspInit+0xc4>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ee:	2304      	movs	r3, #4
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <HAL_I2C_MspInit+0xc8>)
 80012fc:	f002 fc20 	bl	8003b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001300:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_I2C_MspInit+0xc4>)
 8001302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001306:	4a09      	ldr	r2, [pc, #36]	@ (800132c <HAL_I2C_MspInit+0xc4>)
 8001308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800130c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_I2C_MspInit+0xc4>)
 8001312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37e0      	adds	r7, #224	@ 0xe0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40005400 	.word	0x40005400
 800132c:	58024400 	.word	0x58024400
 8001330:	58020400 	.word	0x58020400

08001334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0b8      	sub	sp, #224	@ 0xe0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	22bc      	movs	r2, #188	@ 0xbc
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f009 f9cf 	bl	800a6f8 <memset>
  if(hspi->Instance==SPI1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a24      	ldr	r2, [pc, #144]	@ (80013f0 <HAL_SPI_MspInit+0xbc>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d141      	bne.n	80013e8 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001364:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001368:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800136a:	2300      	movs	r3, #0
 800136c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	4618      	mov	r0, r3
 8001374:	f003 ff0c 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800137e:	f7ff fe79 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <HAL_SPI_MspInit+0xc0>)
 8001384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001388:	4a1a      	ldr	r2, [pc, #104]	@ (80013f4 <HAL_SPI_MspInit+0xc0>)
 800138a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800138e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_SPI_MspInit+0xc0>)
 8001394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_SPI_MspInit+0xc0>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	4a13      	ldr	r2, [pc, #76]	@ (80013f4 <HAL_SPI_MspInit+0xc0>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b0:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_SPI_MspInit+0xc0>)
 80013b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013be:	23e0      	movs	r3, #224	@ 0xe0
 80013c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013d6:	2305      	movs	r3, #5
 80013d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_SPI_MspInit+0xc4>)
 80013e4:	f002 fbac 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	37e0      	adds	r7, #224	@ 0xe0
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40013000 	.word	0x40013000
 80013f4:	58024400 	.word	0x58024400
 80013f8:	58020000 	.word	0x58020000

080013fc <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b0b8      	sub	sp, #224	@ 0xe0
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	22bc      	movs	r2, #188	@ 0xbc
 800141a:	2100      	movs	r1, #0
 800141c:	4618      	mov	r0, r3
 800141e:	f009 f96b 	bl	800a6f8 <memset>
  if(husart->Instance==USART1)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a25      	ldr	r2, [pc, #148]	@ (80014bc <HAL_USART_MspInit+0xc0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d142      	bne.n	80014b2 <HAL_USART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001436:	f107 0310 	add.w	r3, r7, #16
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fea8 	bl	8005190 <HAL_RCCEx_PeriphCLKConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <HAL_USART_MspInit+0x4e>
    {
      Error_Handler();
 8001446:	f7ff fe15 	bl	8001074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <HAL_USART_MspInit+0xc4>)
 800144c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001450:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <HAL_USART_MspInit+0xc4>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800145a:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <HAL_USART_MspInit+0xc4>)
 800145c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_USART_MspInit+0xc4>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146e:	4a14      	ldr	r2, [pc, #80]	@ (80014c0 <HAL_USART_MspInit+0xc4>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_USART_MspInit+0xc4>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART1_Tx_Pin|USART1_Rx_Pin;
 8001486:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800148a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014a0:	2307      	movs	r3, #7
 80014a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80014aa:	4619      	mov	r1, r3
 80014ac:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <HAL_USART_MspInit+0xc8>)
 80014ae:	f002 fb47 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37e0      	adds	r7, #224	@ 0xe0
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40011000 	.word	0x40011000
 80014c0:	58024400 	.word	0x58024400
 80014c4:	58020000 	.word	0x58020000

080014c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	@ 0x38
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d844      	bhi.n	8001560 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80014d6:	2200      	movs	r2, #0
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	2019      	movs	r0, #25
 80014dc:	f001 fa0c 	bl	80028f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80014e0:	2019      	movs	r0, #25
 80014e2:	f001 fa23 	bl	800292c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014e6:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <HAL_InitTick+0xb0>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014ec:	4b23      	ldr	r3, [pc, #140]	@ (800157c <HAL_InitTick+0xb4>)
 80014ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80014f2:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_InitTick+0xb4>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <HAL_InitTick+0xb4>)
 80014fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150a:	f107 020c 	add.w	r2, r7, #12
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fdf9 	bl	800510c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800151a:	f003 fde1 	bl	80050e0 <HAL_RCC_GetPCLK2Freq>
 800151e:	4603      	mov	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001524:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001526:	4a16      	ldr	r2, [pc, #88]	@ (8001580 <HAL_InitTick+0xb8>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	3b01      	subs	r3, #1
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001532:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <HAL_InitTick+0xbc>)
 8001534:	4a14      	ldr	r2, [pc, #80]	@ (8001588 <HAL_InitTick+0xc0>)
 8001536:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0xbc>)
 800153a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800153e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001540:	4a10      	ldr	r2, [pc, #64]	@ (8001584 <HAL_InitTick+0xbc>)
 8001542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001544:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001546:	4b0f      	ldr	r3, [pc, #60]	@ (8001584 <HAL_InitTick+0xbc>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_InitTick+0xbc>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001552:	480c      	ldr	r0, [pc, #48]	@ (8001584 <HAL_InitTick+0xbc>)
 8001554:	f006 fbbf 	bl	8007cd6 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_InitTick+0xa6>
 800155e:	e001      	b.n	8001564 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e005      	b.n	8001570 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001564:	4807      	ldr	r0, [pc, #28]	@ (8001584 <HAL_InitTick+0xbc>)
 8001566:	f006 fc17 	bl	8007d98 <HAL_TIM_Base_Start_IT>
 800156a:	4603      	mov	r3, r0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3738      	adds	r7, #56	@ 0x38
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000008 	.word	0x24000008
 800157c:	58024400 	.word	0x58024400
 8001580:	431bde83 	.word	0x431bde83
 8001584:	240007d4 	.word	0x240007d4
 8001588:	40010000 	.word	0x40010000

0800158c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <NMI_Handler+0x4>

08001594 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <HardFault_Handler+0x4>

0800159c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <MemManage_Handler+0x4>

080015a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <BusFault_Handler+0x4>

080015ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <UsageFault_Handler+0x4>

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c8:	4802      	ldr	r0, [pc, #8]	@ (80015d4 <TIM1_UP_IRQHandler+0x10>)
 80015ca:	f006 fc5d 	bl	8007e88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	240007d4 	.word	0x240007d4

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f009 f8e4 	bl	800a7d4 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24080000 	.word	0x24080000
 8001638:	00000400 	.word	0x00000400
 800163c:	24000820 	.word	0x24000820
 8001640:	240046c8 	.word	0x240046c8

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <SystemInit+0xe4>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164e:	4a36      	ldr	r2, [pc, #216]	@ (8001728 <SystemInit+0xe4>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <SystemInit+0xe8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	2b06      	cmp	r3, #6
 8001662:	d807      	bhi.n	8001674 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <SystemInit+0xe8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 030f 	bic.w	r3, r3, #15
 800166c:	4a2f      	ldr	r2, [pc, #188]	@ (800172c <SystemInit+0xe8>)
 800166e:	f043 0307 	orr.w	r3, r3, #7
 8001672:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001674:	4b2e      	ldr	r3, [pc, #184]	@ (8001730 <SystemInit+0xec>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a2d      	ldr	r2, [pc, #180]	@ (8001730 <SystemInit+0xec>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001680:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <SystemInit+0xec>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <SystemInit+0xec>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4929      	ldr	r1, [pc, #164]	@ (8001730 <SystemInit+0xec>)
 800168c:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <SystemInit+0xf0>)
 800168e:	4013      	ands	r3, r2
 8001690:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <SystemInit+0xe8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800169e:	4b23      	ldr	r3, [pc, #140]	@ (800172c <SystemInit+0xe8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 030f 	bic.w	r3, r3, #15
 80016a6:	4a21      	ldr	r2, [pc, #132]	@ (800172c <SystemInit+0xe8>)
 80016a8:	f043 0307 	orr.w	r3, r3, #7
 80016ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ae:	4b20      	ldr	r3, [pc, #128]	@ (8001730 <SystemInit+0xec>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001730 <SystemInit+0xec>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <SystemInit+0xec>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001730 <SystemInit+0xec>)
 80016c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <SystemInit+0xf4>)
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <SystemInit+0xec>)
 80016c8:	4a1c      	ldr	r2, [pc, #112]	@ (800173c <SystemInit+0xf8>)
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <SystemInit+0xec>)
 80016ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <SystemInit+0xfc>)
 80016d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016d2:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <SystemInit+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016d8:	4b15      	ldr	r3, [pc, #84]	@ (8001730 <SystemInit+0xec>)
 80016da:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <SystemInit+0xfc>)
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016de:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <SystemInit+0xec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <SystemInit+0xec>)
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <SystemInit+0xfc>)
 80016e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <SystemInit+0xec>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <SystemInit+0xec>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001730 <SystemInit+0xec>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <SystemInit+0xec>)
 80016fe:	2200      	movs	r2, #0
 8001700:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <SystemInit+0x100>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <SystemInit+0x104>)
 8001708:	4013      	ands	r3, r2
 800170a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800170e:	d202      	bcs.n	8001716 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <SystemInit+0x108>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <SystemInit+0x10c>)
 8001718:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800171c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00
 800172c:	52002000 	.word	0x52002000
 8001730:	58024400 	.word	0x58024400
 8001734:	eaf6ed7f 	.word	0xeaf6ed7f
 8001738:	02020200 	.word	0x02020200
 800173c:	01ff0000 	.word	0x01ff0000
 8001740:	01010280 	.word	0x01010280
 8001744:	5c001000 	.word	0x5c001000
 8001748:	ffff0000 	.word	0xffff0000
 800174c:	51008108 	.word	0x51008108
 8001750:	52004000 	.word	0x52004000

08001754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800178c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001758:	f7ff ff74 	bl	8001644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800175e:	490d      	ldr	r1, [pc, #52]	@ (8001794 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001760:	4a0d      	ldr	r2, [pc, #52]	@ (8001798 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001764:	e002      	b.n	800176c <LoopCopyDataInit>

08001766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176a:	3304      	adds	r3, #4

0800176c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800176c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800176e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001770:	d3f9      	bcc.n	8001766 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001772:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001774:	4c0a      	ldr	r4, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001778:	e001      	b.n	800177e <LoopFillZerobss>

0800177a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800177c:	3204      	adds	r2, #4

0800177e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800177e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001780:	d3fb      	bcc.n	800177a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001782:	f009 f82d 	bl	800a7e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001786:	f7ff f8b7 	bl	80008f8 <main>
  bx  lr
 800178a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001790:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001794:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001798:	0800a9a0 	.word	0x0800a9a0
  ldr r2, =_sbss
 800179c:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 80017a0:	240046c4 	.word	0x240046c4

080017a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a4:	e7fe      	b.n	80017a4 <ADC3_IRQHandler>
	...

080017a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 f897 	bl	80028e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017b4:	f003 fad4 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <HAL_Init+0x68>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	4913      	ldr	r1, [pc, #76]	@ (8001814 <HAL_Init+0x6c>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <HAL_Init+0x68>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <HAL_Init+0x6c>)
 80017dc:	5cd3      	ldrb	r3, [r2, r3]
 80017de:	f003 031f 	and.w	r3, r3, #31
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_Init+0x70>)
 80017ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017ec:	4a0b      	ldr	r2, [pc, #44]	@ (800181c <HAL_Init+0x74>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017f2:	200f      	movs	r0, #15
 80017f4:	f7ff fe68 	bl	80014c8 <HAL_InitTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e002      	b.n	8001808 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001802:	f7ff fc3d 	bl	8001080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	58024400 	.word	0x58024400
 8001814:	0800a970 	.word	0x0800a970
 8001818:	24000004 	.word	0x24000004
 800181c:	24000000 	.word	0x24000000

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	@ (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2400000c 	.word	0x2400000c
 8001844:	24000824 	.word	0x24000824

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	24000824 	.word	0x24000824

08001860 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001864:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_GetREVID+0x14>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	0c1b      	lsrs	r3, r3, #16
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	5c001000 	.word	0x5c001000

08001878 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	609a      	str	r2, [r3, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3360      	adds	r3, #96	@ 0x60
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	431a      	orrs	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001914:	bf00      	nop
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	611a      	str	r2, [r3, #16]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001952:	b480      	push	{r7}
 8001954:	b087      	sub	sp, #28
 8001956:	af00      	add	r7, sp, #0
 8001958:	60f8      	str	r0, [r7, #12]
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3360      	adds	r3, #96	@ 0x60
 8001962:	461a      	mov	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	431a      	orrs	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]
  }
}
 800197c:	bf00      	nop
 800197e:	371c      	adds	r7, #28
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3330      	adds	r3, #48	@ 0x30
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f003 030c 	and.w	r3, r3, #12
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	211f      	movs	r1, #31
 80019b4:	fa01 f303 	lsl.w	r3, r1, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	0e9b      	lsrs	r3, r3, #26
 80019c0:	f003 011f 	and.w	r1, r3, #31
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	431a      	orrs	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019d4:	bf00      	nop
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3314      	adds	r3, #20
 80019f0:	461a      	mov	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	0e5b      	lsrs	r3, r3, #25
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	0d1b      	lsrs	r3, r3, #20
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	2107      	movs	r1, #7
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43db      	mvns	r3, r3
 8001a14:	401a      	ands	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	0d1b      	lsrs	r3, r3, #20
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	fa01 f303 	lsl.w	r3, r1, r3
 8001a24:	431a      	orrs	r2, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a2a:	bf00      	nop
 8001a2c:	371c      	adds	r7, #28
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a50:	43db      	mvns	r3, r3
 8001a52:	401a      	ands	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0318 	and.w	r3, r3, #24
 8001a5a:	4908      	ldr	r1, [pc, #32]	@ (8001a7c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a5c:	40d9      	lsrs	r1, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	400b      	ands	r3, r1
 8001a62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a66:	431a      	orrs	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	000fffff 	.word	0x000fffff

08001a80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4b04      	ldr	r3, [pc, #16]	@ (8001aa0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6093      	str	r3, [r2, #8]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	5fffffc0 	.word	0x5fffffc0

08001aa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	6fffffc0 	.word	0x6fffffc0

08001af4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001b08:	d101      	bne.n	8001b0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <LL_ADC_IsEnabled+0x18>
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <LL_ADC_IsEnabled+0x1a>
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d101      	bne.n	8001b5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d101      	bne.n	8001b80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e18f      	b.n	8001eca <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fa7f 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff67 	bl	8001aa4 <LL_ADC_IsDeepPowerDownEnabled>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d004      	beq.n	8001be6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff4d 	bl	8001a80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff82 	bl	8001af4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d114      	bne.n	8001c20 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff66 	bl	8001acc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c00:	4b87      	ldr	r3, [pc, #540]	@ (8001e20 <HAL_ADC_Init+0x290>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	4a87      	ldr	r2, [pc, #540]	@ (8001e24 <HAL_ADC_Init+0x294>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	099b      	lsrs	r3, r3, #6
 8001c0e:	3301      	adds	r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c12:	e002      	b.n	8001c1a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f9      	bne.n	8001c14 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff65 	bl	8001af4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10d      	bne.n	8001c4c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c34:	f043 0210 	orr.w	r2, r3, #16
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff76 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001c56:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 8129 	bne.w	8001eb8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 8125 	bne.w	8001eb8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c72:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001c76:	f043 0202 	orr.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff4a 	bl	8001b1c <LL_ADC_IsEnabled>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d136      	bne.n	8001cfc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a65      	ldr	r2, [pc, #404]	@ (8001e28 <HAL_ADC_Init+0x298>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d004      	beq.n	8001ca2 <HAL_ADC_Init+0x112>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a63      	ldr	r2, [pc, #396]	@ (8001e2c <HAL_ADC_Init+0x29c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_ADC_Init+0x130>
 8001ca2:	4861      	ldr	r0, [pc, #388]	@ (8001e28 <HAL_ADC_Init+0x298>)
 8001ca4:	f7ff ff3a 	bl	8001b1c <LL_ADC_IsEnabled>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	4860      	ldr	r0, [pc, #384]	@ (8001e2c <HAL_ADC_Init+0x29c>)
 8001cac:	f7ff ff36 	bl	8001b1c <LL_ADC_IsEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4323      	orrs	r3, r4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e008      	b.n	8001cd2 <HAL_ADC_Init+0x142>
 8001cc0:	485b      	ldr	r0, [pc, #364]	@ (8001e30 <HAL_ADC_Init+0x2a0>)
 8001cc2:	f7ff ff2b 	bl	8001b1c <LL_ADC_IsEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d012      	beq.n	8001cfc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a53      	ldr	r2, [pc, #332]	@ (8001e28 <HAL_ADC_Init+0x298>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d004      	beq.n	8001cea <HAL_ADC_Init+0x15a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a51      	ldr	r2, [pc, #324]	@ (8001e2c <HAL_ADC_Init+0x29c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_ADC_Init+0x15e>
 8001cea:	4a52      	ldr	r2, [pc, #328]	@ (8001e34 <HAL_ADC_Init+0x2a4>)
 8001cec:	e000      	b.n	8001cf0 <HAL_ADC_Init+0x160>
 8001cee:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_ADC_Init+0x2a8>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	f7ff fdbe 	bl	8001878 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001cfc:	f7ff fdb0 	bl	8001860 <HAL_GetREVID>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d914      	bls.n	8001d34 <HAL_ADC_Init+0x1a4>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d110      	bne.n	8001d34 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7d5b      	ldrb	r3, [r3, #21]
 8001d16:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d1c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d22:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7f1b      	ldrb	r3, [r3, #28]
 8001d28:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001d2a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d2c:	f043 030c 	orr.w	r3, r3, #12
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	e00d      	b.n	8001d50 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	7d5b      	ldrb	r3, [r3, #21]
 8001d38:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d3e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d44:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7f1b      	ldrb	r3, [r3, #28]
 8001d4a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7f1b      	ldrb	r3, [r3, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	045b      	lsls	r3, r3, #17
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d7a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <HAL_ADC_Init+0x2ac>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fed1 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001da0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fede 	bl	8001b68 <LL_ADC_INJ_IsConversionOngoing>
 8001dac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d15f      	bne.n	8001e74 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d15c      	bne.n	8001e74 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	7d1b      	ldrb	r3, [r3, #20]
 8001dbe:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68da      	ldr	r2, [r3, #12]
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <HAL_ADC_Init+0x2b0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	69b9      	ldr	r1, [r7, #24]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d130      	bne.n	8001e48 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dea:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	4b14      	ldr	r3, [pc, #80]	@ (8001e44 <HAL_ADC_Init+0x2b4>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dfa:	3a01      	subs	r2, #1
 8001dfc:	0411      	lsls	r1, r2, #16
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e08:	4311      	orrs	r1, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	e01c      	b.n	8001e58 <HAL_ADC_Init+0x2c8>
 8001e1e:	bf00      	nop
 8001e20:	24000000 	.word	0x24000000
 8001e24:	053e2d63 	.word	0x053e2d63
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022100 	.word	0x40022100
 8001e30:	58026000 	.word	0x58026000
 8001e34:	40022300 	.word	0x40022300
 8001e38:	58026300 	.word	0x58026300
 8001e3c:	fff0c003 	.word	0xfff0c003
 8001e40:	ffffbffc 	.word	0xffffbffc
 8001e44:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fb80 	bl	8002574 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d10c      	bne.n	8001e96 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	f023 010f 	bic.w	r1, r3, #15
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	1e5a      	subs	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e94:	e007      	b.n	8001ea6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 020f 	bic.w	r2, r2, #15
 8001ea4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eaa:	f023 0303 	bic.w	r3, r3, #3
 8001eae:	f043 0201 	orr.w	r2, r3, #1
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001eb6:	e007      	b.n	8001ec8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ebc:	f043 0210 	orr.w	r2, r3, #16
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ec8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3724      	adds	r7, #36	@ 0x24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd90      	pop	{r4, r7, pc}
 8001ed2:	bf00      	nop

08001ed4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ed4:	b590      	push	{r4, r7, lr}
 8001ed6:	b0a1      	sub	sp, #132	@ 0x84
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a9d      	ldr	r2, [pc, #628]	@ (8002164 <HAL_ADC_ConfigChannel+0x290>)
 8001eee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x2a>
 8001efa:	2302      	movs	r3, #2
 8001efc:	e321      	b.n	8002542 <HAL_ADC_ConfigChannel+0x66e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fe19 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 8306 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d108      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x62>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0e9b      	lsrs	r3, r3, #26
 8001f2a:	f003 031f 	and.w	r3, r3, #31
 8001f2e:	2201      	movs	r2, #1
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	e016      	b.n	8001f64 <HAL_ADC_ConfigChannel+0x90>
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f46:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e003      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001f52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f54:	fab3 f383 	clz	r3, r3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2201      	movs	r2, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	69d1      	ldr	r1, [r2, #28]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	430b      	orrs	r3, r1
 8001f70:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f7ff fd02 	bl	8001988 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fdda 	bl	8001b42 <LL_ADC_REG_IsConversionOngoing>
 8001f8e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fde7 	bl	8001b68 <LL_ADC_INJ_IsConversionOngoing>
 8001f9a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 80b3 	bne.w	800210a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f040 80af 	bne.w	800210a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6819      	ldr	r1, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	f7ff fd11 	bl	80019e0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8002168 <HAL_ADC_ConfigChannel+0x294>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001fc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fca:	d10b      	bne.n	8001fe4 <HAL_ADC_ConfigChannel+0x110>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	e01d      	b.n	8002020 <HAL_ADC_ConfigChannel+0x14c>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <HAL_ADC_ConfigChannel+0x136>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695a      	ldr	r2, [r3, #20]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	e00a      	b.n	8002020 <HAL_ADC_ConfigChannel+0x14c>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b04      	cmp	r3, #4
 8002028:	d027      	beq.n	800207a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6818      	ldr	r0, [r3, #0]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	6919      	ldr	r1, [r3, #16]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002038:	f7ff fc52 	bl	80018e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6919      	ldr	r1, [r3, #16]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	7e5b      	ldrb	r3, [r3, #25]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d102      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x17e>
 800204c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002050:	e000      	b.n	8002054 <HAL_ADC_ConfigChannel+0x180>
 8002052:	2300      	movs	r3, #0
 8002054:	461a      	mov	r2, r3
 8002056:	f7ff fc7c 	bl	8001952 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	7e1b      	ldrb	r3, [r3, #24]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x19c>
 800206a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800206e:	e000      	b.n	8002072 <HAL_ADC_ConfigChannel+0x19e>
 8002070:	2300      	movs	r3, #0
 8002072:	461a      	mov	r2, r3
 8002074:	f7ff fc54 	bl	8001920 <LL_ADC_SetDataRightShift>
 8002078:	e047      	b.n	800210a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002080:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	069b      	lsls	r3, r3, #26
 800208a:	429a      	cmp	r2, r3
 800208c:	d107      	bne.n	800209e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800209c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80020a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	069b      	lsls	r3, r3, #26
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d107      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020c0:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	069b      	lsls	r3, r3, #26
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d107      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80020e4:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	069b      	lsls	r3, r3, #26
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d107      	bne.n	800210a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002108:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fd04 	bl	8001b1c <LL_ADC_IsEnabled>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	f040 820d 	bne.w	8002536 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff fc85 	bl	8001a38 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	4a0c      	ldr	r2, [pc, #48]	@ (8002164 <HAL_ADC_ConfigChannel+0x290>)
 8002134:	4293      	cmp	r3, r2
 8002136:	f040 8133 	bne.w	80023a0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002146:	2b00      	cmp	r3, #0
 8002148:	d110      	bne.n	800216c <HAL_ADC_ConfigChannel+0x298>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b09      	cmp	r3, #9
 8002158:	bf94      	ite	ls
 800215a:	2301      	movls	r3, #1
 800215c:	2300      	movhi	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e01e      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x2cc>
 8002162:	bf00      	nop
 8002164:	47ff0000 	.word	0x47ff0000
 8002168:	5c001000 	.word	0x5c001000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800217e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002188:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2b09      	cmp	r3, #9
 8002198:	bf94      	ite	ls
 800219a:	2301      	movls	r3, #1
 800219c:	2300      	movhi	r3, #0
 800219e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d079      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x2ec>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	0e9b      	lsrs	r3, r3, #26
 80021b6:	3301      	adds	r3, #1
 80021b8:	069b      	lsls	r3, r3, #26
 80021ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021be:	e015      	b.n	80021ec <HAL_ADC_ConfigChannel+0x318>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80021ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80021d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80021d8:	2320      	movs	r3, #32
 80021da:	e003      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	3301      	adds	r3, #1
 80021e6:	069b      	lsls	r3, r3, #26
 80021e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_ConfigChannel+0x338>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	3301      	adds	r3, #1
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	e017      	b.n	800223c <HAL_ADC_ConfigChannel+0x368>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800221a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800221c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800221e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002224:	2320      	movs	r3, #32
 8002226:	e003      	b.n	8002230 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	3301      	adds	r3, #1
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f303 	lsl.w	r3, r1, r3
 800223c:	ea42 0103 	orr.w	r1, r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x38e>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	051b      	lsls	r3, r3, #20
 8002260:	e018      	b.n	8002294 <HAL_ADC_ConfigChannel+0x3c0>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800227a:	2320      	movs	r3, #32
 800227c:	e003      	b.n	8002286 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800227e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4613      	mov	r3, r2
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4413      	add	r3, r2
 8002292:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002294:	430b      	orrs	r3, r1
 8002296:	e07e      	b.n	8002396 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x3e0>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	3301      	adds	r3, #1
 80022ac:	069b      	lsls	r3, r3, #26
 80022ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022b2:	e015      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x40c>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80022c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e003      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80022d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	3301      	adds	r3, #1
 80022da:	069b      	lsls	r3, r3, #26
 80022dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d109      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x42c>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	3301      	adds	r3, #1
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	e017      	b.n	8002330 <HAL_ADC_ConfigChannel+0x45c>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	61bb      	str	r3, [r7, #24]
  return result;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e003      	b.n	8002324 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	fab3 f383 	clz	r3, r3
 8002322:	b2db      	uxtb	r3, r3
 8002324:	3301      	adds	r3, #1
 8002326:	f003 031f 	and.w	r3, r3, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	ea42 0103 	orr.w	r1, r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10d      	bne.n	800235c <HAL_ADC_ConfigChannel+0x488>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0e9b      	lsrs	r3, r3, #26
 8002346:	3301      	adds	r3, #1
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	3b1e      	subs	r3, #30
 8002354:	051b      	lsls	r3, r3, #20
 8002356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800235a:	e01b      	b.n	8002394 <HAL_ADC_ConfigChannel+0x4c0>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	60fb      	str	r3, [r7, #12]
  return result;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002374:	2320      	movs	r3, #32
 8002376:	e003      	b.n	8002380 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f003 021f 	and.w	r2, r3, #31
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	051b      	lsls	r3, r3, #20
 8002390:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002394:	430b      	orrs	r3, r1
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	6892      	ldr	r2, [r2, #8]
 800239a:	4619      	mov	r1, r3
 800239c:	f7ff fb20 	bl	80019e0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f280 80c6 	bge.w	8002536 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a67      	ldr	r2, [pc, #412]	@ (800254c <HAL_ADC_ConfigChannel+0x678>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d004      	beq.n	80023be <HAL_ADC_ConfigChannel+0x4ea>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a65      	ldr	r2, [pc, #404]	@ (8002550 <HAL_ADC_ConfigChannel+0x67c>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x4ee>
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <HAL_ADC_ConfigChannel+0x680>)
 80023c0:	e000      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x4f0>
 80023c2:	4b65      	ldr	r3, [pc, #404]	@ (8002558 <HAL_ADC_ConfigChannel+0x684>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fa7d 	bl	80018c4 <LL_ADC_GetCommonPathInternalCh>
 80023ca:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a5e      	ldr	r2, [pc, #376]	@ (800254c <HAL_ADC_ConfigChannel+0x678>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_ADC_ConfigChannel+0x50c>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5d      	ldr	r2, [pc, #372]	@ (8002550 <HAL_ADC_ConfigChannel+0x67c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d10e      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x52a>
 80023e0:	485a      	ldr	r0, [pc, #360]	@ (800254c <HAL_ADC_ConfigChannel+0x678>)
 80023e2:	f7ff fb9b 	bl	8001b1c <LL_ADC_IsEnabled>
 80023e6:	4604      	mov	r4, r0
 80023e8:	4859      	ldr	r0, [pc, #356]	@ (8002550 <HAL_ADC_ConfigChannel+0x67c>)
 80023ea:	f7ff fb97 	bl	8001b1c <LL_ADC_IsEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4323      	orrs	r3, r4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	e008      	b.n	8002410 <HAL_ADC_ConfigChannel+0x53c>
 80023fe:	4857      	ldr	r0, [pc, #348]	@ (800255c <HAL_ADC_ConfigChannel+0x688>)
 8002400:	f7ff fb8c 	bl	8001b1c <LL_ADC_IsEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d07d      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a51      	ldr	r2, [pc, #324]	@ (8002560 <HAL_ADC_ConfigChannel+0x68c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d130      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x5ac>
 800241e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002420:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d12b      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4b      	ldr	r2, [pc, #300]	@ (800255c <HAL_ADC_ConfigChannel+0x688>)
 800242e:	4293      	cmp	r3, r2
 8002430:	f040 8081 	bne.w	8002536 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a44      	ldr	r2, [pc, #272]	@ (800254c <HAL_ADC_ConfigChannel+0x678>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d004      	beq.n	8002448 <HAL_ADC_ConfigChannel+0x574>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a43      	ldr	r2, [pc, #268]	@ (8002550 <HAL_ADC_ConfigChannel+0x67c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x578>
 8002448:	4a42      	ldr	r2, [pc, #264]	@ (8002554 <HAL_ADC_ConfigChannel+0x680>)
 800244a:	e000      	b.n	800244e <HAL_ADC_ConfigChannel+0x57a>
 800244c:	4a42      	ldr	r2, [pc, #264]	@ (8002558 <HAL_ADC_ConfigChannel+0x684>)
 800244e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f7ff fa21 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800245c:	4b41      	ldr	r3, [pc, #260]	@ (8002564 <HAL_ADC_ConfigChannel+0x690>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	4a41      	ldr	r2, [pc, #260]	@ (8002568 <HAL_ADC_ConfigChannel+0x694>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	099b      	lsrs	r3, r3, #6
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002470:	e002      	b.n	8002478 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3b01      	subs	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f9      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800247e:	e05a      	b.n	8002536 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a39      	ldr	r2, [pc, #228]	@ (800256c <HAL_ADC_ConfigChannel+0x698>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d11e      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5f4>
 800248a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800248c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d119      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a30      	ldr	r2, [pc, #192]	@ (800255c <HAL_ADC_ConfigChannel+0x688>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d14b      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2a      	ldr	r2, [pc, #168]	@ (800254c <HAL_ADC_ConfigChannel+0x678>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x5de>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_ADC_ConfigChannel+0x67c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x5e2>
 80024b2:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <HAL_ADC_ConfigChannel+0x680>)
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x5e4>
 80024b6:	4a28      	ldr	r2, [pc, #160]	@ (8002558 <HAL_ADC_ConfigChannel+0x684>)
 80024b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7ff f9ec 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c6:	e036      	b.n	8002536 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a28      	ldr	r2, [pc, #160]	@ (8002570 <HAL_ADC_ConfigChannel+0x69c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d131      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x662>
 80024d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d12c      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <HAL_ADC_ConfigChannel+0x688>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d127      	bne.n	8002536 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a18      	ldr	r2, [pc, #96]	@ (800254c <HAL_ADC_ConfigChannel+0x678>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d004      	beq.n	80024fa <HAL_ADC_ConfigChannel+0x626>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a16      	ldr	r2, [pc, #88]	@ (8002550 <HAL_ADC_ConfigChannel+0x67c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x62a>
 80024fa:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <HAL_ADC_ConfigChannel+0x680>)
 80024fc:	e000      	b.n	8002500 <HAL_ADC_ConfigChannel+0x62c>
 80024fe:	4a16      	ldr	r2, [pc, #88]	@ (8002558 <HAL_ADC_ConfigChannel+0x684>)
 8002500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002506:	4619      	mov	r1, r3
 8002508:	4610      	mov	r0, r2
 800250a:	f7ff f9c8 	bl	800189e <LL_ADC_SetCommonPathInternalCh>
 800250e:	e012      	b.n	8002536 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002522:	e008      	b.n	8002536 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f043 0220 	orr.w	r2, r3, #32
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800253e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002542:	4618      	mov	r0, r3
 8002544:	3784      	adds	r7, #132	@ 0x84
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
 800254a:	bf00      	nop
 800254c:	40022000 	.word	0x40022000
 8002550:	40022100 	.word	0x40022100
 8002554:	40022300 	.word	0x40022300
 8002558:	58026300 	.word	0x58026300
 800255c:	58026000 	.word	0x58026000
 8002560:	cb840000 	.word	0xcb840000
 8002564:	24000000 	.word	0x24000000
 8002568:	053e2d63 	.word	0x053e2d63
 800256c:	c7520000 	.word	0xc7520000
 8002570:	cfb80000 	.word	0xcfb80000

08002574 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a79      	ldr	r2, [pc, #484]	@ (8002768 <ADC_ConfigureBoostMode+0x1f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <ADC_ConfigureBoostMode+0x1c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a78      	ldr	r2, [pc, #480]	@ (800276c <ADC_ConfigureBoostMode+0x1f8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d109      	bne.n	80025a4 <ADC_ConfigureBoostMode+0x30>
 8002590:	4b77      	ldr	r3, [pc, #476]	@ (8002770 <ADC_ConfigureBoostMode+0x1fc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e008      	b.n	80025b6 <ADC_ConfigureBoostMode+0x42>
 80025a4:	4b73      	ldr	r3, [pc, #460]	@ (8002774 <ADC_ConfigureBoostMode+0x200>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01c      	beq.n	80025f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025ba:	f002 fd4b 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 80025be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025c8:	d010      	beq.n	80025ec <ADC_ConfigureBoostMode+0x78>
 80025ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025ce:	d871      	bhi.n	80026b4 <ADC_ConfigureBoostMode+0x140>
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d002      	beq.n	80025dc <ADC_ConfigureBoostMode+0x68>
 80025d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025da:	d16b      	bne.n	80026b4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	60fb      	str	r3, [r7, #12]
        break;
 80025ea:	e066      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	60fb      	str	r3, [r7, #12]
        break;
 80025f2:	e062      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025f8:	f003 fd10 	bl	800601c <HAL_RCCEx_GetPeriphCLKFreq>
 80025fc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002606:	d051      	beq.n	80026ac <ADC_ConfigureBoostMode+0x138>
 8002608:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800260c:	d854      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 800260e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002612:	d047      	beq.n	80026a4 <ADC_ConfigureBoostMode+0x130>
 8002614:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002618:	d84e      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 800261a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800261e:	d03d      	beq.n	800269c <ADC_ConfigureBoostMode+0x128>
 8002620:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002624:	d848      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 8002626:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800262a:	d033      	beq.n	8002694 <ADC_ConfigureBoostMode+0x120>
 800262c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002630:	d842      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 8002632:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002636:	d029      	beq.n	800268c <ADC_ConfigureBoostMode+0x118>
 8002638:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800263c:	d83c      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 800263e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002642:	d01a      	beq.n	800267a <ADC_ConfigureBoostMode+0x106>
 8002644:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002648:	d836      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 800264a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800264e:	d014      	beq.n	800267a <ADC_ConfigureBoostMode+0x106>
 8002650:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002654:	d830      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 8002656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800265a:	d00e      	beq.n	800267a <ADC_ConfigureBoostMode+0x106>
 800265c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002660:	d82a      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 8002662:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002666:	d008      	beq.n	800267a <ADC_ConfigureBoostMode+0x106>
 8002668:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800266c:	d824      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 800266e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002672:	d002      	beq.n	800267a <ADC_ConfigureBoostMode+0x106>
 8002674:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002678:	d11e      	bne.n	80026b8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0c9b      	lsrs	r3, r3, #18
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60fb      	str	r3, [r7, #12]
        break;
 800268a:	e016      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	60fb      	str	r3, [r7, #12]
        break;
 8002692:	e012      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	60fb      	str	r3, [r7, #12]
        break;
 800269a:	e00e      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	60fb      	str	r3, [r7, #12]
        break;
 80026a2:	e00a      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	09db      	lsrs	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
        break;
 80026aa:	e006      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	60fb      	str	r3, [r7, #12]
        break;
 80026b2:	e002      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
        break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80026b8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026ba:	f7ff f8d1 	bl	8001860 <HAL_GetREVID>
 80026be:	4603      	mov	r3, r0
 80026c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d815      	bhi.n	80026f4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002778 <ADC_ConfigureBoostMode+0x204>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d908      	bls.n	80026e2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026e0:	e03e      	b.n	8002760 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f0:	609a      	str	r2, [r3, #8]
}
 80026f2:	e035      	b.n	8002760 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	085b      	lsrs	r3, r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <ADC_ConfigureBoostMode+0x208>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d808      	bhi.n	8002714 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002710:	609a      	str	r2, [r3, #8]
}
 8002712:	e025      	b.n	8002760 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4a1a      	ldr	r2, [pc, #104]	@ (8002780 <ADC_ConfigureBoostMode+0x20c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d80a      	bhi.n	8002732 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800272e:	609a      	str	r2, [r3, #8]
}
 8002730:	e016      	b.n	8002760 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4a13      	ldr	r2, [pc, #76]	@ (8002784 <ADC_ConfigureBoostMode+0x210>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d80a      	bhi.n	8002750 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800274c:	609a      	str	r2, [r3, #8]
}
 800274e:	e007      	b.n	8002760 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40022000 	.word	0x40022000
 800276c:	40022100 	.word	0x40022100
 8002770:	40022300 	.word	0x40022300
 8002774:	58026300 	.word	0x58026300
 8002778:	01312d00 	.word	0x01312d00
 800277c:	005f5e10 	.word	0x005f5e10
 8002780:	00bebc20 	.word	0x00bebc20
 8002784:	017d7840 	.word	0x017d7840

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027b6:	4a04      	ldr	r2, [pc, #16]	@ (80027c8 <__NVIC_SetPriorityGrouping+0x40>)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	60d3      	str	r3, [r2, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	05fa0000 	.word	0x05fa0000

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	db0b      	blt.n	8002816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	f003 021f 	and.w	r2, r3, #31
 8002804:	4907      	ldr	r1, [pc, #28]	@ (8002824 <__NVIC_EnableIRQ+0x38>)
 8002806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	2001      	movs	r0, #1
 800280e:	fa00 f202 	lsl.w	r2, r0, r2
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	e000e100 	.word	0xe000e100

08002828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	6039      	str	r1, [r7, #0]
 8002832:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	db0a      	blt.n	8002852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	490c      	ldr	r1, [pc, #48]	@ (8002874 <__NVIC_SetPriority+0x4c>)
 8002842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002846:	0112      	lsls	r2, r2, #4
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	440b      	add	r3, r1
 800284c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002850:	e00a      	b.n	8002868 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4908      	ldr	r1, [pc, #32]	@ (8002878 <__NVIC_SetPriority+0x50>)
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	3b04      	subs	r3, #4
 8002860:	0112      	lsls	r2, r2, #4
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	440b      	add	r3, r1
 8002866:	761a      	strb	r2, [r3, #24]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000e100 	.word	0xe000e100
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287c:	b480      	push	{r7}
 800287e:	b089      	sub	sp, #36	@ 0x24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f1c3 0307 	rsb	r3, r3, #7
 8002896:	2b04      	cmp	r3, #4
 8002898:	bf28      	it	cs
 800289a:	2304      	movcs	r3, #4
 800289c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3304      	adds	r3, #4
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d902      	bls.n	80028ac <NVIC_EncodePriority+0x30>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3b03      	subs	r3, #3
 80028aa:	e000      	b.n	80028ae <NVIC_EncodePriority+0x32>
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	43d9      	mvns	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d4:	4313      	orrs	r3, r2
         );
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	@ 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff ff4c 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002906:	f7ff ff63 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 800290a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68b9      	ldr	r1, [r7, #8]
 8002910:	6978      	ldr	r0, [r7, #20]
 8002912:	f7ff ffb3 	bl	800287c <NVIC_EncodePriority>
 8002916:	4602      	mov	r2, r0
 8002918:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff82 	bl	8002828 <__NVIC_SetPriority>
}
 8002924:	bf00      	nop
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff ff56 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7fe ff7a 	bl	8001848 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e316      	b.n	8002f8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a66      	ldr	r2, [pc, #408]	@ (8002b00 <HAL_DMA_Init+0x1b8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d04a      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_DMA_Init+0x1bc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d045      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a63      	ldr	r2, [pc, #396]	@ (8002b08 <HAL_DMA_Init+0x1c0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d040      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a62      	ldr	r2, [pc, #392]	@ (8002b0c <HAL_DMA_Init+0x1c4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d03b      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a60      	ldr	r2, [pc, #384]	@ (8002b10 <HAL_DMA_Init+0x1c8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d036      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a5f      	ldr	r2, [pc, #380]	@ (8002b14 <HAL_DMA_Init+0x1cc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d031      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b18 <HAL_DMA_Init+0x1d0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d02c      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5c      	ldr	r2, [pc, #368]	@ (8002b1c <HAL_DMA_Init+0x1d4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d027      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b20 <HAL_DMA_Init+0x1d8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d022      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a59      	ldr	r2, [pc, #356]	@ (8002b24 <HAL_DMA_Init+0x1dc>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d01d      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a57      	ldr	r2, [pc, #348]	@ (8002b28 <HAL_DMA_Init+0x1e0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d018      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a56      	ldr	r2, [pc, #344]	@ (8002b2c <HAL_DMA_Init+0x1e4>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a54      	ldr	r2, [pc, #336]	@ (8002b30 <HAL_DMA_Init+0x1e8>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a53      	ldr	r2, [pc, #332]	@ (8002b34 <HAL_DMA_Init+0x1ec>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a51      	ldr	r2, [pc, #324]	@ (8002b38 <HAL_DMA_Init+0x1f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_DMA_Init+0xb8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a50      	ldr	r2, [pc, #320]	@ (8002b3c <HAL_DMA_Init+0x1f4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d101      	bne.n	8002a04 <HAL_DMA_Init+0xbc>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_Init+0xbe>
 8002a04:	2300      	movs	r3, #0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 813b 	beq.w	8002c82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a37      	ldr	r2, [pc, #220]	@ (8002b00 <HAL_DMA_Init+0x1b8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d04a      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a36      	ldr	r2, [pc, #216]	@ (8002b04 <HAL_DMA_Init+0x1bc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d045      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a34      	ldr	r2, [pc, #208]	@ (8002b08 <HAL_DMA_Init+0x1c0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d040      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a33      	ldr	r2, [pc, #204]	@ (8002b0c <HAL_DMA_Init+0x1c4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d03b      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a31      	ldr	r2, [pc, #196]	@ (8002b10 <HAL_DMA_Init+0x1c8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d036      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a30      	ldr	r2, [pc, #192]	@ (8002b14 <HAL_DMA_Init+0x1cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d031      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b18 <HAL_DMA_Init+0x1d0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02c      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2d      	ldr	r2, [pc, #180]	@ (8002b1c <HAL_DMA_Init+0x1d4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d027      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2b      	ldr	r2, [pc, #172]	@ (8002b20 <HAL_DMA_Init+0x1d8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d022      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b24 <HAL_DMA_Init+0x1dc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d01d      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_DMA_Init+0x1e0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d018      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a27      	ldr	r2, [pc, #156]	@ (8002b2c <HAL_DMA_Init+0x1e4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a25      	ldr	r2, [pc, #148]	@ (8002b30 <HAL_DMA_Init+0x1e8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00e      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a24      	ldr	r2, [pc, #144]	@ (8002b34 <HAL_DMA_Init+0x1ec>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d009      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a22      	ldr	r2, [pc, #136]	@ (8002b38 <HAL_DMA_Init+0x1f0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_DMA_Init+0x174>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <HAL_DMA_Init+0x1f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <HAL_DMA_Init+0x186>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <HAL_DMA_Init+0x196>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0201 	bic.w	r2, r2, #1
 8002adc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ade:	e02f      	b.n	8002b40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ae0:	f7fe feb2 	bl	8001848 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d928      	bls.n	8002b40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2220      	movs	r2, #32
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2203      	movs	r2, #3
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e246      	b.n	8002f8e <HAL_DMA_Init+0x646>
 8002b00:	40020010 	.word	0x40020010
 8002b04:	40020028 	.word	0x40020028
 8002b08:	40020040 	.word	0x40020040
 8002b0c:	40020058 	.word	0x40020058
 8002b10:	40020070 	.word	0x40020070
 8002b14:	40020088 	.word	0x40020088
 8002b18:	400200a0 	.word	0x400200a0
 8002b1c:	400200b8 	.word	0x400200b8
 8002b20:	40020410 	.word	0x40020410
 8002b24:	40020428 	.word	0x40020428
 8002b28:	40020440 	.word	0x40020440
 8002b2c:	40020458 	.word	0x40020458
 8002b30:	40020470 	.word	0x40020470
 8002b34:	40020488 	.word	0x40020488
 8002b38:	400204a0 	.word	0x400204a0
 8002b3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1c8      	bne.n	8002ae0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4b83      	ldr	r3, [pc, #524]	@ (8002d68 <HAL_DMA_Init+0x420>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d107      	bne.n	8002ba4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ba4:	4b71      	ldr	r3, [pc, #452]	@ (8002d6c <HAL_DMA_Init+0x424>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b71      	ldr	r3, [pc, #452]	@ (8002d70 <HAL_DMA_Init+0x428>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb0:	d328      	bcc.n	8002c04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b28      	cmp	r3, #40	@ 0x28
 8002bb8:	d903      	bls.n	8002bc2 <HAL_DMA_Init+0x27a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8002bc0:	d917      	bls.n	8002bf2 <HAL_DMA_Init+0x2aa>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8002bc8:	d903      	bls.n	8002bd2 <HAL_DMA_Init+0x28a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b42      	cmp	r3, #66	@ 0x42
 8002bd0:	d90f      	bls.n	8002bf2 <HAL_DMA_Init+0x2aa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b46      	cmp	r3, #70	@ 0x46
 8002bd8:	d903      	bls.n	8002be2 <HAL_DMA_Init+0x29a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b48      	cmp	r3, #72	@ 0x48
 8002be0:	d907      	bls.n	8002bf2 <HAL_DMA_Init+0x2aa>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b4e      	cmp	r3, #78	@ 0x4e
 8002be8:	d905      	bls.n	8002bf6 <HAL_DMA_Init+0x2ae>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b52      	cmp	r3, #82	@ 0x52
 8002bf0:	d801      	bhi.n	8002bf6 <HAL_DMA_Init+0x2ae>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_Init+0x2b0>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f023 0307 	bic.w	r3, r3, #7
 8002c1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d117      	bne.n	8002c5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fa8f 	bl	8003164 <DMA_CheckFifoParam>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2240      	movs	r2, #64	@ 0x40
 8002c50:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e197      	b.n	8002f8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9ca 	bl	8003000 <DMA_CalcBaseAndBitshift>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	223f      	movs	r2, #63	@ 0x3f
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e0cd      	b.n	8002e1e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a3b      	ldr	r2, [pc, #236]	@ (8002d74 <HAL_DMA_Init+0x42c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a39      	ldr	r2, [pc, #228]	@ (8002d78 <HAL_DMA_Init+0x430>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01d      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a38      	ldr	r2, [pc, #224]	@ (8002d7c <HAL_DMA_Init+0x434>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d018      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a36      	ldr	r2, [pc, #216]	@ (8002d80 <HAL_DMA_Init+0x438>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_DMA_Init+0x43c>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d00e      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a33      	ldr	r2, [pc, #204]	@ (8002d88 <HAL_DMA_Init+0x440>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d009      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <HAL_DMA_Init+0x444>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d004      	beq.n	8002cd2 <HAL_DMA_Init+0x38a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a30      	ldr	r2, [pc, #192]	@ (8002d90 <HAL_DMA_Init+0x448>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_DMA_Init+0x38e>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_DMA_Init+0x390>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8097 	beq.w	8002e0c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a24      	ldr	r2, [pc, #144]	@ (8002d74 <HAL_DMA_Init+0x42c>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d021      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a22      	ldr	r2, [pc, #136]	@ (8002d78 <HAL_DMA_Init+0x430>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01c      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	@ (8002d7c <HAL_DMA_Init+0x434>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d017      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	@ (8002d80 <HAL_DMA_Init+0x438>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d012      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d84 <HAL_DMA_Init+0x43c>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00d      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <HAL_DMA_Init+0x440>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d008      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <HAL_DMA_Init+0x444>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <HAL_DMA_Init+0x3e4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <HAL_DMA_Init+0x448>)
 8002d2a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_DMA_Init+0x44c>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d021      	beq.n	8002d98 <HAL_DMA_Init+0x450>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	2b80      	cmp	r3, #128	@ 0x80
 8002d5a:	d102      	bne.n	8002d62 <HAL_DMA_Init+0x41a>
 8002d5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d60:	e01b      	b.n	8002d9a <HAL_DMA_Init+0x452>
 8002d62:	2300      	movs	r3, #0
 8002d64:	e019      	b.n	8002d9a <HAL_DMA_Init+0x452>
 8002d66:	bf00      	nop
 8002d68:	fe10803f 	.word	0xfe10803f
 8002d6c:	5c001000 	.word	0x5c001000
 8002d70:	ffff0000 	.word	0xffff0000
 8002d74:	58025408 	.word	0x58025408
 8002d78:	5802541c 	.word	0x5802541c
 8002d7c:	58025430 	.word	0x58025430
 8002d80:	58025444 	.word	0x58025444
 8002d84:	58025458 	.word	0x58025458
 8002d88:	5802546c 	.word	0x5802546c
 8002d8c:	58025480 	.word	0x58025480
 8002d90:	58025494 	.word	0x58025494
 8002d94:	fffe000f 	.word	0xfffe000f
 8002d98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4b6e      	ldr	r3, [pc, #440]	@ (8002f98 <HAL_DMA_Init+0x650>)
 8002de0:	4413      	add	r3, r2
 8002de2:	4a6e      	ldr	r2, [pc, #440]	@ (8002f9c <HAL_DMA_Init+0x654>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	009a      	lsls	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f905 	bl	8003000 <DMA_CalcBaseAndBitshift>
 8002df6:	4603      	mov	r3, r0
 8002df8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	f003 031f 	and.w	r3, r3, #31
 8002e02:	2201      	movs	r2, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	e008      	b.n	8002e1e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2240      	movs	r2, #64	@ 0x40
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2203      	movs	r2, #3
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0b7      	b.n	8002f8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa0 <HAL_DMA_Init+0x658>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d072      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa4 <HAL_DMA_Init+0x65c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d06d      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa8 <HAL_DMA_Init+0x660>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d068      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a5a      	ldr	r2, [pc, #360]	@ (8002fac <HAL_DMA_Init+0x664>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d063      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a59      	ldr	r2, [pc, #356]	@ (8002fb0 <HAL_DMA_Init+0x668>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d05e      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a57      	ldr	r2, [pc, #348]	@ (8002fb4 <HAL_DMA_Init+0x66c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d059      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a56      	ldr	r2, [pc, #344]	@ (8002fb8 <HAL_DMA_Init+0x670>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d054      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a54      	ldr	r2, [pc, #336]	@ (8002fbc <HAL_DMA_Init+0x674>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d04f      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a53      	ldr	r2, [pc, #332]	@ (8002fc0 <HAL_DMA_Init+0x678>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d04a      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a51      	ldr	r2, [pc, #324]	@ (8002fc4 <HAL_DMA_Init+0x67c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d045      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a50      	ldr	r2, [pc, #320]	@ (8002fc8 <HAL_DMA_Init+0x680>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d040      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a4e      	ldr	r2, [pc, #312]	@ (8002fcc <HAL_DMA_Init+0x684>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d03b      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd0 <HAL_DMA_Init+0x688>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d036      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd4 <HAL_DMA_Init+0x68c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a4a      	ldr	r2, [pc, #296]	@ (8002fd8 <HAL_DMA_Init+0x690>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d02c      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a48      	ldr	r2, [pc, #288]	@ (8002fdc <HAL_DMA_Init+0x694>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d027      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a47      	ldr	r2, [pc, #284]	@ (8002fe0 <HAL_DMA_Init+0x698>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	@ (8002fe4 <HAL_DMA_Init+0x69c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01d      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a44      	ldr	r2, [pc, #272]	@ (8002fe8 <HAL_DMA_Init+0x6a0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a42      	ldr	r2, [pc, #264]	@ (8002fec <HAL_DMA_Init+0x6a4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d013      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a41      	ldr	r2, [pc, #260]	@ (8002ff0 <HAL_DMA_Init+0x6a8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00e      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff4 <HAL_DMA_Init+0x6ac>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d009      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a3e      	ldr	r2, [pc, #248]	@ (8002ff8 <HAL_DMA_Init+0x6b0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d004      	beq.n	8002f0e <HAL_DMA_Init+0x5c6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3c      	ldr	r2, [pc, #240]	@ (8002ffc <HAL_DMA_Init+0x6b4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Init+0x5ca>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_DMA_Init+0x5cc>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d032      	beq.n	8002f7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f99f 	bl	800325c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d102      	bne.n	8002f2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	b2d2      	uxtb	r2, r2
 8002f36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002f40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_DMA_Init+0x624>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d80c      	bhi.n	8002f6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fa1c 	bl	8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	e008      	b.n	8002f7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	a7fdabf8 	.word	0xa7fdabf8
 8002f9c:	cccccccd 	.word	0xcccccccd
 8002fa0:	40020010 	.word	0x40020010
 8002fa4:	40020028 	.word	0x40020028
 8002fa8:	40020040 	.word	0x40020040
 8002fac:	40020058 	.word	0x40020058
 8002fb0:	40020070 	.word	0x40020070
 8002fb4:	40020088 	.word	0x40020088
 8002fb8:	400200a0 	.word	0x400200a0
 8002fbc:	400200b8 	.word	0x400200b8
 8002fc0:	40020410 	.word	0x40020410
 8002fc4:	40020428 	.word	0x40020428
 8002fc8:	40020440 	.word	0x40020440
 8002fcc:	40020458 	.word	0x40020458
 8002fd0:	40020470 	.word	0x40020470
 8002fd4:	40020488 	.word	0x40020488
 8002fd8:	400204a0 	.word	0x400204a0
 8002fdc:	400204b8 	.word	0x400204b8
 8002fe0:	58025408 	.word	0x58025408
 8002fe4:	5802541c 	.word	0x5802541c
 8002fe8:	58025430 	.word	0x58025430
 8002fec:	58025444 	.word	0x58025444
 8002ff0:	58025458 	.word	0x58025458
 8002ff4:	5802546c 	.word	0x5802546c
 8002ff8:	58025480 	.word	0x58025480
 8002ffc:	58025494 	.word	0x58025494

08003000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a42      	ldr	r2, [pc, #264]	@ (8003118 <DMA_CalcBaseAndBitshift+0x118>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d04a      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a41      	ldr	r2, [pc, #260]	@ (800311c <DMA_CalcBaseAndBitshift+0x11c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d045      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a3f      	ldr	r2, [pc, #252]	@ (8003120 <DMA_CalcBaseAndBitshift+0x120>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d040      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a3e      	ldr	r2, [pc, #248]	@ (8003124 <DMA_CalcBaseAndBitshift+0x124>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d03b      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a3c      	ldr	r2, [pc, #240]	@ (8003128 <DMA_CalcBaseAndBitshift+0x128>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d036      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a3b      	ldr	r2, [pc, #236]	@ (800312c <DMA_CalcBaseAndBitshift+0x12c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d031      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a39      	ldr	r2, [pc, #228]	@ (8003130 <DMA_CalcBaseAndBitshift+0x130>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d02c      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a38      	ldr	r2, [pc, #224]	@ (8003134 <DMA_CalcBaseAndBitshift+0x134>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d027      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a36      	ldr	r2, [pc, #216]	@ (8003138 <DMA_CalcBaseAndBitshift+0x138>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d022      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a35      	ldr	r2, [pc, #212]	@ (800313c <DMA_CalcBaseAndBitshift+0x13c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d01d      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a33      	ldr	r2, [pc, #204]	@ (8003140 <DMA_CalcBaseAndBitshift+0x140>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d018      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a32      	ldr	r2, [pc, #200]	@ (8003144 <DMA_CalcBaseAndBitshift+0x144>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d013      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a30      	ldr	r2, [pc, #192]	@ (8003148 <DMA_CalcBaseAndBitshift+0x148>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00e      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2f      	ldr	r2, [pc, #188]	@ (800314c <DMA_CalcBaseAndBitshift+0x14c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d009      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2d      	ldr	r2, [pc, #180]	@ (8003150 <DMA_CalcBaseAndBitshift+0x150>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d004      	beq.n	80030a8 <DMA_CalcBaseAndBitshift+0xa8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <DMA_CalcBaseAndBitshift+0x154>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <DMA_CalcBaseAndBitshift+0xac>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <DMA_CalcBaseAndBitshift+0xae>
 80030ac:	2300      	movs	r3, #0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d024      	beq.n	80030fc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	3b10      	subs	r3, #16
 80030ba:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <DMA_CalcBaseAndBitshift+0x158>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	4a24      	ldr	r2, [pc, #144]	@ (800315c <DMA_CalcBaseAndBitshift+0x15c>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d908      	bls.n	80030ec <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003160 <DMA_CalcBaseAndBitshift+0x160>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	659a      	str	r2, [r3, #88]	@ 0x58
 80030ea:	e00d      	b.n	8003108 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003160 <DMA_CalcBaseAndBitshift+0x160>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fa:	e005      	b.n	8003108 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40020010 	.word	0x40020010
 800311c:	40020028 	.word	0x40020028
 8003120:	40020040 	.word	0x40020040
 8003124:	40020058 	.word	0x40020058
 8003128:	40020070 	.word	0x40020070
 800312c:	40020088 	.word	0x40020088
 8003130:	400200a0 	.word	0x400200a0
 8003134:	400200b8 	.word	0x400200b8
 8003138:	40020410 	.word	0x40020410
 800313c:	40020428 	.word	0x40020428
 8003140:	40020440 	.word	0x40020440
 8003144:	40020458 	.word	0x40020458
 8003148:	40020470 	.word	0x40020470
 800314c:	40020488 	.word	0x40020488
 8003150:	400204a0 	.word	0x400204a0
 8003154:	400204b8 	.word	0x400204b8
 8003158:	aaaaaaab 	.word	0xaaaaaaab
 800315c:	0800a980 	.word	0x0800a980
 8003160:	fffffc00 	.word	0xfffffc00

08003164 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d120      	bne.n	80031ba <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317c:	2b03      	cmp	r3, #3
 800317e:	d858      	bhi.n	8003232 <DMA_CheckFifoParam+0xce>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <DMA_CheckFifoParam+0x24>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	08003199 	.word	0x08003199
 800318c:	080031ab 	.word	0x080031ab
 8003190:	08003199 	.word	0x08003199
 8003194:	08003233 	.word	0x08003233
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d048      	beq.n	8003236 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031a8:	e045      	b.n	8003236 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031b2:	d142      	bne.n	800323a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031b8:	e03f      	b.n	800323a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c2:	d123      	bne.n	800320c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d838      	bhi.n	800323e <DMA_CheckFifoParam+0xda>
 80031cc:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <DMA_CheckFifoParam+0x70>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	080031eb 	.word	0x080031eb
 80031dc:	080031e5 	.word	0x080031e5
 80031e0:	080031fd 	.word	0x080031fd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
        break;
 80031e8:	e030      	b.n	800324c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d025      	beq.n	8003242 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031fa:	e022      	b.n	8003242 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003204:	d11f      	bne.n	8003246 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800320a:	e01c      	b.n	8003246 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	2b02      	cmp	r3, #2
 8003212:	d902      	bls.n	800321a <DMA_CheckFifoParam+0xb6>
 8003214:	2b03      	cmp	r3, #3
 8003216:	d003      	beq.n	8003220 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003218:	e018      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
        break;
 800321e:	e015      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
    break;
 8003230:	e00b      	b.n	800324a <DMA_CheckFifoParam+0xe6>
        break;
 8003232:	bf00      	nop
 8003234:	e00a      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        break;
 8003236:	bf00      	nop
 8003238:	e008      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        break;
 800323a:	bf00      	nop
 800323c:	e006      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        break;
 800323e:	bf00      	nop
 8003240:	e004      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <DMA_CheckFifoParam+0xe8>
        break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <DMA_CheckFifoParam+0xe8>
    break;
 800324a:	bf00      	nop
    }
  }

  return status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop

0800325c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a38      	ldr	r2, [pc, #224]	@ (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a36      	ldr	r2, [pc, #216]	@ (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a35      	ldr	r2, [pc, #212]	@ (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a33      	ldr	r2, [pc, #204]	@ (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a32      	ldr	r2, [pc, #200]	@ (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2d      	ldr	r2, [pc, #180]	@ (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032be:	2300      	movs	r3, #0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01a      	beq.n	80032fa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	3b08      	subs	r3, #8
 80032cc:	4a28      	ldr	r2, [pc, #160]	@ (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a24      	ldr	r2, [pc, #144]	@ (8003378 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032f8:	e024      	b.n	8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3b10      	subs	r3, #16
 8003302:	4a1e      	ldr	r2, [pc, #120]	@ (800337c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d806      	bhi.n	8003322 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d902      	bls.n	8003322 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3308      	adds	r3, #8
 8003320:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4b18      	ldr	r3, [pc, #96]	@ (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	461a      	mov	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a16      	ldr	r2, [pc, #88]	@ (800338c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003334:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2201      	movs	r2, #1
 800333e:	409a      	lsls	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	58025408 	.word	0x58025408
 8003354:	5802541c 	.word	0x5802541c
 8003358:	58025430 	.word	0x58025430
 800335c:	58025444 	.word	0x58025444
 8003360:	58025458 	.word	0x58025458
 8003364:	5802546c 	.word	0x5802546c
 8003368:	58025480 	.word	0x58025480
 800336c:	58025494 	.word	0x58025494
 8003370:	cccccccd 	.word	0xcccccccd
 8003374:	16009600 	.word	0x16009600
 8003378:	58025880 	.word	0x58025880
 800337c:	aaaaaaab 	.word	0xaaaaaaab
 8003380:	400204b8 	.word	0x400204b8
 8003384:	4002040f 	.word	0x4002040f
 8003388:	10008200 	.word	0x10008200
 800338c:	40020880 	.word	0x40020880

08003390 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d04a      	beq.n	800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d847      	bhi.n	800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a25      	ldr	r2, [pc, #148]	@ (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d022      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a24      	ldr	r2, [pc, #144]	@ (800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d01d      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a21      	ldr	r2, [pc, #132]	@ (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1e      	ldr	r2, [pc, #120]	@ (800345c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1b      	ldr	r2, [pc, #108]	@ (8003464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003400:	2300      	movs	r3, #0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	461a      	mov	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a15      	ldr	r2, [pc, #84]	@ (800346c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003418:	671a      	str	r2, [r3, #112]	@ 0x70
 800341a:	e009      	b.n	8003430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	461a      	mov	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a11      	ldr	r2, [pc, #68]	@ (8003474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800342e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3b01      	subs	r3, #1
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	58025408 	.word	0x58025408
 800344c:	5802541c 	.word	0x5802541c
 8003450:	58025430 	.word	0x58025430
 8003454:	58025444 	.word	0x58025444
 8003458:	58025458 	.word	0x58025458
 800345c:	5802546c 	.word	0x5802546c
 8003460:	58025480 	.word	0x58025480
 8003464:	58025494 	.word	0x58025494
 8003468:	1600963f 	.word	0x1600963f
 800346c:	58025940 	.word	0x58025940
 8003470:	1000823f 	.word	0x1000823f
 8003474:	40020940 	.word	0x40020940

08003478 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b098      	sub	sp, #96	@ 0x60
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003480:	4a84      	ldr	r2, [pc, #528]	@ (8003694 <HAL_FDCAN_Init+0x21c>)
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	4611      	mov	r1, r2
 8003488:	224c      	movs	r2, #76	@ 0x4c
 800348a:	4618      	mov	r0, r3
 800348c:	f007 f9ce 	bl	800a82c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e1c6      	b.n	8003828 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7e      	ldr	r2, [pc, #504]	@ (8003698 <HAL_FDCAN_Init+0x220>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d106      	bne.n	80034b2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034ac:	461a      	mov	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d106      	bne.n	80034cc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fe68 	bl	800119c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0210 	bic.w	r2, r2, #16
 80034da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034dc:	f7fe f9b4 	bl	8001848 <HAL_GetTick>
 80034e0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034e2:	e014      	b.n	800350e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034e4:	f7fe f9b0 	bl	8001848 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b0a      	cmp	r3, #10
 80034f0:	d90d      	bls.n	800350e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2203      	movs	r2, #3
 8003506:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e18c      	b.n	8003828 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0308 	and.w	r3, r3, #8
 8003518:	2b08      	cmp	r3, #8
 800351a:	d0e3      	beq.n	80034e4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352c:	f7fe f98c 	bl	8001848 <HAL_GetTick>
 8003530:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003532:	e014      	b.n	800355e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003534:	f7fe f988 	bl	8001848 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b0a      	cmp	r3, #10
 8003540:	d90d      	bls.n	800355e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e164      	b.n	8003828 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0e3      	beq.n	8003534 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0202 	orr.w	r2, r2, #2
 800357a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7c1b      	ldrb	r3, [r3, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d108      	bne.n	8003596 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003592:	619a      	str	r2, [r3, #24]
 8003594:	e007      	b.n	80035a6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035a4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	7c5b      	ldrb	r3, [r3, #17]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	699a      	ldr	r2, [r3, #24]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035bc:	619a      	str	r2, [r3, #24]
 80035be:	e007      	b.n	80035d0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035ce:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7c9b      	ldrb	r3, [r3, #18]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035e6:	619a      	str	r2, [r3, #24]
 80035e8:	e007      	b.n	80035fa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035f8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800361e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0210 	bic.w	r2, r2, #16
 800362e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d108      	bne.n	800364a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0204 	orr.w	r2, r2, #4
 8003646:	619a      	str	r2, [r3, #24]
 8003648:	e030      	b.n	80036ac <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d02c      	beq.n	80036ac <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d020      	beq.n	800369c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003668:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0210 	orr.w	r2, r2, #16
 8003678:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b03      	cmp	r3, #3
 8003680:	d114      	bne.n	80036ac <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0220 	orr.w	r2, r2, #32
 8003690:	619a      	str	r2, [r3, #24]
 8003692:	e00b      	b.n	80036ac <HAL_FDCAN_Init+0x234>
 8003694:	0800a91c 	.word	0x0800a91c
 8003698:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0220 	orr.w	r2, r2, #32
 80036aa:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036bc:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036c4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036d4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036d6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036e0:	d115      	bne.n	800370e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ec:	3b01      	subs	r3, #1
 80036ee:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036f0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f6:	3b01      	subs	r3, #1
 80036f8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80036fa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003702:	3b01      	subs	r3, #1
 8003704:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800370a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800370c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003734:	4413      	add	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d011      	beq.n	800375e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003742:	f023 0107 	bic.w	r1, r3, #7
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	3360      	adds	r3, #96	@ 0x60
 800374e:	443b      	add	r3, r7
 8003750:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800376e:	f023 0107 	bic.w	r1, r3, #7
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3360      	adds	r3, #96	@ 0x60
 800377a:	443b      	add	r3, r7
 800377c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378e:	2b00      	cmp	r3, #0
 8003790:	d012      	beq.n	80037b8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800379a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	3360      	adds	r3, #96	@ 0x60
 80037a6:	443b      	add	r3, r7
 80037a8:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037ac:	011a      	lsls	r2, r3, #4
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037c8:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	3360      	adds	r3, #96	@ 0x60
 80037d4:	443b      	add	r3, r7
 80037d6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037da:	021a      	lsls	r2, r3, #8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a11      	ldr	r2, [pc, #68]	@ (8003830 <HAL_FDCAN_Init+0x3b8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d107      	bne.n	8003800 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f022 0203 	bic.w	r2, r2, #3
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f80b 	bl	8003834 <FDCAN_CalcultateRamBlockAddresses>
 800381e:	4603      	mov	r3, r0
 8003820:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8003824:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8003828:	4618      	mov	r0, r3
 800382a:	3760      	adds	r7, #96	@ 0x60
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	4000a000 	.word	0x4000a000

08003834 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003840:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800384a:	4ba7      	ldr	r3, [pc, #668]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800384c:	4013      	ands	r3, r2
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	0091      	lsls	r1, r2, #2
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	430b      	orrs	r3, r1
 8003858:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003864:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	4413      	add	r3, r2
 8003880:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800388a:	4b97      	ldr	r3, [pc, #604]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800388c:	4013      	ands	r3, r2
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	0091      	lsls	r1, r2, #2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	430b      	orrs	r3, r1
 8003898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ac:	041a      	lsls	r2, r3, #16
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80038cc:	4b86      	ldr	r3, [pc, #536]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	0091      	lsls	r1, r2, #2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038e6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	041a      	lsls	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003914:	4b74      	ldr	r3, [pc, #464]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003916:	4013      	ands	r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	0091      	lsls	r1, r2, #2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	430b      	orrs	r3, r1
 8003922:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800392e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003936:	041a      	lsls	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800394a:	fb02 f303 	mul.w	r3, r2, r3
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4413      	add	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800395c:	4b62      	ldr	r3, [pc, #392]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800395e:	4013      	ands	r3, r2
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	0091      	lsls	r1, r2, #2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003976:	fb02 f303 	mul.w	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	4413      	add	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8003988:	4b57      	ldr	r3, [pc, #348]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800398a:	4013      	ands	r3, r2
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	0091      	lsls	r1, r2, #2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	430b      	orrs	r3, r1
 8003996:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039a2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	041a      	lsls	r2, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	430a      	orrs	r2, r1
 80039b2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	4413      	add	r3, r2
 80039c0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80039ca:	4b47      	ldr	r3, [pc, #284]	@ (8003ae8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	0091      	lsls	r1, r2, #2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039e4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	041a      	lsls	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a00:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a08:	061a      	lsls	r2, r3, #24
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a18:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	441a      	add	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	441a      	add	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8003a7e:	fb01 f303 	mul.w	r3, r1, r3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	441a      	add	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8003aca:	fb01 f303 	mul.w	r3, r1, r3
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ade:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d915      	bls.n	8003b10 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003ae4:	e006      	b.n	8003af4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003ae6:	bf00      	nop
 8003ae8:	ffff0003 	.word	0xffff0003
 8003aec:	10002b00 	.word	0x10002b00
 8003af0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e010      	b.n	8003b32 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e005      	b.n	8003b24 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3304      	adds	r3, #4
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3f3      	bcc.n	8003b18 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	@ 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b4e:	4b89      	ldr	r3, [pc, #548]	@ (8003d74 <HAL_GPIO_Init+0x234>)
 8003b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b52:	e194      	b.n	8003e7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8186 	beq.w	8003e78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d005      	beq.n	8003b84 <HAL_GPIO_Init+0x44>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d130      	bne.n	8003be6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bba:	2201      	movs	r2, #1
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0201 	and.w	r2, r3, #1
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d017      	beq.n	8003c22 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d123      	bne.n	8003c76 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	08da      	lsrs	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3208      	adds	r2, #8
 8003c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	220f      	movs	r2, #15
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	08da      	lsrs	r2, r3, #3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3208      	adds	r2, #8
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	2203      	movs	r2, #3
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	43db      	mvns	r3, r3
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0203 	and.w	r2, r3, #3
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 80e0 	beq.w	8003e78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8003d78 <HAL_GPIO_Init+0x238>)
 8003cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8003d78 <HAL_GPIO_Init+0x238>)
 8003cc0:	f043 0302 	orr.w	r3, r3, #2
 8003cc4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d78 <HAL_GPIO_Init+0x238>)
 8003cca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cd6:	4a29      	ldr	r2, [pc, #164]	@ (8003d7c <HAL_GPIO_Init+0x23c>)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	3302      	adds	r3, #2
 8003cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a20      	ldr	r2, [pc, #128]	@ (8003d80 <HAL_GPIO_Init+0x240>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d052      	beq.n	8003da8 <HAL_GPIO_Init+0x268>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a1f      	ldr	r2, [pc, #124]	@ (8003d84 <HAL_GPIO_Init+0x244>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d031      	beq.n	8003d6e <HAL_GPIO_Init+0x22e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003d88 <HAL_GPIO_Init+0x248>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d02b      	beq.n	8003d6a <HAL_GPIO_Init+0x22a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <HAL_GPIO_Init+0x24c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d025      	beq.n	8003d66 <HAL_GPIO_Init+0x226>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d90 <HAL_GPIO_Init+0x250>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <HAL_GPIO_Init+0x222>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a1b      	ldr	r2, [pc, #108]	@ (8003d94 <HAL_GPIO_Init+0x254>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x21e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003d98 <HAL_GPIO_Init+0x258>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a19      	ldr	r2, [pc, #100]	@ (8003d9c <HAL_GPIO_Init+0x25c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x216>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <HAL_GPIO_Init+0x260>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x212>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <HAL_GPIO_Init+0x264>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x20e>
 8003d4a:	2309      	movs	r3, #9
 8003d4c:	e02d      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d4e:	230a      	movs	r3, #10
 8003d50:	e02b      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d52:	2308      	movs	r3, #8
 8003d54:	e029      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d56:	2307      	movs	r3, #7
 8003d58:	e027      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d5a:	2306      	movs	r3, #6
 8003d5c:	e025      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d5e:	2305      	movs	r3, #5
 8003d60:	e023      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d62:	2304      	movs	r3, #4
 8003d64:	e021      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d66:	2303      	movs	r3, #3
 8003d68:	e01f      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e01d      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e01b      	b.n	8003daa <HAL_GPIO_Init+0x26a>
 8003d72:	bf00      	nop
 8003d74:	58000080 	.word	0x58000080
 8003d78:	58024400 	.word	0x58024400
 8003d7c:	58000400 	.word	0x58000400
 8003d80:	58020000 	.word	0x58020000
 8003d84:	58020400 	.word	0x58020400
 8003d88:	58020800 	.word	0x58020800
 8003d8c:	58020c00 	.word	0x58020c00
 8003d90:	58021000 	.word	0x58021000
 8003d94:	58021400 	.word	0x58021400
 8003d98:	58021800 	.word	0x58021800
 8003d9c:	58021c00 	.word	0x58021c00
 8003da0:	58022000 	.word	0x58022000
 8003da4:	58022400 	.word	0x58022400
 8003da8:	2300      	movs	r3, #0
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	0092      	lsls	r2, r2, #2
 8003db2:	4093      	lsls	r3, r2
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dba:	4938      	ldr	r1, [pc, #224]	@ (8003e9c <HAL_GPIO_Init+0x35c>)
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	089b      	lsrs	r3, r3, #2
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f ae63 	bne.w	8003b54 <HAL_GPIO_Init+0x14>
  }
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	3724      	adds	r7, #36	@ 0x24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	58000400 	.word	0x58000400

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e07f      	b.n	8003fe6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d106      	bne.n	8003f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fd f9b4 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	@ 0x24
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e006      	b.n	8003f5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d104      	bne.n	8003f6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <HAL_I2C_Init+0x11c>)
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69d9      	ldr	r1, [r3, #28]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	02008000 	.word	0x02008000

08003ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b20      	cmp	r3, #32
 8004008:	d138      	bne.n	800407c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004014:	2302      	movs	r3, #2
 8004016:	e032      	b.n	800407e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	@ 0x24
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6819      	ldr	r1, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b20      	cmp	r3, #32
 800409e:	d139      	bne.n	8004114 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e033      	b.n	8004116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2224      	movs	r2, #36	@ 0x24
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0201 	bic.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800412c:	4b19      	ldr	r3, [pc, #100]	@ (8004194 <HAL_PWREx_ConfigSupply+0x70>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d00a      	beq.n	800414e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004138:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <HAL_PWREx_ConfigSupply+0x70>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e01f      	b.n	800418a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	e01d      	b.n	800418a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800414e:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <HAL_PWREx_ConfigSupply+0x70>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f023 0207 	bic.w	r2, r3, #7
 8004156:	490f      	ldr	r1, [pc, #60]	@ (8004194 <HAL_PWREx_ConfigSupply+0x70>)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800415e:	f7fd fb73 	bl	8001848 <HAL_GetTick>
 8004162:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004164:	e009      	b.n	800417a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004166:	f7fd fb6f 	bl	8001848 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004174:	d901      	bls.n	800417a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e007      	b.n	800418a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800417a:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_PWREx_ConfigSupply+0x70>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004186:	d1ee      	bne.n	8004166 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	58024800 	.word	0x58024800

08004198 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08c      	sub	sp, #48	@ 0x30
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f000 bc1d 	b.w	80049e6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8087 	beq.w	80042c8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ba:	4b99      	ldr	r3, [pc, #612]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041c4:	4b96      	ldr	r3, [pc, #600]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80041c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d007      	beq.n	80041e0 <HAL_RCC_OscConfig+0x48>
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	2b18      	cmp	r3, #24
 80041d4:	d110      	bne.n	80041f8 <HAL_RCC_OscConfig+0x60>
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d10b      	bne.n	80041f8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d06c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x12e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d168      	bne.n	80042c6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e3f6      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004200:	d106      	bne.n	8004210 <HAL_RCC_OscConfig+0x78>
 8004202:	4b87      	ldr	r3, [pc, #540]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a86      	ldr	r2, [pc, #536]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e02e      	b.n	800426e <HAL_RCC_OscConfig+0xd6>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10c      	bne.n	8004232 <HAL_RCC_OscConfig+0x9a>
 8004218:	4b81      	ldr	r3, [pc, #516]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a80      	ldr	r2, [pc, #512]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800421e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b7e      	ldr	r3, [pc, #504]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7d      	ldr	r2, [pc, #500]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800422a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	e01d      	b.n	800426e <HAL_RCC_OscConfig+0xd6>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423a:	d10c      	bne.n	8004256 <HAL_RCC_OscConfig+0xbe>
 800423c:	4b78      	ldr	r3, [pc, #480]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a77      	ldr	r2, [pc, #476]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004242:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	4b75      	ldr	r3, [pc, #468]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a74      	ldr	r2, [pc, #464]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800424e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004252:	6013      	str	r3, [r2, #0]
 8004254:	e00b      	b.n	800426e <HAL_RCC_OscConfig+0xd6>
 8004256:	4b72      	ldr	r3, [pc, #456]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a71      	ldr	r2, [pc, #452]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800425c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b6f      	ldr	r3, [pc, #444]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6e      	ldr	r2, [pc, #440]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004268:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d013      	beq.n	800429e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fd fae7 	bl	8001848 <HAL_GetTick>
 800427a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800427e:	f7fd fae3 	bl	8001848 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b64      	cmp	r3, #100	@ 0x64
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e3aa      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004290:	4b63      	ldr	r3, [pc, #396]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0xe6>
 800429c:	e014      	b.n	80042c8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429e:	f7fd fad3 	bl	8001848 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a6:	f7fd facf 	bl	8001848 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	@ 0x64
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e396      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042b8:	4b59      	ldr	r3, [pc, #356]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f0      	bne.n	80042a6 <HAL_RCC_OscConfig+0x10e>
 80042c4:	e000      	b.n	80042c8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 80cb 	beq.w	800446c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	4b52      	ldr	r3, [pc, #328]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042de:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_RCC_OscConfig+0x164>
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b18      	cmp	r3, #24
 80042f0:	d156      	bne.n	80043a0 <HAL_RCC_OscConfig+0x208>
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d151      	bne.n	80043a0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fc:	4b48      	ldr	r3, [pc, #288]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x17c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e368      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004314:	4b42      	ldr	r3, [pc, #264]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f023 0219 	bic.w	r2, r3, #25
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	493f      	ldr	r1, [pc, #252]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004326:	f7fd fa8f 	bl	8001848 <HAL_GetTick>
 800432a:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432e:	f7fd fa8b 	bl	8001848 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e352      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004340:	4b37      	ldr	r3, [pc, #220]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434c:	f7fd fa88 	bl	8001860 <HAL_GetREVID>
 8004350:	4603      	mov	r3, r0
 8004352:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004356:	4293      	cmp	r3, r2
 8004358:	d817      	bhi.n	800438a <HAL_RCC_OscConfig+0x1f2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	2b40      	cmp	r3, #64	@ 0x40
 8004360:	d108      	bne.n	8004374 <HAL_RCC_OscConfig+0x1dc>
 8004362:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800436a:	4a2d      	ldr	r2, [pc, #180]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800436c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004370:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004372:	e07b      	b.n	800446c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b2a      	ldr	r3, [pc, #168]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	4927      	ldr	r1, [pc, #156]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004388:	e070      	b.n	800446c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b25      	ldr	r3, [pc, #148]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	4921      	ldr	r1, [pc, #132]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800439e:	e065      	b.n	800446c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d048      	beq.n	800443a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 0219 	bic.w	r2, r3, #25
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	491a      	ldr	r1, [pc, #104]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd fa45 	bl	8001848 <HAL_GetTick>
 80043be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fd fa41 	bl	8001848 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e308      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043d4:	4b12      	ldr	r3, [pc, #72]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	f7fd fa3e 	bl	8001860 <HAL_GetREVID>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d81a      	bhi.n	8004424 <HAL_RCC_OscConfig+0x28c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b40      	cmp	r3, #64	@ 0x40
 80043f4:	d108      	bne.n	8004408 <HAL_RCC_OscConfig+0x270>
 80043f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004404:	6053      	str	r3, [r2, #4]
 8004406:	e031      	b.n	800446c <HAL_RCC_OscConfig+0x2d4>
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	031b      	lsls	r3, r3, #12
 8004416:	4902      	ldr	r1, [pc, #8]	@ (8004420 <HAL_RCC_OscConfig+0x288>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
 800441c:	e026      	b.n	800446c <HAL_RCC_OscConfig+0x2d4>
 800441e:	bf00      	nop
 8004420:	58024400 	.word	0x58024400
 8004424:	4b9a      	ldr	r3, [pc, #616]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	4997      	ldr	r1, [pc, #604]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
 8004438:	e018      	b.n	800446c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b95      	ldr	r3, [pc, #596]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a94      	ldr	r2, [pc, #592]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fd f9ff 	bl	8001848 <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800444e:	f7fd f9fb 	bl	8001848 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e2c2      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004460:	4b8b      	ldr	r3, [pc, #556]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0310 	and.w	r3, r3, #16
 8004474:	2b00      	cmp	r3, #0
 8004476:	f000 80a9 	beq.w	80045cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800447a:	4b85      	ldr	r3, [pc, #532]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004482:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004484:	4b82      	ldr	r3, [pc, #520]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d007      	beq.n	80044a0 <HAL_RCC_OscConfig+0x308>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b18      	cmp	r3, #24
 8004494:	d13a      	bne.n	800450c <HAL_RCC_OscConfig+0x374>
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d135      	bne.n	800450c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044a0:	4b7b      	ldr	r3, [pc, #492]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_OscConfig+0x320>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2b80      	cmp	r3, #128	@ 0x80
 80044b2:	d001      	beq.n	80044b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e296      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044b8:	f7fd f9d2 	bl	8001860 <HAL_GetREVID>
 80044bc:	4603      	mov	r3, r0
 80044be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d817      	bhi.n	80044f6 <HAL_RCC_OscConfig+0x35e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d108      	bne.n	80044e0 <HAL_RCC_OscConfig+0x348>
 80044ce:	4b70      	ldr	r3, [pc, #448]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80044d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80044d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044de:	e075      	b.n	80045cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	069b      	lsls	r3, r3, #26
 80044ee:	4968      	ldr	r1, [pc, #416]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044f4:	e06a      	b.n	80045cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044f6:	4b66      	ldr	r3, [pc, #408]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	061b      	lsls	r3, r3, #24
 8004504:	4962      	ldr	r1, [pc, #392]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004506:	4313      	orrs	r3, r2
 8004508:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800450a:	e05f      	b.n	80045cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d042      	beq.n	800459a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004514:	4b5e      	ldr	r3, [pc, #376]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5d      	ldr	r2, [pc, #372]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800451a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004520:	f7fd f992 	bl	8001848 <HAL_GetTick>
 8004524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004528:	f7fd f98e 	bl	8001848 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e255      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800453a:	4b55      	ldr	r3, [pc, #340]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004546:	f7fd f98b 	bl	8001860 <HAL_GetREVID>
 800454a:	4603      	mov	r3, r0
 800454c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004550:	4293      	cmp	r3, r2
 8004552:	d817      	bhi.n	8004584 <HAL_RCC_OscConfig+0x3ec>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	2b20      	cmp	r3, #32
 800455a:	d108      	bne.n	800456e <HAL_RCC_OscConfig+0x3d6>
 800455c:	4b4c      	ldr	r3, [pc, #304]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004564:	4a4a      	ldr	r2, [pc, #296]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004566:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800456a:	6053      	str	r3, [r2, #4]
 800456c:	e02e      	b.n	80045cc <HAL_RCC_OscConfig+0x434>
 800456e:	4b48      	ldr	r3, [pc, #288]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	069b      	lsls	r3, r3, #26
 800457c:	4944      	ldr	r1, [pc, #272]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800457e:	4313      	orrs	r3, r2
 8004580:	604b      	str	r3, [r1, #4]
 8004582:	e023      	b.n	80045cc <HAL_RCC_OscConfig+0x434>
 8004584:	4b42      	ldr	r3, [pc, #264]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	493f      	ldr	r1, [pc, #252]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004594:	4313      	orrs	r3, r2
 8004596:	60cb      	str	r3, [r1, #12]
 8004598:	e018      	b.n	80045cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800459a:	4b3d      	ldr	r3, [pc, #244]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a3c      	ldr	r2, [pc, #240]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80045a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd f94f 	bl	8001848 <HAL_GetTick>
 80045aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80045ae:	f7fd f94b 	bl	8001848 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e212      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045c0:	4b33      	ldr	r3, [pc, #204]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1f0      	bne.n	80045ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d036      	beq.n	8004646 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d019      	beq.n	8004614 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fd f92c 	bl	8001848 <HAL_GetTick>
 80045f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fd f928 	bl	8001848 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1ef      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004606:	4b22      	ldr	r3, [pc, #136]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x45c>
 8004612:	e018      	b.n	8004646 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b1e      	ldr	r3, [pc, #120]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004618:	4a1d      	ldr	r2, [pc, #116]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fd f912 	bl	8001848 <HAL_GetTick>
 8004624:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004628:	f7fd f90e 	bl	8001848 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1d5      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800463a:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d039      	beq.n	80046c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01c      	beq.n	8004694 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a0c      	ldr	r2, [pc, #48]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004660:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004664:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004666:	f7fd f8ef 	bl	8001848 <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800466e:	f7fd f8eb 	bl	8001848 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1b2      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004680:	4b03      	ldr	r3, [pc, #12]	@ (8004690 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x4d6>
 800468c:	e01b      	b.n	80046c6 <HAL_RCC_OscConfig+0x52e>
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004694:	4b9b      	ldr	r3, [pc, #620]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a9a      	ldr	r2, [pc, #616]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800469a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800469e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80046a0:	f7fd f8d2 	bl	8001848 <HAL_GetTick>
 80046a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80046a8:	f7fd f8ce 	bl	8001848 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e195      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046ba:	4b92      	ldr	r3, [pc, #584]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8081 	beq.w	80047d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004908 <HAL_RCC_OscConfig+0x770>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a8b      	ldr	r2, [pc, #556]	@ (8004908 <HAL_RCC_OscConfig+0x770>)
 80046da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e0:	f7fd f8b2 	bl	8001848 <HAL_GetTick>
 80046e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046e8:	f7fd f8ae 	bl	8001848 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	@ 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e175      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046fa:	4b83      	ldr	r3, [pc, #524]	@ (8004908 <HAL_RCC_OscConfig+0x770>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x584>
 800470e:	4b7d      	ldr	r3, [pc, #500]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a7c      	ldr	r2, [pc, #496]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	6713      	str	r3, [r2, #112]	@ 0x70
 800471a:	e02d      	b.n	8004778 <HAL_RCC_OscConfig+0x5e0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10c      	bne.n	800473e <HAL_RCC_OscConfig+0x5a6>
 8004724:	4b77      	ldr	r3, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	4a76      	ldr	r2, [pc, #472]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004730:	4b74      	ldr	r3, [pc, #464]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004734:	4a73      	ldr	r2, [pc, #460]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004736:	f023 0304 	bic.w	r3, r3, #4
 800473a:	6713      	str	r3, [r2, #112]	@ 0x70
 800473c:	e01c      	b.n	8004778 <HAL_RCC_OscConfig+0x5e0>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	2b05      	cmp	r3, #5
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0x5c8>
 8004746:	4b6f      	ldr	r3, [pc, #444]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474a:	4a6e      	ldr	r2, [pc, #440]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800474c:	f043 0304 	orr.w	r3, r3, #4
 8004750:	6713      	str	r3, [r2, #112]	@ 0x70
 8004752:	4b6c      	ldr	r3, [pc, #432]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	4a6b      	ldr	r2, [pc, #428]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	6713      	str	r3, [r2, #112]	@ 0x70
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0x5e0>
 8004760:	4b68      	ldr	r3, [pc, #416]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004764:	4a67      	ldr	r2, [pc, #412]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004766:	f023 0301 	bic.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	@ 0x70
 800476c:	4b65      	ldr	r3, [pc, #404]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	4a64      	ldr	r2, [pc, #400]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004772:	f023 0304 	bic.w	r3, r3, #4
 8004776:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d015      	beq.n	80047ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004780:	f7fd f862 	bl	8001848 <HAL_GetTick>
 8004784:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004786:	e00a      	b.n	800479e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004788:	f7fd f85e 	bl	8001848 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e123      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800479e:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ee      	beq.n	8004788 <HAL_RCC_OscConfig+0x5f0>
 80047aa:	e014      	b.n	80047d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fd f84c 	bl	8001848 <HAL_GetTick>
 80047b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd f848 	bl	8001848 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e10d      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ca:	4b4e      	ldr	r3, [pc, #312]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ee      	bne.n	80047b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8102 	beq.w	80049e4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047e0:	4b48      	ldr	r3, [pc, #288]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047e8:	2b18      	cmp	r3, #24
 80047ea:	f000 80bd 	beq.w	8004968 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	f040 809e 	bne.w	8004934 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f8:	4b42      	ldr	r3, [pc, #264]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a41      	ldr	r2, [pc, #260]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd f820 	bl	8001848 <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd f81c 	bl	8001848 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e0e3      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481e:	4b39      	ldr	r3, [pc, #228]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800482a:	4b36      	ldr	r3, [pc, #216]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800482c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800482e:	4b37      	ldr	r3, [pc, #220]	@ (800490c <HAL_RCC_OscConfig+0x774>)
 8004830:	4013      	ands	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	430a      	orrs	r2, r1
 800483e:	4931      	ldr	r1, [pc, #196]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004840:	4313      	orrs	r3, r2
 8004842:	628b      	str	r3, [r1, #40]	@ 0x28
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004848:	3b01      	subs	r3, #1
 800484a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004852:	3b01      	subs	r3, #1
 8004854:	025b      	lsls	r3, r3, #9
 8004856:	b29b      	uxth	r3, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	3b01      	subs	r3, #1
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486c:	3b01      	subs	r3, #1
 800486e:	061b      	lsls	r3, r3, #24
 8004870:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004874:	4923      	ldr	r1, [pc, #140]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004876:	4313      	orrs	r3, r2
 8004878:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800487a:	4b22      	ldr	r3, [pc, #136]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800487c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004886:	4b1f      	ldr	r3, [pc, #124]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800488a:	4b21      	ldr	r3, [pc, #132]	@ (8004910 <HAL_RCC_OscConfig+0x778>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004892:	00d2      	lsls	r2, r2, #3
 8004894:	491b      	ldr	r1, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 8004896:	4313      	orrs	r3, r2
 8004898:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800489a:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489e:	f023 020c 	bic.w	r2, r3, #12
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	4917      	ldr	r1, [pc, #92]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048ac:	4b15      	ldr	r3, [pc, #84]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	f023 0202 	bic.w	r2, r3, #2
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b8:	4912      	ldr	r1, [pc, #72]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048be:	4b11      	ldr	r3, [pc, #68]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	4a10      	ldr	r2, [pc, #64]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	4a0a      	ldr	r2, [pc, #40]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80048e2:	4b08      	ldr	r3, [pc, #32]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048e8:	f043 0301 	orr.w	r3, r3, #1
 80048ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ee:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <HAL_RCC_OscConfig+0x76c>)
 80048f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048fa:	f7fc ffa5 	bl	8001848 <HAL_GetTick>
 80048fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004900:	e011      	b.n	8004926 <HAL_RCC_OscConfig+0x78e>
 8004902:	bf00      	nop
 8004904:	58024400 	.word	0x58024400
 8004908:	58024800 	.word	0x58024800
 800490c:	fffffc0c 	.word	0xfffffc0c
 8004910:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004914:	f7fc ff98 	bl	8001848 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e05f      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004926:	4b32      	ldr	r3, [pc, #200]	@ (80049f0 <HAL_RCC_OscConfig+0x858>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0x77c>
 8004932:	e057      	b.n	80049e4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004934:	4b2e      	ldr	r3, [pc, #184]	@ (80049f0 <HAL_RCC_OscConfig+0x858>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a2d      	ldr	r2, [pc, #180]	@ (80049f0 <HAL_RCC_OscConfig+0x858>)
 800493a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800493e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fc ff82 	bl	8001848 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004948:	f7fc ff7e 	bl	8001848 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e045      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800495a:	4b25      	ldr	r3, [pc, #148]	@ (80049f0 <HAL_RCC_OscConfig+0x858>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x7b0>
 8004966:	e03d      	b.n	80049e4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004968:	4b21      	ldr	r3, [pc, #132]	@ (80049f0 <HAL_RCC_OscConfig+0x858>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800496e:	4b20      	ldr	r3, [pc, #128]	@ (80049f0 <HAL_RCC_OscConfig+0x858>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	2b01      	cmp	r3, #1
 800497a:	d031      	beq.n	80049e0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f003 0203 	and.w	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d12a      	bne.n	80049e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d122      	bne.n	80049e0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d11a      	bne.n	80049e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	0a5b      	lsrs	r3, r3, #9
 80049ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d111      	bne.n	80049e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d108      	bne.n	80049e0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	0e1b      	lsrs	r3, r3, #24
 80049d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3730      	adds	r7, #48	@ 0x30
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	58024400 	.word	0x58024400

080049f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e19c      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b8a      	ldr	r3, [pc, #552]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b87      	ldr	r3, [pc, #540]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 020f 	bic.w	r2, r3, #15
 8004a1e:	4985      	ldr	r1, [pc, #532]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b83      	ldr	r3, [pc, #524]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e184      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	4b7b      	ldr	r3, [pc, #492]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d908      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a54:	4b78      	ldr	r3, [pc, #480]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	4975      	ldr	r1, [pc, #468]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d010      	beq.n	8004a94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	4b70      	ldr	r3, [pc, #448]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d908      	bls.n	8004a94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004a82:	4b6d      	ldr	r3, [pc, #436]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	496a      	ldr	r1, [pc, #424]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0310 	and.w	r3, r3, #16
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d010      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699a      	ldr	r2, [r3, #24]
 8004aa4:	4b64      	ldr	r3, [pc, #400]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d908      	bls.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ab0:	4b61      	ldr	r3, [pc, #388]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	495e      	ldr	r1, [pc, #376]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d010      	beq.n	8004af0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69da      	ldr	r2, [r3, #28]
 8004ad2:	4b59      	ldr	r3, [pc, #356]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d908      	bls.n	8004af0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ade:	4b56      	ldr	r3, [pc, #344]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	4953      	ldr	r1, [pc, #332]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d010      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	4b4d      	ldr	r3, [pc, #308]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d908      	bls.n	8004b1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f023 020f 	bic.w	r2, r3, #15
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4947      	ldr	r1, [pc, #284]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d055      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b2a:	4b43      	ldr	r3, [pc, #268]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	4940      	ldr	r1, [pc, #256]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d107      	bne.n	8004b54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b44:	4b3c      	ldr	r3, [pc, #240]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d121      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0f6      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d115      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0ea      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b74:	4b30      	ldr	r3, [pc, #192]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d109      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0de      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b84:	4b2c      	ldr	r3, [pc, #176]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0d6      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b94:	4b28      	ldr	r3, [pc, #160]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f023 0207 	bic.w	r2, r3, #7
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4925      	ldr	r1, [pc, #148]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba6:	f7fc fe4f 	bl	8001848 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bac:	e00a      	b.n	8004bc4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bae:	f7fc fe4b 	bl	8001848 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e0be      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d1eb      	bne.n	8004bae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d208      	bcs.n	8004c04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf2:	4b11      	ldr	r3, [pc, #68]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f023 020f 	bic.w	r2, r3, #15
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	490e      	ldr	r1, [pc, #56]	@ (8004c38 <HAL_RCC_ClockConfig+0x244>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c04:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d214      	bcs.n	8004c3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b08      	ldr	r3, [pc, #32]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 020f 	bic.w	r2, r3, #15
 8004c1a:	4906      	ldr	r1, [pc, #24]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <HAL_RCC_ClockConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e086      	b.n	8004d42 <HAL_RCC_ClockConfig+0x34e>
 8004c34:	52002000 	.word	0x52002000
 8004c38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691a      	ldr	r2, [r3, #16]
 8004c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d208      	bcs.n	8004c6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c58:	4b3c      	ldr	r3, [pc, #240]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4939      	ldr	r1, [pc, #228]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695a      	ldr	r2, [r3, #20]
 8004c7a:	4b34      	ldr	r3, [pc, #208]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d208      	bcs.n	8004c98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c86:	4b31      	ldr	r3, [pc, #196]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	492e      	ldr	r1, [pc, #184]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d208      	bcs.n	8004cc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cb4:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	4922      	ldr	r1, [pc, #136]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0320 	and.w	r3, r3, #32
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d010      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d208      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	4917      	ldr	r1, [pc, #92]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cf4:	f000 f834 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b14      	ldr	r3, [pc, #80]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 030f 	and.w	r3, r3, #15
 8004d04:	4912      	ldr	r1, [pc, #72]	@ (8004d50 <HAL_RCC_ClockConfig+0x35c>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d12:	4b0e      	ldr	r3, [pc, #56]	@ (8004d4c <HAL_RCC_ClockConfig+0x358>)
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004d50 <HAL_RCC_ClockConfig+0x35c>)
 8004d1c:	5cd3      	ldrb	r3, [r2, r3]
 8004d1e:	f003 031f 	and.w	r3, r3, #31
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
 8004d28:	4a0a      	ldr	r2, [pc, #40]	@ (8004d54 <HAL_RCC_ClockConfig+0x360>)
 8004d2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d58 <HAL_RCC_ClockConfig+0x364>)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004d32:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <HAL_RCC_ClockConfig+0x368>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fc fbc6 	bl	80014c8 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	0800a970 	.word	0x0800a970
 8004d54:	24000004 	.word	0x24000004
 8004d58:	24000000 	.word	0x24000000
 8004d5c:	24000008 	.word	0x24000008

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	@ 0x24
 8004d64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d66:	4bb3      	ldr	r3, [pc, #716]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d6e:	2b18      	cmp	r3, #24
 8004d70:	f200 8155 	bhi.w	800501e <HAL_RCC_GetSysClockFreq+0x2be>
 8004d74:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	0800501f 	.word	0x0800501f
 8004d84:	0800501f 	.word	0x0800501f
 8004d88:	0800501f 	.word	0x0800501f
 8004d8c:	0800501f 	.word	0x0800501f
 8004d90:	0800501f 	.word	0x0800501f
 8004d94:	0800501f 	.word	0x0800501f
 8004d98:	0800501f 	.word	0x0800501f
 8004d9c:	08004e07 	.word	0x08004e07
 8004da0:	0800501f 	.word	0x0800501f
 8004da4:	0800501f 	.word	0x0800501f
 8004da8:	0800501f 	.word	0x0800501f
 8004dac:	0800501f 	.word	0x0800501f
 8004db0:	0800501f 	.word	0x0800501f
 8004db4:	0800501f 	.word	0x0800501f
 8004db8:	0800501f 	.word	0x0800501f
 8004dbc:	08004e0d 	.word	0x08004e0d
 8004dc0:	0800501f 	.word	0x0800501f
 8004dc4:	0800501f 	.word	0x0800501f
 8004dc8:	0800501f 	.word	0x0800501f
 8004dcc:	0800501f 	.word	0x0800501f
 8004dd0:	0800501f 	.word	0x0800501f
 8004dd4:	0800501f 	.word	0x0800501f
 8004dd8:	0800501f 	.word	0x0800501f
 8004ddc:	08004e13 	.word	0x08004e13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de0:	4b94      	ldr	r3, [pc, #592]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0320 	and.w	r3, r3, #32
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dec:	4b91      	ldr	r3, [pc, #580]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	08db      	lsrs	r3, r3, #3
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	4a90      	ldr	r2, [pc, #576]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004dfe:	e111      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e00:	4b8d      	ldr	r3, [pc, #564]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e02:	61bb      	str	r3, [r7, #24]
    break;
 8004e04:	e10e      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e06:	4b8d      	ldr	r3, [pc, #564]	@ (800503c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e08:	61bb      	str	r3, [r7, #24]
    break;
 8004e0a:	e10b      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004e0c:	4b8c      	ldr	r3, [pc, #560]	@ (8005040 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e0e:	61bb      	str	r3, [r7, #24]
    break;
 8004e10:	e108      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e12:	4b88      	ldr	r3, [pc, #544]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004e1c:	4b85      	ldr	r3, [pc, #532]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e28:	4b82      	ldr	r3, [pc, #520]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004e32:	4b80      	ldr	r3, [pc, #512]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80e1 	beq.w	8005018 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	f000 8083 	beq.w	8004f64 <HAL_RCC_GetSysClockFreq+0x204>
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	f200 80a1 	bhi.w	8004fa8 <HAL_RCC_GetSysClockFreq+0x248>
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x114>
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d056      	beq.n	8004f20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e72:	e099      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e74:	4b6f      	ldr	r3, [pc, #444]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d02d      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e80:	4b6c      	ldr	r3, [pc, #432]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	08db      	lsrs	r3, r3, #3
 8004e86:	f003 0303 	and.w	r3, r3, #3
 8004e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8005038 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b62      	ldr	r3, [pc, #392]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ebe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004eda:	e087      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005048 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b51      	ldr	r3, [pc, #324]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f02:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e065      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800504c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b40      	ldr	r3, [pc, #256]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f46:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f62:	e043      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005050 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b2f      	ldr	r3, [pc, #188]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f8a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fa6:	e021      	b.n	8004fec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800504c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fba:	4b1e      	ldr	r3, [pc, #120]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005044 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004fec:	4b11      	ldr	r3, [pc, #68]	@ (8005034 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	0a5b      	lsrs	r3, r3, #9
 8004ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005004:	edd7 6a07 	vldr	s13, [r7, #28]
 8005008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005010:	ee17 3a90 	vmov	r3, s15
 8005014:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005016:	e005      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	61bb      	str	r3, [r7, #24]
    break;
 800501c:	e002      	b.n	8005024 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800501e:	4b07      	ldr	r3, [pc, #28]	@ (800503c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005020:	61bb      	str	r3, [r7, #24]
    break;
 8005022:	bf00      	nop
  }

  return sysclockfreq;
 8005024:	69bb      	ldr	r3, [r7, #24]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	@ 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	58024400 	.word	0x58024400
 8005038:	03d09000 	.word	0x03d09000
 800503c:	003d0900 	.word	0x003d0900
 8005040:	017d7840 	.word	0x017d7840
 8005044:	46000000 	.word	0x46000000
 8005048:	4c742400 	.word	0x4c742400
 800504c:	4a742400 	.word	0x4a742400
 8005050:	4bbebc20 	.word	0x4bbebc20

08005054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800505a:	f7ff fe81 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 800505e:	4602      	mov	r2, r0
 8005060:	4b10      	ldr	r3, [pc, #64]	@ (80050a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	490f      	ldr	r1, [pc, #60]	@ (80050a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800506c:	5ccb      	ldrb	r3, [r1, r3]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	fa22 f303 	lsr.w	r3, r2, r3
 8005076:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005078:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	4a09      	ldr	r2, [pc, #36]	@ (80050a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	fa22 f303 	lsr.w	r3, r2, r3
 800508e:	4a07      	ldr	r2, [pc, #28]	@ (80050ac <HAL_RCC_GetHCLKFreq+0x58>)
 8005090:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005092:	4a07      	ldr	r2, [pc, #28]	@ (80050b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <HAL_RCC_GetHCLKFreq+0x58>)
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	58024400 	.word	0x58024400
 80050a8:	0800a970 	.word	0x0800a970
 80050ac:	24000004 	.word	0x24000004
 80050b0:	24000000 	.word	0x24000000

080050b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80050b8:	f7ff ffcc 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4904      	ldr	r1, [pc, #16]	@ (80050dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	f003 031f 	and.w	r3, r3, #31
 80050d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	58024400 	.word	0x58024400
 80050dc:	0800a970 	.word	0x0800a970

080050e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80050e4:	f7ff ffb6 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4904      	ldr	r1, [pc, #16]	@ (8005108 <HAL_RCC_GetPCLK2Freq+0x28>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	58024400 	.word	0x58024400
 8005108:	0800a970 	.word	0x0800a970

0800510c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	223f      	movs	r2, #63	@ 0x3f
 800511a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800511c:	4b1a      	ldr	r3, [pc, #104]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	f003 0207 	and.w	r2, r3, #7
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005128:	4b17      	ldr	r3, [pc, #92]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005134:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f003 020f 	and.w	r2, r3, #15
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005140:	4b11      	ldr	r3, [pc, #68]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800514c:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 800515a:	69db      	ldr	r3, [r3, #28]
 800515c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005164:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <HAL_RCC_GetClockConfig+0x7c>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005170:	4b06      	ldr	r3, [pc, #24]	@ (800518c <HAL_RCC_GetClockConfig+0x80>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 020f 	and.w	r2, r3, #15
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	58024400 	.word	0x58024400
 800518c:	52002000 	.word	0x52002000

08005190 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005198:	2300      	movs	r3, #0
 800519a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800519c:	2300      	movs	r3, #0
 800519e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d03f      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051b4:	d02a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80051ba:	d824      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051c0:	d018      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80051c6:	d81e      	bhi.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051d0:	d007      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051d2:	e018      	b.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051d4:	4ba3      	ldr	r3, [pc, #652]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d8:	4aa2      	ldr	r2, [pc, #648]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80051da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051de:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051e0:	e015      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f001 fff9 	bl	80071e0 <RCCEx_PLL2_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80051f2:	e00c      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3324      	adds	r3, #36	@ 0x24
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f002 f8a2 	bl	8007344 <RCCEx_PLL3_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005204:	e003      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
      break;
 800520a:	e000      	b.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800520c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005214:	4b93      	ldr	r3, [pc, #588]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005218:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005220:	4990      	ldr	r1, [pc, #576]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	650b      	str	r3, [r1, #80]	@ 0x50
 8005226:	e001      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d03d      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523c:	2b04      	cmp	r3, #4
 800523e:	d826      	bhi.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005240:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800525d 	.word	0x0800525d
 800524c:	0800526b 	.word	0x0800526b
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525c:	4b81      	ldr	r3, [pc, #516]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	4a80      	ldr	r2, [pc, #512]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005262:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005266:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005268:	e015      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3304      	adds	r3, #4
 800526e:	2100      	movs	r1, #0
 8005270:	4618      	mov	r0, r3
 8005272:	f001 ffb5 	bl	80071e0 <RCCEx_PLL2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800527a:	e00c      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3324      	adds	r3, #36	@ 0x24
 8005280:	2100      	movs	r1, #0
 8005282:	4618      	mov	r0, r3
 8005284:	f002 f85e 	bl	8007344 <RCCEx_PLL3_Config>
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800528c:	e003      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
      break;
 8005292:	e000      	b.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800529c:	4b71      	ldr	r3, [pc, #452]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800529e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a0:	f023 0207 	bic.w	r2, r3, #7
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a8:	496e      	ldr	r1, [pc, #440]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	650b      	str	r3, [r1, #80]	@ 0x50
 80052ae:	e001      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d042      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c8:	d02b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ce:	d825      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d2:	d028      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d6:	d821      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052d8:	2b80      	cmp	r3, #128	@ 0x80
 80052da:	d016      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80052dc:	2b80      	cmp	r3, #128	@ 0x80
 80052de:	d81d      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	d007      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80052e8:	e018      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	4a5d      	ldr	r2, [pc, #372]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80052f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80052f6:	e017      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3304      	adds	r3, #4
 80052fc:	2100      	movs	r1, #0
 80052fe:	4618      	mov	r0, r3
 8005300:	f001 ff6e 	bl	80071e0 <RCCEx_PLL2_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005308:	e00e      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3324      	adds	r3, #36	@ 0x24
 800530e:	2100      	movs	r1, #0
 8005310:	4618      	mov	r0, r3
 8005312:	f002 f817 	bl	8007344 <RCCEx_PLL3_Config>
 8005316:	4603      	mov	r3, r0
 8005318:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800531a:	e005      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	75fb      	strb	r3, [r7, #23]
      break;
 8005320:	e002      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005328:	7dfb      	ldrb	r3, [r7, #23]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800532e:	4b4d      	ldr	r3, [pc, #308]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005332:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533a:	494a      	ldr	r1, [pc, #296]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800533c:	4313      	orrs	r3, r2
 800533e:	650b      	str	r3, [r1, #80]	@ 0x50
 8005340:	e001      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534e:	2b00      	cmp	r3, #0
 8005350:	d049      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005358:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800535c:	d030      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800535e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005362:	d82a      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005364:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005368:	d02c      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800536a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800536e:	d824      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005374:	d018      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800537a:	d81e      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005384:	d007      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005386:	e018      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005388:	4b36      	ldr	r3, [pc, #216]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	4a35      	ldr	r2, [pc, #212]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005392:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005394:	e017      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f001 ff1f 	bl	80071e0 <RCCEx_PLL2_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80053a6:	e00e      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3324      	adds	r3, #36	@ 0x24
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 ffc8 	bl	8007344 <RCCEx_PLL3_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053b8:	e005      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
      break;
 80053be:	e002      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80053c0:	bf00      	nop
 80053c2:	e000      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80053c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c6:	7dfb      	ldrb	r3, [r7, #23]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053cc:	4b25      	ldr	r3, [pc, #148]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80053da:	4922      	ldr	r1, [pc, #136]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	658b      	str	r3, [r1, #88]	@ 0x58
 80053e0:	e001      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
 80053e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04b      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80053f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053fc:	d030      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80053fe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005402:	d82a      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005404:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005408:	d02e      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800540a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800540e:	d824      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005410:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005414:	d018      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005416:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800541a:	d81e      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005424:	d007      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005426:	e018      	b.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005428:	4b0e      	ldr	r3, [pc, #56]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	4a0d      	ldr	r2, [pc, #52]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800542e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005432:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005434:	e019      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3304      	adds	r3, #4
 800543a:	2100      	movs	r1, #0
 800543c:	4618      	mov	r0, r3
 800543e:	f001 fecf 	bl	80071e0 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005446:	e010      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3324      	adds	r3, #36	@ 0x24
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f001 ff78 	bl	8007344 <RCCEx_PLL3_Config>
 8005454:	4603      	mov	r3, r0
 8005456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005458:	e007      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
      break;
 800545e:	e004      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005460:	bf00      	nop
 8005462:	e002      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005464:	58024400 	.word	0x58024400
      break;
 8005468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546a:	7dfb      	ldrb	r3, [r7, #23]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005470:	4b99      	ldr	r3, [pc, #612]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005474:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800547e:	4996      	ldr	r1, [pc, #600]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005480:	4313      	orrs	r3, r2
 8005482:	658b      	str	r3, [r1, #88]	@ 0x58
 8005484:	e001      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d032      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800549a:	2b30      	cmp	r3, #48	@ 0x30
 800549c:	d01c      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800549e:	2b30      	cmp	r3, #48	@ 0x30
 80054a0:	d817      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d813      	bhi.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d10f      	bne.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054b2:	4b89      	ldr	r3, [pc, #548]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	4a88      	ldr	r2, [pc, #544]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80054be:	e00e      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	3304      	adds	r3, #4
 80054c4:	2102      	movs	r1, #2
 80054c6:	4618      	mov	r0, r3
 80054c8:	f001 fe8a 	bl	80071e0 <RCCEx_PLL2_Config>
 80054cc:	4603      	mov	r3, r0
 80054ce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80054d0:	e005      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	75fb      	strb	r3, [r7, #23]
      break;
 80054d6:	e002      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80054d8:	bf00      	nop
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80054dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d109      	bne.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80054e4:	4b7c      	ldr	r3, [pc, #496]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f0:	4979      	ldr	r1, [pc, #484]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80054f6:	e001      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d047      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800550c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005510:	d030      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005516:	d82a      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005518:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800551c:	d02c      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800551e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005522:	d824      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005528:	d018      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800552a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800552e:	d81e      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005538:	d007      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800553a:	e018      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553c:	4b66      	ldr	r3, [pc, #408]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005540:	4a65      	ldr	r2, [pc, #404]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005546:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005548:	e017      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f001 fe45 	bl	80071e0 <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800555a:	e00e      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3324      	adds	r3, #36	@ 0x24
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 feee 	bl	8007344 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005580:	4b55      	ldr	r3, [pc, #340]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005584:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558c:	4952      	ldr	r1, [pc, #328]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800558e:	4313      	orrs	r3, r2
 8005590:	650b      	str	r3, [r1, #80]	@ 0x50
 8005592:	e001      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d049      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ac:	d02e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80055ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055b2:	d828      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80055b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055b8:	d02a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80055ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055be:	d822      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80055c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055c4:	d026      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80055c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80055ca:	d81c      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80055cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d0:	d010      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80055d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d6:	d816      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01d      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e0:	d111      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	3304      	adds	r3, #4
 80055e6:	2101      	movs	r1, #1
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 fdf9 	bl	80071e0 <RCCEx_PLL2_Config>
 80055ee:	4603      	mov	r3, r0
 80055f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80055f2:	e012      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3324      	adds	r3, #36	@ 0x24
 80055f8:	2101      	movs	r1, #1
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fea2 	bl	8007344 <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005604:	e009      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
      break;
 800560a:	e006      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800560c:	bf00      	nop
 800560e:	e004      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005610:	bf00      	nop
 8005612:	e002      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005614:	bf00      	nop
 8005616:	e000      	b.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005620:	4b2d      	ldr	r3, [pc, #180]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005624:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800562c:	492a      	ldr	r1, [pc, #168]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800562e:	4313      	orrs	r3, r2
 8005630:	650b      	str	r3, [r1, #80]	@ 0x50
 8005632:	e001      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005634:	7dfb      	ldrb	r3, [r7, #23]
 8005636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d04d      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800564a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800564e:	d02e      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005650:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005654:	d828      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800565a:	d02a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800565c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005660:	d822      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005662:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005666:	d026      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005668:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800566c:	d81c      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800566e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005672:	d010      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005674:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005678:	d816      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01d      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800567e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005682:	d111      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	2101      	movs	r1, #1
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fda8 	bl	80071e0 <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005694:	e012      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3324      	adds	r3, #36	@ 0x24
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f001 fe51 	bl	8007344 <RCCEx_PLL3_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056a6:	e009      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	75fb      	strb	r3, [r7, #23]
      break;
 80056ac:	e006      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80056ae:	bf00      	nop
 80056b0:	e004      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80056b2:	bf00      	nop
 80056b4:	e002      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80056b6:	bf00      	nop
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80056ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056c2:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056c6:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80056d0:	4901      	ldr	r1, [pc, #4]	@ (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	658b      	str	r3, [r1, #88]	@ 0x58
 80056d6:	e003      	b.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80056d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
 80056de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d02f      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f4:	d00e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80056f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056fa:	d814      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005704:	d10f      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005706:	4baf      	ldr	r3, [pc, #700]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	4aae      	ldr	r2, [pc, #696]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800570c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005710:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005712:	e00c      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3304      	adds	r3, #4
 8005718:	2101      	movs	r1, #1
 800571a:	4618      	mov	r0, r3
 800571c:	f001 fd60 	bl	80071e0 <RCCEx_PLL2_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005724:	e003      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	75fb      	strb	r3, [r7, #23]
      break;
 800572a:	e000      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800572c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005734:	4ba3      	ldr	r3, [pc, #652]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005738:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005740:	49a0      	ldr	r1, [pc, #640]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005742:	4313      	orrs	r3, r2
 8005744:	650b      	str	r3, [r1, #80]	@ 0x50
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d032      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575c:	2b03      	cmp	r3, #3
 800575e:	d81b      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005760:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	0800579f 	.word	0x0800579f
 800576c:	08005779 	.word	0x08005779
 8005770:	08005787 	.word	0x08005787
 8005774:	0800579f 	.word	0x0800579f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005778:	4b92      	ldr	r3, [pc, #584]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800577a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577c:	4a91      	ldr	r2, [pc, #580]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800577e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005782:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005784:	e00c      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3304      	adds	r3, #4
 800578a:	2102      	movs	r1, #2
 800578c:	4618      	mov	r0, r3
 800578e:	f001 fd27 	bl	80071e0 <RCCEx_PLL2_Config>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005796:	e003      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
      break;
 800579c:	e000      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800579e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057a6:	4b87      	ldr	r3, [pc, #540]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057aa:	f023 0203 	bic.w	r2, r3, #3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	4984      	ldr	r1, [pc, #528]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80057b8:	e001      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
 80057bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8086 	beq.w	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057cc:	4b7e      	ldr	r3, [pc, #504]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a7d      	ldr	r2, [pc, #500]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80057d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d8:	f7fc f836 	bl	8001848 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057de:	e009      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e0:	f7fc f832 	bl	8001848 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	@ 0x64
 80057ec:	d902      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	75fb      	strb	r3, [r7, #23]
        break;
 80057f2:	e005      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057f4:	4b74      	ldr	r3, [pc, #464]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d166      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005806:	4b6f      	ldr	r3, [pc, #444]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005808:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005810:	4053      	eors	r3, r2
 8005812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005816:	2b00      	cmp	r3, #0
 8005818:	d013      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800581a:	4b6a      	ldr	r3, [pc, #424]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005822:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005824:	4b67      	ldr	r3, [pc, #412]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	4a66      	ldr	r2, [pc, #408]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800582a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582e:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005830:	4b64      	ldr	r3, [pc, #400]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005834:	4a63      	ldr	r2, [pc, #396]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800583a:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800583c:	4a61      	ldr	r2, [pc, #388]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005848:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584c:	d115      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fb fffb 	bl	8001848 <HAL_GetTick>
 8005852:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005854:	e00b      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005856:	f7fb fff7 	bl	8001848 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005864:	4293      	cmp	r3, r2
 8005866:	d902      	bls.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	75fb      	strb	r3, [r7, #23]
            break;
 800586c:	e005      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800586e:	4b55      	ldr	r3, [pc, #340]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ed      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800587a:	7dfb      	ldrb	r3, [r7, #23]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d126      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005886:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588e:	d10d      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005890:	4b4c      	ldr	r3, [pc, #304]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800589e:	0919      	lsrs	r1, r3, #4
 80058a0:	4b4a      	ldr	r3, [pc, #296]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80058a2:	400b      	ands	r3, r1
 80058a4:	4947      	ldr	r1, [pc, #284]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	610b      	str	r3, [r1, #16]
 80058aa:	e005      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80058ac:	4b45      	ldr	r3, [pc, #276]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	4a44      	ldr	r2, [pc, #272]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058b2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058b6:	6113      	str	r3, [r2, #16]
 80058b8:	4b42      	ldr	r3, [pc, #264]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058c6:	493f      	ldr	r1, [pc, #252]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	670b      	str	r3, [r1, #112]	@ 0x70
 80058cc:	e004      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	75bb      	strb	r3, [r7, #22]
 80058d2:	e001      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 8085 	beq.w	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ea:	2b28      	cmp	r3, #40	@ 0x28
 80058ec:	d866      	bhi.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80058ee:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80058f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f4:	080059d1 	.word	0x080059d1
 80058f8:	080059bd 	.word	0x080059bd
 80058fc:	080059bd 	.word	0x080059bd
 8005900:	080059bd 	.word	0x080059bd
 8005904:	080059bd 	.word	0x080059bd
 8005908:	080059bd 	.word	0x080059bd
 800590c:	080059bd 	.word	0x080059bd
 8005910:	080059bd 	.word	0x080059bd
 8005914:	08005999 	.word	0x08005999
 8005918:	080059bd 	.word	0x080059bd
 800591c:	080059bd 	.word	0x080059bd
 8005920:	080059bd 	.word	0x080059bd
 8005924:	080059bd 	.word	0x080059bd
 8005928:	080059bd 	.word	0x080059bd
 800592c:	080059bd 	.word	0x080059bd
 8005930:	080059bd 	.word	0x080059bd
 8005934:	080059ab 	.word	0x080059ab
 8005938:	080059bd 	.word	0x080059bd
 800593c:	080059bd 	.word	0x080059bd
 8005940:	080059bd 	.word	0x080059bd
 8005944:	080059bd 	.word	0x080059bd
 8005948:	080059bd 	.word	0x080059bd
 800594c:	080059bd 	.word	0x080059bd
 8005950:	080059bd 	.word	0x080059bd
 8005954:	080059d1 	.word	0x080059d1
 8005958:	080059bd 	.word	0x080059bd
 800595c:	080059bd 	.word	0x080059bd
 8005960:	080059bd 	.word	0x080059bd
 8005964:	080059bd 	.word	0x080059bd
 8005968:	080059bd 	.word	0x080059bd
 800596c:	080059bd 	.word	0x080059bd
 8005970:	080059bd 	.word	0x080059bd
 8005974:	080059d1 	.word	0x080059d1
 8005978:	080059bd 	.word	0x080059bd
 800597c:	080059bd 	.word	0x080059bd
 8005980:	080059bd 	.word	0x080059bd
 8005984:	080059bd 	.word	0x080059bd
 8005988:	080059bd 	.word	0x080059bd
 800598c:	080059bd 	.word	0x080059bd
 8005990:	080059bd 	.word	0x080059bd
 8005994:	080059d1 	.word	0x080059d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2101      	movs	r1, #1
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fc1e 	bl	80071e0 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80059a8:	e013      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	@ 0x24
 80059ae:	2101      	movs	r1, #1
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 fcc7 	bl	8007344 <RCCEx_PLL3_Config>
 80059b6:	4603      	mov	r3, r0
 80059b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80059ba:	e00a      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	75fb      	strb	r3, [r7, #23]
      break;
 80059c0:	e007      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	58024800 	.word	0x58024800
 80059cc:	00ffffcf 	.word	0x00ffffcf
      break;
 80059d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80059d8:	4b96      	ldr	r3, [pc, #600]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059dc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059e4:	4993      	ldr	r1, [pc, #588]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	654b      	str	r3, [r1, #84]	@ 0x54
 80059ea:	e001      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
 80059ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d038      	beq.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a00:	2b05      	cmp	r3, #5
 8005a02:	d821      	bhi.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005a04:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a4f 	.word	0x08005a4f
 8005a10:	08005a25 	.word	0x08005a25
 8005a14:	08005a37 	.word	0x08005a37
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a4f 	.word	0x08005a4f
 8005a20:	08005a4f 	.word	0x08005a4f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3304      	adds	r3, #4
 8005a28:	2101      	movs	r1, #1
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 fbd8 	bl	80071e0 <RCCEx_PLL2_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a34:	e00c      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3324      	adds	r3, #36	@ 0x24
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fc81 	bl	8007344 <RCCEx_PLL3_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005a56:	4b77      	ldr	r3, [pc, #476]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5a:	f023 0207 	bic.w	r2, r3, #7
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a62:	4974      	ldr	r1, [pc, #464]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	654b      	str	r3, [r1, #84]	@ 0x54
 8005a68:	e001      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6a:	7dfb      	ldrb	r3, [r7, #23]
 8005a6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d03a      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a80:	2b05      	cmp	r3, #5
 8005a82:	d821      	bhi.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005a84:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005acf 	.word	0x08005acf
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005ab7 	.word	0x08005ab7
 8005a98:	08005acf 	.word	0x08005acf
 8005a9c:	08005acf 	.word	0x08005acf
 8005aa0:	08005acf 	.word	0x08005acf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fb98 	bl	80071e0 <RCCEx_PLL2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ab4:	e00c      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	3324      	adds	r3, #36	@ 0x24
 8005aba:	2101      	movs	r1, #1
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 fc41 	bl	8007344 <RCCEx_PLL3_Config>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ac6:	e003      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	75fb      	strb	r3, [r7, #23]
      break;
 8005acc:	e000      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ad6:	4b57      	ldr	r3, [pc, #348]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ada:	f023 0207 	bic.w	r2, r3, #7
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae4:	4953      	ldr	r1, [pc, #332]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	658b      	str	r3, [r1, #88]	@ 0x58
 8005aea:	e001      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aec:	7dfb      	ldrb	r3, [r7, #23]
 8005aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d04b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b06:	d02e      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b0c:	d828      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b12:	d02a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b18:	d822      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b1e:	d026      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005b20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b24:	d81c      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b2a:	d010      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b30:	d816      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d01d      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005b36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b3a:	d111      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 fb4c 	bl	80071e0 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b4c:	e012      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3324      	adds	r3, #36	@ 0x24
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fbf5 	bl	8007344 <RCCEx_PLL3_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005b5e:	e009      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	75fb      	strb	r3, [r7, #23]
      break;
 8005b64:	e006      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b66:	bf00      	nop
 8005b68:	e004      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b6a:	bf00      	nop
 8005b6c:	e002      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b6e:	bf00      	nop
 8005b70:	e000      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7e:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b88:	492a      	ldr	r1, [pc, #168]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	654b      	str	r3, [r1, #84]	@ 0x54
 8005b8e:	e001      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d04d      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ba6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005baa:	d02e      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005bac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005bb0:	d828      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb6:	d02a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d822      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005bbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bc2:	d026      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005bc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005bc8:	d81c      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005bca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bce:	d010      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd4:	d816      	bhi.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d01d      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bde:	d111      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3304      	adds	r3, #4
 8005be4:	2100      	movs	r1, #0
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fafa 	bl	80071e0 <RCCEx_PLL2_Config>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005bf0:	e012      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	@ 0x24
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 fba3 	bl	8007344 <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c02:	e009      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	75fb      	strb	r3, [r7, #23]
      break;
 8005c08:	e006      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c0a:	bf00      	nop
 8005c0c:	e004      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c1e:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005c2c:	4901      	ldr	r1, [pc, #4]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	658b      	str	r3, [r1, #88]	@ 0x58
 8005c32:	e003      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d04b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005c4e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005c52:	d02e      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005c54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005c58:	d828      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c5e:	d02a      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005c60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c64:	d822      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c66:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005c6a:	d026      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005c6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005c70:	d81c      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c76:	d010      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005c78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c7c:	d816      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d01d      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005c82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c86:	d111      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 faa6 	bl	80071e0 <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005c98:	e012      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3324      	adds	r3, #36	@ 0x24
 8005c9e:	2102      	movs	r1, #2
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 fb4f 	bl	8007344 <RCCEx_PLL3_Config>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005caa:	e009      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb0:	e006      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005cb2:	bf00      	nop
 8005cb4:	e004      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005cb6:	bf00      	nop
 8005cb8:	e002      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e000      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cc0:	7dfb      	ldrb	r3, [r7, #23]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005cc6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cd4:	4999      	ldr	r1, [pc, #612]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	658b      	str	r3, [r1, #88]	@ 0x58
 8005cda:	e001      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01a      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf6:	d10a      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3324      	adds	r3, #36	@ 0x24
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 fb20 	bl	8007344 <RCCEx_PLL3_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d1c:	4987      	ldr	r1, [pc, #540]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0310 	and.w	r3, r3, #16
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d38:	d10a      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3324      	adds	r3, #36	@ 0x24
 8005d3e:	2102      	movs	r1, #2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 faff 	bl	8007344 <RCCEx_PLL3_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d50:	4b7a      	ldr	r3, [pc, #488]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d5e:	4977      	ldr	r1, [pc, #476]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d034      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d7a:	d01d      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d80:	d817      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d8a:	d009      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005d8c:	e011      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fa23 	bl	80071e0 <RCCEx_PLL2_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005d9e:	e00c      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3324      	adds	r3, #36	@ 0x24
 8005da4:	2102      	movs	r1, #2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f001 facc 	bl	8007344 <RCCEx_PLL3_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005db0:	e003      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	75fb      	strb	r3, [r7, #23]
      break;
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dce:	495b      	ldr	r1, [pc, #364]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	658b      	str	r3, [r1, #88]	@ 0x58
 8005dd4:	e001      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d033      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005dec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df0:	d01c      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005df2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005df6:	d816      	bhi.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005df8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005dfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e02:	d007      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005e04:	e00f      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e06:	4b4d      	ldr	r3, [pc, #308]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e10:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e12:	e00c      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3324      	adds	r3, #36	@ 0x24
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fa92 	bl	8007344 <RCCEx_PLL3_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e24:	e003      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
      break;
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e34:	4b41      	ldr	r3, [pc, #260]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e42:	493e      	ldr	r1, [pc, #248]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	654b      	str	r3, [r1, #84]	@ 0x54
 8005e48:	e001      	b.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d029      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e66:	d007      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005e68:	e00f      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6a:	4b34      	ldr	r3, [pc, #208]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6e:	4a33      	ldr	r2, [pc, #204]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e74:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e76:	e00b      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	2102      	movs	r1, #2
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f001 f9ae 	bl	80071e0 <RCCEx_PLL2_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005e88:	e002      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005e96:	4b29      	ldr	r3, [pc, #164]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea2:	4926      	ldr	r1, [pc, #152]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8005ea8:	e001      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	3324      	adds	r3, #36	@ 0x24
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 fa3f 	bl	8007344 <RCCEx_PLL3_Config>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d033      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee4:	d017      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eea:	d811      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef0:	d013      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef6:	d80b      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f00:	d106      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f02:	4b0e      	ldr	r3, [pc, #56]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f06:	4a0d      	ldr	r2, [pc, #52]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f0e:	e007      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	75fb      	strb	r3, [r7, #23]
      break;
 8005f14:	e004      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005f16:	bf00      	nop
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f26:	4b05      	ldr	r3, [pc, #20]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f32:	4902      	ldr	r1, [pc, #8]	@ (8005f3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	654b      	str	r3, [r1, #84]	@ 0x54
 8005f38:	e004      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f40:	7dfb      	ldrb	r3, [r7, #23]
 8005f42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d008      	beq.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005f50:	4b31      	ldr	r3, [pc, #196]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5c:	492e      	ldr	r1, [pc, #184]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	650b      	str	r3, [r1, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d009      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005f6e:	4b2a      	ldr	r3, [pc, #168]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f7c:	4926      	ldr	r1, [pc, #152]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d008      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f8e:	4b22      	ldr	r3, [pc, #136]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f92:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f9a:	491f      	ldr	r1, [pc, #124]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00d      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fac:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a19      	ldr	r2, [pc, #100]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fb6:	6113      	str	r3, [r2, #16]
 8005fb8:	4b17      	ldr	r3, [pc, #92]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005fc2:	4915      	ldr	r1, [pc, #84]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da08      	bge.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005fd0:	4b11      	ldr	r3, [pc, #68]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	490e      	ldr	r1, [pc, #56]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d009      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005fee:	4b0a      	ldr	r3, [pc, #40]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffc:	4906      	ldr	r1, [pc, #24]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 8006002:	7dbb      	ldrb	r3, [r7, #22]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	58024400 	.word	0x58024400

0800601c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b090      	sub	sp, #64	@ 0x40
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800602a:	f040 8095 	bne.w	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800602e:	4b97      	ldr	r3, [pc, #604]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 8006038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603a:	2b04      	cmp	r3, #4
 800603c:	f200 8088 	bhi.w	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006040:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006046:	bf00      	nop
 8006048:	0800605d 	.word	0x0800605d
 800604c:	08006085 	.word	0x08006085
 8006050:	080060ad 	.word	0x080060ad
 8006054:	08006149 	.word	0x08006149
 8006058:	080060d5 	.word	0x080060d5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800605c:	4b8b      	ldr	r3, [pc, #556]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006064:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006068:	d108      	bne.n	800607c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800606a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ff64 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006078:	f000 bc94 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006080:	f000 bc90 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006084:	4b81      	ldr	r3, [pc, #516]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800608c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006090:	d108      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006092:	f107 0318 	add.w	r3, r7, #24
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fca8 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060a0:	f000 bc80 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80060a4:	2300      	movs	r3, #0
 80060a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80060a8:	f000 bc7c 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80060ac:	4b77      	ldr	r3, [pc, #476]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060b8:	d108      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ba:	f107 030c 	add.w	r3, r7, #12
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fde8 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060c8:	f000 bc6c 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80060d0:	f000 bc68 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80060d4:	4b6d      	ldr	r3, [pc, #436]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80060dc:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80060de:	4b6b      	ldr	r3, [pc, #428]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	d10c      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80060ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d109      	bne.n	8006104 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060f0:	4b66      	ldr	r3, [pc, #408]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	08db      	lsrs	r3, r3, #3
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	4a65      	ldr	r2, [pc, #404]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80060fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006102:	e01f      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006104:	4b61      	ldr	r3, [pc, #388]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800610c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006110:	d106      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006118:	d102      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800611a:	4b5e      	ldr	r3, [pc, #376]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800611c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800611e:	e011      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006120:	4b5a      	ldr	r3, [pc, #360]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800612c:	d106      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800612e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006134:	d102      	bne.n	800613c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006136:	4b58      	ldr	r3, [pc, #352]	@ (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800613a:	e003      	b.n	8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8006140:	f000 bc30 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006144:	f000 bc2e 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006148:	4b54      	ldr	r3, [pc, #336]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800614c:	f000 bc2a 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006154:	f000 bc26 	b.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800615e:	f040 809f 	bne.w	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006162:	4b4a      	ldr	r3, [pc, #296]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006166:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800616a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 800616c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006172:	d04d      	beq.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800617a:	f200 8084 	bhi.w	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	2bc0      	cmp	r3, #192	@ 0xc0
 8006182:	d07d      	beq.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2bc0      	cmp	r3, #192	@ 0xc0
 8006188:	d87d      	bhi.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	2b80      	cmp	r3, #128	@ 0x80
 800618e:	d02d      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	2b80      	cmp	r3, #128	@ 0x80
 8006194:	d877      	bhi.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	2b40      	cmp	r3, #64	@ 0x40
 80061a0:	d012      	beq.n	80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80061a2:	e070      	b.n	8006286 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80061a4:	4b39      	ldr	r3, [pc, #228]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80061b0:	d107      	bne.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fec0 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061be:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061c0:	e3f0      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061c2:	2300      	movs	r3, #0
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80061c6:	e3ed      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80061c8:	4b30      	ldr	r3, [pc, #192]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061d4:	d107      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061d6:	f107 0318 	add.w	r3, r7, #24
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fc06 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80061e4:	e3de      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80061ea:	e3db      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061ec:	4b27      	ldr	r3, [pc, #156]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f8:	d107      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061fa:	f107 030c 	add.w	r3, r7, #12
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fd48 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006208:	e3cc      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800620e:	e3c9      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006210:	4b1e      	ldr	r3, [pc, #120]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006214:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006218:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800621a:	4b1c      	ldr	r3, [pc, #112]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b04      	cmp	r3, #4
 8006224:	d10c      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800622c:	4b17      	ldr	r3, [pc, #92]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	08db      	lsrs	r3, r3, #3
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	4a16      	ldr	r2, [pc, #88]	@ (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006238:	fa22 f303 	lsr.w	r3, r2, r3
 800623c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800623e:	e01e      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006240:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800624c:	d106      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800624e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006254:	d102      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006256:	4b0f      	ldr	r3, [pc, #60]	@ (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800625a:	e010      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800625c:	4b0b      	ldr	r3, [pc, #44]	@ (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006264:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006268:	d106      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800626a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006270:	d102      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006276:	e002      	b.n	800627e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006278:	2300      	movs	r3, #0
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800627c:	e392      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800627e:	e391      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006280:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006282:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006284:	e38e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800628a:	e38b      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800628c:	58024400 	.word	0x58024400
 8006290:	03d09000 	.word	0x03d09000
 8006294:	003d0900 	.word	0x003d0900
 8006298:	017d7840 	.word	0x017d7840
 800629c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a6:	f040 809c 	bne.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80062aa:	4b9d      	ldr	r3, [pc, #628]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80062b2:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062ba:	d054      	beq.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80062bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80062c2:	f200 808b 	bhi.w	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062cc:	f000 8083 	beq.w	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80062d6:	f200 8081 	bhi.w	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e0:	d02f      	beq.n	8006342 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062e8:	d878      	bhi.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80062ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d004      	beq.n	80062fa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062f6:	d012      	beq.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80062f8:	e070      	b.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80062fa:	4b89      	ldr	r3, [pc, #548]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006306:	d107      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006308:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800630c:	4618      	mov	r0, r3
 800630e:	f000 fe15 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006316:	e345      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800631c:	e342      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800631e:	4b80      	ldr	r3, [pc, #512]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800632a:	d107      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632c:	f107 0318 	add.w	r3, r7, #24
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fb5b 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800633a:	e333      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006340:	e330      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006342:	4b77      	ldr	r3, [pc, #476]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800634a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800634e:	d107      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006350:	f107 030c 	add.w	r3, r7, #12
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fc9d 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800635e:	e321      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006364:	e31e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006366:	4b6e      	ldr	r3, [pc, #440]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800636a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006370:	4b6b      	ldr	r3, [pc, #428]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b04      	cmp	r3, #4
 800637a:	d10c      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006382:	4b67      	ldr	r3, [pc, #412]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	08db      	lsrs	r3, r3, #3
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	4a65      	ldr	r2, [pc, #404]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800638e:	fa22 f303 	lsr.w	r3, r2, r3
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006394:	e01e      	b.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006396:	4b62      	ldr	r3, [pc, #392]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063a2:	d106      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063aa:	d102      	bne.n	80063b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80063ac:	4b5e      	ldr	r3, [pc, #376]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b0:	e010      	b.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063b2:	4b5b      	ldr	r3, [pc, #364]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063be:	d106      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80063c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063c6:	d102      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80063c8:	4b58      	ldr	r3, [pc, #352]	@ (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063cc:	e002      	b.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 80063d2:	e2e7      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80063d4:	e2e6      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80063d6:	4b56      	ldr	r3, [pc, #344]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80063d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80063da:	e2e3      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80063e0:	e2e0      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e8:	f040 80a7 	bne.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80063ec:	4b4c      	ldr	r3, [pc, #304]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80063ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80063f4:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (saiclocksource)
 80063f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80063fc:	d055      	beq.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80063fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006404:	f200 8096 	bhi.w	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800640e:	f000 8084 	beq.w	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006418:	f200 808c 	bhi.w	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800641c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006422:	d030      	beq.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8006424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800642a:	f200 8083 	bhi.w	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006436:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800643a:	d012      	beq.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800643c:	e07a      	b.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800643e:	4b38      	ldr	r3, [pc, #224]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006446:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800644a:	d107      	bne.n	800645c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800644c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fd73 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800645a:	e2a3      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800645c:	2300      	movs	r3, #0
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006460:	e2a0      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006462:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800646a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006470:	f107 0318 	add.w	r3, r7, #24
 8006474:	4618      	mov	r0, r3
 8006476:	f000 fab9 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800647e:	e291      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006484:	e28e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006486:	4b26      	ldr	r3, [pc, #152]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800648e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006492:	d107      	bne.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006494:	f107 030c 	add.w	r3, r7, #12
 8006498:	4618      	mov	r0, r3
 800649a:	f000 fbfb 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064a2:	e27f      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80064a4:	2300      	movs	r3, #0
 80064a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80064a8:	e27c      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80064aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80064b2:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b04      	cmp	r3, #4
 80064be:	d10c      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064c6:	4b16      	ldr	r3, [pc, #88]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	08db      	lsrs	r3, r3, #3
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	4a14      	ldr	r2, [pc, #80]	@ (8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80064d2:	fa22 f303 	lsr.w	r3, r2, r3
 80064d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064d8:	e01e      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80064da:	4b11      	ldr	r3, [pc, #68]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80064e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064ee:	d102      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80064f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064f4:	e010      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80064f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006502:	d106      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800650a:	d102      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800650c:	4b07      	ldr	r3, [pc, #28]	@ (800652c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800650e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006510:	e002      	b.n	8006518 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006512:	2300      	movs	r3, #0
 8006514:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8006516:	e245      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006518:	e244      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800651a:	4b05      	ldr	r3, [pc, #20]	@ (8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800651c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800651e:	e241      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006520:	58024400 	.word	0x58024400
 8006524:	03d09000 	.word	0x03d09000
 8006528:	003d0900 	.word	0x003d0900
 800652c:	017d7840 	.word	0x017d7840
 8006530:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006538:	e234      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006540:	f040 809c 	bne.w	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006544:	4b9b      	ldr	r3, [pc, #620]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006548:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800654c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800654e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006554:	d054      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800655c:	f200 808b 	bhi.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006562:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006566:	f000 8083 	beq.w	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006570:	f200 8081 	bhi.w	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800657a:	d02f      	beq.n	80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800657c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006582:	d878      	bhi.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800658a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006590:	d012      	beq.n	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006592:	e070      	b.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006594:	4b87      	ldr	r3, [pc, #540]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800659c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065a0:	d107      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 fcc8 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065b0:	e1f8      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80065b6:	e1f5      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065b8:	4b7e      	ldr	r3, [pc, #504]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80065c4:	d107      	bne.n	80065d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c6:	f107 0318 	add.w	r3, r7, #24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa0e 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065d4:	e1e6      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80065da:	e1e3      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065dc:	4b75      	ldr	r3, [pc, #468]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065e8:	d107      	bne.n	80065fa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ea:	f107 030c 	add.w	r3, r7, #12
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fb50 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065f8:	e1d4      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80065fe:	e1d1      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006600:	4b6c      	ldr	r3, [pc, #432]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006608:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800660a:	4b6a      	ldr	r3, [pc, #424]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b04      	cmp	r3, #4
 8006614:	d10c      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800661c:	4b65      	ldr	r3, [pc, #404]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	08db      	lsrs	r3, r3, #3
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	4a64      	ldr	r2, [pc, #400]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006628:	fa22 f303 	lsr.w	r3, r2, r3
 800662c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800662e:	e01e      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006630:	4b60      	ldr	r3, [pc, #384]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663c:	d106      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800663e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006644:	d102      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006646:	4b5d      	ldr	r3, [pc, #372]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800664a:	e010      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800664c:	4b59      	ldr	r3, [pc, #356]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006658:	d106      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800665a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800665c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006660:	d102      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006662:	4b57      	ldr	r3, [pc, #348]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006666:	e002      	b.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 800666c:	e19a      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800666e:	e199      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006670:	4b54      	ldr	r3, [pc, #336]	@ (80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006672:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006674:	e196      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800667a:	e193      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006682:	d173      	bne.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006684:	4b4b      	ldr	r3, [pc, #300]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800668c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006694:	d02f      	beq.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8006696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669c:	d863      	bhi.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80066a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066aa:	d012      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80066ac:	e05b      	b.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80066ae:	4b41      	ldr	r3, [pc, #260]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ba:	d107      	bne.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066bc:	f107 0318 	add.w	r3, r7, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 f993 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066ca:	e16b      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80066d0:	e168      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066d2:	4b38      	ldr	r3, [pc, #224]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066de:	d107      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066e0:	f107 030c 	add.w	r3, r7, #12
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fad5 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066ee:	e159      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80066f4:	e156      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066f6:	4b2f      	ldr	r3, [pc, #188]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066fe:	637b      	str	r3, [r7, #52]	@ 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006700:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b04      	cmp	r3, #4
 800670a:	d10c      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800670c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800670e:	2b00      	cmp	r3, #0
 8006710:	d109      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006712:	4b28      	ldr	r3, [pc, #160]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	08db      	lsrs	r3, r3, #3
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	4a26      	ldr	r2, [pc, #152]	@ (80067b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800671e:	fa22 f303 	lsr.w	r3, r2, r3
 8006722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006724:	e01e      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006726:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006732:	d106      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8006734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800673a:	d102      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800673c:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006740:	e010      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006742:	4b1c      	ldr	r3, [pc, #112]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800674a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800674e:	d106      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8006750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006756:	d102      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006758:	4b19      	ldr	r3, [pc, #100]	@ (80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800675c:	e002      	b.n	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800675e:	2300      	movs	r3, #0
 8006760:	63fb      	str	r3, [r7, #60]	@ 0x3c
          }

          break;
 8006762:	e11f      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006764:	e11e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800676a:	e11b      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006772:	d13e      	bne.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006774:	4b0f      	ldr	r3, [pc, #60]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800677c:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678a:	d01d      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800678c:	e02e      	b.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800678e:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800679a:	d107      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800679c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 fbcb 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067aa:	e0fb      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80067b0:	e0f8      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80067b2:	bf00      	nop
 80067b4:	58024400 	.word	0x58024400
 80067b8:	03d09000 	.word	0x03d09000
 80067bc:	003d0900 	.word	0x003d0900
 80067c0:	017d7840 	.word	0x017d7840
 80067c4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067c8:	4b79      	ldr	r3, [pc, #484]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d4:	d107      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d6:	f107 0318 	add.w	r3, r7, #24
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 f906 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80067e4:	e0de      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80067ea:	e0db      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80067f0:	e0d8      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80067f8:	f040 8085 	bne.w	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80067fc:	4b6c      	ldr	r3, [pc, #432]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80067fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006800:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8006804:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 8006806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800680c:	d06b      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006814:	d874      	bhi.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800681c:	d056      	beq.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006824:	d86c      	bhi.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006828:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800682c:	d03b      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800682e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006830:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006834:	d864      	bhi.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800683c:	d021      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006840:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006844:	d85c      	bhi.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006852:	d004      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006854:	e054      	b.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006856:	f000 f8b3 	bl	80069c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800685a:	63f8      	str	r0, [r7, #60]	@ 0x3c
          break;
 800685c:	e0a2      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800685e:	4b54      	ldr	r3, [pc, #336]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006866:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800686a:	d107      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686c:	f107 0318 	add.w	r3, r7, #24
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f8bb 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800687a:	e093      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006880:	e090      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006882:	4b4b      	ldr	r3, [pc, #300]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800688a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800688e:	d107      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f9fd 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800689e:	e081      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80068a4:	e07e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068a6:	4b42      	ldr	r3, [pc, #264]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d109      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068b2:	4b3f      	ldr	r3, [pc, #252]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	08db      	lsrs	r3, r3, #3
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	4a3d      	ldr	r2, [pc, #244]	@ (80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80068be:	fa22 f303 	lsr.w	r3, r2, r3
 80068c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80068c4:	e06e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80068ca:	e06b      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80068cc:	4b38      	ldr	r3, [pc, #224]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d8:	d102      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80068da:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80068dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068de:	e061      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80068e4:	e05e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068e6:	4b32      	ldr	r3, [pc, #200]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068f2:	d102      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80068f4:	4b31      	ldr	r3, [pc, #196]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80068f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80068f8:	e054      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 80068fe:	e051      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006904:	e04e      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800690c:	d148      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800690e:	4b28      	ldr	r3, [pc, #160]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006912:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006916:	63bb      	str	r3, [r7, #56]	@ 0x38

      switch (srcclk)
 8006918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800691e:	d02a      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006926:	d838      	bhi.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	d004      	beq.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006934:	d00d      	beq.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006936:	e030      	b.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006938:	4b1d      	ldr	r3, [pc, #116]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006940:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006944:	d102      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006946:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006948:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800694a:	e02b      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006950:	e028      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006952:	4b17      	ldr	r3, [pc, #92]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800695e:	d107      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fae9 	bl	8006f3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800696a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696c:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800696e:	e019      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006974:	e016      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006976:	4b0e      	ldr	r3, [pc, #56]	@ (80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800697e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006982:	d107      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006984:	f107 0318 	add.w	r3, r7, #24
 8006988:	4618      	mov	r0, r3
 800698a:	f000 f82f 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	63fb      	str	r3, [r7, #60]	@ 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006992:	e007      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 8006998:	e004      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          break;
 800699e:	e001      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

  return frequency;
 80069a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3740      	adds	r7, #64	@ 0x40
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	58024400 	.word	0x58024400
 80069b4:	03d09000 	.word	0x03d09000
 80069b8:	003d0900 	.word	0x003d0900
 80069bc:	017d7840 	.word	0x017d7840

080069c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069c4:	f7fe fb46 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 80069c8:	4602      	mov	r2, r0
 80069ca:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	4904      	ldr	r1, [pc, #16]	@ (80069e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069d6:	5ccb      	ldrb	r3, [r1, r3]
 80069d8:	f003 031f 	and.w	r3, r3, #31
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	58024400 	.word	0x58024400
 80069e8:	0800a970 	.word	0x0800a970

080069ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	@ 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f4:	4ba1      	ldr	r3, [pc, #644]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80069fe:	4b9f      	ldr	r3, [pc, #636]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a02:	0b1b      	lsrs	r3, r3, #12
 8006a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a0a:	4b9c      	ldr	r3, [pc, #624]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0e:	091b      	lsrs	r3, r3, #4
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006a16:	4b99      	ldr	r3, [pc, #612]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a1a:	08db      	lsrs	r3, r3, #3
 8006a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	fb02 f303 	mul.w	r3, r2, r3
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 8111 	beq.w	8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	f000 8083 	beq.w	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	f200 80a1 	bhi.w	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d056      	beq.n	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a56:	e099      	b.n	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a58:	4b88      	ldr	r3, [pc, #544]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d02d      	beq.n	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a64:	4b85      	ldr	r3, [pc, #532]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	08db      	lsrs	r3, r3, #3
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	4a84      	ldr	r2, [pc, #528]	@ (8006c80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a70:	fa22 f303 	lsr.w	r3, r2, r3
 8006a74:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aa2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006abe:	e087      	b.n	8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c88 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ae6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006afe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b02:	e065      	b.n	8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b16:	4b59      	ldr	r3, [pc, #356]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b46:	e043      	b.n	8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5a:	4b48      	ldr	r3, [pc, #288]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b8a:	e021      	b.n	8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c8c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9e:	4b37      	ldr	r3, [pc, #220]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	0a5b      	lsrs	r3, r3, #9
 8006bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bf6:	ee17 2a90 	vmov	r2, s15
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c08:	ee07 3a90 	vmov	s15, r3
 8006c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c24:	ee17 2a90 	vmov	r2, s15
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006c2c:	4b13      	ldr	r3, [pc, #76]	@ (8006c7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c30:	0e1b      	lsrs	r3, r3, #24
 8006c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c52:	ee17 2a90 	vmov	r2, s15
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c5a:	e008      	b.n	8006c6e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
}
 8006c6e:	bf00      	nop
 8006c70:	3724      	adds	r7, #36	@ 0x24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	58024400 	.word	0x58024400
 8006c80:	03d09000 	.word	0x03d09000
 8006c84:	46000000 	.word	0x46000000
 8006c88:	4c742400 	.word	0x4c742400
 8006c8c:	4a742400 	.word	0x4a742400
 8006c90:	4bbebc20 	.word	0x4bbebc20

08006c94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b089      	sub	sp, #36	@ 0x24
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	0d1b      	lsrs	r3, r3, #20
 8006cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006cb2:	4b9c      	ldr	r3, [pc, #624]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006cbe:	4b99      	ldr	r3, [pc, #612]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc2:	08db      	lsrs	r3, r3, #3
 8006cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	fb02 f303 	mul.w	r3, r2, r3
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8111 	beq.w	8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	f000 8083 	beq.w	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f200 80a1 	bhi.w	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d056      	beq.n	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cfe:	e099      	b.n	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d00:	4b88      	ldr	r3, [pc, #544]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d02d      	beq.n	8006d68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d0c:	4b85      	ldr	r3, [pc, #532]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	08db      	lsrs	r3, r3, #3
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	4a84      	ldr	r2, [pc, #528]	@ (8006f28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d18:	fa22 f303 	lsr.w	r3, r2, r3
 8006d1c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	ee07 3a90 	vmov	s15, r3
 8006d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d36:	4b7b      	ldr	r3, [pc, #492]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d66:	e087      	b.n	8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006daa:	e065      	b.n	8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006db6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dbe:	4b59      	ldr	r3, [pc, #356]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dee:	e043      	b.n	8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b48      	ldr	r3, [pc, #288]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e32:	e021      	b.n	8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e46:	4b37      	ldr	r3, [pc, #220]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006e78:	4b2a      	ldr	r3, [pc, #168]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7c:	0a5b      	lsrs	r3, r3, #9
 8006e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9e:	ee17 2a90 	vmov	r2, s15
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ecc:	ee17 2a90 	vmov	r2, s15
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006ed4:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed8:	0e1b      	lsrs	r3, r3, #24
 8006eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efa:	ee17 2a90 	vmov	r2, s15
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f02:	e008      	b.n	8006f16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	609a      	str	r2, [r3, #8]
}
 8006f16:	bf00      	nop
 8006f18:	3724      	adds	r7, #36	@ 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	58024400 	.word	0x58024400
 8006f28:	03d09000 	.word	0x03d09000
 8006f2c:	46000000 	.word	0x46000000
 8006f30:	4c742400 	.word	0x4c742400
 8006f34:	4a742400 	.word	0x4a742400
 8006f38:	4bbebc20 	.word	0x4bbebc20

08006f3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b089      	sub	sp, #36	@ 0x24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f44:	4ba0      	ldr	r3, [pc, #640]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006f4e:	4b9e      	ldr	r3, [pc, #632]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006f64:	4b98      	ldr	r3, [pc, #608]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f68:	08db      	lsrs	r3, r3, #3
 8006f6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 8111 	beq.w	80071aa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	f000 8083 	beq.w	8007096 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	f200 80a1 	bhi.w	80070da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d056      	beq.n	8007052 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006fa4:	e099      	b.n	80070da <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fa6:	4b88      	ldr	r3, [pc, #544]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02d      	beq.n	800700e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fb2:	4b85      	ldr	r3, [pc, #532]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	08db      	lsrs	r3, r3, #3
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	4a83      	ldr	r2, [pc, #524]	@ (80071cc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006fc2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	ee07 3a90 	vmov	s15, r3
 8006fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fdc:	4b7a      	ldr	r3, [pc, #488]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ff0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80071d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007000:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007008:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800700c:	e087      	b.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007018:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80071d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800701c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007020:	4b69      	ldr	r3, [pc, #420]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007028:	ee07 3a90 	vmov	s15, r3
 800702c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007030:	ed97 6a03 	vldr	s12, [r7, #12]
 8007034:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80071d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800703c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007040:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007050:	e065      	b.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	ee07 3a90 	vmov	s15, r3
 8007058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80071d8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007064:	4b58      	ldr	r3, [pc, #352]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007074:	ed97 6a03 	vldr	s12, [r7, #12]
 8007078:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80071d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800707c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007080:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007084:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007088:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800708c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007090:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007094:	e043      	b.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80071dc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80070a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a8:	4b47      	ldr	r3, [pc, #284]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80070bc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80071d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80070c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070d8:	e021      	b.n	800711e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	ee07 3a90 	vmov	s15, r3
 80070e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80071d4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80070e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ec:	4b36      	ldr	r3, [pc, #216]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f4:	ee07 3a90 	vmov	s15, r3
 80070f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007100:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80071d0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007104:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007108:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800710c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007110:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007118:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800711c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800711e:	4b2a      	ldr	r3, [pc, #168]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007122:	0a5b      	lsrs	r3, r3, #9
 8007124:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007130:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007134:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007138:	edd7 6a07 	vldr	s13, [r7, #28]
 800713c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007144:	ee17 2a90 	vmov	r2, s15
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800714c:	4b1e      	ldr	r3, [pc, #120]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800714e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007166:	edd7 6a07 	vldr	s13, [r7, #28]
 800716a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800716e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007172:	ee17 2a90 	vmov	r2, s15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800717a:	4b13      	ldr	r3, [pc, #76]	@ (80071c8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007194:	edd7 6a07 	vldr	s13, [r7, #28]
 8007198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800719c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071a0:	ee17 2a90 	vmov	r2, s15
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80071a8:	e008      	b.n	80071bc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	609a      	str	r2, [r3, #8]
}
 80071bc:	bf00      	nop
 80071be:	3724      	adds	r7, #36	@ 0x24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	58024400 	.word	0x58024400
 80071cc:	03d09000 	.word	0x03d09000
 80071d0:	46000000 	.word	0x46000000
 80071d4:	4c742400 	.word	0x4c742400
 80071d8:	4a742400 	.word	0x4a742400
 80071dc:	4bbebc20 	.word	0x4bbebc20

080071e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071ee:	4b53      	ldr	r3, [pc, #332]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80071f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d101      	bne.n	80071fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e099      	b.n	8007332 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80071fe:	4b4f      	ldr	r3, [pc, #316]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a4e      	ldr	r2, [pc, #312]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007204:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007208:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800720a:	f7fa fb1d 	bl	8001848 <HAL_GetTick>
 800720e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007210:	e008      	b.n	8007224 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007212:	f7fa fb19 	bl	8001848 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e086      	b.n	8007332 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007224:	4b45      	ldr	r3, [pc, #276]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f0      	bne.n	8007212 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007230:	4b42      	ldr	r3, [pc, #264]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007234:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	031b      	lsls	r3, r3, #12
 800723e:	493f      	ldr	r1, [pc, #252]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007240:	4313      	orrs	r3, r2
 8007242:	628b      	str	r3, [r1, #40]	@ 0x28
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	3b01      	subs	r3, #1
 800724a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	3b01      	subs	r3, #1
 8007254:	025b      	lsls	r3, r3, #9
 8007256:	b29b      	uxth	r3, r3
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	3b01      	subs	r3, #1
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	3b01      	subs	r3, #1
 800726e:	061b      	lsls	r3, r3, #24
 8007270:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007274:	4931      	ldr	r1, [pc, #196]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007276:	4313      	orrs	r3, r2
 8007278:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800727a:	4b30      	ldr	r3, [pc, #192]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 800727c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	492d      	ldr	r1, [pc, #180]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800728c:	4b2b      	ldr	r3, [pc, #172]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	f023 0220 	bic.w	r2, r3, #32
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	4928      	ldr	r1, [pc, #160]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 800729a:	4313      	orrs	r3, r2
 800729c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800729e:	4b27      	ldr	r3, [pc, #156]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	4a26      	ldr	r2, [pc, #152]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072a4:	f023 0310 	bic.w	r3, r3, #16
 80072a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072aa:	4b24      	ldr	r3, [pc, #144]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072ae:	4b24      	ldr	r3, [pc, #144]	@ (8007340 <RCCEx_PLL2_Config+0x160>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	69d2      	ldr	r2, [r2, #28]
 80072b6:	00d2      	lsls	r2, r2, #3
 80072b8:	4920      	ldr	r1, [pc, #128]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072be:	4b1f      	ldr	r3, [pc, #124]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c2:	4a1e      	ldr	r2, [pc, #120]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072c4:	f043 0310 	orr.w	r3, r3, #16
 80072c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d106      	bne.n	80072de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072d0:	4b1a      	ldr	r3, [pc, #104]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d4:	4a19      	ldr	r2, [pc, #100]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80072da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072dc:	e00f      	b.n	80072fe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d106      	bne.n	80072f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80072e4:	4b15      	ldr	r3, [pc, #84]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	4a14      	ldr	r2, [pc, #80]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072f0:	e005      	b.n	80072fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80072f2:	4b12      	ldr	r3, [pc, #72]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	4a11      	ldr	r2, [pc, #68]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 80072f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80072fe:	4b0f      	ldr	r3, [pc, #60]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a0e      	ldr	r2, [pc, #56]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007304:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007308:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800730a:	f7fa fa9d 	bl	8001848 <HAL_GetTick>
 800730e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007310:	e008      	b.n	8007324 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007312:	f7fa fa99 	bl	8001848 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d901      	bls.n	8007324 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e006      	b.n	8007332 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007324:	4b05      	ldr	r3, [pc, #20]	@ (800733c <RCCEx_PLL2_Config+0x15c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	58024400 	.word	0x58024400
 8007340:	ffff0007 	.word	0xffff0007

08007344 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007352:	4b53      	ldr	r3, [pc, #332]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b03      	cmp	r3, #3
 800735c:	d101      	bne.n	8007362 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e099      	b.n	8007496 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007362:	4b4f      	ldr	r3, [pc, #316]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a4e      	ldr	r2, [pc, #312]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007368:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800736c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736e:	f7fa fa6b 	bl	8001848 <HAL_GetTick>
 8007372:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007374:	e008      	b.n	8007388 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007376:	f7fa fa67 	bl	8001848 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e086      	b.n	8007496 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007388:	4b45      	ldr	r3, [pc, #276]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1f0      	bne.n	8007376 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007394:	4b42      	ldr	r3, [pc, #264]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	051b      	lsls	r3, r3, #20
 80073a2:	493f      	ldr	r1, [pc, #252]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	025b      	lsls	r3, r3, #9
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	041b      	lsls	r3, r3, #16
 80073c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	061b      	lsls	r3, r3, #24
 80073d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073d8:	4931      	ldr	r1, [pc, #196]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073de:	4b30      	ldr	r3, [pc, #192]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	695b      	ldr	r3, [r3, #20]
 80073ea:	492d      	ldr	r1, [pc, #180]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80073f0:	4b2b      	ldr	r3, [pc, #172]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	4928      	ldr	r1, [pc, #160]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007402:	4b27      	ldr	r3, [pc, #156]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	4a26      	ldr	r2, [pc, #152]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007408:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800740c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800740e:	4b24      	ldr	r3, [pc, #144]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007412:	4b24      	ldr	r3, [pc, #144]	@ (80074a4 <RCCEx_PLL3_Config+0x160>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	69d2      	ldr	r2, [r2, #28]
 800741a:	00d2      	lsls	r2, r2, #3
 800741c:	4920      	ldr	r1, [pc, #128]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007422:	4b1f      	ldr	r3, [pc, #124]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	4a1e      	ldr	r2, [pc, #120]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d106      	bne.n	8007442 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007434:	4b1a      	ldr	r3, [pc, #104]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800743a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800743e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007440:	e00f      	b.n	8007462 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d106      	bne.n	8007456 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007448:	4b15      	ldr	r3, [pc, #84]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800744a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744c:	4a14      	ldr	r2, [pc, #80]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800744e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007452:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007454:	e005      	b.n	8007462 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007456:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745a:	4a11      	ldr	r2, [pc, #68]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800745c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007460:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007462:	4b0f      	ldr	r3, [pc, #60]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a0e      	ldr	r2, [pc, #56]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 8007468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800746c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800746e:	f7fa f9eb 	bl	8001848 <HAL_GetTick>
 8007472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007474:	e008      	b.n	8007488 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007476:	f7fa f9e7 	bl	8001848 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e006      	b.n	8007496 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007488:	4b05      	ldr	r3, [pc, #20]	@ (80074a0 <RCCEx_PLL3_Config+0x15c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007494:	7bfb      	ldrb	r3, [r7, #15]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	58024400 	.word	0x58024400
 80074a4:	ffff0007 	.word	0xffff0007

080074a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d101      	bne.n	80074ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e0f1      	b.n	800769e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a78      	ldr	r2, [pc, #480]	@ (80076a8 <HAL_SPI_Init+0x200>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00f      	beq.n	80074ea <HAL_SPI_Init+0x42>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a77      	ldr	r2, [pc, #476]	@ (80076ac <HAL_SPI_Init+0x204>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00a      	beq.n	80074ea <HAL_SPI_Init+0x42>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a75      	ldr	r2, [pc, #468]	@ (80076b0 <HAL_SPI_Init+0x208>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d005      	beq.n	80074ea <HAL_SPI_Init+0x42>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	2b0f      	cmp	r3, #15
 80074e4:	d901      	bls.n	80074ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e0d9      	b.n	800769e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fbd8 	bl	8007ca0 <SPI_GetPacketSize>
 80074f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a6c      	ldr	r2, [pc, #432]	@ (80076a8 <HAL_SPI_Init+0x200>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00c      	beq.n	8007516 <HAL_SPI_Init+0x6e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a6a      	ldr	r2, [pc, #424]	@ (80076ac <HAL_SPI_Init+0x204>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d007      	beq.n	8007516 <HAL_SPI_Init+0x6e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a69      	ldr	r2, [pc, #420]	@ (80076b0 <HAL_SPI_Init+0x208>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d002      	beq.n	8007516 <HAL_SPI_Init+0x6e>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b08      	cmp	r3, #8
 8007514:	d811      	bhi.n	800753a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800751a:	4a63      	ldr	r2, [pc, #396]	@ (80076a8 <HAL_SPI_Init+0x200>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d009      	beq.n	8007534 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a61      	ldr	r2, [pc, #388]	@ (80076ac <HAL_SPI_Init+0x204>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d004      	beq.n	8007534 <HAL_SPI_Init+0x8c>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a60      	ldr	r2, [pc, #384]	@ (80076b0 <HAL_SPI_Init+0x208>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d104      	bne.n	800753e <HAL_SPI_Init+0x96>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b10      	cmp	r3, #16
 8007538:	d901      	bls.n	800753e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0af      	b.n	800769e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7f9 feee 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0201 	bic.w	r2, r2, #1
 800756e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800757a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007584:	d119      	bne.n	80075ba <HAL_SPI_Init+0x112>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800758e:	d103      	bne.n	8007598 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007594:	2b00      	cmp	r3, #0
 8007596:	d008      	beq.n	80075aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10c      	bne.n	80075ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80075a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075a8:	d107      	bne.n	80075ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69da      	ldr	r2, [r3, #28]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c2:	431a      	orrs	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68da      	ldr	r2, [r3, #12]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	431a      	orrs	r2, r3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	431a      	orrs	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760e:	431a      	orrs	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761a:	ea42 0103 	orr.w	r1, r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d113      	bne.n	800765a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007644:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007658:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f022 0201 	bic.w	r2, r2, #1
 8007668:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40013000 	.word	0x40013000
 80076ac:	40003800 	.word	0x40003800
 80076b0:	40003c00 	.word	0x40003c00

080076b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08e      	sub	sp, #56	@ 0x38
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
 80076c0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3320      	adds	r3, #32
 80076ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3330      	adds	r3, #48	@ 0x30
 80076d6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_SPI_TransmitReceive+0x32>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e209      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ee:	f7fa f8ab 	bl	8001848 <HAL_GetTick>
 80076f2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80076f4:	887b      	ldrh	r3, [r7, #2]
 80076f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  initial_RxXferCount = Size;
 80076f8:	887b      	ldrh	r3, [r7, #2]
 80076fa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  tmp_state           = hspi->State;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007702:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800770a:	7efb      	ldrb	r3, [r7, #27]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d014      	beq.n	800773a <HAL_SPI_TransmitReceive+0x86>
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007716:	d106      	bne.n	8007726 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007720:	7efb      	ldrb	r3, [r7, #27]
 8007722:	2b04      	cmp	r3, #4
 8007724:	d009      	beq.n	800773a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007726:	2302      	movs	r3, #2
 8007728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    __HAL_UNLOCK(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8007734:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007738:	e1df      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_SPI_TransmitReceive+0x98>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d002      	beq.n	800774c <HAL_SPI_TransmitReceive+0x98>
 8007746:	887b      	ldrh	r3, [r7, #2]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d109      	bne.n	8007760 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    __HAL_UNLOCK(hspi);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800775a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800775e:	e1cc      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b04      	cmp	r3, #4
 800776a:	d003      	beq.n	8007774 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2205      	movs	r2, #5
 8007770:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	887a      	ldrh	r2, [r7, #2]
 8007786:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	887a      	ldrh	r2, [r7, #2]
 800778e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	887a      	ldrh	r2, [r7, #2]
 800779c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685a      	ldr	r2, [r3, #4]
 80077ba:	4b82      	ldr	r3, [pc, #520]	@ (80079c4 <HAL_SPI_TransmitReceive+0x310>)
 80077bc:	4013      	ands	r3, r2
 80077be:	8879      	ldrh	r1, [r7, #2]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	6812      	ldr	r2, [r2, #0]
 80077c4:	430b      	orrs	r3, r1
 80077c6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077e0:	d107      	bne.n	80077f2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80077f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	2b0f      	cmp	r3, #15
 80077f8:	d970      	bls.n	80078dc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80077fa:	e068      	b.n	80078ce <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b02      	cmp	r3, #2
 8007808:	d11a      	bne.n	8007840 <HAL_SPI_TransmitReceive+0x18c>
 800780a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007820:	1d1a      	adds	r2, r3, #4
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800783e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	695a      	ldr	r2, [r3, #20]
 8007846:	f248 0308 	movw	r3, #32776	@ 0x8008
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <HAL_SPI_TransmitReceive+0x1d2>
 8007850:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d017      	beq.n	8007886 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800785e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007860:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007866:	1d1a      	adds	r2, r3, #4
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount --;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007884:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007886:	f7f9 ffdf 	bl	8001848 <HAL_GetTick>
 800788a:	4602      	mov	r2, r0
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007892:	429a      	cmp	r2, r3
 8007894:	d803      	bhi.n	800789e <HAL_SPI_TransmitReceive+0x1ea>
 8007896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800789c:	d102      	bne.n	80078a4 <HAL_SPI_TransmitReceive+0x1f0>
 800789e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d114      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f92d 	bl	8007b04 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e115      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d193      	bne.n	80077fc <HAL_SPI_TransmitReceive+0x148>
 80078d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d190      	bne.n	80077fc <HAL_SPI_TransmitReceive+0x148>
 80078da:	e0e7      	b.n	8007aac <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	2b07      	cmp	r3, #7
 80078e2:	f240 80dd 	bls.w	8007aa0 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80078e6:	e066      	b.n	80079b6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f003 0302 	and.w	r3, r3, #2
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d119      	bne.n	800792a <HAL_SPI_TransmitReceive+0x276>
 80078f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d016      	beq.n	800792a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790a:	1c9a      	adds	r2, r3, #2
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007928:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b01      	cmp	r3, #1
 8007936:	d11a      	bne.n	800796e <HAL_SPI_TransmitReceive+0x2ba>
 8007938:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d017      	beq.n	800796e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007942:	6a3a      	ldr	r2, [r7, #32]
 8007944:	8812      	ldrh	r2, [r2, #0]
 8007946:	b292      	uxth	r2, r2
 8007948:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794e:	1c9a      	adds	r2, r3, #2
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800795a:	b29b      	uxth	r3, r3
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800796c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800796e:	f7f9 ff6b 	bl	8001848 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800797a:	429a      	cmp	r2, r3
 800797c:	d803      	bhi.n	8007986 <HAL_SPI_TransmitReceive+0x2d2>
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007984:	d102      	bne.n	800798c <HAL_SPI_TransmitReceive+0x2d8>
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d114      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f8b9 	bl	8007b04 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e0a1      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80079b6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d195      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x234>
 80079bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d192      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x234>
 80079c2:	e073      	b.n	8007aac <HAL_SPI_TransmitReceive+0x3f8>
 80079c4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d11b      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x35a>
 80079d6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d018      	beq.n	8007a0e <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3320      	adds	r3, #32
 80079e6:	7812      	ldrb	r2, [r2, #0]
 80079e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8007a0c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d11d      	bne.n	8007a58 <HAL_SPI_TransmitReceive+0x3a4>
 8007a1c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d01a      	beq.n	8007a58 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a2e:	7812      	ldrb	r2, [r2, #0]
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a58:	f7f9 fef6 	bl	8001848 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d803      	bhi.n	8007a70 <HAL_SPI_TransmitReceive+0x3bc>
 8007a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a6e:	d102      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x3c2>
 8007a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d114      	bne.n	8007aa0 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 f844 	bl	8007b04 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e02c      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007aa0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d190      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x314>
 8007aa6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d18d      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	2108      	movs	r1, #8
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f8c4 	bl	8007c44 <SPI_WaitOnFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ac8:	f043 0220 	orr.w	r2, r3, #32
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f816 	bl	8007b04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e001      	b.n	8007afa <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8007af6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3730      	adds	r7, #48	@ 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop

08007b04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699a      	ldr	r2, [r3, #24]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0208 	orr.w	r2, r2, #8
 8007b22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699a      	ldr	r2, [r3, #24]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f042 0210 	orr.w	r2, r2, #16
 8007b32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 0201 	bic.w	r2, r2, #1
 8007b42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6919      	ldr	r1, [r3, #16]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8007c40 <SPI_CloseTransfer+0x13c>)
 8007b50:	400b      	ands	r3, r1
 8007b52:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007b62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d014      	beq.n	8007b9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00f      	beq.n	8007b9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0220 	orr.w	r2, r2, #32
 8007b98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d014      	beq.n	8007bd0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00f      	beq.n	8007bfa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007be0:	f043 0201 	orr.w	r2, r3, #1
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699a      	ldr	r2, [r3, #24]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007bf8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c0a:	f043 0208 	orr.w	r2, r3, #8
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	699a      	ldr	r2, [r3, #24]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8007c34:	bf00      	nop
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	fffffc90 	.word	0xfffffc90

08007c44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c54:	e010      	b.n	8007c78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c56:	f7f9 fdf7 	bl	8001848 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d803      	bhi.n	8007c6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6c:	d102      	bne.n	8007c74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d101      	bne.n	8007c78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e00f      	b.n	8007c98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695a      	ldr	r2, [r3, #20]
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	4013      	ands	r3, r2
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	461a      	mov	r2, r3
 8007c90:	79fb      	ldrb	r3, [r7, #7]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d0df      	beq.n	8007c56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	3301      	adds	r3, #1
 8007cb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	3307      	adds	r3, #7
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b082      	sub	sp, #8
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e049      	b.n	8007d7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d106      	bne.n	8007d02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f841 	bl	8007d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4619      	mov	r1, r3
 8007d14:	4610      	mov	r0, r2
 8007d16:	f000 f9ff 	bl	8008118 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d001      	beq.n	8007db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e054      	b.n	8007e5a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68da      	ldr	r2, [r3, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f042 0201 	orr.w	r2, r2, #1
 8007dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a26      	ldr	r2, [pc, #152]	@ (8007e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d022      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dda:	d01d      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a22      	ldr	r2, [pc, #136]	@ (8007e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d018      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a21      	ldr	r2, [pc, #132]	@ (8007e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d013      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1f      	ldr	r2, [pc, #124]	@ (8007e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d00e      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8007e78 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d009      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1c      	ldr	r2, [pc, #112]	@ (8007e7c <HAL_TIM_Base_Start_IT+0xe4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d004      	beq.n	8007e18 <HAL_TIM_Base_Start_IT+0x80>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1b      	ldr	r2, [pc, #108]	@ (8007e80 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d115      	bne.n	8007e44 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	4b19      	ldr	r3, [pc, #100]	@ (8007e84 <HAL_TIM_Base_Start_IT+0xec>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b06      	cmp	r3, #6
 8007e28:	d015      	beq.n	8007e56 <HAL_TIM_Base_Start_IT+0xbe>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e30:	d011      	beq.n	8007e56 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0201 	orr.w	r2, r2, #1
 8007e40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e42:	e008      	b.n	8007e56 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f042 0201 	orr.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	e000      	b.n	8007e58 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40000800 	.word	0x40000800
 8007e74:	40000c00 	.word	0x40000c00
 8007e78:	40010400 	.word	0x40010400
 8007e7c:	40001800 	.word	0x40001800
 8007e80:	40014000 	.word	0x40014000
 8007e84:	00010007 	.word	0x00010007

08007e88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0302 	and.w	r3, r3, #2
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d122      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d11b      	bne.n	8007ee4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0202 	mvn.w	r2, #2
 8007eb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f905 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007ed0:	e005      	b.n	8007ede <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8f7 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f908 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	d122      	bne.n	8007f38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d11b      	bne.n	8007f38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0204 	mvn.w	r2, #4
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f8db 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f8cd 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f8de 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d122      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b08      	cmp	r3, #8
 8007f52:	d11b      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f06f 0208 	mvn.w	r2, #8
 8007f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2204      	movs	r2, #4
 8007f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f8b1 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007f78:	e005      	b.n	8007f86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8a3 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f8b4 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f003 0310 	and.w	r3, r3, #16
 8007f96:	2b10      	cmp	r3, #16
 8007f98:	d122      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0310 	and.w	r3, r3, #16
 8007fa4:	2b10      	cmp	r3, #16
 8007fa6:	d11b      	bne.n	8007fe0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0210 	mvn.w	r2, #16
 8007fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2208      	movs	r2, #8
 8007fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	69db      	ldr	r3, [r3, #28]
 8007fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f887 	bl	80080da <HAL_TIM_IC_CaptureCallback>
 8007fcc:	e005      	b.n	8007fda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f879 	bl	80080c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f88a 	bl	80080ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d10e      	bne.n	800800c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d107      	bne.n	800800c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f06f 0201 	mvn.w	r2, #1
 8008004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7f9 f822 	bl	8001050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008016:	2b80      	cmp	r3, #128	@ 0x80
 8008018:	d10e      	bne.n	8008038 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008024:	2b80      	cmp	r3, #128	@ 0x80
 8008026:	d107      	bne.n	8008038 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f914 	bl	8008260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008046:	d10e      	bne.n	8008066 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008052:	2b80      	cmp	r3, #128	@ 0x80
 8008054:	d107      	bne.n	8008066 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800805e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f907 	bl	8008274 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b40      	cmp	r3, #64	@ 0x40
 8008072:	d10e      	bne.n	8008092 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800807e:	2b40      	cmp	r3, #64	@ 0x40
 8008080:	d107      	bne.n	8008092 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800808a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f838 	bl	8008102 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f003 0320 	and.w	r3, r3, #32
 800809c:	2b20      	cmp	r3, #32
 800809e:	d10e      	bne.n	80080be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	f003 0320 	and.w	r3, r3, #32
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d107      	bne.n	80080be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f06f 0220 	mvn.w	r2, #32
 80080b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8c7 	bl	800824c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080be:	bf00      	nop
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ce:	bf00      	nop
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b083      	sub	sp, #12
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800810a:	bf00      	nop
 800810c:	370c      	adds	r7, #12
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
	...

08008118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a40      	ldr	r2, [pc, #256]	@ (800822c <TIM_Base_SetConfig+0x114>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d013      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008136:	d00f      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a3d      	ldr	r2, [pc, #244]	@ (8008230 <TIM_Base_SetConfig+0x118>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d00b      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a3c      	ldr	r2, [pc, #240]	@ (8008234 <TIM_Base_SetConfig+0x11c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d007      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a3b      	ldr	r2, [pc, #236]	@ (8008238 <TIM_Base_SetConfig+0x120>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <TIM_Base_SetConfig+0x40>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a3a      	ldr	r2, [pc, #232]	@ (800823c <TIM_Base_SetConfig+0x124>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d108      	bne.n	800816a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800815e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4313      	orrs	r3, r2
 8008168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a2f      	ldr	r2, [pc, #188]	@ (800822c <TIM_Base_SetConfig+0x114>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d01f      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008178:	d01b      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2c      	ldr	r2, [pc, #176]	@ (8008230 <TIM_Base_SetConfig+0x118>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d017      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2b      	ldr	r2, [pc, #172]	@ (8008234 <TIM_Base_SetConfig+0x11c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d013      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a2a      	ldr	r2, [pc, #168]	@ (8008238 <TIM_Base_SetConfig+0x120>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d00f      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a29      	ldr	r2, [pc, #164]	@ (800823c <TIM_Base_SetConfig+0x124>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00b      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a28      	ldr	r2, [pc, #160]	@ (8008240 <TIM_Base_SetConfig+0x128>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d007      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a27      	ldr	r2, [pc, #156]	@ (8008244 <TIM_Base_SetConfig+0x12c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d003      	beq.n	80081b2 <TIM_Base_SetConfig+0x9a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a26      	ldr	r2, [pc, #152]	@ (8008248 <TIM_Base_SetConfig+0x130>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d108      	bne.n	80081c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689a      	ldr	r2, [r3, #8]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a10      	ldr	r2, [pc, #64]	@ (800822c <TIM_Base_SetConfig+0x114>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00f      	beq.n	8008210 <TIM_Base_SetConfig+0xf8>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a12      	ldr	r2, [pc, #72]	@ (800823c <TIM_Base_SetConfig+0x124>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00b      	beq.n	8008210 <TIM_Base_SetConfig+0xf8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a11      	ldr	r2, [pc, #68]	@ (8008240 <TIM_Base_SetConfig+0x128>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d007      	beq.n	8008210 <TIM_Base_SetConfig+0xf8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a10      	ldr	r2, [pc, #64]	@ (8008244 <TIM_Base_SetConfig+0x12c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_Base_SetConfig+0xf8>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a0f      	ldr	r2, [pc, #60]	@ (8008248 <TIM_Base_SetConfig+0x130>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d103      	bne.n	8008218 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	691a      	ldr	r2, [r3, #16]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	615a      	str	r2, [r3, #20]
}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	40010000 	.word	0x40010000
 8008230:	40000400 	.word	0x40000400
 8008234:	40000800 	.word	0x40000800
 8008238:	40000c00 	.word	0x40000c00
 800823c:	40010400 	.word	0x40010400
 8008240:	40014000 	.word	0x40014000
 8008244:	40014400 	.word	0x40014400
 8008248:	40014800 	.word	0x40014800

0800824c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e03c      	b.n	8008314 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f9 f8a4 	bl	80013fc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f85b 	bl	8008388 <USART_SetConfig>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d101      	bne.n	80082dc <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e01b      	b.n	8008314 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685a      	ldr	r2, [r3, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80082ea:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	689a      	ldr	r2, [r3, #8]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80082fa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f042 0201 	orr.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fd5b 	bl	8008dc8 <USART_CheckIdleState>
 8008312:	4603      	mov	r3, r0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	603b      	str	r3, [r7, #0]
 8008328:	4613      	mov	r3, r2
 800832a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800832c:	e018      	b.n	8008360 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008334:	d014      	beq.n	8008360 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008336:	f7f9 fa87 	bl	8001848 <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	429a      	cmp	r2, r3
 8008344:	d302      	bcc.n	800834c <USART_WaitOnFlagUntilTimeout+0x30>
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d109      	bne.n	8008360 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e00f      	b.n	8008380 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	69da      	ldr	r2, [r3, #28]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	4013      	ands	r3, r2
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	429a      	cmp	r2, r3
 800836e:	bf0c      	ite	eq
 8008370:	2301      	moveq	r3, #1
 8008372:	2300      	movne	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	461a      	mov	r2, r3
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	429a      	cmp	r2, r3
 800837c:	d0d7      	beq.n	800832e <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08e      	sub	sp, #56	@ 0x38
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8008396:	2300      	movs	r3, #0
 8008398:	633b      	str	r3, [r7, #48]	@ 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	695b      	ldr	r3, [r3, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	4bc9      	ldr	r3, [pc, #804]	@ (80086dc <USART_SetConfig+0x354>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6812      	ldr	r2, [r2, #0]
 80083be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083c0:	430b      	orrs	r3, r1
 80083c2:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80083c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80083c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a1b      	ldr	r3, [r3, #32]
 80083ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d0:	4313      	orrs	r3, r2
 80083d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	699a      	ldr	r2, [r3, #24]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	4313      	orrs	r3, r2
 80083de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e0:	4313      	orrs	r3, r2
 80083e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083ea:	4313      	orrs	r3, r2
 80083ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685a      	ldr	r2, [r3, #4]
 80083f4:	4bba      	ldr	r3, [pc, #744]	@ (80086e0 <USART_SetConfig+0x358>)
 80083f6:	4013      	ands	r3, r2
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6812      	ldr	r2, [r2, #0]
 80083fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083fe:	430b      	orrs	r3, r1
 8008400:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	f023 010f 	bic.w	r1, r3, #15
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4ab1      	ldr	r2, [pc, #708]	@ (80086e4 <USART_SetConfig+0x35c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d176      	bne.n	8008510 <USART_SetConfig+0x188>
 8008422:	4bb1      	ldr	r3, [pc, #708]	@ (80086e8 <USART_SetConfig+0x360>)
 8008424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008426:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800842a:	2b28      	cmp	r3, #40	@ 0x28
 800842c:	d86c      	bhi.n	8008508 <USART_SetConfig+0x180>
 800842e:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <USART_SetConfig+0xac>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	080084d9 	.word	0x080084d9
 8008438:	08008509 	.word	0x08008509
 800843c:	08008509 	.word	0x08008509
 8008440:	08008509 	.word	0x08008509
 8008444:	08008509 	.word	0x08008509
 8008448:	08008509 	.word	0x08008509
 800844c:	08008509 	.word	0x08008509
 8008450:	08008509 	.word	0x08008509
 8008454:	080084e1 	.word	0x080084e1
 8008458:	08008509 	.word	0x08008509
 800845c:	08008509 	.word	0x08008509
 8008460:	08008509 	.word	0x08008509
 8008464:	08008509 	.word	0x08008509
 8008468:	08008509 	.word	0x08008509
 800846c:	08008509 	.word	0x08008509
 8008470:	08008509 	.word	0x08008509
 8008474:	080084e9 	.word	0x080084e9
 8008478:	08008509 	.word	0x08008509
 800847c:	08008509 	.word	0x08008509
 8008480:	08008509 	.word	0x08008509
 8008484:	08008509 	.word	0x08008509
 8008488:	08008509 	.word	0x08008509
 800848c:	08008509 	.word	0x08008509
 8008490:	08008509 	.word	0x08008509
 8008494:	080084f1 	.word	0x080084f1
 8008498:	08008509 	.word	0x08008509
 800849c:	08008509 	.word	0x08008509
 80084a0:	08008509 	.word	0x08008509
 80084a4:	08008509 	.word	0x08008509
 80084a8:	08008509 	.word	0x08008509
 80084ac:	08008509 	.word	0x08008509
 80084b0:	08008509 	.word	0x08008509
 80084b4:	080084f9 	.word	0x080084f9
 80084b8:	08008509 	.word	0x08008509
 80084bc:	08008509 	.word	0x08008509
 80084c0:	08008509 	.word	0x08008509
 80084c4:	08008509 	.word	0x08008509
 80084c8:	08008509 	.word	0x08008509
 80084cc:	08008509 	.word	0x08008509
 80084d0:	08008509 	.word	0x08008509
 80084d4:	08008501 	.word	0x08008501
 80084d8:	2301      	movs	r3, #1
 80084da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084de:	e112      	b.n	8008706 <USART_SetConfig+0x37e>
 80084e0:	2302      	movs	r3, #2
 80084e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084e6:	e10e      	b.n	8008706 <USART_SetConfig+0x37e>
 80084e8:	2304      	movs	r3, #4
 80084ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084ee:	e10a      	b.n	8008706 <USART_SetConfig+0x37e>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084f6:	e106      	b.n	8008706 <USART_SetConfig+0x37e>
 80084f8:	2310      	movs	r3, #16
 80084fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80084fe:	e102      	b.n	8008706 <USART_SetConfig+0x37e>
 8008500:	2320      	movs	r3, #32
 8008502:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008506:	e0fe      	b.n	8008706 <USART_SetConfig+0x37e>
 8008508:	2340      	movs	r3, #64	@ 0x40
 800850a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800850e:	e0fa      	b.n	8008706 <USART_SetConfig+0x37e>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a75      	ldr	r2, [pc, #468]	@ (80086ec <USART_SetConfig+0x364>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d130      	bne.n	800857c <USART_SetConfig+0x1f4>
 800851a:	4b73      	ldr	r3, [pc, #460]	@ (80086e8 <USART_SetConfig+0x360>)
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	2b05      	cmp	r3, #5
 8008524:	d826      	bhi.n	8008574 <USART_SetConfig+0x1ec>
 8008526:	a201      	add	r2, pc, #4	@ (adr r2, 800852c <USART_SetConfig+0x1a4>)
 8008528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852c:	08008545 	.word	0x08008545
 8008530:	0800854d 	.word	0x0800854d
 8008534:	08008555 	.word	0x08008555
 8008538:	0800855d 	.word	0x0800855d
 800853c:	08008565 	.word	0x08008565
 8008540:	0800856d 	.word	0x0800856d
 8008544:	2300      	movs	r3, #0
 8008546:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800854a:	e0dc      	b.n	8008706 <USART_SetConfig+0x37e>
 800854c:	2302      	movs	r3, #2
 800854e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008552:	e0d8      	b.n	8008706 <USART_SetConfig+0x37e>
 8008554:	2304      	movs	r3, #4
 8008556:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800855a:	e0d4      	b.n	8008706 <USART_SetConfig+0x37e>
 800855c:	2308      	movs	r3, #8
 800855e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008562:	e0d0      	b.n	8008706 <USART_SetConfig+0x37e>
 8008564:	2310      	movs	r3, #16
 8008566:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800856a:	e0cc      	b.n	8008706 <USART_SetConfig+0x37e>
 800856c:	2320      	movs	r3, #32
 800856e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008572:	e0c8      	b.n	8008706 <USART_SetConfig+0x37e>
 8008574:	2340      	movs	r3, #64	@ 0x40
 8008576:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800857a:	e0c4      	b.n	8008706 <USART_SetConfig+0x37e>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a5b      	ldr	r2, [pc, #364]	@ (80086f0 <USART_SetConfig+0x368>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d130      	bne.n	80085e8 <USART_SetConfig+0x260>
 8008586:	4b58      	ldr	r3, [pc, #352]	@ (80086e8 <USART_SetConfig+0x360>)
 8008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858a:	f003 0307 	and.w	r3, r3, #7
 800858e:	2b05      	cmp	r3, #5
 8008590:	d826      	bhi.n	80085e0 <USART_SetConfig+0x258>
 8008592:	a201      	add	r2, pc, #4	@ (adr r2, 8008598 <USART_SetConfig+0x210>)
 8008594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008598:	080085b1 	.word	0x080085b1
 800859c:	080085b9 	.word	0x080085b9
 80085a0:	080085c1 	.word	0x080085c1
 80085a4:	080085c9 	.word	0x080085c9
 80085a8:	080085d1 	.word	0x080085d1
 80085ac:	080085d9 	.word	0x080085d9
 80085b0:	2300      	movs	r3, #0
 80085b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085b6:	e0a6      	b.n	8008706 <USART_SetConfig+0x37e>
 80085b8:	2302      	movs	r3, #2
 80085ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085be:	e0a2      	b.n	8008706 <USART_SetConfig+0x37e>
 80085c0:	2304      	movs	r3, #4
 80085c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085c6:	e09e      	b.n	8008706 <USART_SetConfig+0x37e>
 80085c8:	2308      	movs	r3, #8
 80085ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085ce:	e09a      	b.n	8008706 <USART_SetConfig+0x37e>
 80085d0:	2310      	movs	r3, #16
 80085d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085d6:	e096      	b.n	8008706 <USART_SetConfig+0x37e>
 80085d8:	2320      	movs	r3, #32
 80085da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085de:	e092      	b.n	8008706 <USART_SetConfig+0x37e>
 80085e0:	2340      	movs	r3, #64	@ 0x40
 80085e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80085e6:	e08e      	b.n	8008706 <USART_SetConfig+0x37e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a41      	ldr	r2, [pc, #260]	@ (80086f4 <USART_SetConfig+0x36c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	f040 8086 	bne.w	8008700 <USART_SetConfig+0x378>
 80085f4:	4b3c      	ldr	r3, [pc, #240]	@ (80086e8 <USART_SetConfig+0x360>)
 80085f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80085fc:	2b28      	cmp	r3, #40	@ 0x28
 80085fe:	d87b      	bhi.n	80086f8 <USART_SetConfig+0x370>
 8008600:	a201      	add	r2, pc, #4	@ (adr r2, 8008608 <USART_SetConfig+0x280>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	080086ad 	.word	0x080086ad
 800860c:	080086f9 	.word	0x080086f9
 8008610:	080086f9 	.word	0x080086f9
 8008614:	080086f9 	.word	0x080086f9
 8008618:	080086f9 	.word	0x080086f9
 800861c:	080086f9 	.word	0x080086f9
 8008620:	080086f9 	.word	0x080086f9
 8008624:	080086f9 	.word	0x080086f9
 8008628:	080086b5 	.word	0x080086b5
 800862c:	080086f9 	.word	0x080086f9
 8008630:	080086f9 	.word	0x080086f9
 8008634:	080086f9 	.word	0x080086f9
 8008638:	080086f9 	.word	0x080086f9
 800863c:	080086f9 	.word	0x080086f9
 8008640:	080086f9 	.word	0x080086f9
 8008644:	080086f9 	.word	0x080086f9
 8008648:	080086bd 	.word	0x080086bd
 800864c:	080086f9 	.word	0x080086f9
 8008650:	080086f9 	.word	0x080086f9
 8008654:	080086f9 	.word	0x080086f9
 8008658:	080086f9 	.word	0x080086f9
 800865c:	080086f9 	.word	0x080086f9
 8008660:	080086f9 	.word	0x080086f9
 8008664:	080086f9 	.word	0x080086f9
 8008668:	080086c5 	.word	0x080086c5
 800866c:	080086f9 	.word	0x080086f9
 8008670:	080086f9 	.word	0x080086f9
 8008674:	080086f9 	.word	0x080086f9
 8008678:	080086f9 	.word	0x080086f9
 800867c:	080086f9 	.word	0x080086f9
 8008680:	080086f9 	.word	0x080086f9
 8008684:	080086f9 	.word	0x080086f9
 8008688:	080086cd 	.word	0x080086cd
 800868c:	080086f9 	.word	0x080086f9
 8008690:	080086f9 	.word	0x080086f9
 8008694:	080086f9 	.word	0x080086f9
 8008698:	080086f9 	.word	0x080086f9
 800869c:	080086f9 	.word	0x080086f9
 80086a0:	080086f9 	.word	0x080086f9
 80086a4:	080086f9 	.word	0x080086f9
 80086a8:	080086d5 	.word	0x080086d5
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086b2:	e028      	b.n	8008706 <USART_SetConfig+0x37e>
 80086b4:	2302      	movs	r3, #2
 80086b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086ba:	e024      	b.n	8008706 <USART_SetConfig+0x37e>
 80086bc:	2304      	movs	r3, #4
 80086be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086c2:	e020      	b.n	8008706 <USART_SetConfig+0x37e>
 80086c4:	2308      	movs	r3, #8
 80086c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086ca:	e01c      	b.n	8008706 <USART_SetConfig+0x37e>
 80086cc:	2310      	movs	r3, #16
 80086ce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086d2:	e018      	b.n	8008706 <USART_SetConfig+0x37e>
 80086d4:	2320      	movs	r3, #32
 80086d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086da:	e014      	b.n	8008706 <USART_SetConfig+0x37e>
 80086dc:	cfff69f3 	.word	0xcfff69f3
 80086e0:	ffffc0f6 	.word	0xffffc0f6
 80086e4:	40011000 	.word	0x40011000
 80086e8:	58024400 	.word	0x58024400
 80086ec:	40004400 	.word	0x40004400
 80086f0:	40004800 	.word	0x40004800
 80086f4:	40011400 	.word	0x40011400
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80086fe:	e002      	b.n	8008706 <USART_SetConfig+0x37e>
 8008700:	2340      	movs	r3, #64	@ 0x40
 8008702:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  switch (clocksource)
 8008706:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800870a:	2b20      	cmp	r3, #32
 800870c:	f200 8329 	bhi.w	8008d62 <USART_SetConfig+0x9da>
 8008710:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <USART_SetConfig+0x390>)
 8008712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008716:	bf00      	nop
 8008718:	0800879d 	.word	0x0800879d
 800871c:	08008853 	.word	0x08008853
 8008720:	08008909 	.word	0x08008909
 8008724:	08008d63 	.word	0x08008d63
 8008728:	080089c3 	.word	0x080089c3
 800872c:	08008d63 	.word	0x08008d63
 8008730:	08008d63 	.word	0x08008d63
 8008734:	08008d63 	.word	0x08008d63
 8008738:	08008a7d 	.word	0x08008a7d
 800873c:	08008d63 	.word	0x08008d63
 8008740:	08008d63 	.word	0x08008d63
 8008744:	08008d63 	.word	0x08008d63
 8008748:	08008d63 	.word	0x08008d63
 800874c:	08008d63 	.word	0x08008d63
 8008750:	08008d63 	.word	0x08008d63
 8008754:	08008d63 	.word	0x08008d63
 8008758:	08008bf5 	.word	0x08008bf5
 800875c:	08008d63 	.word	0x08008d63
 8008760:	08008d63 	.word	0x08008d63
 8008764:	08008d63 	.word	0x08008d63
 8008768:	08008d63 	.word	0x08008d63
 800876c:	08008d63 	.word	0x08008d63
 8008770:	08008d63 	.word	0x08008d63
 8008774:	08008d63 	.word	0x08008d63
 8008778:	08008d63 	.word	0x08008d63
 800877c:	08008d63 	.word	0x08008d63
 8008780:	08008d63 	.word	0x08008d63
 8008784:	08008d63 	.word	0x08008d63
 8008788:	08008d63 	.word	0x08008d63
 800878c:	08008d63 	.word	0x08008d63
 8008790:	08008d63 	.word	0x08008d63
 8008794:	08008d63 	.word	0x08008d63
 8008798:	08008cb1 	.word	0x08008cb1
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800879c:	f7fc fc8a 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 80087a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d044      	beq.n	8008834 <USART_SetConfig+0x4ac>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d03e      	beq.n	8008830 <USART_SetConfig+0x4a8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d038      	beq.n	800882c <USART_SetConfig+0x4a4>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d032      	beq.n	8008828 <USART_SetConfig+0x4a0>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c6:	2b04      	cmp	r3, #4
 80087c8:	d02c      	beq.n	8008824 <USART_SetConfig+0x49c>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ce:	2b05      	cmp	r3, #5
 80087d0:	d026      	beq.n	8008820 <USART_SetConfig+0x498>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d6:	2b06      	cmp	r3, #6
 80087d8:	d020      	beq.n	800881c <USART_SetConfig+0x494>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087de:	2b07      	cmp	r3, #7
 80087e0:	d01a      	beq.n	8008818 <USART_SetConfig+0x490>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087e6:	2b08      	cmp	r3, #8
 80087e8:	d014      	beq.n	8008814 <USART_SetConfig+0x48c>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d00e      	beq.n	8008810 <USART_SetConfig+0x488>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f6:	2b0a      	cmp	r3, #10
 80087f8:	d008      	beq.n	800880c <USART_SetConfig+0x484>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fe:	2b0b      	cmp	r3, #11
 8008800:	d102      	bne.n	8008808 <USART_SetConfig+0x480>
 8008802:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008806:	e016      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008808:	2301      	movs	r3, #1
 800880a:	e014      	b.n	8008836 <USART_SetConfig+0x4ae>
 800880c:	2380      	movs	r3, #128	@ 0x80
 800880e:	e012      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008810:	2340      	movs	r3, #64	@ 0x40
 8008812:	e010      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008814:	2320      	movs	r3, #32
 8008816:	e00e      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008818:	2310      	movs	r3, #16
 800881a:	e00c      	b.n	8008836 <USART_SetConfig+0x4ae>
 800881c:	230c      	movs	r3, #12
 800881e:	e00a      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008820:	230a      	movs	r3, #10
 8008822:	e008      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008824:	2308      	movs	r3, #8
 8008826:	e006      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008828:	2306      	movs	r3, #6
 800882a:	e004      	b.n	8008836 <USART_SetConfig+0x4ae>
 800882c:	2304      	movs	r3, #4
 800882e:	e002      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008830:	2302      	movs	r3, #2
 8008832:	e000      	b.n	8008836 <USART_SetConfig+0x4ae>
 8008834:	2301      	movs	r3, #1
 8008836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008838:	fbb2 f3f3 	udiv	r3, r2, r3
 800883c:	005a      	lsls	r2, r3, #1
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	fbb2 f3f3 	udiv	r3, r2, r3
 800884e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008850:	e28b      	b.n	8008d6a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008852:	f7fc fc45 	bl	80050e0 <HAL_RCC_GetPCLK2Freq>
 8008856:	62b8      	str	r0, [r7, #40]	@ 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d044      	beq.n	80088ea <USART_SetConfig+0x562>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008864:	2b01      	cmp	r3, #1
 8008866:	d03e      	beq.n	80088e6 <USART_SetConfig+0x55e>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886c:	2b02      	cmp	r3, #2
 800886e:	d038      	beq.n	80088e2 <USART_SetConfig+0x55a>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008874:	2b03      	cmp	r3, #3
 8008876:	d032      	beq.n	80088de <USART_SetConfig+0x556>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800887c:	2b04      	cmp	r3, #4
 800887e:	d02c      	beq.n	80088da <USART_SetConfig+0x552>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008884:	2b05      	cmp	r3, #5
 8008886:	d026      	beq.n	80088d6 <USART_SetConfig+0x54e>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800888c:	2b06      	cmp	r3, #6
 800888e:	d020      	beq.n	80088d2 <USART_SetConfig+0x54a>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008894:	2b07      	cmp	r3, #7
 8008896:	d01a      	beq.n	80088ce <USART_SetConfig+0x546>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889c:	2b08      	cmp	r3, #8
 800889e:	d014      	beq.n	80088ca <USART_SetConfig+0x542>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d00e      	beq.n	80088c6 <USART_SetConfig+0x53e>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ac:	2b0a      	cmp	r3, #10
 80088ae:	d008      	beq.n	80088c2 <USART_SetConfig+0x53a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	2b0b      	cmp	r3, #11
 80088b6:	d102      	bne.n	80088be <USART_SetConfig+0x536>
 80088b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088bc:	e016      	b.n	80088ec <USART_SetConfig+0x564>
 80088be:	2301      	movs	r3, #1
 80088c0:	e014      	b.n	80088ec <USART_SetConfig+0x564>
 80088c2:	2380      	movs	r3, #128	@ 0x80
 80088c4:	e012      	b.n	80088ec <USART_SetConfig+0x564>
 80088c6:	2340      	movs	r3, #64	@ 0x40
 80088c8:	e010      	b.n	80088ec <USART_SetConfig+0x564>
 80088ca:	2320      	movs	r3, #32
 80088cc:	e00e      	b.n	80088ec <USART_SetConfig+0x564>
 80088ce:	2310      	movs	r3, #16
 80088d0:	e00c      	b.n	80088ec <USART_SetConfig+0x564>
 80088d2:	230c      	movs	r3, #12
 80088d4:	e00a      	b.n	80088ec <USART_SetConfig+0x564>
 80088d6:	230a      	movs	r3, #10
 80088d8:	e008      	b.n	80088ec <USART_SetConfig+0x564>
 80088da:	2308      	movs	r3, #8
 80088dc:	e006      	b.n	80088ec <USART_SetConfig+0x564>
 80088de:	2306      	movs	r3, #6
 80088e0:	e004      	b.n	80088ec <USART_SetConfig+0x564>
 80088e2:	2304      	movs	r3, #4
 80088e4:	e002      	b.n	80088ec <USART_SetConfig+0x564>
 80088e6:	2302      	movs	r3, #2
 80088e8:	e000      	b.n	80088ec <USART_SetConfig+0x564>
 80088ea:	2301      	movs	r3, #1
 80088ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f2:	005a      	lsls	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	441a      	add	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008906:	e230      	b.n	8008d6a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008908:	f107 0318 	add.w	r3, r7, #24
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe f86d 	bl	80069ec <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d044      	beq.n	80089a6 <USART_SetConfig+0x61e>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008920:	2b01      	cmp	r3, #1
 8008922:	d03e      	beq.n	80089a2 <USART_SetConfig+0x61a>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008928:	2b02      	cmp	r3, #2
 800892a:	d038      	beq.n	800899e <USART_SetConfig+0x616>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008930:	2b03      	cmp	r3, #3
 8008932:	d032      	beq.n	800899a <USART_SetConfig+0x612>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008938:	2b04      	cmp	r3, #4
 800893a:	d02c      	beq.n	8008996 <USART_SetConfig+0x60e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008940:	2b05      	cmp	r3, #5
 8008942:	d026      	beq.n	8008992 <USART_SetConfig+0x60a>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008948:	2b06      	cmp	r3, #6
 800894a:	d020      	beq.n	800898e <USART_SetConfig+0x606>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008950:	2b07      	cmp	r3, #7
 8008952:	d01a      	beq.n	800898a <USART_SetConfig+0x602>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008958:	2b08      	cmp	r3, #8
 800895a:	d014      	beq.n	8008986 <USART_SetConfig+0x5fe>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008960:	2b09      	cmp	r3, #9
 8008962:	d00e      	beq.n	8008982 <USART_SetConfig+0x5fa>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008968:	2b0a      	cmp	r3, #10
 800896a:	d008      	beq.n	800897e <USART_SetConfig+0x5f6>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008970:	2b0b      	cmp	r3, #11
 8008972:	d102      	bne.n	800897a <USART_SetConfig+0x5f2>
 8008974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008978:	e016      	b.n	80089a8 <USART_SetConfig+0x620>
 800897a:	2301      	movs	r3, #1
 800897c:	e014      	b.n	80089a8 <USART_SetConfig+0x620>
 800897e:	2380      	movs	r3, #128	@ 0x80
 8008980:	e012      	b.n	80089a8 <USART_SetConfig+0x620>
 8008982:	2340      	movs	r3, #64	@ 0x40
 8008984:	e010      	b.n	80089a8 <USART_SetConfig+0x620>
 8008986:	2320      	movs	r3, #32
 8008988:	e00e      	b.n	80089a8 <USART_SetConfig+0x620>
 800898a:	2310      	movs	r3, #16
 800898c:	e00c      	b.n	80089a8 <USART_SetConfig+0x620>
 800898e:	230c      	movs	r3, #12
 8008990:	e00a      	b.n	80089a8 <USART_SetConfig+0x620>
 8008992:	230a      	movs	r3, #10
 8008994:	e008      	b.n	80089a8 <USART_SetConfig+0x620>
 8008996:	2308      	movs	r3, #8
 8008998:	e006      	b.n	80089a8 <USART_SetConfig+0x620>
 800899a:	2306      	movs	r3, #6
 800899c:	e004      	b.n	80089a8 <USART_SetConfig+0x620>
 800899e:	2304      	movs	r3, #4
 80089a0:	e002      	b.n	80089a8 <USART_SetConfig+0x620>
 80089a2:	2302      	movs	r3, #2
 80089a4:	e000      	b.n	80089a8 <USART_SetConfig+0x620>
 80089a6:	2301      	movs	r3, #1
 80089a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ac:	005a      	lsls	r2, r3, #1
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	085b      	lsrs	r3, r3, #1
 80089b4:	441a      	add	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80089be:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 80089c0:	e1d3      	b.n	8008d6a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c2:	f107 030c 	add.w	r3, r7, #12
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe f964 	bl	8006c94 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d044      	beq.n	8008a60 <USART_SetConfig+0x6d8>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d03e      	beq.n	8008a5c <USART_SetConfig+0x6d4>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d038      	beq.n	8008a58 <USART_SetConfig+0x6d0>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d032      	beq.n	8008a54 <USART_SetConfig+0x6cc>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d02c      	beq.n	8008a50 <USART_SetConfig+0x6c8>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fa:	2b05      	cmp	r3, #5
 80089fc:	d026      	beq.n	8008a4c <USART_SetConfig+0x6c4>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a02:	2b06      	cmp	r3, #6
 8008a04:	d020      	beq.n	8008a48 <USART_SetConfig+0x6c0>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	d01a      	beq.n	8008a44 <USART_SetConfig+0x6bc>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a12:	2b08      	cmp	r3, #8
 8008a14:	d014      	beq.n	8008a40 <USART_SetConfig+0x6b8>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	d00e      	beq.n	8008a3c <USART_SetConfig+0x6b4>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a22:	2b0a      	cmp	r3, #10
 8008a24:	d008      	beq.n	8008a38 <USART_SetConfig+0x6b0>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2a:	2b0b      	cmp	r3, #11
 8008a2c:	d102      	bne.n	8008a34 <USART_SetConfig+0x6ac>
 8008a2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008a32:	e016      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a34:	2301      	movs	r3, #1
 8008a36:	e014      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a38:	2380      	movs	r3, #128	@ 0x80
 8008a3a:	e012      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a3c:	2340      	movs	r3, #64	@ 0x40
 8008a3e:	e010      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a40:	2320      	movs	r3, #32
 8008a42:	e00e      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a44:	2310      	movs	r3, #16
 8008a46:	e00c      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a48:	230c      	movs	r3, #12
 8008a4a:	e00a      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a4c:	230a      	movs	r3, #10
 8008a4e:	e008      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a50:	2308      	movs	r3, #8
 8008a52:	e006      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a54:	2306      	movs	r3, #6
 8008a56:	e004      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a58:	2304      	movs	r3, #4
 8008a5a:	e002      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e000      	b.n	8008a62 <USART_SetConfig+0x6da>
 8008a60:	2301      	movs	r3, #1
 8008a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a66:	005a      	lsls	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	441a      	add	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a78:	633b      	str	r3, [r7, #48]	@ 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008a7a:	e176      	b.n	8008d6a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a7c:	4b89      	ldr	r3, [pc, #548]	@ (8008ca4 <USART_SetConfig+0x91c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 0320 	and.w	r3, r3, #32
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d05d      	beq.n	8008b44 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008a88:	4b86      	ldr	r3, [pc, #536]	@ (8008ca4 <USART_SetConfig+0x91c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	4a85      	ldr	r2, [pc, #532]	@ (8008ca8 <USART_SetConfig+0x920>)
 8008a94:	40da      	lsrs	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d044      	beq.n	8008b28 <USART_SetConfig+0x7a0>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d03e      	beq.n	8008b24 <USART_SetConfig+0x79c>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d038      	beq.n	8008b20 <USART_SetConfig+0x798>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	d032      	beq.n	8008b1c <USART_SetConfig+0x794>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d02c      	beq.n	8008b18 <USART_SetConfig+0x790>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d026      	beq.n	8008b14 <USART_SetConfig+0x78c>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aca:	2b06      	cmp	r3, #6
 8008acc:	d020      	beq.n	8008b10 <USART_SetConfig+0x788>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad2:	2b07      	cmp	r3, #7
 8008ad4:	d01a      	beq.n	8008b0c <USART_SetConfig+0x784>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ada:	2b08      	cmp	r3, #8
 8008adc:	d014      	beq.n	8008b08 <USART_SetConfig+0x780>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae2:	2b09      	cmp	r3, #9
 8008ae4:	d00e      	beq.n	8008b04 <USART_SetConfig+0x77c>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008aea:	2b0a      	cmp	r3, #10
 8008aec:	d008      	beq.n	8008b00 <USART_SetConfig+0x778>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af2:	2b0b      	cmp	r3, #11
 8008af4:	d102      	bne.n	8008afc <USART_SetConfig+0x774>
 8008af6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008afa:	e016      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e014      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b00:	2380      	movs	r3, #128	@ 0x80
 8008b02:	e012      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b04:	2340      	movs	r3, #64	@ 0x40
 8008b06:	e010      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b08:	2320      	movs	r3, #32
 8008b0a:	e00e      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b0c:	2310      	movs	r3, #16
 8008b0e:	e00c      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b10:	230c      	movs	r3, #12
 8008b12:	e00a      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b14:	230a      	movs	r3, #10
 8008b16:	e008      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b18:	2308      	movs	r3, #8
 8008b1a:	e006      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b1c:	2306      	movs	r3, #6
 8008b1e:	e004      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b20:	2304      	movs	r3, #4
 8008b22:	e002      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e000      	b.n	8008b2a <USART_SetConfig+0x7a2>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2e:	005a      	lsls	r2, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8008b42:	e112      	b.n	8008d6a <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d044      	beq.n	8008bd6 <USART_SetConfig+0x84e>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d03e      	beq.n	8008bd2 <USART_SetConfig+0x84a>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d038      	beq.n	8008bce <USART_SetConfig+0x846>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d032      	beq.n	8008bca <USART_SetConfig+0x842>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	d02c      	beq.n	8008bc6 <USART_SetConfig+0x83e>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	2b05      	cmp	r3, #5
 8008b72:	d026      	beq.n	8008bc2 <USART_SetConfig+0x83a>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b78:	2b06      	cmp	r3, #6
 8008b7a:	d020      	beq.n	8008bbe <USART_SetConfig+0x836>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	2b07      	cmp	r3, #7
 8008b82:	d01a      	beq.n	8008bba <USART_SetConfig+0x832>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d014      	beq.n	8008bb6 <USART_SetConfig+0x82e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	2b09      	cmp	r3, #9
 8008b92:	d00e      	beq.n	8008bb2 <USART_SetConfig+0x82a>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b98:	2b0a      	cmp	r3, #10
 8008b9a:	d008      	beq.n	8008bae <USART_SetConfig+0x826>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ba0:	2b0b      	cmp	r3, #11
 8008ba2:	d102      	bne.n	8008baa <USART_SetConfig+0x822>
 8008ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ba8:	e016      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e014      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bae:	2380      	movs	r3, #128	@ 0x80
 8008bb0:	e012      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bb2:	2340      	movs	r3, #64	@ 0x40
 8008bb4:	e010      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bb6:	2320      	movs	r3, #32
 8008bb8:	e00e      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bba:	2310      	movs	r3, #16
 8008bbc:	e00c      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bbe:	230c      	movs	r3, #12
 8008bc0:	e00a      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bc2:	230a      	movs	r3, #10
 8008bc4:	e008      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	e006      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bca:	2306      	movs	r3, #6
 8008bcc:	e004      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bce:	2304      	movs	r3, #4
 8008bd0:	e002      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	e000      	b.n	8008bd8 <USART_SetConfig+0x850>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4a33      	ldr	r2, [pc, #204]	@ (8008ca8 <USART_SetConfig+0x920>)
 8008bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bde:	005a      	lsls	r2, r3, #1
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	085b      	lsrs	r3, r3, #1
 8008be6:	441a      	add	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008bf2:	e0ba      	b.n	8008d6a <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d044      	beq.n	8008c86 <USART_SetConfig+0x8fe>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d03e      	beq.n	8008c82 <USART_SetConfig+0x8fa>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d038      	beq.n	8008c7e <USART_SetConfig+0x8f6>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	2b03      	cmp	r3, #3
 8008c12:	d032      	beq.n	8008c7a <USART_SetConfig+0x8f2>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d02c      	beq.n	8008c76 <USART_SetConfig+0x8ee>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c20:	2b05      	cmp	r3, #5
 8008c22:	d026      	beq.n	8008c72 <USART_SetConfig+0x8ea>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	2b06      	cmp	r3, #6
 8008c2a:	d020      	beq.n	8008c6e <USART_SetConfig+0x8e6>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c30:	2b07      	cmp	r3, #7
 8008c32:	d01a      	beq.n	8008c6a <USART_SetConfig+0x8e2>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d014      	beq.n	8008c66 <USART_SetConfig+0x8de>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c40:	2b09      	cmp	r3, #9
 8008c42:	d00e      	beq.n	8008c62 <USART_SetConfig+0x8da>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	2b0a      	cmp	r3, #10
 8008c4a:	d008      	beq.n	8008c5e <USART_SetConfig+0x8d6>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	2b0b      	cmp	r3, #11
 8008c52:	d102      	bne.n	8008c5a <USART_SetConfig+0x8d2>
 8008c54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c58:	e016      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e014      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c5e:	2380      	movs	r3, #128	@ 0x80
 8008c60:	e012      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c62:	2340      	movs	r3, #64	@ 0x40
 8008c64:	e010      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c66:	2320      	movs	r3, #32
 8008c68:	e00e      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	e00c      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c6e:	230c      	movs	r3, #12
 8008c70:	e00a      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c72:	230a      	movs	r3, #10
 8008c74:	e008      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c76:	2308      	movs	r3, #8
 8008c78:	e006      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c7a:	2306      	movs	r3, #6
 8008c7c:	e004      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c7e:	2304      	movs	r3, #4
 8008c80:	e002      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c82:	2302      	movs	r3, #2
 8008c84:	e000      	b.n	8008c88 <USART_SetConfig+0x900>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4a08      	ldr	r2, [pc, #32]	@ (8008cac <USART_SetConfig+0x924>)
 8008c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8e:	005a      	lsls	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	441a      	add	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008ca2:	e062      	b.n	8008d6a <USART_SetConfig+0x9e2>
 8008ca4:	58024400 	.word	0x58024400
 8008ca8:	03d09000 	.word	0x03d09000
 8008cac:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d044      	beq.n	8008d42 <USART_SetConfig+0x9ba>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d03e      	beq.n	8008d3e <USART_SetConfig+0x9b6>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d038      	beq.n	8008d3a <USART_SetConfig+0x9b2>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d032      	beq.n	8008d36 <USART_SetConfig+0x9ae>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d02c      	beq.n	8008d32 <USART_SetConfig+0x9aa>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	d026      	beq.n	8008d2e <USART_SetConfig+0x9a6>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce4:	2b06      	cmp	r3, #6
 8008ce6:	d020      	beq.n	8008d2a <USART_SetConfig+0x9a2>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cec:	2b07      	cmp	r3, #7
 8008cee:	d01a      	beq.n	8008d26 <USART_SetConfig+0x99e>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d014      	beq.n	8008d22 <USART_SetConfig+0x99a>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfc:	2b09      	cmp	r3, #9
 8008cfe:	d00e      	beq.n	8008d1e <USART_SetConfig+0x996>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d04:	2b0a      	cmp	r3, #10
 8008d06:	d008      	beq.n	8008d1a <USART_SetConfig+0x992>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d0c:	2b0b      	cmp	r3, #11
 8008d0e:	d102      	bne.n	8008d16 <USART_SetConfig+0x98e>
 8008d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d14:	e016      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e014      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d1a:	2380      	movs	r3, #128	@ 0x80
 8008d1c:	e012      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d1e:	2340      	movs	r3, #64	@ 0x40
 8008d20:	e010      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d22:	2320      	movs	r3, #32
 8008d24:	e00e      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d26:	2310      	movs	r3, #16
 8008d28:	e00c      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	e00a      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d2e:	230a      	movs	r3, #10
 8008d30:	e008      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d32:	2308      	movs	r3, #8
 8008d34:	e006      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d36:	2306      	movs	r3, #6
 8008d38:	e004      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d3a:	2304      	movs	r3, #4
 8008d3c:	e002      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d3e:	2302      	movs	r3, #2
 8008d40:	e000      	b.n	8008d44 <USART_SetConfig+0x9bc>
 8008d42:	2301      	movs	r3, #1
 8008d44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4c:	005a      	lsls	r2, r3, #1
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	085b      	lsrs	r3, r3, #1
 8008d54:	441a      	add	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8008d60:	e003      	b.n	8008d6a <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
      break;
 8008d68:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6c:	2b0f      	cmp	r3, #15
 8008d6e:	d916      	bls.n	8008d9e <USART_SetConfig+0xa16>
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d76:	d212      	bcs.n	8008d9e <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f023 030f 	bic.w	r3, r3, #15
 8008d80:	84fb      	strh	r3, [r7, #38]	@ 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	085b      	lsrs	r3, r3, #1
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	b29a      	uxth	r2, r3
 8008d8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008d90:	4313      	orrs	r3, r2
 8008d92:	84fb      	strh	r3, [r7, #38]	@ 0x26
    husart->Instance->BRR = brrtemp;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008d9a:	60da      	str	r2, [r3, #12]
 8008d9c:	e002      	b.n	8008da4 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  husart->NbRxDataToProcess = 1U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	875a      	strh	r2, [r3, #58]	@ 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	649a      	str	r2, [r3, #72]	@ 0x48
  husart->TxISR   = NULL;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	64da      	str	r2, [r3, #76]	@ 0x4c

  return ret;
 8008dbc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3738      	adds	r7, #56	@ 0x38
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dd6:	f7f8 fd37 	bl	8001848 <HAL_GetTick>
 8008dda:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b08      	cmp	r3, #8
 8008de8:	d10e      	bne.n	8008e08 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f7ff fa8f 	bl	800831c <USART_WaitOnFlagUntilTimeout>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d001      	beq.n	8008e08 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e01e      	b.n	8008e46 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d10e      	bne.n	8008e34 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8008e16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff fa79 	bl	800831c <USART_WaitOnFlagUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e008      	b.n	8008e46 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b085      	sub	sp, #20
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_USARTEx_DisableFifoMode+0x16>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e027      	b.n	8008eb4 <HAL_USARTEx_DisableFifoMode+0x66>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e92:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e02d      	b.n	8008f34 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0201 	bic.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f84f 	bl	8008fb8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e02d      	b.n	8008fb0 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f811 	bl	8008fb8 <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = 1U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	875a      	strh	r2, [r3, #58]	@ 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fd4:	e02f      	b.n	8009036 <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fd6:	2310      	movs	r3, #16
 8008fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fda:	2310      	movs	r3, #16
 8008fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8008fe4:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	f003 0307 	and.w	r3, r3, #7
 8008fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8008ff4:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0307 	and.w	r3, r3, #7
 8008ffc:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	7b3a      	ldrb	r2, [r7, #12]
 8009002:	4910      	ldr	r1, [pc, #64]	@ (8009044 <USARTEx_SetNbDataToProcess+0x8c>)
 8009004:	5c8a      	ldrb	r2, [r1, r2]
 8009006:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800900a:	7b3a      	ldrb	r2, [r7, #12]
 800900c:	490e      	ldr	r1, [pc, #56]	@ (8009048 <USARTEx_SetNbDataToProcess+0x90>)
 800900e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009010:	fb93 f3f2 	sdiv	r3, r3, r2
 8009014:	b29a      	uxth	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	879a      	strh	r2, [r3, #60]	@ 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	7b7a      	ldrb	r2, [r7, #13]
 800901e:	4909      	ldr	r1, [pc, #36]	@ (8009044 <USARTEx_SetNbDataToProcess+0x8c>)
 8009020:	5c8a      	ldrb	r2, [r1, r2]
 8009022:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 8009026:	7b7a      	ldrb	r2, [r7, #13]
 8009028:	4907      	ldr	r1, [pc, #28]	@ (8009048 <USARTEx_SetNbDataToProcess+0x90>)
 800902a:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800902c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009030:	b29a      	uxth	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	0800a988 	.word	0x0800a988
 8009048:	0800a990 	.word	0x0800a990

0800904c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009056:	2300      	movs	r3, #0
 8009058:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800905a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800905e:	2b84      	cmp	r3, #132	@ 0x84
 8009060:	d005      	beq.n	800906e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009062:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	3303      	adds	r3, #3
 800906c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800906e:	68fb      	ldr	r3, [r7, #12]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009080:	f000 fafc 	bl	800967c <vTaskStartScheduler>
  
  return osOK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	bd80      	pop	{r7, pc}

0800908a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800908a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800908c:	b089      	sub	sp, #36	@ 0x24
 800908e:	af04      	add	r7, sp, #16
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	695b      	ldr	r3, [r3, #20]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d020      	beq.n	80090de <osThreadCreate+0x54>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01c      	beq.n	80090de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685c      	ldr	r4, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	691e      	ldr	r6, [r3, #16]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff ffc8 	bl	800904c <makeFreeRtosPriority>
 80090bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090c6:	9202      	str	r2, [sp, #8]
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	9100      	str	r1, [sp, #0]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	4632      	mov	r2, r6
 80090d0:	4629      	mov	r1, r5
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f8ed 	bl	80092b2 <xTaskCreateStatic>
 80090d8:	4603      	mov	r3, r0
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	e01c      	b.n	8009118 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685c      	ldr	r4, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff ffaa 	bl	800904c <makeFreeRtosPriority>
 80090f8:	4602      	mov	r2, r0
 80090fa:	f107 030c 	add.w	r3, r7, #12
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	9200      	str	r2, [sp, #0]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	4632      	mov	r2, r6
 8009106:	4629      	mov	r1, r5
 8009108:	4620      	mov	r0, r4
 800910a:	f000 f932 	bl	8009372 <xTaskCreate>
 800910e:	4603      	mov	r3, r0
 8009110:	2b01      	cmp	r3, #1
 8009112:	d001      	beq.n	8009118 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	e000      	b.n	800911a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009118:	68fb      	ldr	r3, [r7, #12]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009122 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d001      	beq.n	8009138 <osDelay+0x16>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	e000      	b.n	800913a <osDelay+0x18>
 8009138:	2301      	movs	r3, #1
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fa68 	bl	8009610 <vTaskDelay>
  
  return osOK;
 8009140:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f103 0208 	add.w	r2, r3, #8
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009162:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f103 0208 	add.w	r2, r3, #8
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f103 0208 	add.w	r2, r3, #8
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800917e:	bf00      	nop
 8009180:	370c      	adds	r7, #12
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800918a:	b480      	push	{r7}
 800918c:	b083      	sub	sp, #12
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b085      	sub	sp, #20
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	1c5a      	adds	r2, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	601a      	str	r2, [r3, #0]
}
 80091e0:	bf00      	nop
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009202:	d103      	bne.n	800920c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	e00c      	b.n	8009226 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3308      	adds	r3, #8
 8009210:	60fb      	str	r3, [r7, #12]
 8009212:	e002      	b.n	800921a <vListInsert+0x2e>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68ba      	ldr	r2, [r7, #8]
 8009222:	429a      	cmp	r2, r3
 8009224:	d2f6      	bcs.n	8009214 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	601a      	str	r2, [r3, #0]
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	691b      	ldr	r3, [r3, #16]
 800926a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	6892      	ldr	r2, [r2, #8]
 8009274:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6852      	ldr	r2, [r2, #4]
 800927e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	429a      	cmp	r2, r3
 8009288:	d103      	bne.n	8009292 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689a      	ldr	r2, [r3, #8]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	1e5a      	subs	r2, r3, #1
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b08e      	sub	sp, #56	@ 0x38
 80092b6:	af04      	add	r7, sp, #16
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	607a      	str	r2, [r7, #4]
 80092be:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	e7fd      	b.n	80092da <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d10b      	bne.n	80092fc <xTaskCreateStatic+0x4a>
	__asm volatile
 80092e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e8:	f383 8811 	msr	BASEPRI, r3
 80092ec:	f3bf 8f6f 	isb	sy
 80092f0:	f3bf 8f4f 	dsb	sy
 80092f4:	61fb      	str	r3, [r7, #28]
}
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
 80092fa:	e7fd      	b.n	80092f8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092fc:	23a0      	movs	r3, #160	@ 0xa0
 80092fe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2ba0      	cmp	r3, #160	@ 0xa0
 8009304:	d00b      	beq.n	800931e <xTaskCreateStatic+0x6c>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	61bb      	str	r3, [r7, #24]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800931e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	2b00      	cmp	r3, #0
 8009324:	d01e      	beq.n	8009364 <xTaskCreateStatic+0xb2>
 8009326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01b      	beq.n	8009364 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800932c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800932e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009334:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	2202      	movs	r2, #2
 800933a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800933e:	2300      	movs	r3, #0
 8009340:	9303      	str	r3, [sp, #12]
 8009342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009344:	9302      	str	r3, [sp, #8]
 8009346:	f107 0314 	add.w	r3, r7, #20
 800934a:	9301      	str	r3, [sp, #4]
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	9300      	str	r3, [sp, #0]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	68b9      	ldr	r1, [r7, #8]
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 f850 	bl	80093fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800935c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800935e:	f000 f8ed 	bl	800953c <prvAddNewTaskToReadyList>
 8009362:	e001      	b.n	8009368 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009364:	2300      	movs	r3, #0
 8009366:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009368:	697b      	ldr	r3, [r7, #20]
	}
 800936a:	4618      	mov	r0, r3
 800936c:	3728      	adds	r7, #40	@ 0x28
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009372:	b580      	push	{r7, lr}
 8009374:	b08c      	sub	sp, #48	@ 0x30
 8009376:	af04      	add	r7, sp, #16
 8009378:	60f8      	str	r0, [r7, #12]
 800937a:	60b9      	str	r1, [r7, #8]
 800937c:	603b      	str	r3, [r7, #0]
 800937e:	4613      	mov	r3, r2
 8009380:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fefe 	bl	800a188 <pvPortMalloc>
 800938c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00e      	beq.n	80093b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009394:	20a0      	movs	r0, #160	@ 0xa0
 8009396:	f000 fef7 	bl	800a188 <pvPortMalloc>
 800939a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80093a2:	69fb      	ldr	r3, [r7, #28]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80093a8:	e005      	b.n	80093b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f000 ffba 	bl	800a324 <vPortFree>
 80093b0:	e001      	b.n	80093b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d017      	beq.n	80093ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093c4:	88fa      	ldrh	r2, [r7, #6]
 80093c6:	2300      	movs	r3, #0
 80093c8:	9303      	str	r3, [sp, #12]
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	9302      	str	r3, [sp, #8]
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	9300      	str	r3, [sp, #0]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68b9      	ldr	r1, [r7, #8]
 80093da:	68f8      	ldr	r0, [r7, #12]
 80093dc:	f000 f80e 	bl	80093fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093e0:	69f8      	ldr	r0, [r7, #28]
 80093e2:	f000 f8ab 	bl	800953c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093e6:	2301      	movs	r3, #1
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	e002      	b.n	80093f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80093f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093f2:	69bb      	ldr	r3, [r7, #24]
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3720      	adds	r7, #32
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b088      	sub	sp, #32
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009414:	440b      	add	r3, r1
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	f023 0307 	bic.w	r3, r3, #7
 8009422:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00b      	beq.n	8009446 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	617b      	str	r3, [r7, #20]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01f      	beq.n	800948c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800944c:	2300      	movs	r3, #0
 800944e:	61fb      	str	r3, [r7, #28]
 8009450:	e012      	b.n	8009478 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	4413      	add	r3, r2
 8009458:	7819      	ldrb	r1, [r3, #0]
 800945a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	3334      	adds	r3, #52	@ 0x34
 8009462:	460a      	mov	r2, r1
 8009464:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	4413      	add	r3, r2
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d006      	beq.n	8009480 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	3301      	adds	r3, #1
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2b0f      	cmp	r3, #15
 800947c:	d9e9      	bls.n	8009452 <prvInitialiseNewTask+0x56>
 800947e:	e000      	b.n	8009482 <prvInitialiseNewTask+0x86>
			{
				break;
 8009480:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800948a:	e003      	b.n	8009494 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800948c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	2b06      	cmp	r3, #6
 8009498:	d901      	bls.n	800949e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800949a:	2306      	movs	r3, #6
 800949c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	2200      	movs	r2, #0
 80094ae:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	3304      	adds	r3, #4
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7ff fe68 	bl	800918a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	3318      	adds	r3, #24
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff fe63 	bl	800918a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	f1c3 0207 	rsb	r2, r3, #7
 80094d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	2200      	movs	r2, #0
 80094de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	334c      	adds	r3, #76	@ 0x4c
 80094ee:	224c      	movs	r2, #76	@ 0x4c
 80094f0:	2100      	movs	r1, #0
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 f900 	bl	800a6f8 <memset>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	4a0d      	ldr	r2, [pc, #52]	@ (8009530 <prvInitialiseNewTask+0x134>)
 80094fc:	651a      	str	r2, [r3, #80]	@ 0x50
 80094fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009500:	4a0c      	ldr	r2, [pc, #48]	@ (8009534 <prvInitialiseNewTask+0x138>)
 8009502:	655a      	str	r2, [r3, #84]	@ 0x54
 8009504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009506:	4a0c      	ldr	r2, [pc, #48]	@ (8009538 <prvInitialiseNewTask+0x13c>)
 8009508:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	68f9      	ldr	r1, [r7, #12]
 800950e:	69b8      	ldr	r0, [r7, #24]
 8009510:	f000 fc2a 	bl	8009d68 <pxPortInitialiseStack>
 8009514:	4602      	mov	r2, r0
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800951a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009526:	bf00      	nop
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	24004584 	.word	0x24004584
 8009534:	240045ec 	.word	0x240045ec
 8009538:	24004654 	.word	0x24004654

0800953c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009544:	f000 fd40 	bl	8009fc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009548:	4b2a      	ldr	r3, [pc, #168]	@ (80095f4 <prvAddNewTaskToReadyList+0xb8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a29      	ldr	r2, [pc, #164]	@ (80095f4 <prvAddNewTaskToReadyList+0xb8>)
 8009550:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009552:	4b29      	ldr	r3, [pc, #164]	@ (80095f8 <prvAddNewTaskToReadyList+0xbc>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d109      	bne.n	800956e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800955a:	4a27      	ldr	r2, [pc, #156]	@ (80095f8 <prvAddNewTaskToReadyList+0xbc>)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009560:	4b24      	ldr	r3, [pc, #144]	@ (80095f4 <prvAddNewTaskToReadyList+0xb8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d110      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009568:	f000 fad4 	bl	8009b14 <prvInitialiseTaskLists>
 800956c:	e00d      	b.n	800958a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800956e:	4b23      	ldr	r3, [pc, #140]	@ (80095fc <prvAddNewTaskToReadyList+0xc0>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d109      	bne.n	800958a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009576:	4b20      	ldr	r3, [pc, #128]	@ (80095f8 <prvAddNewTaskToReadyList+0xbc>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009580:	429a      	cmp	r2, r3
 8009582:	d802      	bhi.n	800958a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009584:	4a1c      	ldr	r2, [pc, #112]	@ (80095f8 <prvAddNewTaskToReadyList+0xbc>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800958a:	4b1d      	ldr	r3, [pc, #116]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	4a1b      	ldr	r2, [pc, #108]	@ (8009600 <prvAddNewTaskToReadyList+0xc4>)
 8009592:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009598:	2201      	movs	r2, #1
 800959a:	409a      	lsls	r2, r3
 800959c:	4b19      	ldr	r3, [pc, #100]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	4a18      	ldr	r2, [pc, #96]	@ (8009604 <prvAddNewTaskToReadyList+0xc8>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095aa:	4613      	mov	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	009b      	lsls	r3, r3, #2
 80095b2:	4a15      	ldr	r2, [pc, #84]	@ (8009608 <prvAddNewTaskToReadyList+0xcc>)
 80095b4:	441a      	add	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7ff fdf1 	bl	80091a4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095c2:	f000 fd33 	bl	800a02c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095c6:	4b0d      	ldr	r3, [pc, #52]	@ (80095fc <prvAddNewTaskToReadyList+0xc0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00e      	beq.n	80095ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095ce:	4b0a      	ldr	r3, [pc, #40]	@ (80095f8 <prvAddNewTaskToReadyList+0xbc>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d8:	429a      	cmp	r2, r3
 80095da:	d207      	bcs.n	80095ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095dc:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <prvAddNewTaskToReadyList+0xd0>)
 80095de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	f3bf 8f4f 	dsb	sy
 80095e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ec:	bf00      	nop
 80095ee:	3708      	adds	r7, #8
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	24000928 	.word	0x24000928
 80095f8:	24000828 	.word	0x24000828
 80095fc:	24000934 	.word	0x24000934
 8009600:	24000944 	.word	0x24000944
 8009604:	24000930 	.word	0x24000930
 8009608:	2400082c 	.word	0x2400082c
 800960c:	e000ed04 	.word	0xe000ed04

08009610 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009618:	2300      	movs	r3, #0
 800961a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d018      	beq.n	8009654 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009622:	4b14      	ldr	r3, [pc, #80]	@ (8009674 <vTaskDelay+0x64>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00b      	beq.n	8009642 <vTaskDelay+0x32>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	60bb      	str	r3, [r7, #8]
}
 800963c:	bf00      	nop
 800963e:	bf00      	nop
 8009640:	e7fd      	b.n	800963e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009642:	f000 f885 	bl	8009750 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009646:	2100      	movs	r1, #0
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fb27 	bl	8009c9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800964e:	f000 f88d 	bl	800976c <xTaskResumeAll>
 8009652:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d107      	bne.n	800966a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800965a:	4b07      	ldr	r3, [pc, #28]	@ (8009678 <vTaskDelay+0x68>)
 800965c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800966a:	bf00      	nop
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	24000950 	.word	0x24000950
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	@ 0x28
 8009680:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009682:	2300      	movs	r3, #0
 8009684:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009686:	2300      	movs	r3, #0
 8009688:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800968a:	463a      	mov	r2, r7
 800968c:	1d39      	adds	r1, r7, #4
 800968e:	f107 0308 	add.w	r3, r7, #8
 8009692:	4618      	mov	r0, r3
 8009694:	f7f6 fec6 	bl	8000424 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	9202      	str	r2, [sp, #8]
 80096a0:	9301      	str	r3, [sp, #4]
 80096a2:	2300      	movs	r3, #0
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	2300      	movs	r3, #0
 80096a8:	460a      	mov	r2, r1
 80096aa:	4921      	ldr	r1, [pc, #132]	@ (8009730 <vTaskStartScheduler+0xb4>)
 80096ac:	4821      	ldr	r0, [pc, #132]	@ (8009734 <vTaskStartScheduler+0xb8>)
 80096ae:	f7ff fe00 	bl	80092b2 <xTaskCreateStatic>
 80096b2:	4603      	mov	r3, r0
 80096b4:	4a20      	ldr	r2, [pc, #128]	@ (8009738 <vTaskStartScheduler+0xbc>)
 80096b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80096b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009738 <vTaskStartScheduler+0xbc>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096c0:	2301      	movs	r3, #1
 80096c2:	617b      	str	r3, [r7, #20]
 80096c4:	e001      	b.n	80096ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096c6:	2300      	movs	r3, #0
 80096c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d11b      	bne.n	8009708 <vTaskStartScheduler+0x8c>
	__asm volatile
 80096d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	613b      	str	r3, [r7, #16]
}
 80096e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096e4:	4b15      	ldr	r3, [pc, #84]	@ (800973c <vTaskStartScheduler+0xc0>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	334c      	adds	r3, #76	@ 0x4c
 80096ea:	4a15      	ldr	r2, [pc, #84]	@ (8009740 <vTaskStartScheduler+0xc4>)
 80096ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096ee:	4b15      	ldr	r3, [pc, #84]	@ (8009744 <vTaskStartScheduler+0xc8>)
 80096f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096f6:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <vTaskStartScheduler+0xcc>)
 80096f8:	2201      	movs	r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096fc:	4b13      	ldr	r3, [pc, #76]	@ (800974c <vTaskStartScheduler+0xd0>)
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009702:	f000 fbbd 	bl	8009e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009706:	e00f      	b.n	8009728 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800970e:	d10b      	bne.n	8009728 <vTaskStartScheduler+0xac>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	60fb      	str	r3, [r7, #12]
}
 8009722:	bf00      	nop
 8009724:	bf00      	nop
 8009726:	e7fd      	b.n	8009724 <vTaskStartScheduler+0xa8>
}
 8009728:	bf00      	nop
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	0800a968 	.word	0x0800a968
 8009734:	08009ae5 	.word	0x08009ae5
 8009738:	2400094c 	.word	0x2400094c
 800973c:	24000828 	.word	0x24000828
 8009740:	24000014 	.word	0x24000014
 8009744:	24000948 	.word	0x24000948
 8009748:	24000934 	.word	0x24000934
 800974c:	2400092c 	.word	0x2400092c

08009750 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009754:	4b04      	ldr	r3, [pc, #16]	@ (8009768 <vTaskSuspendAll+0x18>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	4a03      	ldr	r2, [pc, #12]	@ (8009768 <vTaskSuspendAll+0x18>)
 800975c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800975e:	bf00      	nop
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	24000950 	.word	0x24000950

0800976c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009772:	2300      	movs	r3, #0
 8009774:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800977a:	4b42      	ldr	r3, [pc, #264]	@ (8009884 <xTaskResumeAll+0x118>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <xTaskResumeAll+0x2e>
	__asm volatile
 8009782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009786:	f383 8811 	msr	BASEPRI, r3
 800978a:	f3bf 8f6f 	isb	sy
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	603b      	str	r3, [r7, #0]
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop
 8009798:	e7fd      	b.n	8009796 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800979a:	f000 fc15 	bl	8009fc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800979e:	4b39      	ldr	r3, [pc, #228]	@ (8009884 <xTaskResumeAll+0x118>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	4a37      	ldr	r2, [pc, #220]	@ (8009884 <xTaskResumeAll+0x118>)
 80097a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a8:	4b36      	ldr	r3, [pc, #216]	@ (8009884 <xTaskResumeAll+0x118>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d161      	bne.n	8009874 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80097b0:	4b35      	ldr	r3, [pc, #212]	@ (8009888 <xTaskResumeAll+0x11c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d05d      	beq.n	8009874 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097b8:	e02e      	b.n	8009818 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ba:	4b34      	ldr	r3, [pc, #208]	@ (800988c <xTaskResumeAll+0x120>)
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3318      	adds	r3, #24
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff fd49 	bl	800925e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fd44 	bl	800925e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	2201      	movs	r2, #1
 80097dc:	409a      	lsls	r2, r3
 80097de:	4b2c      	ldr	r3, [pc, #176]	@ (8009890 <xTaskResumeAll+0x124>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009890 <xTaskResumeAll+0x124>)
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ec:	4613      	mov	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	4413      	add	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4a27      	ldr	r2, [pc, #156]	@ (8009894 <xTaskResumeAll+0x128>)
 80097f6:	441a      	add	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	3304      	adds	r3, #4
 80097fc:	4619      	mov	r1, r3
 80097fe:	4610      	mov	r0, r2
 8009800:	f7ff fcd0 	bl	80091a4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009808:	4b23      	ldr	r3, [pc, #140]	@ (8009898 <xTaskResumeAll+0x12c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980e:	429a      	cmp	r2, r3
 8009810:	d302      	bcc.n	8009818 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009812:	4b22      	ldr	r3, [pc, #136]	@ (800989c <xTaskResumeAll+0x130>)
 8009814:	2201      	movs	r2, #1
 8009816:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009818:	4b1c      	ldr	r3, [pc, #112]	@ (800988c <xTaskResumeAll+0x120>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1cc      	bne.n	80097ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009826:	f000 fa19 	bl	8009c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800982a:	4b1d      	ldr	r3, [pc, #116]	@ (80098a0 <xTaskResumeAll+0x134>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d010      	beq.n	8009858 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009836:	f000 f837 	bl	80098a8 <xTaskIncrementTick>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d002      	beq.n	8009846 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009840:	4b16      	ldr	r3, [pc, #88]	@ (800989c <xTaskResumeAll+0x130>)
 8009842:	2201      	movs	r2, #1
 8009844:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	3b01      	subs	r3, #1
 800984a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d1f1      	bne.n	8009836 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009852:	4b13      	ldr	r3, [pc, #76]	@ (80098a0 <xTaskResumeAll+0x134>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009858:	4b10      	ldr	r3, [pc, #64]	@ (800989c <xTaskResumeAll+0x130>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d009      	beq.n	8009874 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009860:	2301      	movs	r3, #1
 8009862:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009864:	4b0f      	ldr	r3, [pc, #60]	@ (80098a4 <xTaskResumeAll+0x138>)
 8009866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009874:	f000 fbda 	bl	800a02c <vPortExitCritical>

	return xAlreadyYielded;
 8009878:	68bb      	ldr	r3, [r7, #8]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	24000950 	.word	0x24000950
 8009888:	24000928 	.word	0x24000928
 800988c:	240008e8 	.word	0x240008e8
 8009890:	24000930 	.word	0x24000930
 8009894:	2400082c 	.word	0x2400082c
 8009898:	24000828 	.word	0x24000828
 800989c:	2400093c 	.word	0x2400093c
 80098a0:	24000938 	.word	0x24000938
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b2:	4b4f      	ldr	r3, [pc, #316]	@ (80099f0 <xTaskIncrementTick+0x148>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f040 808f 	bne.w	80099da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098bc:	4b4d      	ldr	r3, [pc, #308]	@ (80099f4 <xTaskIncrementTick+0x14c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098c4:	4a4b      	ldr	r2, [pc, #300]	@ (80099f4 <xTaskIncrementTick+0x14c>)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d121      	bne.n	8009914 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098d0:	4b49      	ldr	r3, [pc, #292]	@ (80099f8 <xTaskIncrementTick+0x150>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	603b      	str	r3, [r7, #0]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xTaskIncrementTick+0x46>
 80098f2:	4b41      	ldr	r3, [pc, #260]	@ (80099f8 <xTaskIncrementTick+0x150>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	4b40      	ldr	r3, [pc, #256]	@ (80099fc <xTaskIncrementTick+0x154>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a3e      	ldr	r2, [pc, #248]	@ (80099f8 <xTaskIncrementTick+0x150>)
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	4a3e      	ldr	r2, [pc, #248]	@ (80099fc <xTaskIncrementTick+0x154>)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	4b3e      	ldr	r3, [pc, #248]	@ (8009a00 <xTaskIncrementTick+0x158>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a00 <xTaskIncrementTick+0x158>)
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	f000 f9a4 	bl	8009c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009914:	4b3b      	ldr	r3, [pc, #236]	@ (8009a04 <xTaskIncrementTick+0x15c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	429a      	cmp	r2, r3
 800991c:	d348      	bcc.n	80099b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991e:	4b36      	ldr	r3, [pc, #216]	@ (80099f8 <xTaskIncrementTick+0x150>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009928:	4b36      	ldr	r3, [pc, #216]	@ (8009a04 <xTaskIncrementTick+0x15c>)
 800992a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800992e:	601a      	str	r2, [r3, #0]
					break;
 8009930:	e03e      	b.n	80099b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009932:	4b31      	ldr	r3, [pc, #196]	@ (80099f8 <xTaskIncrementTick+0x150>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d203      	bcs.n	8009952 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800994a:	4a2e      	ldr	r2, [pc, #184]	@ (8009a04 <xTaskIncrementTick+0x15c>)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009950:	e02e      	b.n	80099b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	3304      	adds	r3, #4
 8009956:	4618      	mov	r0, r3
 8009958:	f7ff fc81 	bl	800925e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3318      	adds	r3, #24
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff fc78 	bl	800925e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	2201      	movs	r2, #1
 8009974:	409a      	lsls	r2, r3
 8009976:	4b24      	ldr	r3, [pc, #144]	@ (8009a08 <xTaskIncrementTick+0x160>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4313      	orrs	r3, r2
 800997c:	4a22      	ldr	r2, [pc, #136]	@ (8009a08 <xTaskIncrementTick+0x160>)
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009984:	4613      	mov	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4a1f      	ldr	r2, [pc, #124]	@ (8009a0c <xTaskIncrementTick+0x164>)
 800998e:	441a      	add	r2, r3
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	3304      	adds	r3, #4
 8009994:	4619      	mov	r1, r3
 8009996:	4610      	mov	r0, r2
 8009998:	f7ff fc04 	bl	80091a4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a0:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <xTaskIncrementTick+0x168>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d3b9      	bcc.n	800991e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099aa:	2301      	movs	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099ae:	e7b6      	b.n	800991e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099b0:	4b17      	ldr	r3, [pc, #92]	@ (8009a10 <xTaskIncrementTick+0x168>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b6:	4915      	ldr	r1, [pc, #84]	@ (8009a0c <xTaskIncrementTick+0x164>)
 80099b8:	4613      	mov	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	4413      	add	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	440b      	add	r3, r1
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d901      	bls.n	80099cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80099c8:	2301      	movs	r3, #1
 80099ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099cc:	4b11      	ldr	r3, [pc, #68]	@ (8009a14 <xTaskIncrementTick+0x16c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d007      	beq.n	80099e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80099d4:	2301      	movs	r3, #1
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	e004      	b.n	80099e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099da:	4b0f      	ldr	r3, [pc, #60]	@ (8009a18 <xTaskIncrementTick+0x170>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3301      	adds	r3, #1
 80099e0:	4a0d      	ldr	r2, [pc, #52]	@ (8009a18 <xTaskIncrementTick+0x170>)
 80099e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099e4:	697b      	ldr	r3, [r7, #20]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3718      	adds	r7, #24
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	24000950 	.word	0x24000950
 80099f4:	2400092c 	.word	0x2400092c
 80099f8:	240008e0 	.word	0x240008e0
 80099fc:	240008e4 	.word	0x240008e4
 8009a00:	24000940 	.word	0x24000940
 8009a04:	24000948 	.word	0x24000948
 8009a08:	24000930 	.word	0x24000930
 8009a0c:	2400082c 	.word	0x2400082c
 8009a10:	24000828 	.word	0x24000828
 8009a14:	2400093c 	.word	0x2400093c
 8009a18:	24000938 	.word	0x24000938

08009a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b087      	sub	sp, #28
 8009a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a22:	4b2a      	ldr	r3, [pc, #168]	@ (8009acc <vTaskSwitchContext+0xb0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a2a:	4b29      	ldr	r3, [pc, #164]	@ (8009ad0 <vTaskSwitchContext+0xb4>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a30:	e045      	b.n	8009abe <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009a32:	4b27      	ldr	r3, [pc, #156]	@ (8009ad0 <vTaskSwitchContext+0xb4>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a38:	4b26      	ldr	r3, [pc, #152]	@ (8009ad4 <vTaskSwitchContext+0xb8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	fab3 f383 	clz	r3, r3
 8009a44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	f1c3 031f 	rsb	r3, r3, #31
 8009a4c:	617b      	str	r3, [r7, #20]
 8009a4e:	4922      	ldr	r1, [pc, #136]	@ (8009ad8 <vTaskSwitchContext+0xbc>)
 8009a50:	697a      	ldr	r2, [r7, #20]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10b      	bne.n	8009a7a <vTaskSwitchContext+0x5e>
	__asm volatile
 8009a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a66:	f383 8811 	msr	BASEPRI, r3
 8009a6a:	f3bf 8f6f 	isb	sy
 8009a6e:	f3bf 8f4f 	dsb	sy
 8009a72:	607b      	str	r3, [r7, #4]
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	e7fd      	b.n	8009a76 <vTaskSwitchContext+0x5a>
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	4413      	add	r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4a14      	ldr	r2, [pc, #80]	@ (8009ad8 <vTaskSwitchContext+0xbc>)
 8009a86:	4413      	add	r3, r2
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	605a      	str	r2, [r3, #4]
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d104      	bne.n	8009aaa <vTaskSwitchContext+0x8e>
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8009adc <vTaskSwitchContext+0xc0>)
 8009ab2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ab4:	4b09      	ldr	r3, [pc, #36]	@ (8009adc <vTaskSwitchContext+0xc0>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	334c      	adds	r3, #76	@ 0x4c
 8009aba:	4a09      	ldr	r2, [pc, #36]	@ (8009ae0 <vTaskSwitchContext+0xc4>)
 8009abc:	6013      	str	r3, [r2, #0]
}
 8009abe:	bf00      	nop
 8009ac0:	371c      	adds	r7, #28
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	24000950 	.word	0x24000950
 8009ad0:	2400093c 	.word	0x2400093c
 8009ad4:	24000930 	.word	0x24000930
 8009ad8:	2400082c 	.word	0x2400082c
 8009adc:	24000828 	.word	0x24000828
 8009ae0:	24000014 	.word	0x24000014

08009ae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009aec:	f000 f852 	bl	8009b94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009af0:	4b06      	ldr	r3, [pc, #24]	@ (8009b0c <prvIdleTask+0x28>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d9f9      	bls.n	8009aec <prvIdleTask+0x8>
			{
				taskYIELD();
 8009af8:	4b05      	ldr	r3, [pc, #20]	@ (8009b10 <prvIdleTask+0x2c>)
 8009afa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b08:	e7f0      	b.n	8009aec <prvIdleTask+0x8>
 8009b0a:	bf00      	nop
 8009b0c:	2400082c 	.word	0x2400082c
 8009b10:	e000ed04 	.word	0xe000ed04

08009b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	e00c      	b.n	8009b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4613      	mov	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4a12      	ldr	r2, [pc, #72]	@ (8009b74 <prvInitialiseTaskLists+0x60>)
 8009b2c:	4413      	add	r3, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7ff fb0b 	bl	800914a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3301      	adds	r3, #1
 8009b38:	607b      	str	r3, [r7, #4]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	d9ef      	bls.n	8009b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b40:	480d      	ldr	r0, [pc, #52]	@ (8009b78 <prvInitialiseTaskLists+0x64>)
 8009b42:	f7ff fb02 	bl	800914a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b46:	480d      	ldr	r0, [pc, #52]	@ (8009b7c <prvInitialiseTaskLists+0x68>)
 8009b48:	f7ff faff 	bl	800914a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b4c:	480c      	ldr	r0, [pc, #48]	@ (8009b80 <prvInitialiseTaskLists+0x6c>)
 8009b4e:	f7ff fafc 	bl	800914a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b52:	480c      	ldr	r0, [pc, #48]	@ (8009b84 <prvInitialiseTaskLists+0x70>)
 8009b54:	f7ff faf9 	bl	800914a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b58:	480b      	ldr	r0, [pc, #44]	@ (8009b88 <prvInitialiseTaskLists+0x74>)
 8009b5a:	f7ff faf6 	bl	800914a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b8c <prvInitialiseTaskLists+0x78>)
 8009b60:	4a05      	ldr	r2, [pc, #20]	@ (8009b78 <prvInitialiseTaskLists+0x64>)
 8009b62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b64:	4b0a      	ldr	r3, [pc, #40]	@ (8009b90 <prvInitialiseTaskLists+0x7c>)
 8009b66:	4a05      	ldr	r2, [pc, #20]	@ (8009b7c <prvInitialiseTaskLists+0x68>)
 8009b68:	601a      	str	r2, [r3, #0]
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	2400082c 	.word	0x2400082c
 8009b78:	240008b8 	.word	0x240008b8
 8009b7c:	240008cc 	.word	0x240008cc
 8009b80:	240008e8 	.word	0x240008e8
 8009b84:	240008fc 	.word	0x240008fc
 8009b88:	24000914 	.word	0x24000914
 8009b8c:	240008e0 	.word	0x240008e0
 8009b90:	240008e4 	.word	0x240008e4

08009b94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b9a:	e019      	b.n	8009bd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b9c:	f000 fa14 	bl	8009fc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba0:	4b10      	ldr	r3, [pc, #64]	@ (8009be4 <prvCheckTasksWaitingTermination+0x50>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	3304      	adds	r3, #4
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff fb56 	bl	800925e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <prvCheckTasksWaitingTermination+0x54>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8009be8 <prvCheckTasksWaitingTermination+0x54>)
 8009bba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8009bec <prvCheckTasksWaitingTermination+0x58>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8009bec <prvCheckTasksWaitingTermination+0x58>)
 8009bc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bc6:	f000 fa31 	bl	800a02c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f810 	bl	8009bf0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bd0:	4b06      	ldr	r3, [pc, #24]	@ (8009bec <prvCheckTasksWaitingTermination+0x58>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e1      	bne.n	8009b9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bd8:	bf00      	nop
 8009bda:	bf00      	nop
 8009bdc:	3708      	adds	r7, #8
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	240008fc 	.word	0x240008fc
 8009be8:	24000928 	.word	0x24000928
 8009bec:	24000910 	.word	0x24000910

08009bf0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	334c      	adds	r3, #76	@ 0x4c
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f000 fd83 	bl	800a708 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d108      	bne.n	8009c1e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fb87 	bl	800a324 <vPortFree>
				vPortFree( pxTCB );
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 fb84 	bl	800a324 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c1c:	e019      	b.n	8009c52 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d103      	bne.n	8009c30 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fb7b 	bl	800a324 <vPortFree>
	}
 8009c2e:	e010      	b.n	8009c52 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d00b      	beq.n	8009c52 <prvDeleteTCB+0x62>
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	60fb      	str	r3, [r7, #12]
}
 8009c4c:	bf00      	nop
 8009c4e:	bf00      	nop
 8009c50:	e7fd      	b.n	8009c4e <prvDeleteTCB+0x5e>
	}
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c62:	4b0c      	ldr	r3, [pc, #48]	@ (8009c94 <prvResetNextTaskUnblockTime+0x38>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d104      	bne.n	8009c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009c98 <prvResetNextTaskUnblockTime+0x3c>)
 8009c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c74:	e008      	b.n	8009c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c76:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <prvResetNextTaskUnblockTime+0x38>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	4a04      	ldr	r2, [pc, #16]	@ (8009c98 <prvResetNextTaskUnblockTime+0x3c>)
 8009c86:	6013      	str	r3, [r2, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	240008e0 	.word	0x240008e0
 8009c98:	24000948 	.word	0x24000948

08009c9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ca6:	4b29      	ldr	r3, [pc, #164]	@ (8009d4c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cac:	4b28      	ldr	r3, [pc, #160]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fad3 	bl	800925e <uxListRemove>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009cbe:	4b24      	ldr	r3, [pc, #144]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cca:	43da      	mvns	r2, r3
 8009ccc:	4b21      	ldr	r3, [pc, #132]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	4a20      	ldr	r2, [pc, #128]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009cdc:	d10a      	bne.n	8009cf4 <prvAddCurrentTaskToDelayedList+0x58>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d007      	beq.n	8009cf4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4619      	mov	r1, r3
 8009cec:	481a      	ldr	r0, [pc, #104]	@ (8009d58 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009cee:	f7ff fa59 	bl	80091a4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cf2:	e026      	b.n	8009d42 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cfc:	4b14      	ldr	r3, [pc, #80]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d209      	bcs.n	8009d20 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d0c:	4b13      	ldr	r3, [pc, #76]	@ (8009d5c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	4b0f      	ldr	r3, [pc, #60]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4619      	mov	r1, r3
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7ff fa67 	bl	80091ec <vListInsert>
}
 8009d1e:	e010      	b.n	8009d42 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d20:	4b0f      	ldr	r3, [pc, #60]	@ (8009d60 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4b0a      	ldr	r3, [pc, #40]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3304      	adds	r3, #4
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	4610      	mov	r0, r2
 8009d2e:	f7ff fa5d 	bl	80091ec <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d32:	4b0c      	ldr	r3, [pc, #48]	@ (8009d64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d202      	bcs.n	8009d42 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d3c:	4a09      	ldr	r2, [pc, #36]	@ (8009d64 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	6013      	str	r3, [r2, #0]
}
 8009d42:	bf00      	nop
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	2400092c 	.word	0x2400092c
 8009d50:	24000828 	.word	0x24000828
 8009d54:	24000930 	.word	0x24000930
 8009d58:	24000914 	.word	0x24000914
 8009d5c:	240008e4 	.word	0x240008e4
 8009d60:	240008e0 	.word	0x240008e0
 8009d64:	24000948 	.word	0x24000948

08009d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3b04      	subs	r3, #4
 8009d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f023 0201 	bic.w	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d98:	4a0c      	ldr	r2, [pc, #48]	@ (8009dcc <pxPortInitialiseStack+0x64>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3b14      	subs	r3, #20
 8009da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3b04      	subs	r3, #4
 8009dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f06f 0202 	mvn.w	r2, #2
 8009db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3b20      	subs	r3, #32
 8009dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	08009dd1 	.word	0x08009dd1

08009dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dda:	4b13      	ldr	r3, [pc, #76]	@ (8009e28 <prvTaskExitError+0x58>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009de2:	d00b      	beq.n	8009dfc <prvTaskExitError+0x2c>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
}
 8009df6:	bf00      	nop
 8009df8:	bf00      	nop
 8009dfa:	e7fd      	b.n	8009df8 <prvTaskExitError+0x28>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60bb      	str	r3, [r7, #8]
}
 8009e0e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e10:	bf00      	nop
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d0fc      	beq.n	8009e12 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e18:	bf00      	nop
 8009e1a:	bf00      	nop
 8009e1c:	3714      	adds	r7, #20
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	24000010 	.word	0x24000010
 8009e2c:	00000000 	.word	0x00000000

08009e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e30:	4b07      	ldr	r3, [pc, #28]	@ (8009e50 <pxCurrentTCBConst2>)
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	f380 8809 	msr	PSP, r0
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f04f 0000 	mov.w	r0, #0
 8009e46:	f380 8811 	msr	BASEPRI, r0
 8009e4a:	4770      	bx	lr
 8009e4c:	f3af 8000 	nop.w

08009e50 <pxCurrentTCBConst2>:
 8009e50:	24000828 	.word	0x24000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e58:	4808      	ldr	r0, [pc, #32]	@ (8009e7c <prvPortStartFirstTask+0x24>)
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	6800      	ldr	r0, [r0, #0]
 8009e5e:	f380 8808 	msr	MSP, r0
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8814 	msr	CONTROL, r0
 8009e6a:	b662      	cpsie	i
 8009e6c:	b661      	cpsie	f
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	df00      	svc	0
 8009e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e7a:	bf00      	nop
 8009e7c:	e000ed08 	.word	0xe000ed08

08009e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e86:	4b47      	ldr	r3, [pc, #284]	@ (8009fa4 <xPortStartScheduler+0x124>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a47      	ldr	r2, [pc, #284]	@ (8009fa8 <xPortStartScheduler+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10b      	bne.n	8009ea8 <xPortStartScheduler+0x28>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
}
 8009ea2:	bf00      	nop
 8009ea4:	bf00      	nop
 8009ea6:	e7fd      	b.n	8009ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8009fa4 <xPortStartScheduler+0x124>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a3f      	ldr	r2, [pc, #252]	@ (8009fac <xPortStartScheduler+0x12c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d10b      	bne.n	8009eca <xPortStartScheduler+0x4a>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	60fb      	str	r3, [r7, #12]
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	e7fd      	b.n	8009ec6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eca:	4b39      	ldr	r3, [pc, #228]	@ (8009fb0 <xPortStartScheduler+0x130>)
 8009ecc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	781b      	ldrb	r3, [r3, #0]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	22ff      	movs	r2, #255	@ 0xff
 8009eda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	4b31      	ldr	r3, [pc, #196]	@ (8009fb4 <xPortStartScheduler+0x134>)
 8009ef0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ef2:	4b31      	ldr	r3, [pc, #196]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009ef4:	2207      	movs	r2, #7
 8009ef6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ef8:	e009      	b.n	8009f0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009efa:	4b2f      	ldr	r3, [pc, #188]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	4a2d      	ldr	r2, [pc, #180]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f0e:	78fb      	ldrb	r3, [r7, #3]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f16:	2b80      	cmp	r3, #128	@ 0x80
 8009f18:	d0ef      	beq.n	8009efa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f1a:	4b27      	ldr	r3, [pc, #156]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f1c3 0307 	rsb	r3, r3, #7
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d00b      	beq.n	8009f3e <xPortStartScheduler+0xbe>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	60bb      	str	r3, [r7, #8]
}
 8009f38:	bf00      	nop
 8009f3a:	bf00      	nop
 8009f3c:	e7fd      	b.n	8009f3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	021b      	lsls	r3, r3, #8
 8009f44:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f48:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009f50:	4a19      	ldr	r2, [pc, #100]	@ (8009fb8 <xPortStartScheduler+0x138>)
 8009f52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	b2da      	uxtb	r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f5c:	4b17      	ldr	r3, [pc, #92]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a16      	ldr	r2, [pc, #88]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009f66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f68:	4b14      	ldr	r3, [pc, #80]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a13      	ldr	r2, [pc, #76]	@ (8009fbc <xPortStartScheduler+0x13c>)
 8009f6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009f72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f74:	f000 f8da 	bl	800a12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f78:	4b11      	ldr	r3, [pc, #68]	@ (8009fc0 <xPortStartScheduler+0x140>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f7e:	f000 f8f9 	bl	800a174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f82:	4b10      	ldr	r3, [pc, #64]	@ (8009fc4 <xPortStartScheduler+0x144>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a0f      	ldr	r2, [pc, #60]	@ (8009fc4 <xPortStartScheduler+0x144>)
 8009f88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009f8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f8e:	f7ff ff63 	bl	8009e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f92:	f7ff fd43 	bl	8009a1c <vTaskSwitchContext>
	prvTaskExitError();
 8009f96:	f7ff ff1b 	bl	8009dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3718      	adds	r7, #24
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	e000ed00 	.word	0xe000ed00
 8009fa8:	410fc271 	.word	0x410fc271
 8009fac:	410fc270 	.word	0x410fc270
 8009fb0:	e000e400 	.word	0xe000e400
 8009fb4:	24000954 	.word	0x24000954
 8009fb8:	24000958 	.word	0x24000958
 8009fbc:	e000ed20 	.word	0xe000ed20
 8009fc0:	24000010 	.word	0x24000010
 8009fc4:	e000ef34 	.word	0xe000ef34

08009fc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	607b      	str	r3, [r7, #4]
}
 8009fe0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fe2:	4b10      	ldr	r3, [pc, #64]	@ (800a024 <vPortEnterCritical+0x5c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	4a0e      	ldr	r2, [pc, #56]	@ (800a024 <vPortEnterCritical+0x5c>)
 8009fea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fec:	4b0d      	ldr	r3, [pc, #52]	@ (800a024 <vPortEnterCritical+0x5c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d110      	bne.n	800a016 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	@ (800a028 <vPortEnterCritical+0x60>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00b      	beq.n	800a016 <vPortEnterCritical+0x4e>
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	603b      	str	r3, [r7, #0]
}
 800a010:	bf00      	nop
 800a012:	bf00      	nop
 800a014:	e7fd      	b.n	800a012 <vPortEnterCritical+0x4a>
	}
}
 800a016:	bf00      	nop
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	24000010 	.word	0x24000010
 800a028:	e000ed04 	.word	0xe000ed04

0800a02c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a032:	4b12      	ldr	r3, [pc, #72]	@ (800a07c <vPortExitCritical+0x50>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10b      	bne.n	800a052 <vPortExitCritical+0x26>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	607b      	str	r3, [r7, #4]
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	e7fd      	b.n	800a04e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a052:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <vPortExitCritical+0x50>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3b01      	subs	r3, #1
 800a058:	4a08      	ldr	r2, [pc, #32]	@ (800a07c <vPortExitCritical+0x50>)
 800a05a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a05c:	4b07      	ldr	r3, [pc, #28]	@ (800a07c <vPortExitCritical+0x50>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d105      	bne.n	800a070 <vPortExitCritical+0x44>
 800a064:	2300      	movs	r3, #0
 800a066:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a06e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	24000010 	.word	0x24000010

0800a080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a080:	f3ef 8009 	mrs	r0, PSP
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	4b15      	ldr	r3, [pc, #84]	@ (800a0e0 <pxCurrentTCBConst>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	f01e 0f10 	tst.w	lr, #16
 800a090:	bf08      	it	eq
 800a092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09a:	6010      	str	r0, [r2, #0]
 800a09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a0a4:	f380 8811 	msr	BASEPRI, r0
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f7ff fcb4 	bl	8009a1c <vTaskSwitchContext>
 800a0b4:	f04f 0000 	mov.w	r0, #0
 800a0b8:	f380 8811 	msr	BASEPRI, r0
 800a0bc:	bc09      	pop	{r0, r3}
 800a0be:	6819      	ldr	r1, [r3, #0]
 800a0c0:	6808      	ldr	r0, [r1, #0]
 800a0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c6:	f01e 0f10 	tst.w	lr, #16
 800a0ca:	bf08      	it	eq
 800a0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0d0:	f380 8809 	msr	PSP, r0
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w

0800a0e0 <pxCurrentTCBConst>:
 800a0e0:	24000828 	.word	0x24000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop

0800a0e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	607b      	str	r3, [r7, #4]
}
 800a100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a102:	f7ff fbd1 	bl	80098a8 <xTaskIncrementTick>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a10c:	4b06      	ldr	r3, [pc, #24]	@ (800a128 <SysTick_Handler+0x40>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a130:	4b0b      	ldr	r3, [pc, #44]	@ (800a160 <vPortSetupTimerInterrupt+0x34>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a136:	4b0b      	ldr	r3, [pc, #44]	@ (800a164 <vPortSetupTimerInterrupt+0x38>)
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	@ (800a168 <vPortSetupTimerInterrupt+0x3c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a0a      	ldr	r2, [pc, #40]	@ (800a16c <vPortSetupTimerInterrupt+0x40>)
 800a142:	fba2 2303 	umull	r2, r3, r2, r3
 800a146:	099b      	lsrs	r3, r3, #6
 800a148:	4a09      	ldr	r2, [pc, #36]	@ (800a170 <vPortSetupTimerInterrupt+0x44>)
 800a14a:	3b01      	subs	r3, #1
 800a14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a14e:	4b04      	ldr	r3, [pc, #16]	@ (800a160 <vPortSetupTimerInterrupt+0x34>)
 800a150:	2207      	movs	r2, #7
 800a152:	601a      	str	r2, [r3, #0]
}
 800a154:	bf00      	nop
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	e000e010 	.word	0xe000e010
 800a164:	e000e018 	.word	0xe000e018
 800a168:	24000000 	.word	0x24000000
 800a16c:	10624dd3 	.word	0x10624dd3
 800a170:	e000e014 	.word	0xe000e014

0800a174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a174:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a184 <vPortEnableVFP+0x10>
 800a178:	6801      	ldr	r1, [r0, #0]
 800a17a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a17e:	6001      	str	r1, [r0, #0]
 800a180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a182:	bf00      	nop
 800a184:	e000ed88 	.word	0xe000ed88

0800a188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b08a      	sub	sp, #40	@ 0x28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a190:	2300      	movs	r3, #0
 800a192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a194:	f7ff fadc 	bl	8009750 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a198:	4b5c      	ldr	r3, [pc, #368]	@ (800a30c <pvPortMalloc+0x184>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1a0:	f000 f924 	bl	800a3ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1a4:	4b5a      	ldr	r3, [pc, #360]	@ (800a310 <pvPortMalloc+0x188>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4013      	ands	r3, r2
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8095 	bne.w	800a2dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d01e      	beq.n	800a1f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4413      	add	r3, r2
 800a1be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d015      	beq.n	800a1f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f023 0307 	bic.w	r3, r3, #7
 800a1d0:	3308      	adds	r3, #8
 800a1d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00b      	beq.n	800a1f6 <pvPortMalloc+0x6e>
	__asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	617b      	str	r3, [r7, #20]
}
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d06f      	beq.n	800a2dc <pvPortMalloc+0x154>
 800a1fc:	4b45      	ldr	r3, [pc, #276]	@ (800a314 <pvPortMalloc+0x18c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d86a      	bhi.n	800a2dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a206:	4b44      	ldr	r3, [pc, #272]	@ (800a318 <pvPortMalloc+0x190>)
 800a208:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a20a:	4b43      	ldr	r3, [pc, #268]	@ (800a318 <pvPortMalloc+0x190>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a210:	e004      	b.n	800a21c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d903      	bls.n	800a22e <pvPortMalloc+0xa6>
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f1      	bne.n	800a212 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a22e:	4b37      	ldr	r3, [pc, #220]	@ (800a30c <pvPortMalloc+0x184>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a234:	429a      	cmp	r2, r3
 800a236:	d051      	beq.n	800a2dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2208      	movs	r2, #8
 800a23e:	4413      	add	r3, r2
 800a240:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	1ad2      	subs	r2, r2, r3
 800a252:	2308      	movs	r3, #8
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	429a      	cmp	r2, r3
 800a258:	d920      	bls.n	800a29c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4413      	add	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <pvPortMalloc+0xfc>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	613b      	str	r3, [r7, #16]
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	e7fd      	b.n	800a280 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	1ad2      	subs	r2, r2, r3
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a296:	69b8      	ldr	r0, [r7, #24]
 800a298:	f000 f90a 	bl	800a4b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a29c:	4b1d      	ldr	r3, [pc, #116]	@ (800a314 <pvPortMalloc+0x18c>)
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a2:	685b      	ldr	r3, [r3, #4]
 800a2a4:	1ad3      	subs	r3, r2, r3
 800a2a6:	4a1b      	ldr	r2, [pc, #108]	@ (800a314 <pvPortMalloc+0x18c>)
 800a2a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a314 <pvPortMalloc+0x18c>)
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a31c <pvPortMalloc+0x194>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d203      	bcs.n	800a2be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2b6:	4b17      	ldr	r3, [pc, #92]	@ (800a314 <pvPortMalloc+0x18c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a18      	ldr	r2, [pc, #96]	@ (800a31c <pvPortMalloc+0x194>)
 800a2bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	4b13      	ldr	r3, [pc, #76]	@ (800a310 <pvPortMalloc+0x188>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	431a      	orrs	r2, r3
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2d2:	4b13      	ldr	r3, [pc, #76]	@ (800a320 <pvPortMalloc+0x198>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	4a11      	ldr	r2, [pc, #68]	@ (800a320 <pvPortMalloc+0x198>)
 800a2da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2dc:	f7ff fa46 	bl	800976c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00b      	beq.n	800a302 <pvPortMalloc+0x17a>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	60fb      	str	r3, [r7, #12]
}
 800a2fc:	bf00      	nop
 800a2fe:	bf00      	nop
 800a300:	e7fd      	b.n	800a2fe <pvPortMalloc+0x176>
	return pvReturn;
 800a302:	69fb      	ldr	r3, [r7, #28]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3728      	adds	r7, #40	@ 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	24004564 	.word	0x24004564
 800a310:	24004578 	.word	0x24004578
 800a314:	24004568 	.word	0x24004568
 800a318:	2400455c 	.word	0x2400455c
 800a31c:	2400456c 	.word	0x2400456c
 800a320:	24004570 	.word	0x24004570

0800a324 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d04f      	beq.n	800a3d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a336:	2308      	movs	r3, #8
 800a338:	425b      	negs	r3, r3
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	4413      	add	r3, r2
 800a33e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	4b25      	ldr	r3, [pc, #148]	@ (800a3e0 <vPortFree+0xbc>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4013      	ands	r3, r2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10b      	bne.n	800a36a <vPortFree+0x46>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	60fb      	str	r3, [r7, #12]
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop
 800a368:	e7fd      	b.n	800a366 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00b      	beq.n	800a38a <vPortFree+0x66>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	60bb      	str	r3, [r7, #8]
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	e7fd      	b.n	800a386 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	685a      	ldr	r2, [r3, #4]
 800a38e:	4b14      	ldr	r3, [pc, #80]	@ (800a3e0 <vPortFree+0xbc>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4013      	ands	r3, r2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d01e      	beq.n	800a3d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d11a      	bne.n	800a3d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	4b0e      	ldr	r3, [pc, #56]	@ (800a3e0 <vPortFree+0xbc>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	43db      	mvns	r3, r3
 800a3aa:	401a      	ands	r2, r3
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3b0:	f7ff f9ce 	bl	8009750 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e4 <vPortFree+0xc0>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4413      	add	r3, r2
 800a3be:	4a09      	ldr	r2, [pc, #36]	@ (800a3e4 <vPortFree+0xc0>)
 800a3c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3c2:	6938      	ldr	r0, [r7, #16]
 800a3c4:	f000 f874 	bl	800a4b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3c8:	4b07      	ldr	r3, [pc, #28]	@ (800a3e8 <vPortFree+0xc4>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	4a06      	ldr	r2, [pc, #24]	@ (800a3e8 <vPortFree+0xc4>)
 800a3d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3d2:	f7ff f9cb 	bl	800976c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	24004578 	.word	0x24004578
 800a3e4:	24004568 	.word	0x24004568
 800a3e8:	24004574 	.word	0x24004574

0800a3ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a3f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3f8:	4b27      	ldr	r3, [pc, #156]	@ (800a498 <prvHeapInit+0xac>)
 800a3fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00c      	beq.n	800a420 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3307      	adds	r3, #7
 800a40a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f023 0307 	bic.w	r3, r3, #7
 800a412:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a414:	68ba      	ldr	r2, [r7, #8]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	4a1f      	ldr	r2, [pc, #124]	@ (800a498 <prvHeapInit+0xac>)
 800a41c:	4413      	add	r3, r2
 800a41e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a424:	4a1d      	ldr	r2, [pc, #116]	@ (800a49c <prvHeapInit+0xb0>)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a42a:	4b1c      	ldr	r3, [pc, #112]	@ (800a49c <prvHeapInit+0xb0>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	4413      	add	r3, r2
 800a436:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a438:	2208      	movs	r2, #8
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0307 	bic.w	r3, r3, #7
 800a446:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4a15      	ldr	r2, [pc, #84]	@ (800a4a0 <prvHeapInit+0xb4>)
 800a44c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a44e:	4b14      	ldr	r3, [pc, #80]	@ (800a4a0 <prvHeapInit+0xb4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2200      	movs	r2, #0
 800a454:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a456:	4b12      	ldr	r3, [pc, #72]	@ (800a4a0 <prvHeapInit+0xb4>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2200      	movs	r2, #0
 800a45c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	1ad2      	subs	r2, r2, r3
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a46c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <prvHeapInit+0xb4>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	4a0a      	ldr	r2, [pc, #40]	@ (800a4a4 <prvHeapInit+0xb8>)
 800a47a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	4a09      	ldr	r2, [pc, #36]	@ (800a4a8 <prvHeapInit+0xbc>)
 800a482:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a484:	4b09      	ldr	r3, [pc, #36]	@ (800a4ac <prvHeapInit+0xc0>)
 800a486:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a48a:	601a      	str	r2, [r3, #0]
}
 800a48c:	bf00      	nop
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr
 800a498:	2400095c 	.word	0x2400095c
 800a49c:	2400455c 	.word	0x2400455c
 800a4a0:	24004564 	.word	0x24004564
 800a4a4:	2400456c 	.word	0x2400456c
 800a4a8:	24004568 	.word	0x24004568
 800a4ac:	24004578 	.word	0x24004578

0800a4b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4b8:	4b28      	ldr	r3, [pc, #160]	@ (800a55c <prvInsertBlockIntoFreeList+0xac>)
 800a4ba:	60fb      	str	r3, [r7, #12]
 800a4bc:	e002      	b.n	800a4c4 <prvInsertBlockIntoFreeList+0x14>
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d8f7      	bhi.n	800a4be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68ba      	ldr	r2, [r7, #8]
 800a4d8:	4413      	add	r3, r2
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d108      	bne.n	800a4f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	441a      	add	r2, r3
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	441a      	add	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	429a      	cmp	r2, r3
 800a504:	d118      	bne.n	800a538 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <prvInsertBlockIntoFreeList+0xb0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d00d      	beq.n	800a52e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	441a      	add	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	e008      	b.n	800a540 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a52e:	4b0c      	ldr	r3, [pc, #48]	@ (800a560 <prvInsertBlockIntoFreeList+0xb0>)
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e003      	b.n	800a540 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	429a      	cmp	r2, r3
 800a546:	d002      	beq.n	800a54e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a54e:	bf00      	nop
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	2400455c 	.word	0x2400455c
 800a560:	24004564 	.word	0x24004564

0800a564 <calloc>:
 800a564:	4b02      	ldr	r3, [pc, #8]	@ (800a570 <calloc+0xc>)
 800a566:	460a      	mov	r2, r1
 800a568:	4601      	mov	r1, r0
 800a56a:	6818      	ldr	r0, [r3, #0]
 800a56c:	f000 b802 	b.w	800a574 <_calloc_r>
 800a570:	24000014 	.word	0x24000014

0800a574 <_calloc_r>:
 800a574:	b570      	push	{r4, r5, r6, lr}
 800a576:	fba1 5402 	umull	r5, r4, r1, r2
 800a57a:	b93c      	cbnz	r4, 800a58c <_calloc_r+0x18>
 800a57c:	4629      	mov	r1, r5
 800a57e:	f000 f82f 	bl	800a5e0 <_malloc_r>
 800a582:	4606      	mov	r6, r0
 800a584:	b928      	cbnz	r0, 800a592 <_calloc_r+0x1e>
 800a586:	2600      	movs	r6, #0
 800a588:	4630      	mov	r0, r6
 800a58a:	bd70      	pop	{r4, r5, r6, pc}
 800a58c:	220c      	movs	r2, #12
 800a58e:	6002      	str	r2, [r0, #0]
 800a590:	e7f9      	b.n	800a586 <_calloc_r+0x12>
 800a592:	462a      	mov	r2, r5
 800a594:	4621      	mov	r1, r4
 800a596:	f000 f8af 	bl	800a6f8 <memset>
 800a59a:	e7f5      	b.n	800a588 <_calloc_r+0x14>

0800a59c <sbrk_aligned>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4e0f      	ldr	r6, [pc, #60]	@ (800a5dc <sbrk_aligned+0x40>)
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	6831      	ldr	r1, [r6, #0]
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	b911      	cbnz	r1, 800a5ae <sbrk_aligned+0x12>
 800a5a8:	f000 f904 	bl	800a7b4 <_sbrk_r>
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 f8ff 	bl	800a7b4 <_sbrk_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d103      	bne.n	800a5c2 <sbrk_aligned+0x26>
 800a5ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a5be:	4620      	mov	r0, r4
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
 800a5c2:	1cc4      	adds	r4, r0, #3
 800a5c4:	f024 0403 	bic.w	r4, r4, #3
 800a5c8:	42a0      	cmp	r0, r4
 800a5ca:	d0f8      	beq.n	800a5be <sbrk_aligned+0x22>
 800a5cc:	1a21      	subs	r1, r4, r0
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f8f0 	bl	800a7b4 <_sbrk_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1f2      	bne.n	800a5be <sbrk_aligned+0x22>
 800a5d8:	e7ef      	b.n	800a5ba <sbrk_aligned+0x1e>
 800a5da:	bf00      	nop
 800a5dc:	2400457c 	.word	0x2400457c

0800a5e0 <_malloc_r>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	1ccd      	adds	r5, r1, #3
 800a5e6:	f025 0503 	bic.w	r5, r5, #3
 800a5ea:	3508      	adds	r5, #8
 800a5ec:	2d0c      	cmp	r5, #12
 800a5ee:	bf38      	it	cc
 800a5f0:	250c      	movcc	r5, #12
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	db01      	blt.n	800a5fc <_malloc_r+0x1c>
 800a5f8:	42a9      	cmp	r1, r5
 800a5fa:	d904      	bls.n	800a606 <_malloc_r+0x26>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	6033      	str	r3, [r6, #0]
 800a600:	2000      	movs	r0, #0
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6dc <_malloc_r+0xfc>
 800a60a:	f000 f869 	bl	800a6e0 <__malloc_lock>
 800a60e:	f8d8 3000 	ldr.w	r3, [r8]
 800a612:	461c      	mov	r4, r3
 800a614:	bb44      	cbnz	r4, 800a668 <_malloc_r+0x88>
 800a616:	4629      	mov	r1, r5
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff ffbf 	bl	800a59c <sbrk_aligned>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	4604      	mov	r4, r0
 800a622:	d158      	bne.n	800a6d6 <_malloc_r+0xf6>
 800a624:	f8d8 4000 	ldr.w	r4, [r8]
 800a628:	4627      	mov	r7, r4
 800a62a:	2f00      	cmp	r7, #0
 800a62c:	d143      	bne.n	800a6b6 <_malloc_r+0xd6>
 800a62e:	2c00      	cmp	r4, #0
 800a630:	d04b      	beq.n	800a6ca <_malloc_r+0xea>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	4639      	mov	r1, r7
 800a636:	4630      	mov	r0, r6
 800a638:	eb04 0903 	add.w	r9, r4, r3
 800a63c:	f000 f8ba 	bl	800a7b4 <_sbrk_r>
 800a640:	4581      	cmp	r9, r0
 800a642:	d142      	bne.n	800a6ca <_malloc_r+0xea>
 800a644:	6821      	ldr	r1, [r4, #0]
 800a646:	1a6d      	subs	r5, r5, r1
 800a648:	4629      	mov	r1, r5
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ffa6 	bl	800a59c <sbrk_aligned>
 800a650:	3001      	adds	r0, #1
 800a652:	d03a      	beq.n	800a6ca <_malloc_r+0xea>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	442b      	add	r3, r5
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	f8d8 3000 	ldr.w	r3, [r8]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	bb62      	cbnz	r2, 800a6bc <_malloc_r+0xdc>
 800a662:	f8c8 7000 	str.w	r7, [r8]
 800a666:	e00f      	b.n	800a688 <_malloc_r+0xa8>
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	1b52      	subs	r2, r2, r5
 800a66c:	d420      	bmi.n	800a6b0 <_malloc_r+0xd0>
 800a66e:	2a0b      	cmp	r2, #11
 800a670:	d917      	bls.n	800a6a2 <_malloc_r+0xc2>
 800a672:	1961      	adds	r1, r4, r5
 800a674:	42a3      	cmp	r3, r4
 800a676:	6025      	str	r5, [r4, #0]
 800a678:	bf18      	it	ne
 800a67a:	6059      	strne	r1, [r3, #4]
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	bf08      	it	eq
 800a680:	f8c8 1000 	streq.w	r1, [r8]
 800a684:	5162      	str	r2, [r4, r5]
 800a686:	604b      	str	r3, [r1, #4]
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 f82f 	bl	800a6ec <__malloc_unlock>
 800a68e:	f104 000b 	add.w	r0, r4, #11
 800a692:	1d23      	adds	r3, r4, #4
 800a694:	f020 0007 	bic.w	r0, r0, #7
 800a698:	1ac2      	subs	r2, r0, r3
 800a69a:	bf1c      	itt	ne
 800a69c:	1a1b      	subne	r3, r3, r0
 800a69e:	50a3      	strne	r3, [r4, r2]
 800a6a0:	e7af      	b.n	800a602 <_malloc_r+0x22>
 800a6a2:	6862      	ldr	r2, [r4, #4]
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	bf0c      	ite	eq
 800a6a8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ac:	605a      	strne	r2, [r3, #4]
 800a6ae:	e7eb      	b.n	800a688 <_malloc_r+0xa8>
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	6864      	ldr	r4, [r4, #4]
 800a6b4:	e7ae      	b.n	800a614 <_malloc_r+0x34>
 800a6b6:	463c      	mov	r4, r7
 800a6b8:	687f      	ldr	r7, [r7, #4]
 800a6ba:	e7b6      	b.n	800a62a <_malloc_r+0x4a>
 800a6bc:	461a      	mov	r2, r3
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d1fb      	bne.n	800a6bc <_malloc_r+0xdc>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6053      	str	r3, [r2, #4]
 800a6c8:	e7de      	b.n	800a688 <_malloc_r+0xa8>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	6033      	str	r3, [r6, #0]
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 f80c 	bl	800a6ec <__malloc_unlock>
 800a6d4:	e794      	b.n	800a600 <_malloc_r+0x20>
 800a6d6:	6005      	str	r5, [r0, #0]
 800a6d8:	e7d6      	b.n	800a688 <_malloc_r+0xa8>
 800a6da:	bf00      	nop
 800a6dc:	24004580 	.word	0x24004580

0800a6e0 <__malloc_lock>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	@ (800a6e8 <__malloc_lock+0x8>)
 800a6e2:	f000 b8a1 	b.w	800a828 <__retarget_lock_acquire_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	240046c0 	.word	0x240046c0

0800a6ec <__malloc_unlock>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	@ (800a6f4 <__malloc_unlock+0x8>)
 800a6ee:	f000 b89c 	b.w	800a82a <__retarget_lock_release_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	240046c0 	.word	0x240046c0

0800a6f8 <memset>:
 800a6f8:	4402      	add	r2, r0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d100      	bne.n	800a702 <memset+0xa>
 800a700:	4770      	bx	lr
 800a702:	f803 1b01 	strb.w	r1, [r3], #1
 800a706:	e7f9      	b.n	800a6fc <memset+0x4>

0800a708 <_reclaim_reent>:
 800a708:	4b29      	ldr	r3, [pc, #164]	@ (800a7b0 <_reclaim_reent+0xa8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4283      	cmp	r3, r0
 800a70e:	b570      	push	{r4, r5, r6, lr}
 800a710:	4604      	mov	r4, r0
 800a712:	d04b      	beq.n	800a7ac <_reclaim_reent+0xa4>
 800a714:	69c3      	ldr	r3, [r0, #28]
 800a716:	b1ab      	cbz	r3, 800a744 <_reclaim_reent+0x3c>
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	b16b      	cbz	r3, 800a738 <_reclaim_reent+0x30>
 800a71c:	2500      	movs	r5, #0
 800a71e:	69e3      	ldr	r3, [r4, #28]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	5959      	ldr	r1, [r3, r5]
 800a724:	2900      	cmp	r1, #0
 800a726:	d13b      	bne.n	800a7a0 <_reclaim_reent+0x98>
 800a728:	3504      	adds	r5, #4
 800a72a:	2d80      	cmp	r5, #128	@ 0x80
 800a72c:	d1f7      	bne.n	800a71e <_reclaim_reent+0x16>
 800a72e:	69e3      	ldr	r3, [r4, #28]
 800a730:	4620      	mov	r0, r4
 800a732:	68d9      	ldr	r1, [r3, #12]
 800a734:	f000 f888 	bl	800a848 <_free_r>
 800a738:	69e3      	ldr	r3, [r4, #28]
 800a73a:	6819      	ldr	r1, [r3, #0]
 800a73c:	b111      	cbz	r1, 800a744 <_reclaim_reent+0x3c>
 800a73e:	4620      	mov	r0, r4
 800a740:	f000 f882 	bl	800a848 <_free_r>
 800a744:	6961      	ldr	r1, [r4, #20]
 800a746:	b111      	cbz	r1, 800a74e <_reclaim_reent+0x46>
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 f87d 	bl	800a848 <_free_r>
 800a74e:	69e1      	ldr	r1, [r4, #28]
 800a750:	b111      	cbz	r1, 800a758 <_reclaim_reent+0x50>
 800a752:	4620      	mov	r0, r4
 800a754:	f000 f878 	bl	800a848 <_free_r>
 800a758:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a75a:	b111      	cbz	r1, 800a762 <_reclaim_reent+0x5a>
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 f873 	bl	800a848 <_free_r>
 800a762:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a764:	b111      	cbz	r1, 800a76c <_reclaim_reent+0x64>
 800a766:	4620      	mov	r0, r4
 800a768:	f000 f86e 	bl	800a848 <_free_r>
 800a76c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a76e:	b111      	cbz	r1, 800a776 <_reclaim_reent+0x6e>
 800a770:	4620      	mov	r0, r4
 800a772:	f000 f869 	bl	800a848 <_free_r>
 800a776:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a778:	b111      	cbz	r1, 800a780 <_reclaim_reent+0x78>
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 f864 	bl	800a848 <_free_r>
 800a780:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a782:	b111      	cbz	r1, 800a78a <_reclaim_reent+0x82>
 800a784:	4620      	mov	r0, r4
 800a786:	f000 f85f 	bl	800a848 <_free_r>
 800a78a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a78c:	b111      	cbz	r1, 800a794 <_reclaim_reent+0x8c>
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 f85a 	bl	800a848 <_free_r>
 800a794:	6a23      	ldr	r3, [r4, #32]
 800a796:	b14b      	cbz	r3, 800a7ac <_reclaim_reent+0xa4>
 800a798:	4620      	mov	r0, r4
 800a79a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a79e:	4718      	bx	r3
 800a7a0:	680e      	ldr	r6, [r1, #0]
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 f850 	bl	800a848 <_free_r>
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	e7bb      	b.n	800a724 <_reclaim_reent+0x1c>
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
 800a7ae:	bf00      	nop
 800a7b0:	24000014 	.word	0x24000014

0800a7b4 <_sbrk_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d06      	ldr	r5, [pc, #24]	@ (800a7d0 <_sbrk_r+0x1c>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	602b      	str	r3, [r5, #0]
 800a7c0:	f7f6 ff0a 	bl	80015d8 <_sbrk>
 800a7c4:	1c43      	adds	r3, r0, #1
 800a7c6:	d102      	bne.n	800a7ce <_sbrk_r+0x1a>
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	b103      	cbz	r3, 800a7ce <_sbrk_r+0x1a>
 800a7cc:	6023      	str	r3, [r4, #0]
 800a7ce:	bd38      	pop	{r3, r4, r5, pc}
 800a7d0:	240046bc 	.word	0x240046bc

0800a7d4 <__errno>:
 800a7d4:	4b01      	ldr	r3, [pc, #4]	@ (800a7dc <__errno+0x8>)
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	24000014 	.word	0x24000014

0800a7e0 <__libc_init_array>:
 800a7e0:	b570      	push	{r4, r5, r6, lr}
 800a7e2:	4d0d      	ldr	r5, [pc, #52]	@ (800a818 <__libc_init_array+0x38>)
 800a7e4:	4c0d      	ldr	r4, [pc, #52]	@ (800a81c <__libc_init_array+0x3c>)
 800a7e6:	1b64      	subs	r4, r4, r5
 800a7e8:	10a4      	asrs	r4, r4, #2
 800a7ea:	2600      	movs	r6, #0
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	d109      	bne.n	800a804 <__libc_init_array+0x24>
 800a7f0:	4d0b      	ldr	r5, [pc, #44]	@ (800a820 <__libc_init_array+0x40>)
 800a7f2:	4c0c      	ldr	r4, [pc, #48]	@ (800a824 <__libc_init_array+0x44>)
 800a7f4:	f000 f872 	bl	800a8dc <_init>
 800a7f8:	1b64      	subs	r4, r4, r5
 800a7fa:	10a4      	asrs	r4, r4, #2
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	42a6      	cmp	r6, r4
 800a800:	d105      	bne.n	800a80e <__libc_init_array+0x2e>
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	f855 3b04 	ldr.w	r3, [r5], #4
 800a808:	4798      	blx	r3
 800a80a:	3601      	adds	r6, #1
 800a80c:	e7ee      	b.n	800a7ec <__libc_init_array+0xc>
 800a80e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a812:	4798      	blx	r3
 800a814:	3601      	adds	r6, #1
 800a816:	e7f2      	b.n	800a7fe <__libc_init_array+0x1e>
 800a818:	0800a998 	.word	0x0800a998
 800a81c:	0800a998 	.word	0x0800a998
 800a820:	0800a998 	.word	0x0800a998
 800a824:	0800a99c 	.word	0x0800a99c

0800a828 <__retarget_lock_acquire_recursive>:
 800a828:	4770      	bx	lr

0800a82a <__retarget_lock_release_recursive>:
 800a82a:	4770      	bx	lr

0800a82c <memcpy>:
 800a82c:	440a      	add	r2, r1
 800a82e:	4291      	cmp	r1, r2
 800a830:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a834:	d100      	bne.n	800a838 <memcpy+0xc>
 800a836:	4770      	bx	lr
 800a838:	b510      	push	{r4, lr}
 800a83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a83e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a842:	4291      	cmp	r1, r2
 800a844:	d1f9      	bne.n	800a83a <memcpy+0xe>
 800a846:	bd10      	pop	{r4, pc}

0800a848 <_free_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4605      	mov	r5, r0
 800a84c:	2900      	cmp	r1, #0
 800a84e:	d041      	beq.n	800a8d4 <_free_r+0x8c>
 800a850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a854:	1f0c      	subs	r4, r1, #4
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfb8      	it	lt
 800a85a:	18e4      	addlt	r4, r4, r3
 800a85c:	f7ff ff40 	bl	800a6e0 <__malloc_lock>
 800a860:	4a1d      	ldr	r2, [pc, #116]	@ (800a8d8 <_free_r+0x90>)
 800a862:	6813      	ldr	r3, [r2, #0]
 800a864:	b933      	cbnz	r3, 800a874 <_free_r+0x2c>
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	6014      	str	r4, [r2, #0]
 800a86a:	4628      	mov	r0, r5
 800a86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a870:	f7ff bf3c 	b.w	800a6ec <__malloc_unlock>
 800a874:	42a3      	cmp	r3, r4
 800a876:	d908      	bls.n	800a88a <_free_r+0x42>
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	1821      	adds	r1, r4, r0
 800a87c:	428b      	cmp	r3, r1
 800a87e:	bf01      	itttt	eq
 800a880:	6819      	ldreq	r1, [r3, #0]
 800a882:	685b      	ldreq	r3, [r3, #4]
 800a884:	1809      	addeq	r1, r1, r0
 800a886:	6021      	streq	r1, [r4, #0]
 800a888:	e7ed      	b.n	800a866 <_free_r+0x1e>
 800a88a:	461a      	mov	r2, r3
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	b10b      	cbz	r3, 800a894 <_free_r+0x4c>
 800a890:	42a3      	cmp	r3, r4
 800a892:	d9fa      	bls.n	800a88a <_free_r+0x42>
 800a894:	6811      	ldr	r1, [r2, #0]
 800a896:	1850      	adds	r0, r2, r1
 800a898:	42a0      	cmp	r0, r4
 800a89a:	d10b      	bne.n	800a8b4 <_free_r+0x6c>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	4401      	add	r1, r0
 800a8a0:	1850      	adds	r0, r2, r1
 800a8a2:	4283      	cmp	r3, r0
 800a8a4:	6011      	str	r1, [r2, #0]
 800a8a6:	d1e0      	bne.n	800a86a <_free_r+0x22>
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	6053      	str	r3, [r2, #4]
 800a8ae:	4408      	add	r0, r1
 800a8b0:	6010      	str	r0, [r2, #0]
 800a8b2:	e7da      	b.n	800a86a <_free_r+0x22>
 800a8b4:	d902      	bls.n	800a8bc <_free_r+0x74>
 800a8b6:	230c      	movs	r3, #12
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	e7d6      	b.n	800a86a <_free_r+0x22>
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	1821      	adds	r1, r4, r0
 800a8c0:	428b      	cmp	r3, r1
 800a8c2:	bf04      	itt	eq
 800a8c4:	6819      	ldreq	r1, [r3, #0]
 800a8c6:	685b      	ldreq	r3, [r3, #4]
 800a8c8:	6063      	str	r3, [r4, #4]
 800a8ca:	bf04      	itt	eq
 800a8cc:	1809      	addeq	r1, r1, r0
 800a8ce:	6021      	streq	r1, [r4, #0]
 800a8d0:	6054      	str	r4, [r2, #4]
 800a8d2:	e7ca      	b.n	800a86a <_free_r+0x22>
 800a8d4:	bd38      	pop	{r3, r4, r5, pc}
 800a8d6:	bf00      	nop
 800a8d8:	24004580 	.word	0x24004580

0800a8dc <_init>:
 800a8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8de:	bf00      	nop
 800a8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8e2:	bc08      	pop	{r3}
 800a8e4:	469e      	mov	lr, r3
 800a8e6:	4770      	bx	lr

0800a8e8 <_fini>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	bf00      	nop
 800a8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ee:	bc08      	pop	{r3}
 800a8f0:	469e      	mov	lr, r3
 800a8f2:	4770      	bx	lr
