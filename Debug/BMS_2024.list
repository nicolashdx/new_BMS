
BMS_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009368  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000060  24000000  0800967c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000624  24000060  080096dc  00020060  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000684  080096dc  00020684  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019b1c  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030fb  00000000  00000000  00039bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001540  00000000  00000000  0003cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000106e  00000000  00000000  0003e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a6a5  00000000  00000000  0003f296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d9b9  00000000  00000000  0007993b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00177dd0  00000000  00000000  000972f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005e9c  00000000  00000000  0020f0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000080  00000000  00000000  00214f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000060 	.word	0x24000060
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080095e8 	.word	0x080095e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000064 	.word	0x24000064
 80002d4:	080095e8 	.word	0x080095e8

080002d8 <BMS_Init>:
#include "defines.h"
#include "bms.h"
#include "ltc.h"


void BMS_Init(Master **BMS) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	*BMS = (Master*) calloc(1, sizeof(Master));
 80002e0:	f44f 71bc 	mov.w	r1, #376	; 0x178
 80002e4:	2001      	movs	r0, #1
 80002e6:	f009 f863 	bl	80093b0 <calloc>
 80002ea:	4603      	mov	r3, r0
 80002ec:	461a      	mov	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]
	LTC_config* config = (LTC_config*) calloc(1, sizeof(LTC_config));
 80002f2:	210c      	movs	r1, #12
 80002f4:	2001      	movs	r0, #1
 80002f6:	f009 f85b 	bl	80093b0 <calloc>
 80002fa:	4603      	mov	r3, r0
 80002fc:	60bb      	str	r3, [r7, #8]
	config->command = (LTC_command*) calloc(1 ,sizeof(LTC_command));
 80002fe:	2112      	movs	r1, #18
 8000300:	2001      	movs	r0, #1
 8000302:	f009 f855 	bl	80093b0 <calloc>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
	LTC_Init(config);
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f000 f8d8 	bl	80004c4 <LTC_Init>

	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000314:	2300      	movs	r3, #0
 8000316:	73fb      	strb	r3, [r7, #15]
 8000318:	e015      	b.n	8000346 <BMS_Init+0x6e>
		(*BMS)->slaves[i].config = config;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	215c      	movs	r1, #92	; 0x5c
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	3358      	adds	r3, #88	; 0x58
 800032a:	68ba      	ldr	r2, [r7, #8]
 800032c:	601a      	str	r2, [r3, #0]
		(*BMS)->slaves[i].sensor.ADDR = i;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	215c      	movs	r1, #92	; 0x5c
 8000336:	fb01 f303 	mul.w	r3, r1, r3
 800033a:	4413      	add	r3, r2
 800033c:	7bfa      	ldrb	r2, [r7, #15]
 800033e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	3301      	adds	r3, #1
 8000344:	73fb      	strb	r3, [r7, #15]
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	2b03      	cmp	r3, #3
 800034a:	d9e6      	bls.n	800031a <BMS_Init+0x42>
	}

	LTC_PEC_InitTable();
 800034c:	f000 f8f2 	bl	8000534 <LTC_PEC_InitTable>
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <BMS_Monitoring>:

void BMS_Monitoring(Master *BMS) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	LTC_SendBroadcastCommand(BMS->slaves[0].config, LTC_COMMAND_ADCV);
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000364:	f44f 7118 	mov.w	r1, #608	; 0x260
 8000368:	4618      	mov	r0, r3
 800036a:	f000 f92e 	bl	80005ca <LTC_SendBroadcastCommand>
	uint16_t temp_minV = UINT16_MAX;
 800036e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000372:	81fb      	strh	r3, [r7, #14]
	uint16_t temp_maxV = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	72fb      	strb	r3, [r7, #11]
 800037c:	e034      	b.n	80003e8 <BMS_Monitoring+0x90>
		LTC_Read(LTC_READ_CELL, &(BMS->slaves[i]));
 800037e:	7afb      	ldrb	r3, [r7, #11]
 8000380:	225c      	movs	r2, #92	; 0x5c
 8000382:	fb02 f303 	mul.w	r3, r2, r3
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	4413      	add	r3, r2
 800038a:	4619      	mov	r1, r3
 800038c:	2001      	movs	r0, #1
 800038e:	f000 f90b 	bl	80005a8 <LTC_Read>
		if(BMS->slaves[i].sensor.V_MIN < temp_minV)
 8000392:	7afb      	ldrb	r3, [r7, #11]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	215c      	movs	r1, #92	; 0x5c
 8000398:	fb01 f303 	mul.w	r3, r1, r3
 800039c:	4413      	add	r3, r2
 800039e:	3352      	adds	r3, #82	; 0x52
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	89fa      	ldrh	r2, [r7, #14]
 80003a4:	429a      	cmp	r2, r3
 80003a6:	d908      	bls.n	80003ba <BMS_Monitoring+0x62>
			temp_minV = BMS->slaves[i].sensor.V_MIN;
 80003a8:	7afb      	ldrb	r3, [r7, #11]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	215c      	movs	r1, #92	; 0x5c
 80003ae:	fb01 f303 	mul.w	r3, r1, r3
 80003b2:	4413      	add	r3, r2
 80003b4:	3352      	adds	r3, #82	; 0x52
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	81fb      	strh	r3, [r7, #14]
		if(BMS->slaves[i].sensor.V_MAX > temp_maxV)
 80003ba:	7afb      	ldrb	r3, [r7, #11]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	215c      	movs	r1, #92	; 0x5c
 80003c0:	fb01 f303 	mul.w	r3, r1, r3
 80003c4:	4413      	add	r3, r2
 80003c6:	3350      	adds	r3, #80	; 0x50
 80003c8:	881b      	ldrh	r3, [r3, #0]
 80003ca:	89ba      	ldrh	r2, [r7, #12]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d208      	bcs.n	80003e2 <BMS_Monitoring+0x8a>
			temp_maxV = BMS->slaves[i].sensor.V_MAX;
 80003d0:	7afb      	ldrb	r3, [r7, #11]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	215c      	movs	r1, #92	; 0x5c
 80003d6:	fb01 f303 	mul.w	r3, r1, r3
 80003da:	4413      	add	r3, r2
 80003dc:	3350      	adds	r3, #80	; 0x50
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	81bb      	strh	r3, [r7, #12]
	for(uint8_t i = 0; i < NUM_SLAVES; i++) {
 80003e2:	7afb      	ldrb	r3, [r7, #11]
 80003e4:	3301      	adds	r3, #1
 80003e6:	72fb      	strb	r3, [r7, #11]
 80003e8:	7afb      	ldrb	r3, [r7, #11]
 80003ea:	2b03      	cmp	r3, #3
 80003ec:	d9c7      	bls.n	800037e <BMS_Monitoring+0x26>
	}
	BMS->maxCellVoltage = temp_maxV;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	89ba      	ldrh	r2, [r7, #12]
 80003f2:	f8a3 2170 	strh.w	r2, [r3, #368]	; 0x170
	BMS->minCellVoltage = temp_minV;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	89fa      	ldrh	r2, [r7, #14]
 80003fa:	f8a3 2172 	strh.w	r2, [r3, #370]	; 0x172
	BMS->deltaVoltage = BMS->maxCellVoltage - BMS->minCellVoltage;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	f8b3 2170 	ldrh.w	r2, [r3, #368]	; 0x170
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	f8b3 3172 	ldrh.w	r3, [r3, #370]	; 0x172
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	b29a      	uxth	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
}
 8000414:	bf00      	nop
 8000416:	3710      	adds	r7, #16
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <DWT_Delay_Init+0x58>)
 8000422:	68db      	ldr	r3, [r3, #12]
 8000424:	4a13      	ldr	r2, [pc, #76]	; (8000474 <DWT_Delay_Init+0x58>)
 8000426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800042a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <DWT_Delay_Init+0x58>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4a10      	ldr	r2, [pc, #64]	; (8000474 <DWT_Delay_Init+0x58>)
 8000432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000436:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <DWT_Delay_Init+0x5c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <DWT_Delay_Init+0x5c>)
 800043e:	f023 0301 	bic.w	r3, r3, #1
 8000442:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <DWT_Delay_Init+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0b      	ldr	r2, [pc, #44]	; (8000478 <DWT_Delay_Init+0x5c>)
 800044a:	f043 0301 	orr.w	r3, r3, #1
 800044e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <DWT_Delay_Init+0x5c>)
 8000452:	2200      	movs	r2, #0
 8000454:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000456:	bf00      	nop
     __ASM volatile ("NOP");
 8000458:	bf00      	nop
  __ASM volatile ("NOP");
 800045a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <DWT_Delay_Init+0x5c>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000464:	2300      	movs	r3, #0
 8000466:	e000      	b.n	800046a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000468:	2301      	movs	r3, #1
  }
}
 800046a:	4618      	mov	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000edf0 	.word	0xe000edf0
 8000478:	e0001000 	.word	0xe0001000

0800047c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <DWT_Delay_us+0x40>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800048a:	f004 fe0d 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800048e:	4603      	mov	r3, r0
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <DWT_Delay_us+0x44>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	0c9b      	lsrs	r3, r3, #18
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	fb02 f303 	mul.w	r3, r2, r3
 800049e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80004a0:	bf00      	nop
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <DWT_Delay_us+0x40>)
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	1ad2      	subs	r2, r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d3f8      	bcc.n	80004a2 <DWT_Delay_us+0x26>
}
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	3710      	adds	r7, #16
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	e0001000 	.word	0xe0001000
 80004c0:	431bde83 	.word	0x431bde83

080004c4 <LTC_Init>:
#define BYTESWAP(word) ((word >> 8) + (word << 8))

extern SPI_HandleTypeDef hspi1;
static uint16_t pec_table[LTC_PEC_TABLE_LENGTH];

void LTC_Init(LTC_config *config) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	config->GPIO   = ALL_GPIOS_READ;
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7913      	ldrb	r3, [r2, #4]
 80004d0:	f043 033e 	orr.w	r3, r3, #62	; 0x3e
 80004d4:	7113      	strb	r3, [r2, #4]
	config->REFON  = REFERENCE_SHUTS_DOWN_AFTER_CONVERSIONS;
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7913      	ldrb	r3, [r2, #4]
 80004da:	f36f 1386 	bfc	r3, #6, #1
 80004de:	7113      	strb	r3, [r2, #4]
	config->SWTRD  = SOFTWARE_TIMER_ENABLE_PIN_LOW;
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	7913      	ldrb	r3, [r2, #4]
 80004e4:	f36f 13c7 	bfc	r3, #7, #1
 80004e8:	7113      	strb	r3, [r2, #4]
	config->ADCOPT = SELECT_ADC_MODES_FAST;
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7953      	ldrb	r3, [r2, #5]
 80004ee:	f36f 0300 	bfc	r3, #0, #1
 80004f2:	7153      	strb	r3, [r2, #5]
	config->VUV    = DEFULT_VOLTAGE;
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	88d3      	ldrh	r3, [r2, #6]
 80004f8:	f36f 030b 	bfc	r3, #0, #12
 80004fc:	80d3      	strh	r3, [r2, #6]
	config->VOV    = DEFULT_VOLTAGE;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	811a      	strh	r2, [r3, #8]
	config->DCTO   = DISCHARGE_DISABLE;
 8000504:	687a      	ldr	r2, [r7, #4]
 8000506:	7a93      	ldrb	r3, [r2, #10]
 8000508:	f36f 0303 	bfc	r3, #0, #4
 800050c:	7293      	strb	r3, [r2, #10]
	config->command->MD  = MD_FILTRED;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000516:	809a      	strh	r2, [r3, #4]
	config->command->DCP = DCP_PERMITED;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2210      	movs	r2, #16
 800051e:	80da      	strh	r2, [r3, #6]
	LTC_SendBroadcastCommand(config, LTC_COMMAND_WRCOMM);
 8000520:	f240 7121 	movw	r1, #1825	; 0x721
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f000 f850 	bl	80005ca <LTC_SendBroadcastCommand>
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <LTC_PEC_InitTable>:

void LTC_PEC_InitTable() {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
	uint16_t remainder;
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	e026      	b.n	800058e <LTC_PEC_InitTable+0x5a>
		remainder = i << 7;
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	b29b      	uxth	r3, r3
 8000544:	01db      	lsls	r3, r3, #7
 8000546:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 8000548:	2308      	movs	r3, #8
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	e014      	b.n	8000578 <LTC_PEC_InitTable+0x44>
			if(remainder & 0x4000) {
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	2b00      	cmp	r3, #0
 8000556:	d009      	beq.n	800056c <LTC_PEC_InitTable+0x38>
				remainder = remainder << 1;
 8000558:	89fb      	ldrh	r3, [r7, #14]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	81fb      	strh	r3, [r7, #14]
				remainder = remainder ^ 0x4599;
 800055e:	89fb      	ldrh	r3, [r7, #14]
 8000560:	f483 438b 	eor.w	r3, r3, #17792	; 0x4580
 8000564:	f083 0319 	eor.w	r3, r3, #25
 8000568:	81fb      	strh	r3, [r7, #14]
 800056a:	e002      	b.n	8000572 <LTC_PEC_InitTable+0x3e>
			}
			else
				remainder = remainder << 1;
 800056c:	89fb      	ldrh	r3, [r7, #14]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	81fb      	strh	r3, [r7, #14]
		for(int bit = 8; bit > 0; --bit) {
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3b01      	subs	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	dce7      	bgt.n	800054e <LTC_PEC_InitTable+0x1a>
		}
		pec_table[i] = remainder&0xFFFF;
 800057e:	4909      	ldr	r1, [pc, #36]	; (80005a4 <LTC_PEC_InitTable+0x70>)
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	89fa      	ldrh	r2, [r7, #14]
 8000584:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0; i < LTC_PEC_TABLE_LENGTH; i++) {
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3301      	adds	r3, #1
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	2bff      	cmp	r3, #255	; 0xff
 8000592:	ddd5      	ble.n	8000540 <LTC_PEC_InitTable+0xc>
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2400007c 	.word	0x2400007c

080005a8 <LTC_Read>:
	do{
		LTC_SendAddressedCommand(slave, LTC_COMMAND_PLADC);
	}while(!slave->config->ADC_READY);
}

void LTC_Read(uint8_t LTC_READ, Slave *slave){
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
	slave->config->command->BROADCAST = false;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	709a      	strb	r2, [r3, #2]

}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LTC_SendBroadcastCommand>:

void LTC_SendBroadcastCommand(LTC_config *config, uint16_t command_name) {
 80005ca:	b580      	push	{r7, lr}
 80005cc:	b086      	sub	sp, #24
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
	uint16_t tx_data[4] = {0, 0, 0, 0};
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
	uint16_t rx_data[4] = {0, 0, 0, 0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
	config->command->NAME = command_name;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	887a      	ldrh	r2, [r7, #2]
 80005f0:	801a      	strh	r2, [r3, #0]
	LTC_Communication(config, tx_data, rx_data);
 80005f2:	f107 0208 	add.w	r2, r7, #8
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f812 	bl	8000626 <LTC_Communication>
}
 8000602:	bf00      	nop
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <LTC_StartTrasmission>:
	default:
		break;
	}
}

void LTC_StartTrasmission(){
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
	LTC_ChipSelect(RESET);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 f82a 	bl	8000668 <LTC_ChipSelect>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <LTC_EndTramission>:

void LTC_EndTramission() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	LTC_ChipSelect(SET);
 800061c:	2001      	movs	r0, #1
 800061e:	f000 f823 	bl	8000668 <LTC_ChipSelect>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}

08000626 <LTC_Communication>:

void LTC_Communication(LTC_config *config, uint16_t* tx_data, uint16_t* rx_data) {
 8000626:	b580      	push	{r7, lr}
 8000628:	b086      	sub	sp, #24
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
	uint16_t command = LTC_MakeCommand(config->command);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f84f 	bl	80006da <LTC_MakeCommand>
 800063c:	4603      	mov	r3, r0
 800063e:	82fb      	strh	r3, [r7, #22]
	LTC_WakeUp();
 8000640:	f000 f840 	bl	80006c4 <LTC_WakeUp>
	LTC_StartTrasmission();
 8000644:	f7ff ffe1 	bl	800060a <LTC_StartTrasmission>
	LTC_TransmitCommand(command);
 8000648:	8afb      	ldrh	r3, [r7, #22]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f916 	bl	800087c <LTC_TransmitCommand>
	LTC_TransmitReceive(command, tx_data, rx_data);
 8000650:	8afb      	ldrh	r3, [r7, #22]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	68b9      	ldr	r1, [r7, #8]
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f928 	bl	80008ac <LTC_TransmitReceive>
	LTC_EndTramission();
 800065c:	f7ff ffdc 	bl	8000618 <LTC_EndTramission>
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <LTC_ChipSelect>:
	tx_data[0] = (slave->config->ADCOPT << 8) | (slave->config->SWTRD << 9) | (slave->config->REFON << 10) | (slave->config->GPIO << 11) | (slave->config->VUV);
	tx_data[1] = (slave->config->VUV >> 8) | (slave->config->VOV << 4);
	tx_data[2] |= ((slave->sensor.CELL_TO_DISCHARGE & 0xff) << 8) | ((slave->sensor.CELL_TO_DISCHARGE & 0xf00) >> 8) | ((slave->config->DCTO & 0xf) << 4);
}

void LTC_ChipSelect(uint8_t level) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ISOSPI_CS_GPIO_Port, ISOSPI_CS_Pin , level);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	461a      	mov	r2, r3
 8000676:	2120      	movs	r1, #32
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <LTC_ChipSelect+0x24>)
 800067a:	f003 fc03 	bl	8003e84 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 800067e:	200a      	movs	r0, #10
 8000680:	f7ff fefc 	bl	800047c <DWT_Delay_us>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	58020000 	.word	0x58020000

08000690 <LTC_SPI>:


uint16_t LTC_SPI(uint16_t Tx_data) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af02      	add	r7, sp, #8
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	uint16_t Rx_data = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,(uint8_t *) &Tx_data, (uint8_t *) &Rx_data, 1, 50);
 800069e:	f107 020e 	add.w	r2, r7, #14
 80006a2:	1db9      	adds	r1, r7, #6
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2301      	movs	r3, #1
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <LTC_SPI+0x30>)
 80006ac:	f007 fb7a 	bl	8007da4 <HAL_SPI_TransmitReceive>
	return(BYTESWAP(Rx_data));
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	ba5b      	rev16	r3, r3
 80006b4:	b29b      	uxth	r3, r3
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	240003d4 	.word	0x240003d4

080006c4 <LTC_WakeUp>:

void LTC_WakeUp() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	LTC_StartTrasmission();
 80006c8:	f7ff ff9f 	bl	800060a <LTC_StartTrasmission>
	LTC_SPI(0);
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ffdf 	bl	8000690 <LTC_SPI>
	LTC_EndTramission();
 80006d2:	f7ff ffa1 	bl	8000618 <LTC_EndTramission>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}

080006da <LTC_MakeCommand>:

uint16_t LTC_MakeCommand(LTC_command *command) {
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	switch(command->NAME) {
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	f240 426f 	movw	r2, #1135	; 0x46f
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d06d      	beq.n	80007ca <LTC_MakeCommand+0xf0>
 80006ee:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80006f2:	da75      	bge.n	80007e0 <LTC_MakeCommand+0x106>
 80006f4:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 80006f8:	d05c      	beq.n	80007b4 <LTC_MakeCommand+0xda>
 80006fa:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 80006fe:	dc6f      	bgt.n	80007e0 <LTC_MakeCommand+0x106>
 8000700:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 8000704:	d04b      	beq.n	800079e <LTC_MakeCommand+0xc4>
 8000706:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
 800070a:	dc69      	bgt.n	80007e0 <LTC_MakeCommand+0x106>
 800070c:	f240 420f 	movw	r2, #1039	; 0x40f
 8000710:	4293      	cmp	r3, r2
 8000712:	d039      	beq.n	8000788 <LTC_MakeCommand+0xae>
 8000714:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8000718:	da62      	bge.n	80007e0 <LTC_MakeCommand+0x106>
 800071a:	f240 4207 	movw	r2, #1031	; 0x407
 800071e:	4293      	cmp	r3, r2
 8000720:	d032      	beq.n	8000788 <LTC_MakeCommand+0xae>
 8000722:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000726:	da5b      	bge.n	80007e0 <LTC_MakeCommand+0x106>
 8000728:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800072c:	d00a      	beq.n	8000744 <LTC_MakeCommand+0x6a>
 800072e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000732:	dc55      	bgt.n	80007e0 <LTC_MakeCommand+0x106>
 8000734:	f240 2207 	movw	r2, #519	; 0x207
 8000738:	4293      	cmp	r3, r2
 800073a:	d025      	beq.n	8000788 <LTC_MakeCommand+0xae>
 800073c:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8000740:	d00f      	beq.n	8000762 <LTC_MakeCommand+0x88>
 8000742:	e04d      	b.n	80007e0 <LTC_MakeCommand+0x106>
		case LTC_COMMAND_ADCV:
			return command->NAME | command->MD | command->DCP | command->CH;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	889b      	ldrh	r3, [r3, #4]
 800074c:	4313      	orrs	r3, r2
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	88db      	ldrh	r3, [r3, #6]
 8000754:	4313      	orrs	r3, r2
 8000756:	b29a      	uxth	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	891b      	ldrh	r3, [r3, #8]
 800075c:	4313      	orrs	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	e040      	b.n	80007e4 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADOW:
			return command->NAME | command->MD | command->PUP | command->DCP | command->CH;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	889b      	ldrh	r3, [r3, #4]
 800076a:	4313      	orrs	r3, r2
 800076c:	b29a      	uxth	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	89db      	ldrh	r3, [r3, #14]
 8000772:	4313      	orrs	r3, r2
 8000774:	b29a      	uxth	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	88db      	ldrh	r3, [r3, #6]
 800077a:	4313      	orrs	r3, r2
 800077c:	b29a      	uxth	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	891b      	ldrh	r3, [r3, #8]
 8000782:	4313      	orrs	r3, r2
 8000784:	b29b      	uxth	r3, r3
 8000786:	e02d      	b.n	80007e4 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_CVST:
		case LTC_COMMAND_AXST:
		case LTC_COMMAND_STATST:
			return command->NAME | command->MD | command->ST;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	881a      	ldrh	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	889b      	ldrh	r3, [r3, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	8a1b      	ldrh	r3, [r3, #16]
 8000798:	4313      	orrs	r3, r2
 800079a:	b29b      	uxth	r3, r3
 800079c:	e022      	b.n	80007e4 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADAX	:
			return command->NAME | command->MD | command->CHG;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	889b      	ldrh	r3, [r3, #4]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	895b      	ldrh	r3, [r3, #10]
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	e017      	b.n	80007e4 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADSTAT	:
			return command->NAME | command->MD | command->CHST;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	881a      	ldrh	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	889b      	ldrh	r3, [r3, #4]
 80007bc:	4313      	orrs	r3, r2
 80007be:	b29a      	uxth	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	899b      	ldrh	r3, [r3, #12]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	e00c      	b.n	80007e4 <LTC_MakeCommand+0x10a>
			break;

		case LTC_COMMAND_ADCVAX	:
			return command->NAME | command->MD | command->CHG;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	881a      	ldrh	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	889b      	ldrh	r3, [r3, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	895b      	ldrh	r3, [r3, #10]
 80007da:	4313      	orrs	r3, r2
 80007dc:	b29b      	uxth	r3, r3
 80007de:	e001      	b.n	80007e4 <LTC_MakeCommand+0x10a>
			break;

		default:
			return command->NAME;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	881b      	ldrh	r3, [r3, #0]
			break;
	}
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <LTC_PEC>:

uint16_t LTC_PEC(uint16_t *data , uint8_t len) {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
	int32_t remainder, address;
	remainder = LTC_PEC_SEED;
 80007fc:	2310      	movs	r3, #16
 80007fe:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	74fb      	strb	r3, [r7, #19]
 8000804:	e02a      	b.n	800085c <LTC_PEC+0x6c>
		address   = ((remainder >> 7) ^ ((data[i] >> 8) & 0xFF)) & 0xFF; //calculate PEC table address
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	11da      	asrs	r2, r3, #7
 800080a:	7cfb      	ldrb	r3, [r7, #19]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	440b      	add	r3, r1
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	0a1b      	lsrs	r3, r3, #8
 8000816:	b29b      	uxth	r3, r3
 8000818:	b2db      	uxtb	r3, r3
 800081a:	4053      	eors	r3, r2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	4914      	ldr	r1, [pc, #80]	; (8000878 <LTC_PEC+0x88>)
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800082c:	4053      	eors	r3, r2
 800082e:	617b      	str	r3, [r7, #20]
		address   = ((remainder >> 7) ^ (data[i] & 0xFF)) & 0xFF;    	 //calculate PEC table address
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	11da      	asrs	r2, r3, #7
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	440b      	add	r3, r1
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4053      	eors	r3, r2
 8000842:	b2db      	uxtb	r3, r3
 8000844:	60fb      	str	r3, [r7, #12]
		remainder = (remainder << 8 ) ^ pec_table[address];
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	021b      	lsls	r3, r3, #8
 800084a:	490b      	ldr	r1, [pc, #44]	; (8000878 <LTC_PEC+0x88>)
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000852:	4053      	eors	r3, r2
 8000854:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len; i++) {
 8000856:	7cfb      	ldrb	r3, [r7, #19]
 8000858:	3301      	adds	r3, #1
 800085a:	74fb      	strb	r3, [r7, #19]
 800085c:	7cfa      	ldrb	r2, [r7, #19]
 800085e:	78fb      	ldrb	r3, [r7, #3]
 8000860:	429a      	cmp	r2, r3
 8000862:	d3d0      	bcc.n	8000806 <LTC_PEC+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	b29b      	uxth	r3, r3
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b29b      	uxth	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	2400007c 	.word	0x2400007c

0800087c <LTC_TransmitCommand>:

void LTC_TransmitCommand(uint16_t command) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	uint16_t pec = LTC_PEC(&command, 1);
 8000886:	1dbb      	adds	r3, r7, #6
 8000888:	2101      	movs	r1, #1
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ffb0 	bl	80007f0 <LTC_PEC>
 8000890:	4603      	mov	r3, r0
 8000892:	81fb      	strh	r3, [r7, #14]
	LTC_SPI(command);
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fefa 	bl	8000690 <LTC_SPI>
	LTC_SPI(pec);
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fef6 	bl	8000690 <LTC_SPI>
}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <LTC_TransmitReceive>:

void LTC_TransmitReceive(uint16_t command, uint16_t* tx_data, uint16_t* rx_data) {
 80008ac:	b590      	push	{r4, r7, lr}
 80008ae:	b087      	sub	sp, #28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	81fb      	strh	r3, [r7, #14]
	if((command & 0x07FF) == LTC_COMMAND_WRCFGA) {
 80008ba:	89fb      	ldrh	r3, [r7, #14]
 80008bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d109      	bne.n	80008d8 <LTC_TransmitReceive+0x2c>
		uint16_t pec = LTC_PEC(tx_data, 3);
 80008c4:	2103      	movs	r1, #3
 80008c6:	68b8      	ldr	r0, [r7, #8]
 80008c8:	f7ff ff92 	bl	80007f0 <LTC_PEC>
 80008cc:	4603      	mov	r3, r0
 80008ce:	82bb      	strh	r3, [r7, #20]
		tx_data[3] = pec;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	3306      	adds	r3, #6
 80008d4:	8aba      	ldrh	r2, [r7, #20]
 80008d6:	801a      	strh	r2, [r3, #0]
	}
	if((tx_data[0] & 0x07FF) < LTC_COMMAND_ADCV) {
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	881b      	ldrh	r3, [r3, #0]
 80008dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008e0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80008e4:	da16      	bge.n	8000914 <LTC_TransmitReceive+0x68>
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 80008e6:	2300      	movs	r3, #0
 80008e8:	75fb      	strb	r3, [r7, #23]
 80008ea:	e010      	b.n	800090e <LTC_TransmitReceive+0x62>
			rx_data[i] = LTC_SPI(tx_data[i]);
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	8819      	ldrh	r1, [r3, #0]
 80008f6:	7dfb      	ldrb	r3, [r7, #23]
 80008f8:	005b      	lsls	r3, r3, #1
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	18d4      	adds	r4, r2, r3
 80008fe:	4608      	mov	r0, r1
 8000900:	f7ff fec6 	bl	8000690 <LTC_SPI>
 8000904:	4603      	mov	r3, r0
 8000906:	8023      	strh	r3, [r4, #0]
		for (uint8_t i = 0; i < SPI_BUFFER_LENGTH; ++i) {
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	3301      	adds	r3, #1
 800090c:	75fb      	strb	r3, [r7, #23]
 800090e:	7dfb      	ldrb	r3, [r7, #23]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d9eb      	bls.n	80008ec <LTC_TransmitReceive+0x40>
		}
	}
}
 8000914:	bf00      	nop
 8000916:	371c      	adds	r7, #28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd90      	pop	{r4, r7, pc}

0800091c <DWT_Delay_us>:
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <DWT_Delay_us+0x40>)
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800092a:	f004 fbbd 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800092e:	4603      	mov	r3, r0
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <DWT_Delay_us+0x44>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9b      	lsrs	r3, r3, #18
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000940:	bf00      	nop
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <DWT_Delay_us+0x40>)
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	1ad2      	subs	r2, r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3f8      	bcc.n	8000942 <DWT_Delay_us+0x26>
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e0001000 	.word	0xe0001000
 8000960:	431bde83 	.word	0x431bde83

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fec7 	bl	80016fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f81d 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 fa89 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 fa43 	bl	8000e00 <MX_DMA_Init>
  MX_FDCAN1_Init();
 800097a:	f000 f8fb 	bl	8000b74 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800097e:	f000 f99d 	bl	8000cbc <MX_SPI1_Init>
  MX_ADC2_Init();
 8000982:	f000 f891 	bl	8000aa8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000986:	f000 f959 	bl	8000c3c <MX_I2C1_Init>
  MX_USART1_Init();
 800098a:	f000 f9ed 	bl	8000d68 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 800098e:	f7ff fd45 	bl	800041c <DWT_Delay_Init>


  Master *BMS;
  BMS_Init(&BMS);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fc9f 	bl	80002d8 <BMS_Init>


  DWT_Delay_us(50000);
 800099a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800099e:	f7ff ffbd 	bl	800091c <DWT_Delay_us>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMS_Monitoring(BMS);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fcd7 	bl	8000358 <BMS_Monitoring>
 80009aa:	e7fa      	b.n	80009a2 <main+0x3e>

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09c      	sub	sp, #112	; 0x70
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b6:	224c      	movs	r2, #76	; 0x4c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f008 fdc2 	bl	8009544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2220      	movs	r2, #32
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f008 fdbc 	bl	8009544 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f003 fba7 	bl	8004120 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <SystemClock_Config+0xf4>)
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	4a31      	ldr	r2, [pc, #196]	; (8000aa0 <SystemClock_Config+0xf4>)
 80009dc:	f023 0301 	bic.w	r3, r3, #1
 80009e0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <SystemClock_Config+0xf4>)
 80009e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <SystemClock_Config+0xf8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f4:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <SystemClock_Config+0xf8>)
 80009f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <SystemClock_Config+0xf8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a08:	bf00      	nop
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <SystemClock_Config+0xf8>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a16:	d1f8      	bne.n	8000a0a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2340      	movs	r3, #64	; 0x40
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a30:	2309      	movs	r3, #9
 8000a32:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a40:	230c      	movs	r3, #12
 8000a42:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a44:	2302      	movs	r3, #2
 8000a46:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4618      	mov	r0, r3
 8000a54:	f003 fb9e 	bl	8004194 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a5e:	f000 fb01 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	233f      	movs	r3, #63	; 0x3f
 8000a64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a76:	2340      	movs	r3, #64	; 0x40
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 ffdd 	bl	8004a48 <HAL_RCC_ClockConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000a94:	f000 fae6 	bl	8001064 <Error_Handler>
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3770      	adds	r7, #112	; 0x70
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800

08000aa8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
 8000abc:	615a      	str	r2, [r3, #20]
 8000abe:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ac0:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ac2:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <MX_ADC2_Init+0xc0>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000acc:	4b25      	ldr	r3, [pc, #148]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad2:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000aea:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000afc:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000b1e:	f001 f817 	bl	8001b50 <HAL_ADC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b28:	f000 fa9c 	bl	8001064 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_ADC2_Init+0xc4>)
 8000b2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b30:	2306      	movs	r3, #6
 8000b32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <MX_ADC2_Init+0xc8>)
 8000b3a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_ADC2_Init+0xbc>)
 8000b4e:	f001 f9a1 	bl	8001e94 <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000b58:	f000 fa84 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	3720      	adds	r7, #32
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2400027c 	.word	0x2400027c
 8000b68:	40022100 	.word	0x40022100
 8000b6c:	2a000400 	.word	0x2a000400
 8000b70:	47ff0000 	.word	0x47ff0000

08000b74 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b7a:	4a2f      	ldr	r2, [pc, #188]	; (8000c38 <MX_FDCAN1_Init+0xc4>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000ba2:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ba8:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000c1c:	2204      	movs	r2, #4
 8000c1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <MX_FDCAN1_Init+0xc0>)
 8000c22:	f002 fc1b 	bl	800345c <HAL_FDCAN_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c2c:	f000 fa1a 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	240002e0 	.word	0x240002e0
 8000c38:	4000a000 	.word	0x4000a000

08000c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c42:	4a1c      	ldr	r2, [pc, #112]	; (8000cb4 <MX_I2C1_Init+0x78>)
 8000c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c48:	4a1b      	ldr	r2, [pc, #108]	; (8000cb8 <MX_I2C1_Init+0x7c>)
 8000c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c52:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c78:	f003 f91e 	bl	8003eb8 <HAL_I2C_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c82:	f000 f9ef 	bl	8001064 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c8a:	f003 f9b1 	bl	8003ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c94:	f000 f9e6 	bl	8001064 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_I2C1_Init+0x74>)
 8000c9c:	f003 f9f3 	bl	8004086 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 f9dd 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000380 	.word	0x24000380
 8000cb4:	40005400 	.word	0x40005400
 8000cb8:	00707cbb 	.word	0x00707cbb

08000cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cc2:	4a28      	ldr	r2, [pc, #160]	; (8000d64 <MX_SPI1_Init+0xa8>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cda:	4b21      	ldr	r3, [pc, #132]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce0:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000ce8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d00:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0c:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d12:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <MX_SPI1_Init+0xa4>)
 8000d4c:	f006 ff06 	bl	8007b5c <HAL_SPI_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000d56:	f000 f985 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	240003d4 	.word	0x240003d4
 8000d64:	40013000 	.word	0x40013000

08000d68 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <MX_USART1_Init+0x94>)
 8000d70:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_USART1_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_USART1_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  husart1.Init.ClockPrescaler = USART_PRESCALER_DIV1;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_USART1_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  husart1.SlaveMode = USART_SLAVEMODE_DISABLE;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_USART1_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_USART1_Init+0x90>)
 8000db2:	f007 fc1a 	bl	80085ea <HAL_USART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART1_Init+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f952 	bl	8001064 <Error_Handler>
  }
  if (HAL_USARTEx_SetTxFifoThreshold(&husart1, USART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_USART1_Init+0x90>)
 8000dc4:	f008 fa2e 	bl	8009224 <HAL_USARTEx_SetTxFifoThreshold>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_Init+0x6a>
  {
    Error_Handler();
 8000dce:	f000 f949 	bl	8001064 <Error_Handler>
  }
  if (HAL_USARTEx_SetRxFifoThreshold(&husart1, USART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <MX_USART1_Init+0x90>)
 8000dd6:	f008 fa63 	bl	80092a0 <HAL_USARTEx_SetRxFifoThreshold>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART1_Init+0x7c>
  {
    Error_Handler();
 8000de0:	f000 f940 	bl	8001064 <Error_Handler>
  }
  if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_USART1_Init+0x90>)
 8000de6:	f008 f9e4 	bl	80091b2 <HAL_USARTEx_DisableFifoMode>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART1_Init+0x8c>
  {
    Error_Handler();
 8000df0:	f000 f938 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2400045c 	.word	0x2400045c
 8000dfc:	40011000 	.word	0x40011000

08000e00 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_DMA_Init+0x7c>)
 8000e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <MX_DMA_Init+0x7c>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_DMA_Init+0x7c>)
 8000e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Stream0 */
  hdma_dma_generator0.Instance = DMA1_Stream0;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e26:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <MX_DMA_Init+0x84>)
 8000e28:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e42:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  hdma_dma_generator0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <MX_DMA_Init+0x80>)
 8000e64:	f001 fd62 	bl	800292c <HAL_DMA_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_DMA_Init+0x72>
  {
    Error_Handler( );
 8000e6e:	f000 f8f9 	bl	8001064 <Error_Handler>
  }

}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	58024400 	.word	0x58024400
 8000e80:	240004bc 	.word	0x240004bc
 8000e84:	40020010 	.word	0x40020010

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a6a      	ldr	r2, [pc, #424]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b68      	ldr	r3, [pc, #416]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ebc:	4b64      	ldr	r3, [pc, #400]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a63      	ldr	r2, [pc, #396]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b60      	ldr	r3, [pc, #384]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a5b      	ldr	r2, [pc, #364]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b59      	ldr	r3, [pc, #356]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a54      	ldr	r2, [pc, #336]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b51      	ldr	r3, [pc, #324]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b4a      	ldr	r3, [pc, #296]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b46      	ldr	r3, [pc, #280]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a45      	ldr	r2, [pc, #276]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <MX_GPIO_Init+0x1c8>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2180      	movs	r1, #128	; 0x80
 8000f56:	483f      	ldr	r0, [pc, #252]	; (8001054 <MX_GPIO_Init+0x1cc>)
 8000f58:	f002 ff94 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CHARGE_ENABLE_Pin|ERROR_LED_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2190      	movs	r1, #144	; 0x90
 8000f60:	483d      	ldr	r0, [pc, #244]	; (8001058 <MX_GPIO_Init+0x1d0>)
 8000f62:	f002 ff8f 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_GPIO_Pin PC15_GPIO_Pin PC14_GPIO_Pin */
  GPIO_InitStruct.Pin = PC13_GPIO_Pin|PC15_GPIO_Pin|PC14_GPIO_Pin;
 8000f66:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4838      	ldr	r0, [pc, #224]	; (800105c <MX_GPIO_Init+0x1d4>)
 8000f7c:	f002 fdd2 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f80:	2301      	movs	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f84:	2303      	movs	r3, #3
 8000f86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8c:	f107 031c 	add.w	r3, r7, #28
 8000f90:	4619      	mov	r1, r3
 8000f92:	4832      	ldr	r0, [pc, #200]	; (800105c <MX_GPIO_Init+0x1d4>)
 8000f94:	f002 fdc6 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reset_Eletrobuild_Pin */
  GPIO_InitStruct.Pin = Reset_Eletrobuild_Pin;
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Reset_Eletrobuild_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	482c      	ldr	r0, [pc, #176]	; (8001060 <MX_GPIO_Init+0x1d8>)
 8000fae:	f002 fdb9 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4822      	ldr	r0, [pc, #136]	; (8001058 <MX_GPIO_Init+0x1d0>)
 8000fd0:	f002 fda8 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4819      	ldr	r0, [pc, #100]	; (8001058 <MX_GPIO_Init+0x1d0>)
 8000ff2:	f002 fd97 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_DEBUG_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin;
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4619      	mov	r1, r3
 800100c:	4811      	ldr	r0, [pc, #68]	; (8001054 <MX_GPIO_Init+0x1cc>)
 800100e:	f002 fd89 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHARGE_ENABLE_Pin ERROR_LED_Pin */
  GPIO_InitStruct.Pin = CHARGE_ENABLE_Pin|ERROR_LED_Pin;
 8001012:	2390      	movs	r3, #144	; 0x90
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	480b      	ldr	r0, [pc, #44]	; (8001058 <MX_GPIO_Init+0x1d0>)
 800102a:	f002 fd7b 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIR_AUX_MINUS_Pin AIR_AUX_PLUS_Pin */
  GPIO_InitStruct.Pin = AIR_AUX_MINUS_Pin|AIR_AUX_PLUS_Pin;
 800102e:	2360      	movs	r3, #96	; 0x60
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_GPIO_Init+0x1d0>)
 8001042:	f002 fd6f 	bl	8003b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001046:	bf00      	nop
 8001048:	3730      	adds	r7, #48	; 0x30
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	58024400 	.word	0x58024400
 8001054:	58020c00 	.word	0x58020c00
 8001058:	58020400 	.word	0x58020400
 800105c:	58020800 	.word	0x58020800
 8001060:	58021000 	.word	0x58021000

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_MspInit+0x30>)
 8001078:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_MspInit+0x30>)
 800107e:	f043 0302 	orr.w	r3, r3, #2
 8001082:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_MspInit+0x30>)
 8001088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	58024400 	.word	0x58024400

080010a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0ba      	sub	sp, #232	; 0xe8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	22c0      	movs	r2, #192	; 0xc0
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f008 fa3d 	bl	8009544 <memset>
  if(hadc->Instance==ADC2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2c      	ldr	r2, [pc, #176]	; (8001180 <HAL_ADC_MspInit+0xdc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d150      	bne.n	8001176 <HAL_ADC_MspInit+0xd2>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010d8:	f04f 0300 	mov.w	r3, #0
 80010dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80010e4:	2309      	movs	r3, #9
 80010e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80010f8:	2320      	movs	r3, #32
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80010fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001102:	2300      	movs	r3, #0
 8001104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4618      	mov	r0, r3
 800110e:	f004 f827 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001118:	f7ff ffa4 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe0>)
 800111e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe0>)
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0xe0>)
 800112e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001132:	f003 0320 	and.w	r3, r3, #32
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe0>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a10      	ldr	r2, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe0>)
 8001142:	f043 0304 	orr.w	r3, r3, #4
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe0>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_INP10
    PC1     ------> ADC2_INN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001158:	2303      	movs	r3, #3
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_ADC_MspInit+0xe4>)
 8001172:	f002 fcd7 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	37e8      	adds	r7, #232	; 0xe8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40022100 	.word	0x40022100
 8001184:	58024400 	.word	0x58024400
 8001188:	58020800 	.word	0x58020800

0800118c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0ba      	sub	sp, #232	; 0xe8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	22c0      	movs	r2, #192	; 0xc0
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f008 f9c9 	bl	8009544 <memset>
  if(hfdcan->Instance==FDCAN1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a27      	ldr	r2, [pc, #156]	; (8001254 <HAL_FDCAN_MspInit+0xc8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d147      	bne.n	800124c <HAL_FDCAN_MspInit+0xc0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80011c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 ffc3 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80011e0:	f7ff ff40 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_FDCAN_MspInit+0xcc>)
 80011e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011ea:	4a1b      	ldr	r2, [pc, #108]	; (8001258 <HAL_FDCAN_MspInit+0xcc>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_FDCAN_MspInit+0xcc>)
 80011f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <HAL_FDCAN_MspInit+0xcc>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a13      	ldr	r2, [pc, #76]	; (8001258 <HAL_FDCAN_MspInit+0xcc>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_FDCAN_MspInit+0xcc>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_Rx_Pin|CAN_Tx_Pin;
 8001220:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800123a:	2309      	movs	r3, #9
 800123c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001244:	4619      	mov	r1, r3
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_FDCAN_MspInit+0xd0>)
 8001248:	f002 fc6c 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	37e8      	adds	r7, #232	; 0xe8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	4000a000 	.word	0x4000a000
 8001258:	58024400 	.word	0x58024400
 800125c:	58020000 	.word	0x58020000

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ba      	sub	sp, #232	; 0xe8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001278:	f107 0310 	add.w	r3, r7, #16
 800127c:	22c0      	movs	r2, #192	; 0xc0
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f008 f95f 	bl	8009544 <memset>
  if(hi2c->Instance==I2C1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_I2C_MspInit+0xc8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d146      	bne.n	800131e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001290:	f04f 0208 	mov.w	r2, #8
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0310 	add.w	r3, r7, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f003 ff5a 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80012b2:	f7ff fed7 	bl	8001064 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_I2C_MspInit+0xcc>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <HAL_I2C_MspInit+0xcc>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_I2C_MspInit+0xcc>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ee:	2304      	movs	r3, #4
 80012f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <HAL_I2C_MspInit+0xd0>)
 80012fc:	f002 fc12 	bl	8003b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_I2C_MspInit+0xcc>)
 8001302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001306:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_I2C_MspInit+0xcc>)
 8001308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800130c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_I2C_MspInit+0xcc>)
 8001312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37e8      	adds	r7, #232	; 0xe8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40005400 	.word	0x40005400
 800132c:	58024400 	.word	0x58024400
 8001330:	58020400 	.word	0x58020400

08001334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ba      	sub	sp, #232	; 0xe8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	22c0      	movs	r2, #192	; 0xc0
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f008 f8f5 	bl	8009544 <memset>
  if(hspi->Instance==SPI1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a26      	ldr	r2, [pc, #152]	; (80013f8 <HAL_SPI_MspInit+0xc4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d144      	bne.n	80013ee <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001364:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001370:	2300      	movs	r3, #0
 8001372:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	4618      	mov	r0, r3
 800137a:	f003 fef1 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001384:	f7ff fe6e 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001388:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <HAL_SPI_MspInit+0xc8>)
 800138a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_SPI_MspInit+0xc8>)
 8001390:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001394:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_SPI_MspInit+0xc8>)
 800139a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800139e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_SPI_MspInit+0xc8>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4a13      	ldr	r2, [pc, #76]	; (80013fc <HAL_SPI_MspInit+0xc8>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_SPI_MspInit+0xc8>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013c4:	23e0      	movs	r3, #224	; 0xe0
 80013c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013dc:	2305      	movs	r3, #5
 80013de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_SPI_MspInit+0xcc>)
 80013ea:	f002 fb9b 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	37e8      	adds	r7, #232	; 0xe8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40013000 	.word	0x40013000
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020000 	.word	0x58020000

08001404 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b0ba      	sub	sp, #232	; 0xe8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	22c0      	movs	r2, #192	; 0xc0
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f008 f88d 	bl	8009544 <memset>
  if(husart->Instance==USART1)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_USART_MspInit+0xc8>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d146      	bne.n	80014c2 <HAL_USART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001434:	f04f 0201 	mov.w	r2, #1
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	4618      	mov	r0, r3
 800144c:	f003 fe88 	bl	8005160 <HAL_RCCEx_PeriphCLKConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_USART_MspInit+0x56>
    {
      Error_Handler();
 8001456:	f7ff fe05 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800145a:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <HAL_USART_MspInit+0xcc>)
 800145c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <HAL_USART_MspInit+0xcc>)
 8001462:	f043 0310 	orr.w	r3, r3, #16
 8001466:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <HAL_USART_MspInit+0xcc>)
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_USART_MspInit+0xcc>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <HAL_USART_MspInit+0xcc>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_USART_MspInit+0xcc>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|USART1_Tx_Pin|USART1_Rx_Pin;
 8001496:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800149a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b0:	2307      	movs	r3, #7
 80014b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_USART_MspInit+0xd0>)
 80014be:	f002 fb31 	bl	8003b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	37e8      	adds	r7, #232	; 0xe8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40011000 	.word	0x40011000
 80014d0:	58024400 	.word	0x58024400
 80014d4:	58020000 	.word	0x58020000

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <NMI_Handler+0x4>

080014de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <MemManage_Handler+0x4>

080014ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 f95c 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}

0800152c <_sbrk>:
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
 800155c:	f008 f80a 	bl	8009574 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	220c      	movs	r2, #12
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24080000 	.word	0x24080000
 800158c:	00000400 	.word	0x00000400
 8001590:	24000534 	.word	0x24000534
 8001594:	24000688 	.word	0x24000688

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <SystemInit+0xe4>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a36      	ldr	r2, [pc, #216]	; (800167c <SystemInit+0xe4>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <SystemInit+0xe8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d807      	bhi.n	80015c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <SystemInit+0xe8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <SystemInit+0xe8>)
 80015c2:	f043 0307 	orr.w	r3, r3, #7
 80015c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <SystemInit+0xec>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a2d      	ldr	r2, [pc, #180]	; (8001684 <SystemInit+0xec>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015d4:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <SystemInit+0xec>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <SystemInit+0xec>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4929      	ldr	r1, [pc, #164]	; (8001684 <SystemInit+0xec>)
 80015e0:	4b29      	ldr	r3, [pc, #164]	; (8001688 <SystemInit+0xf0>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <SystemInit+0xe8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <SystemInit+0xe8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 030f 	bic.w	r3, r3, #15
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <SystemInit+0xe8>)
 80015fc:	f043 0307 	orr.w	r3, r3, #7
 8001600:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <SystemInit+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <SystemInit+0xec>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001614:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <SystemInit+0xec>)
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <SystemInit+0xf4>)
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <SystemInit+0xec>)
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <SystemInit+0xf8>)
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <SystemInit+0xec>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <SystemInit+0xfc>)
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <SystemInit+0xec>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800162c:	4b15      	ldr	r3, [pc, #84]	; (8001684 <SystemInit+0xec>)
 800162e:	4a19      	ldr	r2, [pc, #100]	; (8001694 <SystemInit+0xfc>)
 8001630:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <SystemInit+0xec>)
 8001634:	2200      	movs	r2, #0
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <SystemInit+0xec>)
 800163a:	4a16      	ldr	r2, [pc, #88]	; (8001694 <SystemInit+0xfc>)
 800163c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <SystemInit+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <SystemInit+0xec>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0e      	ldr	r2, [pc, #56]	; (8001684 <SystemInit+0xec>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <SystemInit+0xec>)
 8001652:	2200      	movs	r2, #0
 8001654:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <SystemInit+0x100>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <SystemInit+0x104>)
 800165c:	4013      	ands	r3, r2
 800165e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001662:	d202      	bcs.n	800166a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <SystemInit+0x108>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800166a:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <SystemInit+0x10c>)
 800166c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001670:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00
 8001680:	52002000 	.word	0x52002000
 8001684:	58024400 	.word	0x58024400
 8001688:	eaf6ed7f 	.word	0xeaf6ed7f
 800168c:	02020200 	.word	0x02020200
 8001690:	01ff0000 	.word	0x01ff0000
 8001694:	01010280 	.word	0x01010280
 8001698:	5c001000 	.word	0x5c001000
 800169c:	ffff0000 	.word	0xffff0000
 80016a0:	51008108 	.word	0x51008108
 80016a4:	52004000 	.word	0x52004000

080016a8 <Reset_Handler>:
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0xe>
 80016ac:	f7ff ff74 	bl	8001598 <SystemInit>
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopFillZerobss+0x12>)
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <LoopFillZerobss+0x1a>)
 80016b6:	2300      	movs	r3, #0
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:
 80016ba:	58d4      	ldr	r4, [r2, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:
 80016c0:	18c4      	adds	r4, r0, r3
 80016c2:	428c      	cmp	r4, r1
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopFillZerobss+0x1e>)
 80016c8:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <LoopFillZerobss+0x22>)
 80016ca:	2300      	movs	r3, #0
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:
 80016d2:	42a2      	cmp	r2, r4
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>
 80016d6:	f007 ff53 	bl	8009580 <__libc_init_array>
 80016da:	f7ff f943 	bl	8000964 <main>
 80016de:	4770      	bx	lr
 80016e0:	24080000 	.word	0x24080000
 80016e4:	24000000 	.word	0x24000000
 80016e8:	24000060 	.word	0x24000060
 80016ec:	0800967c 	.word	0x0800967c
 80016f0:	24000060 	.word	0x24000060
 80016f4:	24000684 	.word	0x24000684

080016f8 <ADC3_IRQHandler>:
 80016f8:	e7fe      	b.n	80016f8 <ADC3_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001702:	2003      	movs	r0, #3
 8001704:	f001 f8e0 	bl	80028c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001708:	f003 fb54 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	4913      	ldr	r1, [pc, #76]	; (8001768 <HAL_Init+0x6c>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_Init+0x68>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_Init+0x6c>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_Init+0x70>)
 800173e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_Init+0x74>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f814 	bl	8001774 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e002      	b.n	800175c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001756:	f7ff fc8b 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400
 8001768:	0800964c 	.word	0x0800964c
 800176c:	24000004 	.word	0x24000004
 8001770:	24000000 	.word	0x24000000

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_InitTick+0x60>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e021      	b.n	80017cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_InitTick+0x64>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_InitTick+0x60>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 f8b7 	bl	8002912 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f001 f88f 	bl	80028de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x68>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400000c 	.word	0x2400000c
 80017d8:	24000000 	.word	0x24000000
 80017dc:	24000008 	.word	0x24000008

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2400000c 	.word	0x2400000c
 8001804:	24000538 	.word	0x24000538

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	24000538 	.word	0x24000538

08001820 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetREVID+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0c1b      	lsrs	r3, r3, #16
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	5c001000 	.word	0x5c001000

08001838 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	609a      	str	r2, [r3, #8]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	3360      	adds	r3, #96	; 0x60
 80018b2:	461a      	mov	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	430b      	orrs	r3, r1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	611a      	str	r2, [r3, #16]
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001912:	b480      	push	{r7}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3360      	adds	r3, #96	; 0x60
 8001922:	461a      	mov	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	431a      	orrs	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]
  }
}
 800193c:	bf00      	nop
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3330      	adds	r3, #48	; 0x30
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0a1b      	lsrs	r3, r3, #8
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	211f      	movs	r1, #31
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	401a      	ands	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	0e9b      	lsrs	r3, r3, #26
 8001980:	f003 011f 	and.w	r1, r3, #31
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	431a      	orrs	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001994:	bf00      	nop
 8001996:	371c      	adds	r7, #28
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3314      	adds	r3, #20
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	0e5b      	lsrs	r3, r3, #25
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	4413      	add	r3, r2
 80019be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	0d1b      	lsrs	r3, r3, #20
 80019c8:	f003 031f 	and.w	r3, r3, #31
 80019cc:	2107      	movs	r1, #7
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	401a      	ands	r2, r3
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	0d1b      	lsrs	r3, r3, #20
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a10:	43db      	mvns	r3, r3
 8001a12:	401a      	ands	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0318 	and.w	r3, r3, #24
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a1c:	40d9      	lsrs	r1, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	400b      	ands	r3, r1
 8001a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a26:	431a      	orrs	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	000fffff 	.word	0x000fffff

08001a40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a4e:	4013      	ands	r3, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6093      	str	r3, [r2, #8]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	5fffffc0 	.word	0x5fffffc0

08001a64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a78:	d101      	bne.n	8001a7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	6fffffc0 	.word	0x6fffffc0

08001ab4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ac8:	d101      	bne.n	8001ace <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <LL_ADC_IsEnabled+0x18>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <LL_ADC_IsEnabled+0x1a>
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d101      	bne.n	8001b1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e18f      	b.n	8001e8a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff fa93 	bl	80010a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff67 	bl	8001a64 <LL_ADC_IsDeepPowerDownEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff4d 	bl	8001a40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff82 	bl	8001ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d114      	bne.n	8001be0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ff66 	bl	8001a8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc0:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <HAL_ADC_Init+0x290>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	4a87      	ldr	r2, [pc, #540]	; (8001de4 <HAL_ADC_Init+0x294>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd2:	e002      	b.n	8001bda <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff65 	bl	8001ab4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10d      	bne.n	8001c0c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff76 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001c16:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 8129 	bne.w	8001e78 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 8125 	bne.w	8001e78 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff4a 	bl	8001adc <LL_ADC_IsEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d136      	bne.n	8001cbc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_ADC_Init+0x112>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a63      	ldr	r2, [pc, #396]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10e      	bne.n	8001c80 <HAL_ADC_Init+0x130>
 8001c62:	4861      	ldr	r0, [pc, #388]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c64:	f7ff ff3a 	bl	8001adc <LL_ADC_IsEnabled>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	4860      	ldr	r0, [pc, #384]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001c6c:	f7ff ff36 	bl	8001adc <LL_ADC_IsEnabled>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4323      	orrs	r3, r4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e008      	b.n	8001c92 <HAL_ADC_Init+0x142>
 8001c80:	485b      	ldr	r0, [pc, #364]	; (8001df0 <HAL_ADC_Init+0x2a0>)
 8001c82:	f7ff ff2b 	bl	8001adc <LL_ADC_IsEnabled>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_Init+0x15a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0x15e>
 8001caa:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_ADC_Init+0x2a4>)
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_Init+0x160>
 8001cae:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_ADC_Init+0x2a8>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7ff fdbe 	bl	8001838 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001cbc:	f7ff fdb0 	bl	8001820 <HAL_GetREVID>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d914      	bls.n	8001cf4 <HAL_ADC_Init+0x1a4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d110      	bne.n	8001cf4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7d5b      	ldrb	r3, [r3, #21]
 8001cd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cdc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ce2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7f1b      	ldrb	r3, [r3, #28]
 8001ce8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cec:	f043 030c 	orr.w	r3, r3, #12
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	e00d      	b.n	8001d10 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7d5b      	ldrb	r3, [r3, #21]
 8001cf8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cfe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d04:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7f1b      	ldrb	r3, [r3, #28]
 8001d0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7f1b      	ldrb	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	045b      	lsls	r3, r3, #17
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_ADC_Init+0x2ac>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fed1 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001d60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fede 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001d6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d15f      	bne.n	8001e34 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d15c      	bne.n	8001e34 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7d1b      	ldrb	r3, [r3, #20]
 8001d7e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_ADC_Init+0x2b0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d130      	bne.n	8001e08 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_ADC_Init+0x2b4>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dba:	3a01      	subs	r2, #1
 8001dbc:	0411      	lsls	r1, r2, #16
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	e01c      	b.n	8001e18 <HAL_ADC_Init+0x2c8>
 8001dde:	bf00      	nop
 8001de0:	24000000 	.word	0x24000000
 8001de4:	053e2d63 	.word	0x053e2d63
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40022100 	.word	0x40022100
 8001df0:	58026000 	.word	0x58026000
 8001df4:	40022300 	.word	0x40022300
 8001df8:	58026300 	.word	0x58026300
 8001dfc:	fff0c003 	.word	0xfff0c003
 8001e00:	ffffbffc 	.word	0xffffbffc
 8001e04:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fb8c 	bl	800254c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d10c      	bne.n	8001e56 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f023 010f 	bic.w	r1, r3, #15
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
 8001e54:	e007      	b.n	8001e66 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 020f 	bic.w	r2, r2, #15
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
 8001e76:	e007      	b.n	8001e88 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0210 	orr.w	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop

08001e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b0a1      	sub	sp, #132	; 0x84
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4a65      	ldr	r2, [pc, #404]	; (8002044 <HAL_ADC_ConfigChannel+0x1b0>)
 8001eae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x2a>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e32e      	b.n	800251c <HAL_ADC_ConfigChannel+0x688>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fe19 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 8313 	bne.w	80024fe <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db2c      	blt.n	8001f3a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d108      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x6a>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0e9b      	lsrs	r3, r3, #26
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	e016      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x98>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f06:	fa93 f3a3 	rbit	r3, r3
 8001f0a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f0e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001f16:	2320      	movs	r3, #32
 8001f18:	e003      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6812      	ldr	r2, [r2, #0]
 8001f30:	69d1      	ldr	r1, [r2, #28]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	430b      	orrs	r3, r1
 8001f38:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6818      	ldr	r0, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	6859      	ldr	r1, [r3, #4]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f7ff fcfe 	bl	8001948 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fdd6 	bl	8001b02 <LL_ADC_REG_IsConversionOngoing>
 8001f56:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fde3 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001f62:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80b8 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 80b4 	bne.w	80020dc <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	461a      	mov	r2, r3
 8001f82:	f7ff fd0d 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_ADC_ConfigChannel+0x1b4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f92:	d10b      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x118>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	e01d      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x154>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x13e>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	e00a      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x154>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d02c      	beq.n	800204c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	f7ff fc4e 	bl	80018a0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6818      	ldr	r0, [r3, #0]
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	7e5b      	ldrb	r3, [r3, #25]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_ADC_ConfigChannel+0x186>
 8002014:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002018:	e000      	b.n	800201c <HAL_ADC_ConfigChannel+0x188>
 800201a:	2300      	movs	r3, #0
 800201c:	461a      	mov	r2, r3
 800201e:	f7ff fc78 	bl	8001912 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6919      	ldr	r1, [r3, #16]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	7e1b      	ldrb	r3, [r3, #24]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d102      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1a4>
 8002032:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002036:	e000      	b.n	800203a <HAL_ADC_ConfigChannel+0x1a6>
 8002038:	2300      	movs	r3, #0
 800203a:	461a      	mov	r2, r3
 800203c:	f7ff fc50 	bl	80018e0 <LL_ADC_SetDataRightShift>
 8002040:	e04c      	b.n	80020dc <HAL_ADC_ConfigChannel+0x248>
 8002042:	bf00      	nop
 8002044:	47ff0000 	.word	0x47ff0000
 8002048:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800206e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	429a      	cmp	r2, r3
 8002082:	d107      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002092:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	069b      	lsls	r3, r3, #26
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d107      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	069b      	lsls	r3, r3, #26
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d107      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fcfb 	bl	8001adc <LL_ADC_IsEnabled>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 8211 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6819      	ldr	r1, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f7ff fc7c 	bl	80019f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	4aa1      	ldr	r2, [pc, #644]	; (800238c <HAL_ADC_ConfigChannel+0x4f8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 812e 	bne.w	8002368 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x2a0>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2b09      	cmp	r3, #9
 800212a:	bf94      	ite	ls
 800212c:	2301      	movls	r3, #1
 800212e:	2300      	movhi	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	e019      	b.n	8002168 <HAL_ADC_ConfigChannel+0x2d4>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800213c:	fa93 f3a3 	rbit	r3, r3
 8002140:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800214c:	2320      	movs	r3, #32
 800214e:	e003      	b.n	8002158 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f003 031f 	and.w	r3, r3, #31
 800215e:	2b09      	cmp	r3, #9
 8002160:	bf94      	ite	ls
 8002162:	2301      	movls	r3, #1
 8002164:	2300      	movhi	r3, #0
 8002166:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002168:	2b00      	cmp	r3, #0
 800216a:	d079      	beq.n	8002260 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002174:	2b00      	cmp	r3, #0
 8002176:	d107      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x2f4>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	069b      	lsls	r3, r3, #26
 8002182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002186:	e015      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x320>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	fa93 f3a3 	rbit	r3, r3
 8002194:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002198:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800219a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80021a0:	2320      	movs	r3, #32
 80021a2:	e003      	b.n	80021ac <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80021a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	069b      	lsls	r3, r3, #26
 80021b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x340>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0e9b      	lsrs	r3, r3, #26
 80021c6:	3301      	adds	r3, #1
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2101      	movs	r1, #1
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	e017      	b.n	8002204 <HAL_ADC_ConfigChannel+0x370>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021dc:	fa93 f3a3 	rbit	r3, r3
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80021e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80021ec:	2320      	movs	r3, #32
 80021ee:	e003      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80021f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	3301      	adds	r3, #1
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	2101      	movs	r1, #1
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	ea42 0103 	orr.w	r1, r2, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10a      	bne.n	800222a <HAL_ADC_ConfigChannel+0x396>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e9b      	lsrs	r3, r3, #26
 800221a:	3301      	adds	r3, #1
 800221c:	f003 021f 	and.w	r2, r3, #31
 8002220:	4613      	mov	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	4413      	add	r3, r2
 8002226:	051b      	lsls	r3, r3, #20
 8002228:	e018      	b.n	800225c <HAL_ADC_ConfigChannel+0x3c8>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	fa93 f3a3 	rbit	r3, r3
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800223c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002242:	2320      	movs	r3, #32
 8002244:	e003      	b.n	800224e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800225c:	430b      	orrs	r3, r1
 800225e:	e07e      	b.n	800235e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002268:	2b00      	cmp	r3, #0
 800226a:	d107      	bne.n	800227c <HAL_ADC_ConfigChannel+0x3e8>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	069b      	lsls	r3, r3, #26
 8002276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227a:	e015      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x414>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002294:	2320      	movs	r3, #32
 8002296:	e003      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x434>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0e9b      	lsrs	r3, r3, #26
 80022ba:	3301      	adds	r3, #1
 80022bc:	f003 031f 	and.w	r3, r3, #31
 80022c0:	2101      	movs	r1, #1
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	e017      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x464>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa93 f3a3 	rbit	r3, r3
 80022d4:	61bb      	str	r3, [r7, #24]
  return result;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80022e0:	2320      	movs	r3, #32
 80022e2:	e003      	b.n	80022ec <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3301      	adds	r3, #1
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	ea42 0103 	orr.w	r1, r2, r3
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10d      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x490>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0e9b      	lsrs	r3, r3, #26
 800230e:	3301      	adds	r3, #1
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	3b1e      	subs	r3, #30
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002322:	e01b      	b.n	800235c <HAL_ADC_ConfigChannel+0x4c8>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	60fb      	str	r3, [r7, #12]
  return result;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	f003 021f 	and.w	r2, r3, #31
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	3b1e      	subs	r3, #30
 8002356:	051b      	lsls	r3, r3, #20
 8002358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800235c:	430b      	orrs	r3, r1
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	6892      	ldr	r2, [r2, #8]
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff fb1c 	bl	80019a0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	f280 80cf 	bge.w	8002510 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a06      	ldr	r2, [pc, #24]	; (8002390 <HAL_ADC_ConfigChannel+0x4fc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d004      	beq.n	8002386 <HAL_ADC_ConfigChannel+0x4f2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_ADC_ConfigChannel+0x500>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10a      	bne.n	800239c <HAL_ADC_ConfigChannel+0x508>
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <HAL_ADC_ConfigChannel+0x504>)
 8002388:	e009      	b.n	800239e <HAL_ADC_ConfigChannel+0x50a>
 800238a:	bf00      	nop
 800238c:	47ff0000 	.word	0x47ff0000
 8002390:	40022000 	.word	0x40022000
 8002394:	40022100 	.word	0x40022100
 8002398:	40022300 	.word	0x40022300
 800239c:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_ADC_ConfigChannel+0x690>)
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fa70 	bl	8001884 <LL_ADC_GetCommonPathInternalCh>
 80023a4:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5f      	ldr	r2, [pc, #380]	; (8002528 <HAL_ADC_ConfigChannel+0x694>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x526>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5d      	ldr	r2, [pc, #372]	; (800252c <HAL_ADC_ConfigChannel+0x698>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10e      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x544>
 80023ba:	485b      	ldr	r0, [pc, #364]	; (8002528 <HAL_ADC_ConfigChannel+0x694>)
 80023bc:	f7ff fb8e 	bl	8001adc <LL_ADC_IsEnabled>
 80023c0:	4604      	mov	r4, r0
 80023c2:	485a      	ldr	r0, [pc, #360]	; (800252c <HAL_ADC_ConfigChannel+0x698>)
 80023c4:	f7ff fb8a 	bl	8001adc <LL_ADC_IsEnabled>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4323      	orrs	r3, r4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf0c      	ite	eq
 80023d0:	2301      	moveq	r3, #1
 80023d2:	2300      	movne	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e008      	b.n	80023ea <HAL_ADC_ConfigChannel+0x556>
 80023d8:	4855      	ldr	r0, [pc, #340]	; (8002530 <HAL_ADC_ConfigChannel+0x69c>)
 80023da:	f7ff fb7f 	bl	8001adc <LL_ADC_IsEnabled>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d07d      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a50      	ldr	r2, [pc, #320]	; (8002534 <HAL_ADC_ConfigChannel+0x6a0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d130      	bne.n	800245a <HAL_ADC_ConfigChannel+0x5c6>
 80023f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12b      	bne.n	800245a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_ADC_ConfigChannel+0x69c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	f040 8081 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a45      	ldr	r2, [pc, #276]	; (8002528 <HAL_ADC_ConfigChannel+0x694>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d004      	beq.n	8002422 <HAL_ADC_ConfigChannel+0x58e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a43      	ldr	r2, [pc, #268]	; (800252c <HAL_ADC_ConfigChannel+0x698>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x592>
 8002422:	4a45      	ldr	r2, [pc, #276]	; (8002538 <HAL_ADC_ConfigChannel+0x6a4>)
 8002424:	e000      	b.n	8002428 <HAL_ADC_ConfigChannel+0x594>
 8002426:	4a3f      	ldr	r2, [pc, #252]	; (8002524 <HAL_ADC_ConfigChannel+0x690>)
 8002428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800242a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800242e:	4619      	mov	r1, r3
 8002430:	4610      	mov	r0, r2
 8002432:	f7ff fa14 	bl	800185e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002436:	4b41      	ldr	r3, [pc, #260]	; (800253c <HAL_ADC_ConfigChannel+0x6a8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	4a40      	ldr	r2, [pc, #256]	; (8002540 <HAL_ADC_ConfigChannel+0x6ac>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	099b      	lsrs	r3, r3, #6
 8002444:	3301      	adds	r3, #1
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800244a:	e002      	b.n	8002452 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	3b01      	subs	r3, #1
 8002450:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002458:	e05a      	b.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a39      	ldr	r2, [pc, #228]	; (8002544 <HAL_ADC_ConfigChannel+0x6b0>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d11e      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x60e>
 8002464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d119      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a2f      	ldr	r2, [pc, #188]	; (8002530 <HAL_ADC_ConfigChannel+0x69c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d14b      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <HAL_ADC_ConfigChannel+0x694>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_ADC_ConfigChannel+0x5f8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a29      	ldr	r2, [pc, #164]	; (800252c <HAL_ADC_ConfigChannel+0x698>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x5fc>
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_ADC_ConfigChannel+0x6a4>)
 800248e:	e000      	b.n	8002492 <HAL_ADC_ConfigChannel+0x5fe>
 8002490:	4a24      	ldr	r2, [pc, #144]	; (8002524 <HAL_ADC_ConfigChannel+0x690>)
 8002492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7ff f9df 	bl	800185e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a0:	e036      	b.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_ADC_ConfigChannel+0x6b4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d131      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d12c      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_ADC_ConfigChannel+0x69c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d127      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a18      	ldr	r2, [pc, #96]	; (8002528 <HAL_ADC_ConfigChannel+0x694>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x640>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_ADC_ConfigChannel+0x698>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x644>
 80024d4:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_ADC_ConfigChannel+0x6a4>)
 80024d6:	e000      	b.n	80024da <HAL_ADC_ConfigChannel+0x646>
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <HAL_ADC_ConfigChannel+0x690>)
 80024da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7ff f9bb 	bl	800185e <LL_ADC_SetCommonPathInternalCh>
 80024e8:	e012      	b.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	f043 0220 	orr.w	r2, r3, #32
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024fc:	e008      	b.n	8002510 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f043 0220 	orr.w	r2, r3, #32
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002518:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800251c:	4618      	mov	r0, r3
 800251e:	3784      	adds	r7, #132	; 0x84
 8002520:	46bd      	mov	sp, r7
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	58026300 	.word	0x58026300
 8002528:	40022000 	.word	0x40022000
 800252c:	40022100 	.word	0x40022100
 8002530:	58026000 	.word	0x58026000
 8002534:	cb840000 	.word	0xcb840000
 8002538:	40022300 	.word	0x40022300
 800253c:	24000000 	.word	0x24000000
 8002540:	053e2d63 	.word	0x053e2d63
 8002544:	c7520000 	.word	0xc7520000
 8002548:	cfb80000 	.word	0xcfb80000

0800254c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <ADC_ConfigureBoostMode+0x1f8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <ADC_ConfigureBoostMode+0x1c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a79      	ldr	r2, [pc, #484]	; (8002748 <ADC_ConfigureBoostMode+0x1fc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d109      	bne.n	800257c <ADC_ConfigureBoostMode+0x30>
 8002568:	4b78      	ldr	r3, [pc, #480]	; (800274c <ADC_ConfigureBoostMode+0x200>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e008      	b.n	800258e <ADC_ConfigureBoostMode+0x42>
 800257c:	4b74      	ldr	r3, [pc, #464]	; (8002750 <ADC_ConfigureBoostMode+0x204>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	bf14      	ite	ne
 8002588:	2301      	movne	r3, #1
 800258a:	2300      	moveq	r3, #0
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01c      	beq.n	80025cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002592:	f002 fd89 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8002596:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025a0:	d010      	beq.n	80025c4 <ADC_ConfigureBoostMode+0x78>
 80025a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025a6:	d873      	bhi.n	8002690 <ADC_ConfigureBoostMode+0x144>
 80025a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ac:	d002      	beq.n	80025b4 <ADC_ConfigureBoostMode+0x68>
 80025ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025b2:	d16d      	bne.n	8002690 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	60fb      	str	r3, [r7, #12]
        break;
 80025c2:	e068      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	60fb      	str	r3, [r7, #12]
        break;
 80025ca:	e064      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80025d0:	f04f 0100 	mov.w	r1, #0
 80025d4:	f003 ffce 	bl	8006574 <HAL_RCCEx_GetPeriphCLKFreq>
 80025d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025e2:	d051      	beq.n	8002688 <ADC_ConfigureBoostMode+0x13c>
 80025e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80025e8:	d854      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 80025ea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025ee:	d047      	beq.n	8002680 <ADC_ConfigureBoostMode+0x134>
 80025f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80025f4:	d84e      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 80025f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80025fa:	d03d      	beq.n	8002678 <ADC_ConfigureBoostMode+0x12c>
 80025fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002600:	d848      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 8002602:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002606:	d033      	beq.n	8002670 <ADC_ConfigureBoostMode+0x124>
 8002608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800260c:	d842      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 800260e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002612:	d029      	beq.n	8002668 <ADC_ConfigureBoostMode+0x11c>
 8002614:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002618:	d83c      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 800261a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800261e:	d01a      	beq.n	8002656 <ADC_ConfigureBoostMode+0x10a>
 8002620:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002624:	d836      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 8002626:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800262a:	d014      	beq.n	8002656 <ADC_ConfigureBoostMode+0x10a>
 800262c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002630:	d830      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 8002632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002636:	d00e      	beq.n	8002656 <ADC_ConfigureBoostMode+0x10a>
 8002638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800263c:	d82a      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 800263e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002642:	d008      	beq.n	8002656 <ADC_ConfigureBoostMode+0x10a>
 8002644:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002648:	d824      	bhi.n	8002694 <ADC_ConfigureBoostMode+0x148>
 800264a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800264e:	d002      	beq.n	8002656 <ADC_ConfigureBoostMode+0x10a>
 8002650:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002654:	d11e      	bne.n	8002694 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0c9b      	lsrs	r3, r3, #18
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	60fb      	str	r3, [r7, #12]
        break;
 8002666:	e016      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	60fb      	str	r3, [r7, #12]
        break;
 800266e:	e012      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	60fb      	str	r3, [r7, #12]
        break;
 8002676:	e00e      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	60fb      	str	r3, [r7, #12]
        break;
 800267e:	e00a      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	09db      	lsrs	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
        break;
 8002686:	e006      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	60fb      	str	r3, [r7, #12]
        break;
 800268e:	e002      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002690:	bf00      	nop
 8002692:	e000      	b.n	8002696 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002694:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002696:	f7ff f8c3 	bl	8001820 <HAL_GetREVID>
 800269a:	4603      	mov	r3, r0
 800269c:	f241 0203 	movw	r2, #4099	; 0x1003
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d815      	bhi.n	80026d0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <ADC_ConfigureBoostMode+0x208>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d908      	bls.n	80026be <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026bc:	e03e      	b.n	800273c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	609a      	str	r2, [r3, #8]
}
 80026ce:	e035      	b.n	800273c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	; (8002758 <ADC_ConfigureBoostMode+0x20c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d808      	bhi.n	80026f0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80026ec:	609a      	str	r2, [r3, #8]
}
 80026ee:	e025      	b.n	800273c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a1a      	ldr	r2, [pc, #104]	; (800275c <ADC_ConfigureBoostMode+0x210>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d80a      	bhi.n	800270e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	e016      	b.n	800273c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a13      	ldr	r2, [pc, #76]	; (8002760 <ADC_ConfigureBoostMode+0x214>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d80a      	bhi.n	800272c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	e007      	b.n	800273c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40022000 	.word	0x40022000
 8002748:	40022100 	.word	0x40022100
 800274c:	40022300 	.word	0x40022300
 8002750:	58026300 	.word	0x58026300
 8002754:	01312d00 	.word	0x01312d00
 8002758:	005f5e10 	.word	0x005f5e10
 800275c:	00bebc20 	.word	0x00bebc20
 8002760:	017d7840 	.word	0x017d7840

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	4313      	orrs	r3, r2
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x40>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00
 80027a8:	05fa0000 	.word	0x05fa0000

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	6039      	str	r1, [r7, #0]
 80027d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0a      	blt.n	80027f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	490c      	ldr	r1, [pc, #48]	; (8002814 <__NVIC_SetPriority+0x4c>)
 80027e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	440b      	add	r3, r1
 80027ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027f0:	e00a      	b.n	8002808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	4908      	ldr	r1, [pc, #32]	; (8002818 <__NVIC_SetPriority+0x50>)
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	3b04      	subs	r3, #4
 8002800:	0112      	lsls	r2, r2, #4
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	440b      	add	r3, r1
 8002806:	761a      	strb	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000e100 	.word	0xe000e100
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f1c3 0307 	rsb	r3, r3, #7
 8002836:	2b04      	cmp	r3, #4
 8002838:	bf28      	it	cs
 800283a:	2304      	movcs	r3, #4
 800283c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3304      	adds	r3, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	d902      	bls.n	800284c <NVIC_EncodePriority+0x30>
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	3b03      	subs	r3, #3
 800284a:	e000      	b.n	800284e <NVIC_EncodePriority+0x32>
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	401a      	ands	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002864:	f04f 31ff 	mov.w	r1, #4294967295
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa01 f303 	lsl.w	r3, r1, r3
 800286e:	43d9      	mvns	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	4313      	orrs	r3, r2
         );
}
 8002876:	4618      	mov	r0, r3
 8002878:	3724      	adds	r7, #36	; 0x24
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002894:	d301      	bcc.n	800289a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2301      	movs	r3, #1
 8002898:	e00f      	b.n	80028ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <SysTick_Config+0x40>)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028a2:	210f      	movs	r1, #15
 80028a4:	f04f 30ff 	mov.w	r0, #4294967295
 80028a8:	f7ff ff8e 	bl	80027c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <SysTick_Config+0x40>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028b2:	4b04      	ldr	r3, [pc, #16]	; (80028c4 <SysTick_Config+0x40>)
 80028b4:	2207      	movs	r2, #7
 80028b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	e000e010 	.word	0xe000e010

080028c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff47 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	4603      	mov	r3, r0
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff5e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff90 	bl	800281c <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5f 	bl	80027c8 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffb2 	bl	8002884 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7fe ff68 	bl	8001808 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e316      	b.n	8002f72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a66      	ldr	r2, [pc, #408]	; (8002ae4 <HAL_DMA_Init+0x1b8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d04a      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <HAL_DMA_Init+0x1bc>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d045      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_DMA_Init+0x1c0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d040      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a62      	ldr	r2, [pc, #392]	; (8002af0 <HAL_DMA_Init+0x1c4>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d03b      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a60      	ldr	r2, [pc, #384]	; (8002af4 <HAL_DMA_Init+0x1c8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d036      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5f      	ldr	r2, [pc, #380]	; (8002af8 <HAL_DMA_Init+0x1cc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d031      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a5d      	ldr	r2, [pc, #372]	; (8002afc <HAL_DMA_Init+0x1d0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d02c      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a5c      	ldr	r2, [pc, #368]	; (8002b00 <HAL_DMA_Init+0x1d4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d027      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5a      	ldr	r2, [pc, #360]	; (8002b04 <HAL_DMA_Init+0x1d8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d022      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a59      	ldr	r2, [pc, #356]	; (8002b08 <HAL_DMA_Init+0x1dc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d01d      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <HAL_DMA_Init+0x1e0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d018      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a56      	ldr	r2, [pc, #344]	; (8002b10 <HAL_DMA_Init+0x1e4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a54      	ldr	r2, [pc, #336]	; (8002b14 <HAL_DMA_Init+0x1e8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a53      	ldr	r2, [pc, #332]	; (8002b18 <HAL_DMA_Init+0x1ec>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_DMA_Init+0x1f0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_DMA_Init+0xb8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a50      	ldr	r2, [pc, #320]	; (8002b20 <HAL_DMA_Init+0x1f4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_DMA_Init+0xbc>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_DMA_Init+0xbe>
 80029e8:	2300      	movs	r3, #0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 813b 	beq.w	8002c66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a37      	ldr	r2, [pc, #220]	; (8002ae4 <HAL_DMA_Init+0x1b8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d04a      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <HAL_DMA_Init+0x1bc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d045      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_DMA_Init+0x1c0>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d040      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a33      	ldr	r2, [pc, #204]	; (8002af0 <HAL_DMA_Init+0x1c4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d03b      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a31      	ldr	r2, [pc, #196]	; (8002af4 <HAL_DMA_Init+0x1c8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d036      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a30      	ldr	r2, [pc, #192]	; (8002af8 <HAL_DMA_Init+0x1cc>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d031      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	; (8002afc <HAL_DMA_Init+0x1d0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02c      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <HAL_DMA_Init+0x1d4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d027      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <HAL_DMA_Init+0x1d8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d022      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <HAL_DMA_Init+0x1dc>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d01d      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <HAL_DMA_Init+0x1e0>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d018      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <HAL_DMA_Init+0x1e4>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d013      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a25      	ldr	r2, [pc, #148]	; (8002b14 <HAL_DMA_Init+0x1e8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00e      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_DMA_Init+0x1ec>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d009      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a22      	ldr	r2, [pc, #136]	; (8002b1c <HAL_DMA_Init+0x1f0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_DMA_Init+0x174>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <HAL_DMA_Init+0x1f4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d108      	bne.n	8002ab2 <HAL_DMA_Init+0x186>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e007      	b.n	8002ac2 <HAL_DMA_Init+0x196>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0201 	bic.w	r2, r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ac2:	e02f      	b.n	8002b24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac4:	f7fe fea0 	bl	8001808 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d928      	bls.n	8002b24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2203      	movs	r2, #3
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e246      	b.n	8002f72 <HAL_DMA_Init+0x646>
 8002ae4:	40020010 	.word	0x40020010
 8002ae8:	40020028 	.word	0x40020028
 8002aec:	40020040 	.word	0x40020040
 8002af0:	40020058 	.word	0x40020058
 8002af4:	40020070 	.word	0x40020070
 8002af8:	40020088 	.word	0x40020088
 8002afc:	400200a0 	.word	0x400200a0
 8002b00:	400200b8 	.word	0x400200b8
 8002b04:	40020410 	.word	0x40020410
 8002b08:	40020428 	.word	0x40020428
 8002b0c:	40020440 	.word	0x40020440
 8002b10:	40020458 	.word	0x40020458
 8002b14:	40020470 	.word	0x40020470
 8002b18:	40020488 	.word	0x40020488
 8002b1c:	400204a0 	.word	0x400204a0
 8002b20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1c8      	bne.n	8002ac4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_DMA_Init+0x420>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d107      	bne.n	8002b88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b80:	4313      	orrs	r3, r2
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b88:	4b71      	ldr	r3, [pc, #452]	; (8002d50 <HAL_DMA_Init+0x424>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b71      	ldr	r3, [pc, #452]	; (8002d54 <HAL_DMA_Init+0x428>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b94:	d328      	bcc.n	8002be8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b28      	cmp	r3, #40	; 0x28
 8002b9c:	d903      	bls.n	8002ba6 <HAL_DMA_Init+0x27a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ba4:	d917      	bls.n	8002bd6 <HAL_DMA_Init+0x2aa>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b3e      	cmp	r3, #62	; 0x3e
 8002bac:	d903      	bls.n	8002bb6 <HAL_DMA_Init+0x28a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b42      	cmp	r3, #66	; 0x42
 8002bb4:	d90f      	bls.n	8002bd6 <HAL_DMA_Init+0x2aa>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b46      	cmp	r3, #70	; 0x46
 8002bbc:	d903      	bls.n	8002bc6 <HAL_DMA_Init+0x29a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b48      	cmp	r3, #72	; 0x48
 8002bc4:	d907      	bls.n	8002bd6 <HAL_DMA_Init+0x2aa>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b4e      	cmp	r3, #78	; 0x4e
 8002bcc:	d905      	bls.n	8002bda <HAL_DMA_Init+0x2ae>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b52      	cmp	r3, #82	; 0x52
 8002bd4:	d801      	bhi.n	8002bda <HAL_DMA_Init+0x2ae>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_DMA_Init+0x2b0>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f023 0307 	bic.w	r3, r3, #7
 8002bfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d117      	bne.n	8002c42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00e      	beq.n	8002c42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa8f 	bl	8003148 <DMA_CheckFifoParam>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e197      	b.n	8002f72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f9ca 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002c50:	4603      	mov	r3, r0
 8002c52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	223f      	movs	r2, #63	; 0x3f
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e0cd      	b.n	8002e02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3b      	ldr	r2, [pc, #236]	; (8002d58 <HAL_DMA_Init+0x42c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <HAL_DMA_Init+0x430>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a38      	ldr	r2, [pc, #224]	; (8002d60 <HAL_DMA_Init+0x434>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a36      	ldr	r2, [pc, #216]	; (8002d64 <HAL_DMA_Init+0x438>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a35      	ldr	r2, [pc, #212]	; (8002d68 <HAL_DMA_Init+0x43c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_DMA_Init+0x440>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a32      	ldr	r2, [pc, #200]	; (8002d70 <HAL_DMA_Init+0x444>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Init+0x38a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <HAL_DMA_Init+0x448>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Init+0x38e>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Init+0x390>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 8097 	beq.w	8002df0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a24      	ldr	r2, [pc, #144]	; (8002d58 <HAL_DMA_Init+0x42c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d021      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a22      	ldr	r2, [pc, #136]	; (8002d5c <HAL_DMA_Init+0x430>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d01c      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_DMA_Init+0x434>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d017      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <HAL_DMA_Init+0x438>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d012      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_DMA_Init+0x43c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00d      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <HAL_DMA_Init+0x440>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d008      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_DMA_Init+0x444>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <HAL_DMA_Init+0x3e4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_DMA_Init+0x448>)
 8002d0e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <HAL_DMA_Init+0x44c>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d021      	beq.n	8002d7c <HAL_DMA_Init+0x450>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	2b80      	cmp	r3, #128	; 0x80
 8002d3e:	d102      	bne.n	8002d46 <HAL_DMA_Init+0x41a>
 8002d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d44:	e01b      	b.n	8002d7e <HAL_DMA_Init+0x452>
 8002d46:	2300      	movs	r3, #0
 8002d48:	e019      	b.n	8002d7e <HAL_DMA_Init+0x452>
 8002d4a:	bf00      	nop
 8002d4c:	fe10803f 	.word	0xfe10803f
 8002d50:	5c001000 	.word	0x5c001000
 8002d54:	ffff0000 	.word	0xffff0000
 8002d58:	58025408 	.word	0x58025408
 8002d5c:	5802541c 	.word	0x5802541c
 8002d60:	58025430 	.word	0x58025430
 8002d64:	58025444 	.word	0x58025444
 8002d68:	58025458 	.word	0x58025458
 8002d6c:	5802546c 	.word	0x5802546c
 8002d70:	58025480 	.word	0x58025480
 8002d74:	58025494 	.word	0x58025494
 8002d78:	fffe000f 	.word	0xfffe000f
 8002d7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4b6e      	ldr	r3, [pc, #440]	; (8002f7c <HAL_DMA_Init+0x650>)
 8002dc4:	4413      	add	r3, r2
 8002dc6:	4a6e      	ldr	r2, [pc, #440]	; (8002f80 <HAL_DMA_Init+0x654>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f905 	bl	8002fe4 <DMA_CalcBaseAndBitshift>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2201      	movs	r2, #1
 8002de8:	409a      	lsls	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e008      	b.n	8002e02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2240      	movs	r2, #64	; 0x40
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0b7      	b.n	8002f72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a5f      	ldr	r2, [pc, #380]	; (8002f84 <HAL_DMA_Init+0x658>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d072      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_DMA_Init+0x65c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d06d      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5c      	ldr	r2, [pc, #368]	; (8002f8c <HAL_DMA_Init+0x660>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d068      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_DMA_Init+0x664>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d063      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a59      	ldr	r2, [pc, #356]	; (8002f94 <HAL_DMA_Init+0x668>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d05e      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a57      	ldr	r2, [pc, #348]	; (8002f98 <HAL_DMA_Init+0x66c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d059      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a56      	ldr	r2, [pc, #344]	; (8002f9c <HAL_DMA_Init+0x670>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d054      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <HAL_DMA_Init+0x674>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d04f      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a53      	ldr	r2, [pc, #332]	; (8002fa4 <HAL_DMA_Init+0x678>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d04a      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_DMA_Init+0x67c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d045      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a50      	ldr	r2, [pc, #320]	; (8002fac <HAL_DMA_Init+0x680>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d040      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a4e      	ldr	r2, [pc, #312]	; (8002fb0 <HAL_DMA_Init+0x684>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d03b      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a4d      	ldr	r2, [pc, #308]	; (8002fb4 <HAL_DMA_Init+0x688>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d036      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_DMA_Init+0x68c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d031      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_DMA_Init+0x690>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d02c      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a48      	ldr	r2, [pc, #288]	; (8002fc0 <HAL_DMA_Init+0x694>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d027      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a47      	ldr	r2, [pc, #284]	; (8002fc4 <HAL_DMA_Init+0x698>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <HAL_DMA_Init+0x69c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a44      	ldr	r2, [pc, #272]	; (8002fcc <HAL_DMA_Init+0x6a0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_DMA_Init+0x6a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_DMA_Init+0x6a8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a3f      	ldr	r2, [pc, #252]	; (8002fd8 <HAL_DMA_Init+0x6ac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3e      	ldr	r2, [pc, #248]	; (8002fdc <HAL_DMA_Init+0x6b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Init+0x5c6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <HAL_DMA_Init+0x6b4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_DMA_Init+0x5ca>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_DMA_Init+0x5cc>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d032      	beq.n	8002f62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f99f 	bl	8003240 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	2b80      	cmp	r3, #128	; 0x80
 8002f08:	d102      	bne.n	8002f10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d010      	beq.n	8002f50 <HAL_DMA_Init+0x624>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d80c      	bhi.n	8002f50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fa1c 	bl	8003374 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	e008      	b.n	8002f62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	a7fdabf8 	.word	0xa7fdabf8
 8002f80:	cccccccd 	.word	0xcccccccd
 8002f84:	40020010 	.word	0x40020010
 8002f88:	40020028 	.word	0x40020028
 8002f8c:	40020040 	.word	0x40020040
 8002f90:	40020058 	.word	0x40020058
 8002f94:	40020070 	.word	0x40020070
 8002f98:	40020088 	.word	0x40020088
 8002f9c:	400200a0 	.word	0x400200a0
 8002fa0:	400200b8 	.word	0x400200b8
 8002fa4:	40020410 	.word	0x40020410
 8002fa8:	40020428 	.word	0x40020428
 8002fac:	40020440 	.word	0x40020440
 8002fb0:	40020458 	.word	0x40020458
 8002fb4:	40020470 	.word	0x40020470
 8002fb8:	40020488 	.word	0x40020488
 8002fbc:	400204a0 	.word	0x400204a0
 8002fc0:	400204b8 	.word	0x400204b8
 8002fc4:	58025408 	.word	0x58025408
 8002fc8:	5802541c 	.word	0x5802541c
 8002fcc:	58025430 	.word	0x58025430
 8002fd0:	58025444 	.word	0x58025444
 8002fd4:	58025458 	.word	0x58025458
 8002fd8:	5802546c 	.word	0x5802546c
 8002fdc:	58025480 	.word	0x58025480
 8002fe0:	58025494 	.word	0x58025494

08002fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a42      	ldr	r2, [pc, #264]	; (80030fc <DMA_CalcBaseAndBitshift+0x118>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d04a      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a41      	ldr	r2, [pc, #260]	; (8003100 <DMA_CalcBaseAndBitshift+0x11c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d045      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3f      	ldr	r2, [pc, #252]	; (8003104 <DMA_CalcBaseAndBitshift+0x120>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d040      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a3e      	ldr	r2, [pc, #248]	; (8003108 <DMA_CalcBaseAndBitshift+0x124>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d03b      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a3c      	ldr	r2, [pc, #240]	; (800310c <DMA_CalcBaseAndBitshift+0x128>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d036      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a3b      	ldr	r2, [pc, #236]	; (8003110 <DMA_CalcBaseAndBitshift+0x12c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d031      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a39      	ldr	r2, [pc, #228]	; (8003114 <DMA_CalcBaseAndBitshift+0x130>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d02c      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a38      	ldr	r2, [pc, #224]	; (8003118 <DMA_CalcBaseAndBitshift+0x134>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d027      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a36      	ldr	r2, [pc, #216]	; (800311c <DMA_CalcBaseAndBitshift+0x138>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d022      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a35      	ldr	r2, [pc, #212]	; (8003120 <DMA_CalcBaseAndBitshift+0x13c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d01d      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <DMA_CalcBaseAndBitshift+0x140>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d018      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <DMA_CalcBaseAndBitshift+0x144>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <DMA_CalcBaseAndBitshift+0x148>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00e      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <DMA_CalcBaseAndBitshift+0x14c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d009      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2d      	ldr	r2, [pc, #180]	; (8003134 <DMA_CalcBaseAndBitshift+0x150>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d004      	beq.n	800308c <DMA_CalcBaseAndBitshift+0xa8>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <DMA_CalcBaseAndBitshift+0x154>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d101      	bne.n	8003090 <DMA_CalcBaseAndBitshift+0xac>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <DMA_CalcBaseAndBitshift+0xae>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d024      	beq.n	80030e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	3b10      	subs	r3, #16
 800309e:	4a27      	ldr	r2, [pc, #156]	; (800313c <DMA_CalcBaseAndBitshift+0x158>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	4a24      	ldr	r2, [pc, #144]	; (8003140 <DMA_CalcBaseAndBitshift+0x15c>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d908      	bls.n	80030d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b1f      	ldr	r3, [pc, #124]	; (8003144 <DMA_CalcBaseAndBitshift+0x160>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	659a      	str	r2, [r3, #88]	; 0x58
 80030ce:	e00d      	b.n	80030ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <DMA_CalcBaseAndBitshift+0x160>)
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6593      	str	r3, [r2, #88]	; 0x58
 80030de:	e005      	b.n	80030ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	40020010 	.word	0x40020010
 8003100:	40020028 	.word	0x40020028
 8003104:	40020040 	.word	0x40020040
 8003108:	40020058 	.word	0x40020058
 800310c:	40020070 	.word	0x40020070
 8003110:	40020088 	.word	0x40020088
 8003114:	400200a0 	.word	0x400200a0
 8003118:	400200b8 	.word	0x400200b8
 800311c:	40020410 	.word	0x40020410
 8003120:	40020428 	.word	0x40020428
 8003124:	40020440 	.word	0x40020440
 8003128:	40020458 	.word	0x40020458
 800312c:	40020470 	.word	0x40020470
 8003130:	40020488 	.word	0x40020488
 8003134:	400204a0 	.word	0x400204a0
 8003138:	400204b8 	.word	0x400204b8
 800313c:	aaaaaaab 	.word	0xaaaaaaab
 8003140:	0800965c 	.word	0x0800965c
 8003144:	fffffc00 	.word	0xfffffc00

08003148 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d120      	bne.n	800319e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b03      	cmp	r3, #3
 8003162:	d858      	bhi.n	8003216 <DMA_CheckFifoParam+0xce>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <DMA_CheckFifoParam+0x24>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	0800317d 	.word	0x0800317d
 8003170:	0800318f 	.word	0x0800318f
 8003174:	0800317d 	.word	0x0800317d
 8003178:	08003217 	.word	0x08003217
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d048      	beq.n	800321a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800318c:	e045      	b.n	800321a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003196:	d142      	bne.n	800321e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800319c:	e03f      	b.n	800321e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a6:	d123      	bne.n	80031f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d838      	bhi.n	8003222 <DMA_CheckFifoParam+0xda>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <DMA_CheckFifoParam+0x70>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031cf 	.word	0x080031cf
 80031c0:	080031c9 	.word	0x080031c9
 80031c4:	080031e1 	.word	0x080031e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
        break;
 80031cc:	e030      	b.n	8003230 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d025      	beq.n	8003226 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031de:	e022      	b.n	8003226 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031e8:	d11f      	bne.n	800322a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ee:	e01c      	b.n	800322a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d902      	bls.n	80031fe <DMA_CheckFifoParam+0xb6>
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d003      	beq.n	8003204 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80031fc:	e018      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
        break;
 8003202:	e015      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
    break;
 8003214:	e00b      	b.n	800322e <DMA_CheckFifoParam+0xe6>
        break;
 8003216:	bf00      	nop
 8003218:	e00a      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
        break;
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
    break;
 800322e:	bf00      	nop
    }
  }

  return status;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a38      	ldr	r2, [pc, #224]	; (8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a36      	ldr	r2, [pc, #216]	; (8003338 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a35      	ldr	r2, [pc, #212]	; (800333c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a33      	ldr	r2, [pc, #204]	; (8003340 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a30      	ldr	r2, [pc, #192]	; (8003348 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2f      	ldr	r2, [pc, #188]	; (800334c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80032a2:	2300      	movs	r3, #0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3b08      	subs	r3, #8
 80032b0:	4a28      	ldr	r2, [pc, #160]	; (8003354 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	091b      	lsrs	r3, r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4b26      	ldr	r3, [pc, #152]	; (8003358 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	461a      	mov	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a24      	ldr	r2, [pc, #144]	; (800335c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80032cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2201      	movs	r2, #1
 80032d6:	409a      	lsls	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032dc:	e024      	b.n	8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	3b10      	subs	r3, #16
 80032e6:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d806      	bhi.n	8003306 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d902      	bls.n	8003306 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	3308      	adds	r3, #8
 8003304:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4b18      	ldr	r3, [pc, #96]	; (800336c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a16      	ldr	r2, [pc, #88]	; (8003370 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003318:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003328:	bf00      	nop
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	58025408 	.word	0x58025408
 8003338:	5802541c 	.word	0x5802541c
 800333c:	58025430 	.word	0x58025430
 8003340:	58025444 	.word	0x58025444
 8003344:	58025458 	.word	0x58025458
 8003348:	5802546c 	.word	0x5802546c
 800334c:	58025480 	.word	0x58025480
 8003350:	58025494 	.word	0x58025494
 8003354:	cccccccd 	.word	0xcccccccd
 8003358:	16009600 	.word	0x16009600
 800335c:	58025880 	.word	0x58025880
 8003360:	aaaaaaab 	.word	0xaaaaaaab
 8003364:	400204b8 	.word	0x400204b8
 8003368:	4002040f 	.word	0x4002040f
 800336c:	10008200 	.word	0x10008200
 8003370:	40020880 	.word	0x40020880

08003374 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04a      	beq.n	8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d847      	bhi.n	8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a25      	ldr	r2, [pc, #148]	; (800342c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a24      	ldr	r2, [pc, #144]	; (8003430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a22      	ldr	r2, [pc, #136]	; (8003434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a21      	ldr	r2, [pc, #132]	; (8003438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1f      	ldr	r2, [pc, #124]	; (800343c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1c      	ldr	r2, [pc, #112]	; (8003444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1b      	ldr	r2, [pc, #108]	; (8003448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4b17      	ldr	r3, [pc, #92]	; (800344c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	461a      	mov	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a15      	ldr	r2, [pc, #84]	; (8003450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80033fc:	671a      	str	r2, [r3, #112]	; 0x70
 80033fe:	e009      	b.n	8003414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	461a      	mov	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003412:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3b01      	subs	r3, #1
 8003418:	2201      	movs	r2, #1
 800341a:	409a      	lsls	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	58025408 	.word	0x58025408
 8003430:	5802541c 	.word	0x5802541c
 8003434:	58025430 	.word	0x58025430
 8003438:	58025444 	.word	0x58025444
 800343c:	58025458 	.word	0x58025458
 8003440:	5802546c 	.word	0x5802546c
 8003444:	58025480 	.word	0x58025480
 8003448:	58025494 	.word	0x58025494
 800344c:	1600963f 	.word	0x1600963f
 8003450:	58025940 	.word	0x58025940
 8003454:	1000823f 	.word	0x1000823f
 8003458:	40020940 	.word	0x40020940

0800345c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b098      	sub	sp, #96	; 0x60
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003464:	4a84      	ldr	r2, [pc, #528]	; (8003678 <HAL_FDCAN_Init+0x21c>)
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	4611      	mov	r1, r2
 800346c:	224c      	movs	r2, #76	; 0x4c
 800346e:	4618      	mov	r0, r3
 8003470:	f006 f8ac 	bl	80095cc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e1c6      	b.n	800380c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a7e      	ldr	r2, [pc, #504]	; (800367c <HAL_FDCAN_Init+0x220>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d106      	bne.n	8003496 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fe6e 	bl	800118c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0210 	bic.w	r2, r2, #16
 80034be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c0:	f7fe f9a2 	bl	8001808 <HAL_GetTick>
 80034c4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034c6:	e014      	b.n	80034f2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034c8:	f7fe f99e 	bl	8001808 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b0a      	cmp	r3, #10
 80034d4:	d90d      	bls.n	80034f2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034dc:	f043 0201 	orr.w	r2, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2203      	movs	r2, #3
 80034ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e18c      	b.n	800380c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d0e3      	beq.n	80034c8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003510:	f7fe f97a 	bl	8001808 <HAL_GetTick>
 8003514:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003516:	e014      	b.n	8003542 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003518:	f7fe f976 	bl	8001808 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b0a      	cmp	r3, #10
 8003524:	d90d      	bls.n	8003542 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800352c:	f043 0201 	orr.w	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e164      	b.n	800380c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0e3      	beq.n	8003518 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699a      	ldr	r2, [r3, #24]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0202 	orr.w	r2, r2, #2
 800355e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7c1b      	ldrb	r3, [r3, #16]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d108      	bne.n	800357a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003576:	619a      	str	r2, [r3, #24]
 8003578:	e007      	b.n	800358a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003588:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	7c5b      	ldrb	r3, [r3, #17]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035a0:	619a      	str	r2, [r3, #24]
 80035a2:	e007      	b.n	80035b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	7c9b      	ldrb	r3, [r3, #18]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d108      	bne.n	80035ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699a      	ldr	r2, [r3, #24]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ca:	619a      	str	r2, [r3, #24]
 80035cc:	e007      	b.n	80035de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699a      	ldr	r2, [r3, #24]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003602:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0210 	bic.w	r2, r2, #16
 8003612:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d108      	bne.n	800362e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0204 	orr.w	r2, r2, #4
 800362a:	619a      	str	r2, [r3, #24]
 800362c:	e030      	b.n	8003690 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d02c      	beq.n	8003690 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d020      	beq.n	8003680 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699a      	ldr	r2, [r3, #24]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800364c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	691a      	ldr	r2, [r3, #16]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0210 	orr.w	r2, r2, #16
 800365c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d114      	bne.n	8003690 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 0220 	orr.w	r2, r2, #32
 8003674:	619a      	str	r2, [r3, #24]
 8003676:	e00b      	b.n	8003690 <HAL_FDCAN_Init+0x234>
 8003678:	08009600 	.word	0x08009600
 800367c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0220 	orr.w	r2, r2, #32
 800368e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	3b01      	subs	r3, #1
 8003696:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69db      	ldr	r3, [r3, #28]
 800369c:	3b01      	subs	r3, #1
 800369e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80036a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80036b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80036ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036c4:	d115      	bne.n	80036f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	3b01      	subs	r3, #1
 80036d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	3b01      	subs	r3, #1
 80036dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80036de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	3b01      	subs	r3, #1
 80036e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80036ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80036f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003718:	4413      	add	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d011      	beq.n	8003742 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003726:	f023 0107 	bic.w	r1, r3, #7
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3360      	adds	r3, #96	; 0x60
 8003732:	443b      	add	r3, r7
 8003734:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d011      	beq.n	800376e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003752:	f023 0107 	bic.w	r1, r3, #7
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3360      	adds	r3, #96	; 0x60
 800375e:	443b      	add	r3, r7
 8003760:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003772:	2b00      	cmp	r3, #0
 8003774:	d012      	beq.n	800379c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800377e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	3360      	adds	r3, #96	; 0x60
 800378a:	443b      	add	r3, r7
 800378c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003790:	011a      	lsls	r2, r3, #4
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d012      	beq.n	80037ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3360      	adds	r3, #96	; 0x60
 80037b8:	443b      	add	r3, r7
 80037ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <HAL_FDCAN_Init+0x3b8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d107      	bne.n	80037e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f022 0203 	bic.w	r2, r2, #3
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f80b 	bl	8003818 <FDCAN_CalcultateRamBlockAddresses>
 8003802:	4603      	mov	r3, r0
 8003804:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003808:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800380c:	4618      	mov	r0, r3
 800380e:	3760      	adds	r7, #96	; 0x60
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	4000a000 	.word	0x4000a000

08003818 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800382e:	4ba7      	ldr	r3, [pc, #668]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003830:	4013      	ands	r3, r2
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	0091      	lsls	r1, r2, #2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6812      	ldr	r2, [r2, #0]
 800383a:	430b      	orrs	r3, r1
 800383c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003850:	041a      	lsls	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	4413      	add	r3, r2
 8003864:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800386e:	4b97      	ldr	r3, [pc, #604]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003870:	4013      	ands	r3, r2
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	0091      	lsls	r1, r2, #2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	430b      	orrs	r3, r1
 800387c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	041a      	lsls	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	4413      	add	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80038b0:	4b86      	ldr	r3, [pc, #536]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	0091      	lsls	r1, r2, #2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	430b      	orrs	r3, r1
 80038be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ca:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	041a      	lsls	r2, r3, #16
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038f8:	4b74      	ldr	r3, [pc, #464]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	0091      	lsls	r1, r2, #2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003912:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391a:	041a      	lsls	r2, r3, #16
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4413      	add	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003940:	4b62      	ldr	r3, [pc, #392]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	0091      	lsls	r1, r2, #2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800395a:	fb02 f303 	mul.w	r3, r2, r3
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800396c:	4b57      	ldr	r3, [pc, #348]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800396e:	4013      	ands	r3, r2
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	0091      	lsls	r1, r2, #2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	430b      	orrs	r3, r1
 800397a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003986:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	041a      	lsls	r2, r3, #16
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	68ba      	ldr	r2, [r7, #8]
 80039a2:	4413      	add	r3, r2
 80039a4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	0091      	lsls	r1, r2, #2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6812      	ldr	r2, [r2, #0]
 80039ba:	430b      	orrs	r3, r1
 80039bc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039c8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039e4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	061a      	lsls	r2, r3, #24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039fc:	4b34      	ldr	r3, [pc, #208]	; (8003ad0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80039fe:	4413      	add	r3, r2
 8003a00:	009a      	lsls	r2, r3, #2
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	441a      	add	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8003a38:	441a      	add	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8003a68:	441a      	add	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	441a      	add	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8003ab4:	441a      	add	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d915      	bls.n	8003af4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003ac8:	e006      	b.n	8003ad8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003aca:	bf00      	nop
 8003acc:	ffff0003 	.word	0xffff0003
 8003ad0:	10002b00 	.word	0x10002b00
 8003ad4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e010      	b.n	8003b16 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	e005      	b.n	8003b08 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3f3      	bcc.n	8003afc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	; 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_GPIO_Init+0x234>)
 8003b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b36:	e194      	b.n	8003e62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	4013      	ands	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 8186 	beq.w	8003e5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d005      	beq.n	8003b68 <HAL_GPIO_Init+0x44>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0303 	and.w	r3, r3, #3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d130      	bne.n	8003bca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2203      	movs	r2, #3
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	091b      	lsrs	r3, r3, #4
 8003bb4:	f003 0201 	and.w	r2, r3, #1
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	d017      	beq.n	8003c06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	2203      	movs	r2, #3
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	43db      	mvns	r3, r3
 8003be8:	69ba      	ldr	r2, [r7, #24]
 8003bea:	4013      	ands	r3, r2
 8003bec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d123      	bne.n	8003c5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	220f      	movs	r2, #15
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	08da      	lsrs	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3208      	adds	r2, #8
 8003c54:	69b9      	ldr	r1, [r7, #24]
 8003c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0203 	and.w	r2, r3, #3
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 80e0 	beq.w	8003e5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_GPIO_Init+0x238>)
 8003c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ca2:	4a2e      	ldr	r2, [pc, #184]	; (8003d5c <HAL_GPIO_Init+0x238>)
 8003ca4:	f043 0302 	orr.w	r3, r3, #2
 8003ca8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cac:	4b2b      	ldr	r3, [pc, #172]	; (8003d5c <HAL_GPIO_Init+0x238>)
 8003cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cba:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <HAL_GPIO_Init+0x23c>)
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	089b      	lsrs	r3, r3, #2
 8003cc0:	3302      	adds	r3, #2
 8003cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	220f      	movs	r2, #15
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a20      	ldr	r2, [pc, #128]	; (8003d64 <HAL_GPIO_Init+0x240>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d052      	beq.n	8003d8c <HAL_GPIO_Init+0x268>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_GPIO_Init+0x244>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_GPIO_Init+0x22e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_GPIO_Init+0x248>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d02b      	beq.n	8003d4e <HAL_GPIO_Init+0x22a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_GPIO_Init+0x24c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d025      	beq.n	8003d4a <HAL_GPIO_Init+0x226>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_GPIO_Init+0x250>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01f      	beq.n	8003d46 <HAL_GPIO_Init+0x222>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a1b      	ldr	r2, [pc, #108]	; (8003d78 <HAL_GPIO_Init+0x254>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d019      	beq.n	8003d42 <HAL_GPIO_Init+0x21e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a1a      	ldr	r2, [pc, #104]	; (8003d7c <HAL_GPIO_Init+0x258>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d013      	beq.n	8003d3e <HAL_GPIO_Init+0x21a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_GPIO_Init+0x25c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00d      	beq.n	8003d3a <HAL_GPIO_Init+0x216>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_GPIO_Init+0x260>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <HAL_GPIO_Init+0x212>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_GPIO_Init+0x264>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d101      	bne.n	8003d32 <HAL_GPIO_Init+0x20e>
 8003d2e:	2309      	movs	r3, #9
 8003d30:	e02d      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d32:	230a      	movs	r3, #10
 8003d34:	e02b      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d36:	2308      	movs	r3, #8
 8003d38:	e029      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d3a:	2307      	movs	r3, #7
 8003d3c:	e027      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d3e:	2306      	movs	r3, #6
 8003d40:	e025      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d42:	2305      	movs	r3, #5
 8003d44:	e023      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d46:	2304      	movs	r3, #4
 8003d48:	e021      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e01f      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e01d      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e01b      	b.n	8003d8e <HAL_GPIO_Init+0x26a>
 8003d56:	bf00      	nop
 8003d58:	58000080 	.word	0x58000080
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	58000400 	.word	0x58000400
 8003d64:	58020000 	.word	0x58020000
 8003d68:	58020400 	.word	0x58020400
 8003d6c:	58020800 	.word	0x58020800
 8003d70:	58020c00 	.word	0x58020c00
 8003d74:	58021000 	.word	0x58021000
 8003d78:	58021400 	.word	0x58021400
 8003d7c:	58021800 	.word	0x58021800
 8003d80:	58021c00 	.word	0x58021c00
 8003d84:	58022000 	.word	0x58022000
 8003d88:	58022400 	.word	0x58022400
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	69fa      	ldr	r2, [r7, #28]
 8003d90:	f002 0203 	and.w	r2, r2, #3
 8003d94:	0092      	lsls	r2, r2, #2
 8003d96:	4093      	lsls	r3, r2
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d9e:	4938      	ldr	r1, [pc, #224]	; (8003e80 <HAL_GPIO_Init+0x35c>)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	3302      	adds	r3, #2
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4013      	ands	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f47f ae63 	bne.w	8003b38 <HAL_GPIO_Init+0x14>
  }
}
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
 8003e76:	3724      	adds	r7, #36	; 0x24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	58000400 	.word	0x58000400

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003ea0:	e003      	b.n	8003eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ea2:	887b      	ldrh	r3, [r7, #2]
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	619a      	str	r2, [r3, #24]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e08b      	b.n	8003fe2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd f9be 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2224      	movs	r2, #36	; 0x24
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0201 	bic.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d107      	bne.n	8003f32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	e006      	b.n	8003f40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d108      	bne.n	8003f5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e007      	b.n	8003f6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6859      	ldr	r1, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <HAL_I2C_Init+0x134>)
 8003f76:	430b      	orrs	r3, r1
 8003f78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	69d9      	ldr	r1, [r3, #28]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	02008000 	.word	0x02008000

08003ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	d138      	bne.n	8004078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004010:	2302      	movs	r3, #2
 8004012:	e032      	b.n	800407a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b20      	cmp	r3, #32
 800409a:	d139      	bne.n	8004110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e033      	b.n	8004112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2224      	movs	r2, #36	; 0x24
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004128:	4b19      	ldr	r3, [pc, #100]	; (8004190 <HAL_PWREx_ConfigSupply+0x70>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b04      	cmp	r3, #4
 8004132:	d00a      	beq.n	800414a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004134:	4b16      	ldr	r3, [pc, #88]	; (8004190 <HAL_PWREx_ConfigSupply+0x70>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d001      	beq.n	8004146 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e01f      	b.n	8004186 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e01d      	b.n	8004186 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800414a:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_PWREx_ConfigSupply+0x70>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f023 0207 	bic.w	r2, r3, #7
 8004152:	490f      	ldr	r1, [pc, #60]	; (8004190 <HAL_PWREx_ConfigSupply+0x70>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4313      	orrs	r3, r2
 8004158:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800415a:	f7fd fb55 	bl	8001808 <HAL_GetTick>
 800415e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004160:	e009      	b.n	8004176 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004162:	f7fd fb51 	bl	8001808 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004170:	d901      	bls.n	8004176 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e007      	b.n	8004186 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <HAL_PWREx_ConfigSupply+0x70>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d1ee      	bne.n	8004162 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	58024800 	.word	0x58024800

08004194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08c      	sub	sp, #48	; 0x30
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f000 bc48 	b.w	8004a38 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 8088 	beq.w	80042c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4b99      	ldr	r3, [pc, #612]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041c0:	4b96      	ldr	r3, [pc, #600]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80041c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d007      	beq.n	80041dc <HAL_RCC_OscConfig+0x48>
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	2b18      	cmp	r3, #24
 80041d0:	d111      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62>
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041dc:	4b8f      	ldr	r3, [pc, #572]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d06d      	beq.n	80042c4 <HAL_RCC_OscConfig+0x130>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d169      	bne.n	80042c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f000 bc21 	b.w	8004a38 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041fe:	d106      	bne.n	800420e <HAL_RCC_OscConfig+0x7a>
 8004200:	4b86      	ldr	r3, [pc, #536]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a85      	ldr	r2, [pc, #532]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e02e      	b.n	800426c <HAL_RCC_OscConfig+0xd8>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_RCC_OscConfig+0x9c>
 8004216:	4b81      	ldr	r3, [pc, #516]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a80      	ldr	r2, [pc, #512]	; (800441c <HAL_RCC_OscConfig+0x288>)
 800421c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b7e      	ldr	r3, [pc, #504]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7d      	ldr	r2, [pc, #500]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e01d      	b.n	800426c <HAL_RCC_OscConfig+0xd8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0xc0>
 800423a:	4b78      	ldr	r3, [pc, #480]	; (800441c <HAL_RCC_OscConfig+0x288>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a77      	ldr	r2, [pc, #476]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b75      	ldr	r3, [pc, #468]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a74      	ldr	r2, [pc, #464]	; (800441c <HAL_RCC_OscConfig+0x288>)
 800424c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0xd8>
 8004254:	4b71      	ldr	r3, [pc, #452]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a70      	ldr	r2, [pc, #448]	; (800441c <HAL_RCC_OscConfig+0x288>)
 800425a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	4b6e      	ldr	r3, [pc, #440]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6d      	ldr	r2, [pc, #436]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fd fac8 	bl	8001808 <HAL_GetTick>
 8004278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd fac4 	bl	8001808 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e3d4      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800428e:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0xe8>
 800429a:	e014      	b.n	80042c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fab4 	bl	8001808 <HAL_GetTick>
 80042a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd fab0 	bl	8001808 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	; 0x64
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e3c0      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042b6:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x110>
 80042c2:	e000      	b.n	80042c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80ca 	beq.w	8004468 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d4:	4b51      	ldr	r3, [pc, #324]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042de:	4b4f      	ldr	r3, [pc, #316]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <HAL_RCC_OscConfig+0x166>
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	2b18      	cmp	r3, #24
 80042ee:	d156      	bne.n	800439e <HAL_RCC_OscConfig+0x20a>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d151      	bne.n	800439e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042fa:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x17e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e392      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004312:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 0219 	bic.w	r2, r3, #25
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	493f      	ldr	r1, [pc, #252]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fa70 	bl	8001808 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd fa6c 	bl	8001808 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e37c      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434a:	f7fd fa69 	bl	8001820 <HAL_GetREVID>
 800434e:	4603      	mov	r3, r0
 8004350:	f241 0203 	movw	r2, #4099	; 0x1003
 8004354:	4293      	cmp	r3, r2
 8004356:	d817      	bhi.n	8004388 <HAL_RCC_OscConfig+0x1f4>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d108      	bne.n	8004372 <HAL_RCC_OscConfig+0x1de>
 8004360:	4b2e      	ldr	r3, [pc, #184]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004368:	4a2c      	ldr	r2, [pc, #176]	; (800441c <HAL_RCC_OscConfig+0x288>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004370:	e07a      	b.n	8004468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	4926      	ldr	r1, [pc, #152]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004386:	e06f      	b.n	8004468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCC_OscConfig+0x288>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	4921      	ldr	r1, [pc, #132]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800439c:	e064      	b.n	8004468 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d047      	beq.n	8004436 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043a6:	4b1d      	ldr	r3, [pc, #116]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 0219 	bic.w	r2, r3, #25
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	491a      	ldr	r1, [pc, #104]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fa26 	bl	8001808 <HAL_GetTick>
 80043bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c0:	f7fd fa22 	bl	8001808 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e332      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043de:	f7fd fa1f 	bl	8001820 <HAL_GetREVID>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d819      	bhi.n	8004420 <HAL_RCC_OscConfig+0x28c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b40      	cmp	r3, #64	; 0x40
 80043f2:	d108      	bne.n	8004406 <HAL_RCC_OscConfig+0x272>
 80043f4:	4b09      	ldr	r3, [pc, #36]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043fc:	4a07      	ldr	r2, [pc, #28]	; (800441c <HAL_RCC_OscConfig+0x288>)
 80043fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004402:	6053      	str	r3, [r2, #4]
 8004404:	e030      	b.n	8004468 <HAL_RCC_OscConfig+0x2d4>
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	031b      	lsls	r3, r3, #12
 8004414:	4901      	ldr	r1, [pc, #4]	; (800441c <HAL_RCC_OscConfig+0x288>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
 800441a:	e025      	b.n	8004468 <HAL_RCC_OscConfig+0x2d4>
 800441c:	58024400 	.word	0x58024400
 8004420:	4b9a      	ldr	r3, [pc, #616]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	061b      	lsls	r3, r3, #24
 800442e:	4997      	ldr	r1, [pc, #604]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	604b      	str	r3, [r1, #4]
 8004434:	e018      	b.n	8004468 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b95      	ldr	r3, [pc, #596]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a94      	ldr	r2, [pc, #592]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004442:	f7fd f9e1 	bl	8001808 <HAL_GetTick>
 8004446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444a:	f7fd f9dd 	bl	8001808 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e2ed      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800445c:	4b8b      	ldr	r3, [pc, #556]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 80a9 	beq.w	80045c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004476:	4b85      	ldr	r3, [pc, #532]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004480:	4b82      	ldr	r3, [pc, #520]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d007      	beq.n	800449c <HAL_RCC_OscConfig+0x308>
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b18      	cmp	r3, #24
 8004490:	d13a      	bne.n	8004508 <HAL_RCC_OscConfig+0x374>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d135      	bne.n	8004508 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800449c:	4b7b      	ldr	r3, [pc, #492]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_OscConfig+0x320>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	2b80      	cmp	r3, #128	; 0x80
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e2c1      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044b4:	f7fd f9b4 	bl	8001820 <HAL_GetREVID>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80044be:	4293      	cmp	r3, r2
 80044c0:	d817      	bhi.n	80044f2 <HAL_RCC_OscConfig+0x35e>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d108      	bne.n	80044dc <HAL_RCC_OscConfig+0x348>
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044d2:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80044d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044da:	e075      	b.n	80045c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044dc:	4b6b      	ldr	r3, [pc, #428]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	069b      	lsls	r3, r3, #26
 80044ea:	4968      	ldr	r1, [pc, #416]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044f0:	e06a      	b.n	80045c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044f2:	4b66      	ldr	r3, [pc, #408]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	061b      	lsls	r3, r3, #24
 8004500:	4962      	ldr	r1, [pc, #392]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004502:	4313      	orrs	r3, r2
 8004504:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004506:	e05f      	b.n	80045c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d042      	beq.n	8004596 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004510:	4b5e      	ldr	r3, [pc, #376]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a5d      	ldr	r2, [pc, #372]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd f974 	bl	8001808 <HAL_GetTick>
 8004520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004524:	f7fd f970 	bl	8001808 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e280      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004536:	4b55      	ldr	r3, [pc, #340]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004542:	f7fd f96d 	bl	8001820 <HAL_GetREVID>
 8004546:	4603      	mov	r3, r0
 8004548:	f241 0203 	movw	r2, #4099	; 0x1003
 800454c:	4293      	cmp	r3, r2
 800454e:	d817      	bhi.n	8004580 <HAL_RCC_OscConfig+0x3ec>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	2b20      	cmp	r3, #32
 8004556:	d108      	bne.n	800456a <HAL_RCC_OscConfig+0x3d6>
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004560:	4a4a      	ldr	r2, [pc, #296]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004566:	6053      	str	r3, [r2, #4]
 8004568:	e02e      	b.n	80045c8 <HAL_RCC_OscConfig+0x434>
 800456a:	4b48      	ldr	r3, [pc, #288]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	069b      	lsls	r3, r3, #26
 8004578:	4944      	ldr	r1, [pc, #272]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
 800457e:	e023      	b.n	80045c8 <HAL_RCC_OscConfig+0x434>
 8004580:	4b42      	ldr	r3, [pc, #264]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	493f      	ldr	r1, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	60cb      	str	r3, [r1, #12]
 8004594:	e018      	b.n	80045c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004596:	4b3d      	ldr	r3, [pc, #244]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a3c      	ldr	r2, [pc, #240]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800459c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd f931 	bl	8001808 <HAL_GetTick>
 80045a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80045aa:	f7fd f92d 	bl	8001808 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e23d      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d036      	beq.n	8004642 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d019      	beq.n	8004610 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e0:	4a2a      	ldr	r2, [pc, #168]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd f90e 	bl	8001808 <HAL_GetTick>
 80045ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fd f90a 	bl	8001808 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e21a      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x45c>
 800460e:	e018      	b.n	8004642 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004614:	4a1d      	ldr	r2, [pc, #116]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004616:	f023 0301 	bic.w	r3, r3, #1
 800461a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fd f8f4 	bl	8001808 <HAL_GetTick>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004624:	f7fd f8f0 	bl	8001808 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e200      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	2b00      	cmp	r3, #0
 800464c:	d039      	beq.n	80046c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01c      	beq.n	8004690 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004656:	4b0d      	ldr	r3, [pc, #52]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0c      	ldr	r2, [pc, #48]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800465c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004660:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004662:	f7fd f8d1 	bl	8001808 <HAL_GetTick>
 8004666:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800466a:	f7fd f8cd 	bl	8001808 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e1dd      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800467c:	4b03      	ldr	r3, [pc, #12]	; (800468c <HAL_RCC_OscConfig+0x4f8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <HAL_RCC_OscConfig+0x4d6>
 8004688:	e01b      	b.n	80046c2 <HAL_RCC_OscConfig+0x52e>
 800468a:	bf00      	nop
 800468c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004690:	4b9b      	ldr	r3, [pc, #620]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a9a      	ldr	r2, [pc, #616]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800469a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800469c:	f7fd f8b4 	bl	8001808 <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046a4:	f7fd f8b0 	bl	8001808 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e1c0      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80046b6:	4b92      	ldr	r3, [pc, #584]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8081 	beq.w	80047d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046d0:	4b8c      	ldr	r3, [pc, #560]	; (8004904 <HAL_RCC_OscConfig+0x770>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a8b      	ldr	r2, [pc, #556]	; (8004904 <HAL_RCC_OscConfig+0x770>)
 80046d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046dc:	f7fd f894 	bl	8001808 <HAL_GetTick>
 80046e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e4:	f7fd f890 	bl	8001808 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e1a0      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046f6:	4b83      	ldr	r3, [pc, #524]	; (8004904 <HAL_RCC_OscConfig+0x770>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x584>
 800470a:	4b7d      	ldr	r3, [pc, #500]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	4a7c      	ldr	r2, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004710:	f043 0301 	orr.w	r3, r3, #1
 8004714:	6713      	str	r3, [r2, #112]	; 0x70
 8004716:	e02d      	b.n	8004774 <HAL_RCC_OscConfig+0x5e0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10c      	bne.n	800473a <HAL_RCC_OscConfig+0x5a6>
 8004720:	4b77      	ldr	r3, [pc, #476]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004724:	4a76      	ldr	r2, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	6713      	str	r3, [r2, #112]	; 0x70
 800472c:	4b74      	ldr	r3, [pc, #464]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	4a73      	ldr	r2, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004732:	f023 0304 	bic.w	r3, r3, #4
 8004736:	6713      	str	r3, [r2, #112]	; 0x70
 8004738:	e01c      	b.n	8004774 <HAL_RCC_OscConfig+0x5e0>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b05      	cmp	r3, #5
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x5c8>
 8004742:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004748:	f043 0304 	orr.w	r3, r3, #4
 800474c:	6713      	str	r3, [r2, #112]	; 0x70
 800474e:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a6b      	ldr	r2, [pc, #428]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	e00b      	b.n	8004774 <HAL_RCC_OscConfig+0x5e0>
 800475c:	4b68      	ldr	r3, [pc, #416]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004760:	4a67      	ldr	r2, [pc, #412]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004762:	f023 0301 	bic.w	r3, r3, #1
 8004766:	6713      	str	r3, [r2, #112]	; 0x70
 8004768:	4b65      	ldr	r3, [pc, #404]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a64      	ldr	r2, [pc, #400]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800476e:	f023 0304 	bic.w	r3, r3, #4
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d015      	beq.n	80047a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd f844 	bl	8001808 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fd f840 	bl	8001808 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e14e      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800479a:	4b59      	ldr	r3, [pc, #356]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ee      	beq.n	8004784 <HAL_RCC_OscConfig+0x5f0>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a8:	f7fd f82e 	bl	8001808 <HAL_GetTick>
 80047ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd f82a 	bl	8001808 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e138      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80047c6:	4b4e      	ldr	r3, [pc, #312]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ee      	bne.n	80047b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 812d 	beq.w	8004a36 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047dc:	4b48      	ldr	r3, [pc, #288]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047e4:	2b18      	cmp	r3, #24
 80047e6:	f000 80bd 	beq.w	8004964 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	f040 809e 	bne.w	8004930 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a41      	ldr	r2, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80047fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd f802 	bl	8001808 <HAL_GetTick>
 8004804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fc fffe 	bl	8001808 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e10e      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800481a:	4b39      	ldr	r3, [pc, #228]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_RCC_OscConfig+0x774>)
 800482c:	4013      	ands	r3, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004836:	0112      	lsls	r2, r2, #4
 8004838:	430a      	orrs	r2, r1
 800483a:	4931      	ldr	r1, [pc, #196]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800483c:	4313      	orrs	r3, r2
 800483e:	628b      	str	r3, [r1, #40]	; 0x28
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	3b01      	subs	r3, #1
 8004846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	3b01      	subs	r3, #1
 8004850:	025b      	lsls	r3, r3, #9
 8004852:	b29b      	uxth	r3, r3
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485a:	3b01      	subs	r3, #1
 800485c:	041b      	lsls	r3, r3, #16
 800485e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	3b01      	subs	r3, #1
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004870:	4923      	ldr	r1, [pc, #140]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	4a21      	ldr	r2, [pc, #132]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004882:	4b1f      	ldr	r3, [pc, #124]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004886:	4b21      	ldr	r3, [pc, #132]	; (800490c <HAL_RCC_OscConfig+0x778>)
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800488e:	00d2      	lsls	r2, r2, #3
 8004890:	491b      	ldr	r1, [pc, #108]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004892:	4313      	orrs	r3, r2
 8004894:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	f023 020c 	bic.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	4917      	ldr	r1, [pc, #92]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80048a8:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	f023 0202 	bic.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b4:	4912      	ldr	r1, [pc, #72]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	4a10      	ldr	r2, [pc, #64]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	4a0d      	ldr	r2, [pc, #52]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	4a0a      	ldr	r2, [pc, #40]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048de:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	4a07      	ldr	r2, [pc, #28]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048e4:	f043 0301 	orr.w	r3, r3, #1
 80048e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_RCC_OscConfig+0x76c>)
 80048f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f6:	f7fc ff87 	bl	8001808 <HAL_GetTick>
 80048fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048fc:	e011      	b.n	8004922 <HAL_RCC_OscConfig+0x78e>
 80048fe:	bf00      	nop
 8004900:	58024400 	.word	0x58024400
 8004904:	58024800 	.word	0x58024800
 8004908:	fffffc0c 	.word	0xfffffc0c
 800490c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fc ff7a 	bl	8001808 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e08a      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x77c>
 800492e:	e082      	b.n	8004a36 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004930:	4b43      	ldr	r3, [pc, #268]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fc ff64 	bl	8001808 <HAL_GetTick>
 8004940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fc ff60 	bl	8001808 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e070      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004956:	4b3a      	ldr	r3, [pc, #232]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x7b0>
 8004962:	e068      	b.n	8004a36 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004964:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800496a:	4b35      	ldr	r3, [pc, #212]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	2b01      	cmp	r3, #1
 8004976:	d031      	beq.n	80049dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f003 0203 	and.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004982:	429a      	cmp	r2, r3
 8004984:	d12a      	bne.n	80049dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d122      	bne.n	80049dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d11a      	bne.n	80049dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	0a5b      	lsrs	r3, r3, #9
 80049aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d111      	bne.n	80049dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	0c1b      	lsrs	r3, r3, #16
 80049bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d108      	bne.n	80049dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0e1b      	lsrs	r3, r3, #24
 80049ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e02b      	b.n	8004a38 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049e0:	4b17      	ldr	r3, [pc, #92]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 80049e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e4:	08db      	lsrs	r3, r3, #3
 80049e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d01f      	beq.n	8004a36 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a02:	f7fc ff01 	bl	8001808 <HAL_GetTick>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004a08:	bf00      	nop
 8004a0a:	f7fc fefd 	bl	8001808 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d0f9      	beq.n	8004a0a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <HAL_RCC_OscConfig+0x8b0>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a22:	00d2      	lsls	r2, r2, #3
 8004a24:	4906      	ldr	r1, [pc, #24]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	4a04      	ldr	r2, [pc, #16]	; (8004a40 <HAL_RCC_OscConfig+0x8ac>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3730      	adds	r7, #48	; 0x30
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58024400 	.word	0x58024400
 8004a44:	ffff0007 	.word	0xffff0007

08004a48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e19c      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b8a      	ldr	r3, [pc, #552]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d910      	bls.n	8004a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b87      	ldr	r3, [pc, #540]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f023 020f 	bic.w	r2, r3, #15
 8004a72:	4985      	ldr	r1, [pc, #532]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	4b83      	ldr	r3, [pc, #524]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d001      	beq.n	8004a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e184      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	4b7b      	ldr	r3, [pc, #492]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d908      	bls.n	8004aba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004aa8:	4b78      	ldr	r3, [pc, #480]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	4975      	ldr	r1, [pc, #468]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d010      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	695a      	ldr	r2, [r3, #20]
 8004aca:	4b70      	ldr	r3, [pc, #448]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d908      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	496a      	ldr	r1, [pc, #424]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699a      	ldr	r2, [r3, #24]
 8004af8:	4b64      	ldr	r3, [pc, #400]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d908      	bls.n	8004b16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b04:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	495e      	ldr	r1, [pc, #376]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69da      	ldr	r2, [r3, #28]
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d908      	bls.n	8004b44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b32:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4953      	ldr	r1, [pc, #332]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d010      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d908      	bls.n	8004b72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	f023 020f 	bic.w	r2, r3, #15
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	4947      	ldr	r1, [pc, #284]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d055      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b7e:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	4940      	ldr	r1, [pc, #256]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b98:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d121      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0f6      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d107      	bne.n	8004bc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bb0:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d115      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0ea      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bc8:	4b30      	ldr	r3, [pc, #192]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0de      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bd8:	4b2c      	ldr	r3, [pc, #176]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0d6      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f023 0207 	bic.w	r2, r3, #7
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4925      	ldr	r1, [pc, #148]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bfa:	f7fc fe05 	bl	8001808 <HAL_GetTick>
 8004bfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c02:	f7fc fe01 	bl	8001808 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0be      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c18:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d1eb      	bne.n	8004c02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d010      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d208      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	f023 020f 	bic.w	r2, r3, #15
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	490e      	ldr	r1, [pc, #56]	; (8004c8c <HAL_RCC_ClockConfig+0x244>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d214      	bcs.n	8004c90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 020f 	bic.w	r2, r3, #15
 8004c6e:	4906      	ldr	r1, [pc, #24]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_RCC_ClockConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e086      	b.n	8004d96 <HAL_RCC_ClockConfig+0x34e>
 8004c88:	52002000 	.word	0x52002000
 8004c8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d010      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d208      	bcs.n	8004cbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cac:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	4939      	ldr	r1, [pc, #228]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	4b34      	ldr	r3, [pc, #208]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d208      	bcs.n	8004cec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	492e      	ldr	r1, [pc, #184]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d010      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	699a      	ldr	r2, [r3, #24]
 8004cfc:	4b28      	ldr	r3, [pc, #160]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d208      	bcs.n	8004d1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d08:	4b25      	ldr	r3, [pc, #148]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	4922      	ldr	r1, [pc, #136]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d010      	beq.n	8004d48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d208      	bcs.n	8004d48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	4917      	ldr	r1, [pc, #92]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d48:	f000 f834 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	4b14      	ldr	r3, [pc, #80]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	4912      	ldr	r1, [pc, #72]	; (8004da4 <HAL_RCC_ClockConfig+0x35c>)
 8004d5a:	5ccb      	ldrb	r3, [r1, r3]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d66:	4b0e      	ldr	r3, [pc, #56]	; (8004da0 <HAL_RCC_ClockConfig+0x358>)
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <HAL_RCC_ClockConfig+0x35c>)
 8004d70:	5cd3      	ldrb	r3, [r2, r3]
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_RCC_ClockConfig+0x360>)
 8004d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d80:	4a0a      	ldr	r2, [pc, #40]	; (8004dac <HAL_RCC_ClockConfig+0x364>)
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_RCC_ClockConfig+0x368>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc fcf2 	bl	8001774 <HAL_InitTick>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400
 8004da4:	0800964c 	.word	0x0800964c
 8004da8:	24000004 	.word	0x24000004
 8004dac:	24000000 	.word	0x24000000
 8004db0:	24000008 	.word	0x24000008

08004db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dba:	4bb3      	ldr	r3, [pc, #716]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc2:	2b18      	cmp	r3, #24
 8004dc4:	f200 8155 	bhi.w	8005072 <HAL_RCC_GetSysClockFreq+0x2be>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004e35 	.word	0x08004e35
 8004dd4:	08005073 	.word	0x08005073
 8004dd8:	08005073 	.word	0x08005073
 8004ddc:	08005073 	.word	0x08005073
 8004de0:	08005073 	.word	0x08005073
 8004de4:	08005073 	.word	0x08005073
 8004de8:	08005073 	.word	0x08005073
 8004dec:	08005073 	.word	0x08005073
 8004df0:	08004e5b 	.word	0x08004e5b
 8004df4:	08005073 	.word	0x08005073
 8004df8:	08005073 	.word	0x08005073
 8004dfc:	08005073 	.word	0x08005073
 8004e00:	08005073 	.word	0x08005073
 8004e04:	08005073 	.word	0x08005073
 8004e08:	08005073 	.word	0x08005073
 8004e0c:	08005073 	.word	0x08005073
 8004e10:	08004e61 	.word	0x08004e61
 8004e14:	08005073 	.word	0x08005073
 8004e18:	08005073 	.word	0x08005073
 8004e1c:	08005073 	.word	0x08005073
 8004e20:	08005073 	.word	0x08005073
 8004e24:	08005073 	.word	0x08005073
 8004e28:	08005073 	.word	0x08005073
 8004e2c:	08005073 	.word	0x08005073
 8004e30:	08004e67 	.word	0x08004e67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e34:	4b94      	ldr	r3, [pc, #592]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d009      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e40:	4b91      	ldr	r3, [pc, #580]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e52:	e111      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e54:	4b8d      	ldr	r3, [pc, #564]	; (800508c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e56:	61bb      	str	r3, [r7, #24]
      break;
 8004e58:	e10e      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e5a:	4b8d      	ldr	r3, [pc, #564]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e5c:	61bb      	str	r3, [r7, #24]
      break;
 8004e5e:	e10b      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e60:	4b8c      	ldr	r3, [pc, #560]	; (8005094 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e62:	61bb      	str	r3, [r7, #24]
      break;
 8004e64:	e108      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e66:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e70:	4b85      	ldr	r3, [pc, #532]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e7c:	4b82      	ldr	r3, [pc, #520]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e86:	4b80      	ldr	r3, [pc, #512]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	08db      	lsrs	r3, r3, #3
 8004e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	fb02 f303 	mul.w	r3, r2, r3
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80e1 	beq.w	800506c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	f000 8083 	beq.w	8004fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	f200 80a1 	bhi.w	8004ffc <HAL_RCC_GetSysClockFreq+0x248>
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x114>
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d056      	beq.n	8004f74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004ec6:	e099      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ec8:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d02d      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ed4:	4b6c      	ldr	r3, [pc, #432]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	4a6b      	ldr	r2, [pc, #428]	; (800508c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	ee07 3a90 	vmov	s15, r3
 8004eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efe:	4b62      	ldr	r3, [pc, #392]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f2e:	e087      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800509c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	4b51      	ldr	r3, [pc, #324]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f72:	e065      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f86:	4b40      	ldr	r3, [pc, #256]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fb6:	e043      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80050a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ffa:	e021      	b.n	8005040 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	eddf 6a26 	vldr	s13, [pc, #152]	; 80050a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b1e      	ldr	r3, [pc, #120]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005022:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800503e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005040:	4b11      	ldr	r3, [pc, #68]	; (8005088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	0a5b      	lsrs	r3, r3, #9
 8005046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504a:	3301      	adds	r3, #1
 800504c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	ee07 3a90 	vmov	s15, r3
 8005054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005058:	edd7 6a07 	vldr	s13, [r7, #28]
 800505c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005064:	ee17 3a90 	vmov	r3, s15
 8005068:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800506a:	e005      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
      break;
 8005070:	e002      	b.n	8005078 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005072:	4b07      	ldr	r3, [pc, #28]	; (8005090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005074:	61bb      	str	r3, [r7, #24]
      break;
 8005076:	bf00      	nop
  }

  return sysclockfreq;
 8005078:	69bb      	ldr	r3, [r7, #24]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3724      	adds	r7, #36	; 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	03d09000 	.word	0x03d09000
 8005090:	003d0900 	.word	0x003d0900
 8005094:	017d7840 	.word	0x017d7840
 8005098:	46000000 	.word	0x46000000
 800509c:	4c742400 	.word	0x4c742400
 80050a0:	4a742400 	.word	0x4a742400
 80050a4:	4bbebc20 	.word	0x4bbebc20

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80050ae:	f7ff fe81 	bl	8004db4 <HAL_RCC_GetSysClockFreq>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	0a1b      	lsrs	r3, r3, #8
 80050ba:	f003 030f 	and.w	r3, r3, #15
 80050be:	490f      	ldr	r1, [pc, #60]	; (80050fc <HAL_RCC_GetHCLKFreq+0x54>)
 80050c0:	5ccb      	ldrb	r3, [r1, r3]
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <HAL_RCC_GetHCLKFreq+0x54>)
 80050d6:	5cd3      	ldrb	r3, [r2, r3]
 80050d8:	f003 031f 	and.w	r3, r3, #31
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	fa22 f303 	lsr.w	r3, r2, r3
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <HAL_RCC_GetHCLKFreq+0x58>)
 80050e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e6:	4a07      	ldr	r2, [pc, #28]	; (8005104 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_GetHCLKFreq+0x58>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3708      	adds	r7, #8
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	58024400 	.word	0x58024400
 80050fc:	0800964c 	.word	0x0800964c
 8005100:	24000004 	.word	0x24000004
 8005104:	24000000 	.word	0x24000000

08005108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800510c:	f7ff ffcc 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	091b      	lsrs	r3, r3, #4
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4904      	ldr	r1, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	0800964c 	.word	0x0800964c

08005134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005138:	f7ff ffb6 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800513c:	4602      	mov	r2, r0
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	4904      	ldr	r1, [pc, #16]	; (800515c <HAL_RCC_GetPCLK2Freq+0x28>)
 800514a:	5ccb      	ldrb	r3, [r1, r3]
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	58024400 	.word	0x58024400
 800515c:	0800964c 	.word	0x0800964c

08005160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005164:	b0ca      	sub	sp, #296	; 0x128
 8005166:	af00      	add	r7, sp, #0
 8005168:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800516c:	2300      	movs	r3, #0
 800516e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005184:	2500      	movs	r5, #0
 8005186:	ea54 0305 	orrs.w	r3, r4, r5
 800518a:	d049      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005196:	d02f      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800519c:	d828      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800519e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a2:	d01a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80051a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a8:	d822      	bhi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b2:	d007      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051b4:	e01c      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b6:	4bb8      	ldr	r3, [pc, #736]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4ab7      	ldr	r2, [pc, #732]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051c2:	e01a      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80051c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051c8:	3308      	adds	r3, #8
 80051ca:	2102      	movs	r1, #2
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 fb61 	bl	8007894 <RCCEx_PLL2_Config>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051d8:	e00f      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051de:	3328      	adds	r3, #40	; 0x28
 80051e0:	2102      	movs	r1, #2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fc08 	bl	80079f8 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051ee:	e004      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005202:	4ba5      	ldr	r3, [pc, #660]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005206:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005210:	4aa1      	ldr	r2, [pc, #644]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005212:	430b      	orrs	r3, r1
 8005214:	6513      	str	r3, [r2, #80]	; 0x50
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800521c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800522c:	f04f 0900 	mov.w	r9, #0
 8005230:	ea58 0309 	orrs.w	r3, r8, r9
 8005234:	d047      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523c:	2b04      	cmp	r3, #4
 800523e:	d82a      	bhi.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800525d 	.word	0x0800525d
 800524c:	0800526b 	.word	0x0800526b
 8005250:	08005281 	.word	0x08005281
 8005254:	0800529f 	.word	0x0800529f
 8005258:	0800529f 	.word	0x0800529f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525c:	4b8e      	ldr	r3, [pc, #568]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	4a8d      	ldr	r2, [pc, #564]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005268:	e01a      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800526e:	3308      	adds	r3, #8
 8005270:	2100      	movs	r1, #0
 8005272:	4618      	mov	r0, r3
 8005274:	f002 fb0e 	bl	8007894 <RCCEx_PLL2_Config>
 8005278:	4603      	mov	r3, r0
 800527a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800527e:	e00f      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005284:	3328      	adds	r3, #40	; 0x28
 8005286:	2100      	movs	r1, #0
 8005288:	4618      	mov	r0, r3
 800528a:	f002 fbb5 	bl	80079f8 <RCCEx_PLL3_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005294:	e004      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800529c:	e000      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800529e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052a8:	4b7b      	ldr	r3, [pc, #492]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ac:	f023 0107 	bic.w	r1, r3, #7
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b6:	4a78      	ldr	r2, [pc, #480]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6513      	str	r3, [r2, #80]	; 0x50
 80052bc:	e003      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80052c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80052c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80052d2:	f04f 0b00 	mov.w	fp, #0
 80052d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80052da:	d04c      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e6:	d030      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ec:	d829      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ee:	2bc0      	cmp	r3, #192	; 0xc0
 80052f0:	d02d      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052f2:	2bc0      	cmp	r3, #192	; 0xc0
 80052f4:	d825      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d018      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052fa:	2b80      	cmp	r3, #128	; 0x80
 80052fc:	d821      	bhi.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d007      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005306:	e01c      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005308:	4b63      	ldr	r3, [pc, #396]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a62      	ldr	r2, [pc, #392]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800530e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005314:	e01c      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800531a:	3308      	adds	r3, #8
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f002 fab8 	bl	8007894 <RCCEx_PLL2_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800532a:	e011      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005330:	3328      	adds	r3, #40	; 0x28
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f002 fb5f 	bl	80079f8 <RCCEx_PLL3_Config>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005340:	e006      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005348:	e002      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800534a:	bf00      	nop
 800534c:	e000      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800534e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005350:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005358:	4b4f      	ldr	r3, [pc, #316]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800535c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005366:	4a4c      	ldr	r2, [pc, #304]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005368:	430b      	orrs	r3, r1
 800536a:	6513      	str	r3, [r2, #80]	; 0x50
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800536e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005372:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800537a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005382:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005386:	2300      	movs	r3, #0
 8005388:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800538c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005390:	460b      	mov	r3, r1
 8005392:	4313      	orrs	r3, r2
 8005394:	d053      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800539e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053a2:	d035      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80053a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053a8:	d82e      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053ae:	d031      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80053b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053b4:	d828      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ba:	d01a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80053bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c0:	d822      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80053c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ca:	d007      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053cc:	e01c      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ce:	4b32      	ldr	r3, [pc, #200]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d2:	4a31      	ldr	r2, [pc, #196]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053da:	e01c      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e0:	3308      	adds	r3, #8
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 fa55 	bl	8007894 <RCCEx_PLL2_Config>
 80053ea:	4603      	mov	r3, r0
 80053ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053f0:	e011      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053f6:	3328      	adds	r3, #40	; 0x28
 80053f8:	2100      	movs	r1, #0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 fafc 	bl	80079f8 <RCCEx_PLL3_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005406:	e006      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800540e:	e002      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005416:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800542a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800542e:	4a1a      	ldr	r2, [pc, #104]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005430:	430b      	orrs	r3, r1
 8005432:	6593      	str	r3, [r2, #88]	; 0x58
 8005434:	e003      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800543a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800543e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800544a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005454:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005458:	460b      	mov	r3, r1
 800545a:	4313      	orrs	r3, r2
 800545c:	d056      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800545e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546a:	d038      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800546c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005470:	d831      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005476:	d034      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800547c:	d82b      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800547e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005482:	d01d      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005488:	d825      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d006      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800548e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005494:	e01f      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005496:	bf00      	nop
 8005498:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549c:	4ba2      	ldr	r3, [pc, #648]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	4aa1      	ldr	r2, [pc, #644]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a8:	e01c      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054ae:	3308      	adds	r3, #8
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f002 f9ee 	bl	8007894 <RCCEx_PLL2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054be:	e011      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054c4:	3328      	adds	r3, #40	; 0x28
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 fa95 	bl	80079f8 <RCCEx_PLL3_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054d4:	e006      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054dc:	e002      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10b      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054ec:	4b8e      	ldr	r3, [pc, #568]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80054f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054fc:	4a8a      	ldr	r2, [pc, #552]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	6593      	str	r3, [r2, #88]	; 0x58
 8005502:	e003      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005508:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800550c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005514:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005518:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800551c:	2300      	movs	r3, #0
 800551e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005522:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d03a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	2b30      	cmp	r3, #48	; 0x30
 8005534:	d01f      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005536:	2b30      	cmp	r3, #48	; 0x30
 8005538:	d819      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800553a:	2b20      	cmp	r3, #32
 800553c:	d00c      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800553e:	2b20      	cmp	r3, #32
 8005540:	d815      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005542:	2b00      	cmp	r3, #0
 8005544:	d019      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005546:	2b10      	cmp	r3, #16
 8005548:	d111      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554a:	4b77      	ldr	r3, [pc, #476]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4a76      	ldr	r2, [pc, #472]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005556:	e011      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800555c:	3308      	adds	r3, #8
 800555e:	2102      	movs	r1, #2
 8005560:	4618      	mov	r0, r3
 8005562:	f002 f997 	bl	8007894 <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800556c:	e006      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005576:	bf00      	nop
 8005578:	e000      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800557a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800557c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005584:	4b68      	ldr	r3, [pc, #416]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005594:	430b      	orrs	r3, r1
 8005596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005598:	e003      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800559e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80055ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80055b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80055bc:	460b      	mov	r3, r1
 80055be:	4313      	orrs	r3, r2
 80055c0:	d051      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055cc:	d035      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d2:	d82e      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055d8:	d031      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055de:	d828      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e4:	d01a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ea:	d822      	bhi.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f4:	d007      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055f6:	e01c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055f8:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fc:	4a4a      	ldr	r2, [pc, #296]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005604:	e01c      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800560a:	3308      	adds	r3, #8
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f002 f940 	bl	8007894 <RCCEx_PLL2_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800561a:	e011      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005620:	3328      	adds	r3, #40	; 0x28
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f002 f9e7 	bl	80079f8 <RCCEx_PLL3_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005630:	e006      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800563a:	bf00      	nop
 800563c:	e000      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800563e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005640:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005648:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005650:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005656:	4a34      	ldr	r2, [pc, #208]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005658:	430b      	orrs	r3, r1
 800565a:	6513      	str	r3, [r2, #80]	; 0x50
 800565c:	e003      	b.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005662:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005676:	2300      	movs	r3, #0
 8005678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800567c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005680:	460b      	mov	r3, r1
 8005682:	4313      	orrs	r3, r2
 8005684:	d056      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800568a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d033      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005696:	d82c      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800569c:	d02f      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800569e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a2:	d826      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056a8:	d02b      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80056aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056ae:	d820      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056b4:	d012      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80056b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ba:	d81a      	bhi.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d022      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d115      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056ca:	3308      	adds	r3, #8
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f002 f8e0 	bl	8007894 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056da:	e015      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056e0:	3328      	adds	r3, #40	; 0x28
 80056e2:	2101      	movs	r1, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f002 f987 	bl	80079f8 <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056f0:	e00a      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fa:	bf00      	nop
 80056fc:	e004      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056fe:	bf00      	nop
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10d      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800571e:	4a02      	ldr	r2, [pc, #8]	; (8005728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	; 0x50
 8005724:	e006      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005726:	bf00      	nop
 8005728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005730:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005744:	2300      	movs	r3, #0
 8005746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800574a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800574e:	460b      	mov	r3, r1
 8005750:	4313      	orrs	r3, r2
 8005752:	d055      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005760:	d033      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005766:	d82c      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576c:	d02f      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005772:	d826      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005778:	d02b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800577a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800577e:	d820      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005784:	d012      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578a:	d81a      	bhi.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d022      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005794:	d115      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800579a:	3308      	adds	r3, #8
 800579c:	2101      	movs	r1, #1
 800579e:	4618      	mov	r0, r3
 80057a0:	f002 f878 	bl	8007894 <RCCEx_PLL2_Config>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057aa:	e015      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057b0:	3328      	adds	r3, #40	; 0x28
 80057b2:	2101      	movs	r1, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f002 f91f 	bl	80079f8 <RCCEx_PLL3_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80057c0:	e00a      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057c8:	e006      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ca:	bf00      	nop
 80057cc:	e004      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057ce:	bf00      	nop
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057e0:	4ba3      	ldr	r3, [pc, #652]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057f0:	4a9f      	ldr	r2, [pc, #636]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6593      	str	r3, [r2, #88]	; 0x58
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800580c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d037      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582a:	d00e      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800582c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005830:	d816      	bhi.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d018      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583a:	d111      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583c:	4b8c      	ldr	r3, [pc, #560]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a8b      	ldr	r2, [pc, #556]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005848:	e00f      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800584e:	3308      	adds	r3, #8
 8005850:	2101      	movs	r1, #1
 8005852:	4618      	mov	r0, r3
 8005854:	f002 f81e 	bl	8007894 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800585e:	e004      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005866:	e000      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800586a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005872:	4b7f      	ldr	r3, [pc, #508]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	4a7b      	ldr	r2, [pc, #492]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005882:	430b      	orrs	r3, r1
 8005884:	6513      	str	r3, [r2, #80]	; 0x50
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800588c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800589c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d039      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d81c      	bhi.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058fd 	.word	0x080058fd
 80058c4:	080058d1 	.word	0x080058d1
 80058c8:	080058df 	.word	0x080058df
 80058cc:	080058fd 	.word	0x080058fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d0:	4b67      	ldr	r3, [pc, #412]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	4a66      	ldr	r2, [pc, #408]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058dc:	e00f      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e2:	3308      	adds	r3, #8
 80058e4:	2102      	movs	r1, #2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 ffd4 	bl	8007894 <RCCEx_PLL2_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058f2:	e004      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058fa:	e000      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80058fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005906:	4b5a      	ldr	r3, [pc, #360]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f023 0103 	bic.w	r1, r3, #3
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005914:	4a56      	ldr	r2, [pc, #344]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005916:	430b      	orrs	r3, r1
 8005918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800591a:	e003      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005934:	2300      	movs	r3, #0
 8005936:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800593a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800593e:	460b      	mov	r3, r1
 8005940:	4313      	orrs	r3, r2
 8005942:	f000 809f 	beq.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005946:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005952:	f7fb ff59 	bl	8001808 <HAL_GetTick>
 8005956:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595a:	e00b      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595c:	f7fb ff54 	bl	8001808 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b64      	cmp	r3, #100	; 0x64
 800596a:	d903      	bls.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005972:	e005      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005974:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ed      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005980:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005984:	2b00      	cmp	r3, #0
 8005986:	d179      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005988:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005994:	4053      	eors	r3, r2
 8005996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800599e:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059aa:	4b31      	ldr	r3, [pc, #196]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a30      	ldr	r2, [pc, #192]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059b6:	4b2e      	ldr	r3, [pc, #184]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a2d      	ldr	r2, [pc, #180]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059c2:	4a2b      	ldr	r2, [pc, #172]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d6:	d118      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d8:	f7fb ff16 	bl	8001808 <HAL_GetTick>
 80059dc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e0:	e00d      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e2:	f7fb ff11 	bl	8001808 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80059fc:	e005      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059fe:	4b1c      	ldr	r3, [pc, #112]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0eb      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d129      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a22:	d10e      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a34:	091a      	lsrs	r2, r3, #4
 8005a36:	4b10      	ldr	r3, [pc, #64]	; (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a3c:	430b      	orrs	r3, r1
 8005a3e:	6113      	str	r3, [r2, #16]
 8005a40:	e005      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	4a0a      	ldr	r2, [pc, #40]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a4c:	6113      	str	r3, [r2, #16]
 8005a4e:	4b08      	ldr	r3, [pc, #32]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a50:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5e:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
 8005a64:	e00e      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005a6e:	e009      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005a70:	58024400 	.word	0x58024400
 8005a74:	58024800 	.word	0x58024800
 8005a78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f002 0301 	and.w	r3, r2, #1
 8005a90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a94:	2300      	movs	r3, #0
 8005a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	f000 8089 	beq.w	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aac:	2b28      	cmp	r3, #40	; 0x28
 8005aae:	d86b      	bhi.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005b91 	.word	0x08005b91
 8005abc:	08005b89 	.word	0x08005b89
 8005ac0:	08005b89 	.word	0x08005b89
 8005ac4:	08005b89 	.word	0x08005b89
 8005ac8:	08005b89 	.word	0x08005b89
 8005acc:	08005b89 	.word	0x08005b89
 8005ad0:	08005b89 	.word	0x08005b89
 8005ad4:	08005b89 	.word	0x08005b89
 8005ad8:	08005b5d 	.word	0x08005b5d
 8005adc:	08005b89 	.word	0x08005b89
 8005ae0:	08005b89 	.word	0x08005b89
 8005ae4:	08005b89 	.word	0x08005b89
 8005ae8:	08005b89 	.word	0x08005b89
 8005aec:	08005b89 	.word	0x08005b89
 8005af0:	08005b89 	.word	0x08005b89
 8005af4:	08005b89 	.word	0x08005b89
 8005af8:	08005b73 	.word	0x08005b73
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005b89 	.word	0x08005b89
 8005b04:	08005b89 	.word	0x08005b89
 8005b08:	08005b89 	.word	0x08005b89
 8005b0c:	08005b89 	.word	0x08005b89
 8005b10:	08005b89 	.word	0x08005b89
 8005b14:	08005b89 	.word	0x08005b89
 8005b18:	08005b91 	.word	0x08005b91
 8005b1c:	08005b89 	.word	0x08005b89
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b89 	.word	0x08005b89
 8005b28:	08005b89 	.word	0x08005b89
 8005b2c:	08005b89 	.word	0x08005b89
 8005b30:	08005b89 	.word	0x08005b89
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b91 	.word	0x08005b91
 8005b3c:	08005b89 	.word	0x08005b89
 8005b40:	08005b89 	.word	0x08005b89
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b89 	.word	0x08005b89
 8005b4c:	08005b89 	.word	0x08005b89
 8005b50:	08005b89 	.word	0x08005b89
 8005b54:	08005b89 	.word	0x08005b89
 8005b58:	08005b91 	.word	0x08005b91
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b60:	3308      	adds	r3, #8
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fe95 	bl	8007894 <RCCEx_PLL2_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b70:	e00f      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b76:	3328      	adds	r3, #40	; 0x28
 8005b78:	2101      	movs	r1, #1
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 ff3c 	bl	80079f8 <RCCEx_PLL3_Config>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b86:	e004      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b8e:	e000      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b9a:	4bbf      	ldr	r3, [pc, #764]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba8:	4abb      	ldr	r2, [pc, #748]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6553      	str	r3, [r2, #84]	; 0x54
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f002 0302 	and.w	r3, r2, #2
 8005bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005bce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d041      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bde:	2b05      	cmp	r3, #5
 8005be0:	d824      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c35 	.word	0x08005c35
 8005bec:	08005c01 	.word	0x08005c01
 8005bf0:	08005c17 	.word	0x08005c17
 8005bf4:	08005c35 	.word	0x08005c35
 8005bf8:	08005c35 	.word	0x08005c35
 8005bfc:	08005c35 	.word	0x08005c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c04:	3308      	adds	r3, #8
 8005c06:	2101      	movs	r1, #1
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fe43 	bl	8007894 <RCCEx_PLL2_Config>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c14:	e00f      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1a:	3328      	adds	r3, #40	; 0x28
 8005c1c:	2101      	movs	r1, #1
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 feea 	bl	80079f8 <RCCEx_PLL3_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c3e:	4b96      	ldr	r3, [pc, #600]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f023 0107 	bic.w	r1, r3, #7
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c4c:	4a92      	ldr	r2, [pc, #584]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c4e:	430b      	orrs	r3, r1
 8005c50:	6553      	str	r3, [r2, #84]	; 0x54
 8005c52:	e003      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f002 0304 	and.w	r3, r2, #4
 8005c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c72:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	d044      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c84:	2b05      	cmp	r3, #5
 8005c86:	d825      	bhi.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005c88:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005ca9 	.word	0x08005ca9
 8005c98:	08005cbf 	.word	0x08005cbf
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cdd 	.word	0x08005cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cac:	3308      	adds	r3, #8
 8005cae:	2101      	movs	r1, #1
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fdef 	bl	8007894 <RCCEx_PLL2_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cbc:	e00f      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc2:	3328      	adds	r3, #40	; 0x28
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 fe96 	bl	80079f8 <RCCEx_PLL3_Config>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ce6:	4b6c      	ldr	r3, [pc, #432]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cea:	f023 0107 	bic.w	r1, r3, #7
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cf6:	4a68      	ldr	r2, [pc, #416]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8005cfc:	e003      	b.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f002 0320 	and.w	r3, r2, #32
 8005d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d16:	2300      	movs	r3, #0
 8005d18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d055      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d32:	d033      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d38:	d82c      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3e:	d02f      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d826      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d4a:	d02b      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d50:	d820      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d56:	d012      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005d58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d5c:	d81a      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d022      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005d62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d66:	d115      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fd8f 	bl	8007894 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d7c:	e015      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d82:	3328      	adds	r3, #40	; 0x28
 8005d84:	2102      	movs	r1, #2
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fe36 	bl	80079f8 <RCCEx_PLL3_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d92:	e00a      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d9a:	e006      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d9c:	bf00      	nop
 8005d9e:	e004      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005da0:	bf00      	nop
 8005da2:	e002      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005da4:	bf00      	nop
 8005da6:	e000      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005daa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc2:	4a35      	ldr	r2, [pc, #212]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dc4:	430b      	orrs	r3, r1
 8005dc6:	6553      	str	r3, [r2, #84]	; 0x54
 8005dc8:	e003      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005dce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005de8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4313      	orrs	r3, r2
 8005df0:	d058      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dfe:	d033      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005e00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005e04:	d82c      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e0a:	d02f      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e10:	d826      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e16:	d02b      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e1c:	d820      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e22:	d012      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e28:	d81a      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d022      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e32:	d115      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e38:	3308      	adds	r3, #8
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f001 fd29 	bl	8007894 <RCCEx_PLL2_Config>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e48:	e015      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e4e:	3328      	adds	r3, #40	; 0x28
 8005e50:	2102      	movs	r1, #2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fdd0 	bl	80079f8 <RCCEx_PLL3_Config>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e66:	e006      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e68:	bf00      	nop
 8005e6a:	e004      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10e      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e7e:	4b06      	ldr	r3, [pc, #24]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8e:	4a02      	ldr	r2, [pc, #8]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e90:	430b      	orrs	r3, r1
 8005e92:	6593      	str	r3, [r2, #88]	; 0x58
 8005e94:	e006      	b.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e96:	bf00      	nop
 8005e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d055      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ecc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ed0:	d033      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ed2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ed6:	d82c      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005edc:	d02f      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee2:	d826      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ee4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ee8:	d02b      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005eea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005eee:	d820      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ef4:	d012      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005efa:	d81a      	bhi.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f04:	d115      	bne.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	3308      	adds	r3, #8
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fcc0 	bl	8007894 <RCCEx_PLL2_Config>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f20:	3328      	adds	r3, #40	; 0x28
 8005f22:	2102      	movs	r1, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 fd67 	bl	80079f8 <RCCEx_PLL3_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f30:	e00a      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f38:	e006      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f50:	4ba1      	ldr	r3, [pc, #644]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f60:	4a9d      	ldr	r2, [pc, #628]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6593      	str	r3, [r2, #88]	; 0x58
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f6c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0308 	and.w	r3, r2, #8
 8005f7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f86:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d01e      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa2:	3328      	adds	r3, #40	; 0x28
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f001 fd26 	bl	80079f8 <RCCEx_PLL3_Config>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005fb8:	4b87      	ldr	r3, [pc, #540]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc8:	4a83      	ldr	r2, [pc, #524]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f002 0310 	and.w	r3, r2, #16
 8005fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fe4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4313      	orrs	r3, r2
 8005fec:	d01e      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffa:	d10c      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006000:	3328      	adds	r3, #40	; 0x28
 8006002:	2102      	movs	r1, #2
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fcf7 	bl	80079f8 <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006016:	4b70      	ldr	r3, [pc, #448]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006026:	4a6c      	ldr	r2, [pc, #432]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006028:	430b      	orrs	r3, r1
 800602a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800602c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800603c:	2300      	movs	r3, #0
 800603e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006042:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006046:	460b      	mov	r3, r1
 8006048:	4313      	orrs	r3, r2
 800604a:	d03e      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800604c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006058:	d022      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800605a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800605e:	d81b      	bhi.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006068:	d00b      	beq.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800606a:	e015      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800606c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006070:	3308      	adds	r3, #8
 8006072:	2100      	movs	r1, #0
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fc0d 	bl	8007894 <RCCEx_PLL2_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006080:	e00f      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006086:	3328      	adds	r3, #40	; 0x28
 8006088:	2102      	movs	r1, #2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 fcb4 	bl	80079f8 <RCCEx_PLL3_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006096:	e004      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800609e:	e000      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80060a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060aa:	4b4b      	ldr	r3, [pc, #300]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060ba:	4a47      	ldr	r2, [pc, #284]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060bc:	430b      	orrs	r3, r1
 80060be:	6593      	str	r3, [r2, #88]	; 0x58
 80060c0:	e003      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80060d8:	2300      	movs	r3, #0
 80060da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060f2:	d01f      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80060f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060f8:	d818      	bhi.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80060fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060fe:	d003      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006100:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006104:	d007      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006106:	e011      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b33      	ldr	r3, [pc, #204]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	4a32      	ldr	r2, [pc, #200]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006114:	e00f      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611a:	3328      	adds	r3, #40	; 0x28
 800611c:	2101      	movs	r1, #1
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fc6a 	bl	80079f8 <RCCEx_PLL3_Config>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800612a:	e004      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006132:	e000      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10b      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800613e:	4b26      	ldr	r3, [pc, #152]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	4a22      	ldr	r2, [pc, #136]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006150:	430b      	orrs	r3, r1
 8006152:	6553      	str	r3, [r2, #84]	; 0x54
 8006154:	e003      	b.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800615a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006166:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800616a:	673b      	str	r3, [r7, #112]	; 0x70
 800616c:	2300      	movs	r3, #0
 800616e:	677b      	str	r3, [r7, #116]	; 0x74
 8006170:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006174:	460b      	mov	r3, r1
 8006176:	4313      	orrs	r3, r2
 8006178:	d034      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800617e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d007      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800618a:	e011      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4a11      	ldr	r2, [pc, #68]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006198:	e00e      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619e:	3308      	adds	r3, #8
 80061a0:	2102      	movs	r1, #2
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fb76 	bl	8007894 <RCCEx_PLL2_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80061ae:	e003      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10d      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ce:	4a02      	ldr	r2, [pc, #8]	; (80061d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061d0:	430b      	orrs	r3, r1
 80061d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061d4:	e006      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80061d6:	bf00      	nop
 80061d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f2:	2300      	movs	r3, #0
 80061f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061fa:	460b      	mov	r3, r1
 80061fc:	4313      	orrs	r3, r2
 80061fe:	d00c      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006204:	3328      	adds	r3, #40	; 0x28
 8006206:	2102      	movs	r1, #2
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fbf5 	bl	80079f8 <RCCEx_PLL3_Config>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006226:	663b      	str	r3, [r7, #96]	; 0x60
 8006228:	2300      	movs	r3, #0
 800622a:	667b      	str	r3, [r7, #100]	; 0x64
 800622c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006230:	460b      	mov	r3, r1
 8006232:	4313      	orrs	r3, r2
 8006234:	d038      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800623a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800623e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006242:	d018      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006248:	d811      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800624a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624e:	d014      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006254:	d80b      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006256:	2b00      	cmp	r3, #0
 8006258:	d011      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800625a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625e:	d106      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006260:	4bc3      	ldr	r3, [pc, #780]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	4ac2      	ldr	r2, [pc, #776]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800626c:	e008      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006274:	e004      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006276:	bf00      	nop
 8006278:	e002      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800627a:	bf00      	nop
 800627c:	e000      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800627e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006288:	4bb9      	ldr	r3, [pc, #740]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800628a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006294:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006298:	4ab5      	ldr	r2, [pc, #724]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800629a:	430b      	orrs	r3, r1
 800629c:	6553      	str	r3, [r2, #84]	; 0x54
 800629e:	e003      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80062b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80062b6:	2300      	movs	r3, #0
 80062b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80062be:	460b      	mov	r3, r1
 80062c0:	4313      	orrs	r3, r2
 80062c2:	d009      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062c4:	4baa      	ldr	r3, [pc, #680]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d2:	4aa7      	ldr	r2, [pc, #668]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062d4:	430b      	orrs	r3, r1
 80062d6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80062e4:	653b      	str	r3, [r7, #80]	; 0x50
 80062e6:	2300      	movs	r3, #0
 80062e8:	657b      	str	r3, [r7, #84]	; 0x54
 80062ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80062ee:	460b      	mov	r3, r1
 80062f0:	4313      	orrs	r3, r2
 80062f2:	d00a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062f4:	4b9e      	ldr	r3, [pc, #632]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80062fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006300:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006304:	4a9a      	ldr	r2, [pc, #616]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006306:	430b      	orrs	r3, r1
 8006308:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800630a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006316:	64bb      	str	r3, [r7, #72]	; 0x48
 8006318:	2300      	movs	r3, #0
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800631c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d009      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006326:	4b92      	ldr	r3, [pc, #584]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800632e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006334:	4a8e      	ldr	r2, [pc, #568]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006336:	430b      	orrs	r3, r1
 8006338:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006342:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006346:	643b      	str	r3, [r7, #64]	; 0x40
 8006348:	2300      	movs	r3, #0
 800634a:	647b      	str	r3, [r7, #68]	; 0x44
 800634c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006350:	460b      	mov	r3, r1
 8006352:	4313      	orrs	r3, r2
 8006354:	d00e      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006356:	4b86      	ldr	r3, [pc, #536]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	4a85      	ldr	r2, [pc, #532]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800635c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006360:	6113      	str	r3, [r2, #16]
 8006362:	4b83      	ldr	r3, [pc, #524]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006364:	6919      	ldr	r1, [r3, #16]
 8006366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800636a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800636e:	4a80      	ldr	r2, [pc, #512]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006370:	430b      	orrs	r3, r1
 8006372:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006380:	63bb      	str	r3, [r7, #56]	; 0x38
 8006382:	2300      	movs	r3, #0
 8006384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006386:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800638a:	460b      	mov	r3, r1
 800638c:	4313      	orrs	r3, r2
 800638e:	d009      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006390:	4b77      	ldr	r3, [pc, #476]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006394:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	4a74      	ldr	r2, [pc, #464]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a0:	430b      	orrs	r3, r1
 80063a2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80063b0:	633b      	str	r3, [r7, #48]	; 0x30
 80063b2:	2300      	movs	r3, #0
 80063b4:	637b      	str	r3, [r7, #52]	; 0x34
 80063b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80063ba:	460b      	mov	r3, r1
 80063bc:	4313      	orrs	r3, r2
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063c0:	4b6b      	ldr	r3, [pc, #428]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80063c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063d0:	4a67      	ldr	r2, [pc, #412]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	2100      	movs	r1, #0
 80063e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80063ec:	460b      	mov	r3, r1
 80063ee:	4313      	orrs	r3, r2
 80063f0:	d011      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063f6:	3308      	adds	r3, #8
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f001 fa4a 	bl	8007894 <RCCEx_PLL2_Config>
 8006400:	4603      	mov	r3, r0
 8006402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006406:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006412:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	2100      	movs	r1, #0
 8006420:	6239      	str	r1, [r7, #32]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
 8006428:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800642c:	460b      	mov	r3, r1
 800642e:	4313      	orrs	r3, r2
 8006430:	d011      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006436:	3308      	adds	r3, #8
 8006438:	2101      	movs	r1, #1
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fa2a 	bl	8007894 <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006452:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	2100      	movs	r1, #0
 8006460:	61b9      	str	r1, [r7, #24]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d011      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006476:	3308      	adds	r3, #8
 8006478:	2102      	movs	r1, #2
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fa0a 	bl	8007894 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006492:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	2100      	movs	r1, #0
 80064a0:	6139      	str	r1, [r7, #16]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80064ac:	460b      	mov	r3, r1
 80064ae:	4313      	orrs	r3, r2
 80064b0:	d011      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b6:	3328      	adds	r3, #40	; 0x28
 80064b8:	2100      	movs	r1, #0
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fa9c 	bl	80079f8 <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80064c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	2100      	movs	r1, #0
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064ec:	460b      	mov	r3, r1
 80064ee:	4313      	orrs	r3, r2
 80064f0:	d011      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f6:	3328      	adds	r3, #40	; 0x28
 80064f8:	2101      	movs	r1, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f001 fa7c 	bl	80079f8 <RCCEx_PLL3_Config>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006506:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006512:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	2100      	movs	r1, #0
 8006520:	6039      	str	r1, [r7, #0]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	607b      	str	r3, [r7, #4]
 8006528:	e9d7 1200 	ldrd	r1, r2, [r7]
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d011      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006536:	3328      	adds	r3, #40	; 0x28
 8006538:	2102      	movs	r1, #2
 800653a:	4618      	mov	r0, r3
 800653c:	f001 fa5c 	bl	80079f8 <RCCEx_PLL3_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006556:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
}
 8006564:	4618      	mov	r0, r3
 8006566:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800656a:	46bd      	mov	sp, r7
 800656c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006570:	58024400 	.word	0x58024400

08006574 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b090      	sub	sp, #64	; 0x40
 8006578:	af00      	add	r7, sp, #0
 800657a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800657e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006582:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006586:	430b      	orrs	r3, r1
 8006588:	f040 8094 	bne.w	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800658c:	4b9e      	ldr	r3, [pc, #632]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	2b04      	cmp	r3, #4
 800659a:	f200 8087 	bhi.w	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065b9 	.word	0x080065b9
 80065a8:	080065e1 	.word	0x080065e1
 80065ac:	08006609 	.word	0x08006609
 80065b0:	080066a5 	.word	0x080066a5
 80065b4:	08006631 	.word	0x08006631
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065b8:	4b93      	ldr	r3, [pc, #588]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065c4:	d108      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 f810 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065d4:	f000 bd45 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065dc:	f000 bd41 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065e0:	4b89      	ldr	r3, [pc, #548]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ec:	d108      	bne.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ee:	f107 0318 	add.w	r3, r7, #24
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fd54 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065fc:	f000 bd31 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006600:	2300      	movs	r3, #0
 8006602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006604:	f000 bd2d 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006608:	4b7f      	ldr	r3, [pc, #508]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006610:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006614:	d108      	bne.n	8006628 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006616:	f107 030c 	add.w	r3, r7, #12
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fe94 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006624:	f000 bd1d 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800662c:	f000 bd19 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006630:	4b75      	ldr	r3, [pc, #468]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006634:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006638:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663a:	4b73      	ldr	r3, [pc, #460]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b04      	cmp	r3, #4
 8006644:	d10c      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800664c:	4b6e      	ldr	r3, [pc, #440]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a6d      	ldr	r2, [pc, #436]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800665e:	e01f      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006660:	4b69      	ldr	r3, [pc, #420]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006674:	d102      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006676:	4b66      	ldr	r3, [pc, #408]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667a:	e011      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800667c:	4b62      	ldr	r3, [pc, #392]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006688:	d106      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800668a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006690:	d102      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006692:	4b60      	ldr	r3, [pc, #384]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006696:	e003      	b.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800669c:	f000 bce1 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066a0:	f000 bcdf 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066a4:	4b5c      	ldr	r3, [pc, #368]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066a8:	f000 bcdb 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066b0:	f000 bcd7 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80066b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066b8:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80066bc:	430b      	orrs	r3, r1
 80066be:	f040 80ad 	bne.w	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80066c2:	4b51      	ldr	r3, [pc, #324]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d056      	beq.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066da:	f200 8090 	bhi.w	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	2bc0      	cmp	r3, #192	; 0xc0
 80066e2:	f000 8088 	beq.w	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	2bc0      	cmp	r3, #192	; 0xc0
 80066ea:	f200 8088 	bhi.w	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	2b80      	cmp	r3, #128	; 0x80
 80066f2:	d032      	beq.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f6:	2b80      	cmp	r3, #128	; 0x80
 80066f8:	f200 8081 	bhi.w	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d014      	beq.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006708:	e079      	b.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800670a:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006712:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006716:	d108      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800671c:	4618      	mov	r0, r3
 800671e:	f000 ff67 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006726:	f000 bc9c 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800672e:	f000 bc98 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006732:	4b35      	ldr	r3, [pc, #212]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800673a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800673e:	d108      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006740:	f107 0318 	add.w	r3, r7, #24
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fcab 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800674e:	f000 bc88 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006756:	f000 bc84 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800675a:	4b2b      	ldr	r3, [pc, #172]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006766:	d108      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fdeb 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006776:	f000 bc74 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800677a:	2300      	movs	r3, #0
 800677c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800677e:	f000 bc70 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800678a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b04      	cmp	r3, #4
 8006796:	d10c      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d109      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800679e:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	08db      	lsrs	r3, r3, #3
 80067a4:	f003 0303 	and.w	r3, r3, #3
 80067a8:	4a18      	ldr	r2, [pc, #96]	; (800680c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80067aa:	fa22 f303 	lsr.w	r3, r2, r3
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b0:	e01f      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	d106      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80067c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c6:	d102      	bne.n	80067ce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80067c8:	4b11      	ldr	r3, [pc, #68]	; (8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067cc:	e011      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067ce:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067da:	d106      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e2:	d102      	bne.n	80067ea <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067ee:	f000 bc38 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067f2:	f000 bc36 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067f6:	4b08      	ldr	r3, [pc, #32]	; (8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fa:	f000 bc32 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006802:	f000 bc2e 	b.w	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006806:	bf00      	nop
 8006808:	58024400 	.word	0x58024400
 800680c:	03d09000 	.word	0x03d09000
 8006810:	003d0900 	.word	0x003d0900
 8006814:	017d7840 	.word	0x017d7840
 8006818:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800681c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006820:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006824:	430b      	orrs	r3, r1
 8006826:	f040 809c 	bne.w	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800682a:	4b9e      	ldr	r3, [pc, #632]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006832:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800683a:	d054      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006842:	f200 808b 	bhi.w	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800684c:	f000 8083 	beq.w	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006856:	f200 8081 	bhi.w	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006860:	d02f      	beq.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006868:	d878      	bhi.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006876:	d012      	beq.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006878:	e070      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800687a:	4b8a      	ldr	r3, [pc, #552]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006882:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006886:	d107      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688c:	4618      	mov	r0, r3
 800688e:	f000 feaf 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006896:	e3e4      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006898:	2300      	movs	r3, #0
 800689a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800689c:	e3e1      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800689e:	4b81      	ldr	r3, [pc, #516]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068aa:	d107      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ac:	f107 0318 	add.w	r3, r7, #24
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fbf5 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ba:	e3d2      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c0:	e3cf      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068c2:	4b78      	ldr	r3, [pc, #480]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ce:	d107      	bne.n	80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d0:	f107 030c 	add.w	r3, r7, #12
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fd37 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068de:	e3c0      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068e0:	2300      	movs	r3, #0
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068e4:	e3bd      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068e6:	4b6f      	ldr	r3, [pc, #444]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068f0:	4b6c      	ldr	r3, [pc, #432]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b04      	cmp	r3, #4
 80068fa:	d10c      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80068fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006902:	4b68      	ldr	r3, [pc, #416]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	08db      	lsrs	r3, r3, #3
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	4a66      	ldr	r2, [pc, #408]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800690e:	fa22 f303 	lsr.w	r3, r2, r3
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006914:	e01e      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006916:	4b63      	ldr	r3, [pc, #396]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006922:	d106      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692a:	d102      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800692c:	4b5f      	ldr	r3, [pc, #380]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006930:	e010      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006932:	4b5c      	ldr	r3, [pc, #368]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800693a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800693e:	d106      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006946:	d102      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006948:	4b59      	ldr	r3, [pc, #356]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694c:	e002      	b.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006952:	e386      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006954:	e385      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006956:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800695a:	e382      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800695c:	2300      	movs	r3, #0
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006960:	e37f      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006966:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800696a:	430b      	orrs	r3, r1
 800696c:	f040 80a7 	bne.w	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006970:	4b4c      	ldr	r3, [pc, #304]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006974:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006978:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006980:	d055      	beq.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006988:	f200 8096 	bhi.w	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006992:	f000 8084 	beq.w	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800699c:	f200 808c 	bhi.w	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a6:	d030      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ae:	f200 8083 	bhi.w	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80069b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d004      	beq.n	80069c2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069be:	d012      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80069c0:	e07a      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80069c2:	4b38      	ldr	r3, [pc, #224]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ce:	d107      	bne.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fe0b 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069de:	e340      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e4:	e33d      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069e6:	4b2f      	ldr	r3, [pc, #188]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f2:	d107      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f4:	f107 0318 	add.w	r3, r7, #24
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fb51 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a02:	e32e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a08:	e32b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a0a:	4b26      	ldr	r3, [pc, #152]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a16:	d107      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fc93 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a26:	e31c      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a2c:	e319      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a2e:	4b1d      	ldr	r3, [pc, #116]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0304 	and.w	r3, r3, #4
 8006a40:	2b04      	cmp	r3, #4
 8006a42:	d10c      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a4a:	4b16      	ldr	r3, [pc, #88]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	08db      	lsrs	r3, r3, #3
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	4a14      	ldr	r2, [pc, #80]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a56:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5c:	e01e      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6a:	d106      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a72:	d102      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a74:	4b0d      	ldr	r3, [pc, #52]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a78:	e010      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a86:	d106      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a8e:	d102      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a94:	e002      	b.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a96:	2300      	movs	r3, #0
 8006a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a9a:	e2e2      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a9c:	e2e1      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a9e:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aa2:	e2de      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006aa4:	58024400 	.word	0x58024400
 8006aa8:	03d09000 	.word	0x03d09000
 8006aac:	003d0900 	.word	0x003d0900
 8006ab0:	017d7840 	.word	0x017d7840
 8006ab4:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006abc:	e2d1      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	f040 809c 	bne.w	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006acc:	4b93      	ldr	r3, [pc, #588]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006ad4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006adc:	d054      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ae4:	f200 808b 	bhi.w	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aee:	f000 8083 	beq.w	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006af8:	f200 8081 	bhi.w	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b02:	d02f      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0a:	d878      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d004      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b18:	d012      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006b1a:	e070      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b1c:	4b7f      	ldr	r3, [pc, #508]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b28:	d107      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd5e 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b38:	e293      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3e:	e290      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b40:	4b76      	ldr	r3, [pc, #472]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b4c:	d107      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b4e:	f107 0318 	add.w	r3, r7, #24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 faa4 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b5c:	e281      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b62:	e27e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b64:	4b6d      	ldr	r3, [pc, #436]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b70:	d107      	bne.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b72:	f107 030c 	add.w	r3, r7, #12
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fbe6 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b80:	e26f      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b86:	e26c      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b88:	4b64      	ldr	r3, [pc, #400]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b92:	4b62      	ldr	r3, [pc, #392]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d109      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ba4:	4b5d      	ldr	r3, [pc, #372]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	08db      	lsrs	r3, r3, #3
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	4a5c      	ldr	r2, [pc, #368]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb6:	e01e      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bb8:	4b58      	ldr	r3, [pc, #352]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc4:	d106      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bcc:	d102      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006bce:	4b55      	ldr	r3, [pc, #340]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd2:	e010      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bd4:	4b51      	ldr	r3, [pc, #324]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be0:	d106      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be8:	d102      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bea:	4b4f      	ldr	r3, [pc, #316]	; (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006bec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bee:	e002      	b.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bf4:	e235      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bf6:	e234      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bf8:	4b4c      	ldr	r3, [pc, #304]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bfc:	e231      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c02:	e22e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006c04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c08:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006c0c:	430b      	orrs	r3, r1
 8006c0e:	f040 808f 	bne.w	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006c12:	4b42      	ldr	r3, [pc, #264]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c16:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c1a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c22:	d06b      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c2a:	d874      	bhi.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c32:	d056      	beq.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c3a:	d86c      	bhi.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c42:	d03b      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c4a:	d864      	bhi.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c52:	d021      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c5a:	d85c      	bhi.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c68:	d004      	beq.n	8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006c6a:	e054      	b.n	8006d16 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006c6c:	f7fe fa4c 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8006c70:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c72:	e1f6      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c74:	4b29      	ldr	r3, [pc, #164]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c80:	d107      	bne.n	8006c92 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c82:	f107 0318 	add.w	r3, r7, #24
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fa0a 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c90:	e1e7      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c96:	e1e4      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c98:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca4:	d107      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ca6:	f107 030c 	add.w	r3, r7, #12
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fb4c 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cb4:	e1d5      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cba:	e1d2      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cbc:	4b17      	ldr	r3, [pc, #92]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d109      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cc8:	4b14      	ldr	r3, [pc, #80]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	08db      	lsrs	r3, r3, #3
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	4a13      	ldr	r2, [pc, #76]	; (8006d20 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cda:	e1c2      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce0:	e1bf      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cee:	d102      	bne.n	8006cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cf4:	e1b5      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cfa:	e1b2      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d08:	d102      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d0e:	e1a8      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d14:	e1a5      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d1a:	e1a2      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	03d09000 	.word	0x03d09000
 8006d24:	003d0900 	.word	0x003d0900
 8006d28:	017d7840 	.word	0x017d7840
 8006d2c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d34:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006d38:	430b      	orrs	r3, r1
 8006d3a:	d173      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d3c:	4b9c      	ldr	r3, [pc, #624]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d4c:	d02f      	beq.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d54:	d863      	bhi.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d62:	d012      	beq.n	8006d8a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d64:	e05b      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d66:	4b92      	ldr	r3, [pc, #584]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d72:	d107      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d74:	f107 0318 	add.w	r3, r7, #24
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 f991 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d82:	e16e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d88:	e16b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d8a:	4b89      	ldr	r3, [pc, #548]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d96:	d107      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d98:	f107 030c 	add.w	r3, r7, #12
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fad3 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006da6:	e15c      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006da8:	2300      	movs	r3, #0
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dac:	e159      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dae:	4b80      	ldr	r3, [pc, #512]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006db8:	4b7d      	ldr	r3, [pc, #500]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d10c      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dca:	4b79      	ldr	r3, [pc, #484]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0303 	and.w	r3, r3, #3
 8006dd4:	4a77      	ldr	r2, [pc, #476]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ddc:	e01e      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dde:	4b74      	ldr	r3, [pc, #464]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dea:	d106      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df2:	d102      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006df4:	4b70      	ldr	r3, [pc, #448]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df8:	e010      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dfa:	4b6d      	ldr	r3, [pc, #436]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e06:	d106      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e0e:	d102      	bne.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e10:	4b6a      	ldr	r3, [pc, #424]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e14:	e002      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e1a:	e122      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e1c:	e121      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e22:	e11e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e28:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e2c:	430b      	orrs	r3, r1
 8006e2e:	d133      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e30:	4b5f      	ldr	r3, [pc, #380]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e38:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e46:	d012      	beq.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006e48:	e023      	b.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e4a:	4b59      	ldr	r3, [pc, #356]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e56:	d107      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fbc7 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e66:	e0fc      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6c:	e0f9      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e6e:	4b50      	ldr	r3, [pc, #320]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e7c:	f107 0318 	add.w	r3, r7, #24
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 f90d 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8a:	e0ea      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e90:	e0e7      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e96:	e0e4      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e9c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	f040 808d 	bne.w	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006ea6:	4b42      	ldr	r3, [pc, #264]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eaa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006eae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb6:	d06b      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ebe:	d874      	bhi.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ec6:	d056      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ece:	d86c      	bhi.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ed6:	d03b      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ede:	d864      	bhi.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ee6:	d021      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eee:	d85c      	bhi.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006efc:	d004      	beq.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006efe:	e054      	b.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006f00:	f000 f8b8 	bl	8007074 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f04:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f06:	e0ac      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f08:	4b29      	ldr	r3, [pc, #164]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f14:	d107      	bne.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f8c0 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f24:	e09d      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f2a:	e09a      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f2c:	4b20      	ldr	r3, [pc, #128]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f38:	d107      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f3a:	f107 030c 	add.w	r3, r7, #12
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 fa02 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f48:	e08b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f4e:	e088      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f50:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d109      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f5c:	4b14      	ldr	r3, [pc, #80]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	08db      	lsrs	r3, r3, #3
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f6e:	e078      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f74:	e075      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f76:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f82:	d102      	bne.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f88:	e06b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f8e:	e068      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f9c:	d102      	bne.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa2:	e05e      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa8:	e05b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006faa:	2300      	movs	r3, #0
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fae:	e058      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	03d09000 	.word	0x03d09000
 8006fb8:	003d0900 	.word	0x003d0900
 8006fbc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	d148      	bne.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006fcc:	4b27      	ldr	r3, [pc, #156]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fdc:	d02a      	beq.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe4:	d838      	bhi.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d004      	beq.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ff2:	d00d      	beq.n	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006ff4:	e030      	b.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007002:	d102      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8007004:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007008:	e02b      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800700e:	e028      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007010:	4b16      	ldr	r3, [pc, #88]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800701c:	d107      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800701e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fae4 	bl	80075f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800702c:	e019      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007032:	e016      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007034:	4b0d      	ldr	r3, [pc, #52]	; (800706c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007040:	d107      	bne.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007042:	f107 0318 	add.w	r3, r7, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f000 f82a 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007050:	e007      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007052:	2300      	movs	r3, #0
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007056:	e004      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800705c:	e001      	b.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007064:	4618      	mov	r0, r3
 8007066:	3740      	adds	r7, #64	; 0x40
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	58024400 	.word	0x58024400
 8007070:	017d7840 	.word	0x017d7840

08007074 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007078:	f7fe f816 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b06      	ldr	r3, [pc, #24]	; (8007098 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	091b      	lsrs	r3, r3, #4
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4904      	ldr	r1, [pc, #16]	; (800709c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007094:	4618      	mov	r0, r3
 8007096:	bd80      	pop	{r7, pc}
 8007098:	58024400 	.word	0x58024400
 800709c:	0800964c 	.word	0x0800964c

080070a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b089      	sub	sp, #36	; 0x24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070a8:	4ba1      	ldr	r3, [pc, #644]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	f003 0303 	and.w	r3, r3, #3
 80070b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80070b2:	4b9f      	ldr	r3, [pc, #636]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	0b1b      	lsrs	r3, r3, #12
 80070b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070be:	4b9c      	ldr	r3, [pc, #624]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80070ca:	4b99      	ldr	r3, [pc, #612]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	08db      	lsrs	r3, r3, #3
 80070d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 8111 	beq.w	8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	f000 8083 	beq.w	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	f200 80a1 	bhi.w	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d056      	beq.n	80071b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800710a:	e099      	b.n	8007240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800710c:	4b88      	ldr	r3, [pc, #544]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02d      	beq.n	8007174 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007118:	4b85      	ldr	r3, [pc, #532]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	4a84      	ldr	r2, [pc, #528]	; (8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007142:	4b7b      	ldr	r3, [pc, #492]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007152:	ed97 6a03 	vldr	s12, [r7, #12]
 8007156:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800715a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007172:	e087      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800733c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007186:	4b6a      	ldr	r3, [pc, #424]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007196:	ed97 6a03 	vldr	s12, [r7, #12]
 800719a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800719e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071b6:	e065      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ca:	4b59      	ldr	r3, [pc, #356]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071da:	ed97 6a03 	vldr	s12, [r7, #12]
 80071de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fa:	e043      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800720a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720e:	4b48      	ldr	r3, [pc, #288]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007222:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800722a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800723e:	e021      	b.n	8007284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800724e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007252:	4b37      	ldr	r3, [pc, #220]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007262:	ed97 6a03 	vldr	s12, [r7, #12]
 8007266:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800726a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800727a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007282:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007284:	4b2a      	ldr	r3, [pc, #168]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007288:	0a5b      	lsrs	r3, r3, #9
 800728a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800729a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800729e:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072aa:	ee17 2a90 	vmov	r2, s15
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80072b2:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	0c1b      	lsrs	r3, r3, #16
 80072b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072d8:	ee17 2a90 	vmov	r2, s15
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072e0:	4b13      	ldr	r3, [pc, #76]	; (8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	0e1b      	lsrs	r3, r3, #24
 80072e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ea:	ee07 3a90 	vmov	s15, r3
 80072ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80072fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007306:	ee17 2a90 	vmov	r2, s15
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800730e:	e008      	b.n	8007322 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	609a      	str	r2, [r3, #8]
}
 8007322:	bf00      	nop
 8007324:	3724      	adds	r7, #36	; 0x24
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	58024400 	.word	0x58024400
 8007334:	03d09000 	.word	0x03d09000
 8007338:	46000000 	.word	0x46000000
 800733c:	4c742400 	.word	0x4c742400
 8007340:	4a742400 	.word	0x4a742400
 8007344:	4bbebc20 	.word	0x4bbebc20

08007348 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007348:	b480      	push	{r7}
 800734a:	b089      	sub	sp, #36	; 0x24
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007350:	4ba1      	ldr	r3, [pc, #644]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800735a:	4b9f      	ldr	r3, [pc, #636]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	0d1b      	lsrs	r3, r3, #20
 8007360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007364:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007366:	4b9c      	ldr	r3, [pc, #624]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007372:	4b99      	ldr	r3, [pc, #612]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	08db      	lsrs	r3, r3, #3
 8007378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	fb02 f303 	mul.w	r3, r2, r3
 8007382:	ee07 3a90 	vmov	s15, r3
 8007386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8111 	beq.w	80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b02      	cmp	r3, #2
 800739a:	f000 8083 	beq.w	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	f200 80a1 	bhi.w	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d056      	beq.n	8007460 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073b2:	e099      	b.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073b4:	4b88      	ldr	r3, [pc, #544]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d02d      	beq.n	800741c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073c0:	4b85      	ldr	r3, [pc, #532]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	08db      	lsrs	r3, r3, #3
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	4a84      	ldr	r2, [pc, #528]	; (80075dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073cc:	fa22 f303 	lsr.w	r3, r2, r3
 80073d0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ea:	4b7b      	ldr	r3, [pc, #492]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800740a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007416:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800741a:	e087      	b.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800742a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742e:	4b6a      	ldr	r3, [pc, #424]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007442:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800744a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800745e:	e065      	b.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800746e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007472:	4b59      	ldr	r3, [pc, #356]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007482:	ed97 6a03 	vldr	s12, [r7, #12]
 8007486:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800748a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800749a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074a2:	e043      	b.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b6:	4b48      	ldr	r3, [pc, #288]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074e6:	e021      	b.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074fa:	4b37      	ldr	r3, [pc, #220]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750a:	ed97 6a03 	vldr	s12, [r7, #12]
 800750e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800752c:	4b2a      	ldr	r3, [pc, #168]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	0a5b      	lsrs	r3, r3, #9
 8007532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007536:	ee07 3a90 	vmov	s15, r3
 800753a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007546:	edd7 6a07 	vldr	s13, [r7, #28]
 800754a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800754e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007552:	ee17 2a90 	vmov	r2, s15
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800755a:	4b1f      	ldr	r3, [pc, #124]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	0c1b      	lsrs	r3, r3, #16
 8007560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007564:	ee07 3a90 	vmov	s15, r3
 8007568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007574:	edd7 6a07 	vldr	s13, [r7, #28]
 8007578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007580:	ee17 2a90 	vmov	r2, s15
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007588:	4b13      	ldr	r3, [pc, #76]	; (80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	0e1b      	lsrs	r3, r3, #24
 800758e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007592:	ee07 3a90 	vmov	s15, r3
 8007596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800759e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ae:	ee17 2a90 	vmov	r2, s15
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075b6:	e008      	b.n	80075ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	609a      	str	r2, [r3, #8]
}
 80075ca:	bf00      	nop
 80075cc:	3724      	adds	r7, #36	; 0x24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	58024400 	.word	0x58024400
 80075dc:	03d09000 	.word	0x03d09000
 80075e0:	46000000 	.word	0x46000000
 80075e4:	4c742400 	.word	0x4c742400
 80075e8:	4a742400 	.word	0x4a742400
 80075ec:	4bbebc20 	.word	0x4bbebc20

080075f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b089      	sub	sp, #36	; 0x24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075f8:	4ba0      	ldr	r3, [pc, #640]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f003 0303 	and.w	r3, r3, #3
 8007600:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007602:	4b9e      	ldr	r3, [pc, #632]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800760c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800760e:	4b9b      	ldr	r3, [pc, #620]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007618:	4b98      	ldr	r3, [pc, #608]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800761a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761c:	08db      	lsrs	r3, r3, #3
 800761e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	fb02 f303 	mul.w	r3, r2, r3
 8007628:	ee07 3a90 	vmov	s15, r3
 800762c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007630:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f000 8111 	beq.w	800785e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	2b02      	cmp	r3, #2
 8007640:	f000 8083 	beq.w	800774a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b02      	cmp	r3, #2
 8007648:	f200 80a1 	bhi.w	800778e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d056      	beq.n	8007706 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007658:	e099      	b.n	800778e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800765a:	4b88      	ldr	r3, [pc, #544]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0320 	and.w	r3, r3, #32
 8007662:	2b00      	cmp	r3, #0
 8007664:	d02d      	beq.n	80076c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007666:	4b85      	ldr	r3, [pc, #532]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f003 0303 	and.w	r3, r3, #3
 8007670:	4a83      	ldr	r2, [pc, #524]	; (8007880 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	ee07 3a90 	vmov	s15, r3
 8007688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800768c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007690:	4b7a      	ldr	r3, [pc, #488]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076bc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076c0:	e087      	b.n	80077d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	ee07 3a90 	vmov	s15, r3
 80076c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007888 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076d4:	4b69      	ldr	r3, [pc, #420]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007700:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007704:	e065      	b.n	80077d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007710:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800788c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007718:	4b58      	ldr	r3, [pc, #352]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800771a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007728:	ed97 6a03 	vldr	s12, [r7, #12]
 800772c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007730:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007734:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007738:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800773c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007744:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007748:	e043      	b.n	80077d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	ee07 3a90 	vmov	s15, r3
 8007750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007754:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007890 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007758:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800775c:	4b47      	ldr	r3, [pc, #284]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800775e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800776c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007770:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007774:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007778:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800777c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007780:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007784:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007788:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800778c:	e021      	b.n	80077d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007888 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800779c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077a0:	4b36      	ldr	r3, [pc, #216]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077a8:	ee07 3a90 	vmov	s15, r3
 80077ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80077b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007884 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80077b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80077d2:	4b2a      	ldr	r3, [pc, #168]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	0a5b      	lsrs	r3, r3, #9
 80077d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077dc:	ee07 3a90 	vmov	s15, r3
 80077e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077f8:	ee17 2a90 	vmov	r2, s15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007800:	4b1e      	ldr	r3, [pc, #120]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781a:	edd7 6a07 	vldr	s13, [r7, #28]
 800781e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007826:	ee17 2a90 	vmov	r2, s15
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	0e1b      	lsrs	r3, r3, #24
 8007834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007838:	ee07 3a90 	vmov	s15, r3
 800783c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007848:	edd7 6a07 	vldr	s13, [r7, #28]
 800784c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007854:	ee17 2a90 	vmov	r2, s15
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800785c:	e008      	b.n	8007870 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	609a      	str	r2, [r3, #8]
}
 8007870:	bf00      	nop
 8007872:	3724      	adds	r7, #36	; 0x24
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58024400 	.word	0x58024400
 8007880:	03d09000 	.word	0x03d09000
 8007884:	46000000 	.word	0x46000000
 8007888:	4c742400 	.word	0x4c742400
 800788c:	4a742400 	.word	0x4a742400
 8007890:	4bbebc20 	.word	0x4bbebc20

08007894 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078a2:	4b53      	ldr	r3, [pc, #332]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d101      	bne.n	80078b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e099      	b.n	80079e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078b2:	4b4f      	ldr	r3, [pc, #316]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a4e      	ldr	r2, [pc, #312]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80078b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078be:	f7f9 ffa3 	bl	8001808 <HAL_GetTick>
 80078c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078c4:	e008      	b.n	80078d8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078c6:	f7f9 ff9f 	bl	8001808 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e086      	b.n	80079e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078d8:	4b45      	ldr	r3, [pc, #276]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d1f0      	bne.n	80078c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80078e4:	4b42      	ldr	r3, [pc, #264]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	031b      	lsls	r3, r3, #12
 80078f2:	493f      	ldr	r1, [pc, #252]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	628b      	str	r3, [r1, #40]	; 0x28
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	3b01      	subs	r3, #1
 8007908:	025b      	lsls	r3, r3, #9
 800790a:	b29b      	uxth	r3, r3
 800790c:	431a      	orrs	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	3b01      	subs	r3, #1
 8007914:	041b      	lsls	r3, r3, #16
 8007916:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	3b01      	subs	r3, #1
 8007922:	061b      	lsls	r3, r3, #24
 8007924:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007928:	4931      	ldr	r1, [pc, #196]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800792e:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	492d      	ldr	r1, [pc, #180]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800793c:	4313      	orrs	r3, r2
 800793e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007940:	4b2b      	ldr	r3, [pc, #172]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007944:	f023 0220 	bic.w	r2, r3, #32
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	4928      	ldr	r1, [pc, #160]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007958:	f023 0310 	bic.w	r3, r3, #16
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800795e:	4b24      	ldr	r3, [pc, #144]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007960:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <RCCEx_PLL2_Config+0x160>)
 8007964:	4013      	ands	r3, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	69d2      	ldr	r2, [r2, #28]
 800796a:	00d2      	lsls	r2, r2, #3
 800796c:	4920      	ldr	r1, [pc, #128]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800796e:	4313      	orrs	r3, r2
 8007970:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007978:	f043 0310 	orr.w	r3, r3, #16
 800797c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d106      	bne.n	8007992 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 8007986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800798a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800798e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007990:	e00f      	b.n	80079b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d106      	bne.n	80079a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007998:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 800799e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079a4:	e005      	b.n	80079b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079a6:	4b12      	ldr	r3, [pc, #72]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80079a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079aa:	4a11      	ldr	r2, [pc, #68]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80079ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079b2:	4b0f      	ldr	r3, [pc, #60]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a0e      	ldr	r2, [pc, #56]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80079b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079be:	f7f9 ff23 	bl	8001808 <HAL_GetTick>
 80079c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079c4:	e008      	b.n	80079d8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079c6:	f7f9 ff1f 	bl	8001808 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d901      	bls.n	80079d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e006      	b.n	80079e6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <RCCEx_PLL2_Config+0x15c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d0f0      	beq.n	80079c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	ffff0007 	.word	0xffff0007

080079f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a02:	2300      	movs	r3, #0
 8007a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a06:	4b53      	ldr	r3, [pc, #332]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0a:	f003 0303 	and.w	r3, r3, #3
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d101      	bne.n	8007a16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e099      	b.n	8007b4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a16:	4b4f      	ldr	r3, [pc, #316]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a4e      	ldr	r2, [pc, #312]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a22:	f7f9 fef1 	bl	8001808 <HAL_GetTick>
 8007a26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a28:	e008      	b.n	8007a3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a2a:	f7f9 feed 	bl	8001808 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e086      	b.n	8007b4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a3c:	4b45      	ldr	r3, [pc, #276]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f0      	bne.n	8007a2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a48:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	051b      	lsls	r3, r3, #20
 8007a56:	493f      	ldr	r1, [pc, #252]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	628b      	str	r3, [r1, #40]	; 0x28
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	025b      	lsls	r3, r3, #9
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	041b      	lsls	r3, r3, #16
 8007a7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	691b      	ldr	r3, [r3, #16]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	061b      	lsls	r3, r3, #24
 8007a88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a8c:	4931      	ldr	r1, [pc, #196]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a92:	4b30      	ldr	r3, [pc, #192]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	492d      	ldr	r1, [pc, #180]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007aa4:	4b2b      	ldr	r3, [pc, #172]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	4928      	ldr	r1, [pc, #160]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ab6:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	4a26      	ldr	r2, [pc, #152]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac6:	4b24      	ldr	r3, [pc, #144]	; (8007b58 <RCCEx_PLL3_Config+0x160>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	69d2      	ldr	r2, [r2, #28]
 8007ace:	00d2      	lsls	r2, r2, #3
 8007ad0:	4920      	ldr	r1, [pc, #128]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ad6:	4b1f      	ldr	r3, [pc, #124]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ae8:	4b1a      	ldr	r3, [pc, #104]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	4a19      	ldr	r2, [pc, #100]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007aee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007af2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007af4:	e00f      	b.n	8007b16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d106      	bne.n	8007b0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007afc:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b00:	4a14      	ldr	r2, [pc, #80]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007b02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b08:	e005      	b.n	8007b16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0e:	4a11      	ldr	r2, [pc, #68]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007b10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b16:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a0e      	ldr	r2, [pc, #56]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b22:	f7f9 fe71 	bl	8001808 <HAL_GetTick>
 8007b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b28:	e008      	b.n	8007b3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b2a:	f7f9 fe6d 	bl	8001808 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e006      	b.n	8007b4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <RCCEx_PLL3_Config+0x15c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f0      	beq.n	8007b2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	58024400 	.word	0x58024400
 8007b58:	ffff0007 	.word	0xffff0007

08007b5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e10f      	b.n	8007d8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a87      	ldr	r2, [pc, #540]	; (8007d98 <HAL_SPI_Init+0x23c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00f      	beq.n	8007b9e <HAL_SPI_Init+0x42>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a86      	ldr	r2, [pc, #536]	; (8007d9c <HAL_SPI_Init+0x240>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00a      	beq.n	8007b9e <HAL_SPI_Init+0x42>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a84      	ldr	r2, [pc, #528]	; (8007da0 <HAL_SPI_Init+0x244>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d005      	beq.n	8007b9e <HAL_SPI_Init+0x42>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b0f      	cmp	r3, #15
 8007b98:	d901      	bls.n	8007b9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e0f7      	b.n	8007d8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fd08 	bl	80085b4 <SPI_GetPacketSize>
 8007ba4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a7b      	ldr	r2, [pc, #492]	; (8007d98 <HAL_SPI_Init+0x23c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d00c      	beq.n	8007bca <HAL_SPI_Init+0x6e>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a79      	ldr	r2, [pc, #484]	; (8007d9c <HAL_SPI_Init+0x240>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d007      	beq.n	8007bca <HAL_SPI_Init+0x6e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a78      	ldr	r2, [pc, #480]	; (8007da0 <HAL_SPI_Init+0x244>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d002      	beq.n	8007bca <HAL_SPI_Init+0x6e>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d811      	bhi.n	8007bee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007bce:	4a72      	ldr	r2, [pc, #456]	; (8007d98 <HAL_SPI_Init+0x23c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d009      	beq.n	8007be8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a70      	ldr	r2, [pc, #448]	; (8007d9c <HAL_SPI_Init+0x240>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_SPI_Init+0x8c>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a6f      	ldr	r2, [pc, #444]	; (8007da0 <HAL_SPI_Init+0x244>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d104      	bne.n	8007bf2 <HAL_SPI_Init+0x96>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b10      	cmp	r3, #16
 8007bec:	d901      	bls.n	8007bf2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0cd      	b.n	8007d8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7f9 fb94 	bl	8001334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0201 	bic.w	r2, r2, #1
 8007c22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007c2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c38:	d119      	bne.n	8007c6e <HAL_SPI_Init+0x112>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c42:	d103      	bne.n	8007c4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10c      	bne.n	8007c6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c5c:	d107      	bne.n	8007c6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00f      	beq.n	8007c9a <HAL_SPI_Init+0x13e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	2b06      	cmp	r3, #6
 8007c80:	d90b      	bls.n	8007c9a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e007      	b.n	8007caa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69da      	ldr	r2, [r3, #28]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cbc:	ea42 0103 	orr.w	r1, r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68da      	ldr	r2, [r3, #12]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	431a      	orrs	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d0a:	ea42 0103 	orr.w	r1, r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d113      	bne.n	8007d4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	40013000 	.word	0x40013000
 8007d9c:	40003800 	.word	0x40003800
 8007da0:	40003c00 	.word	0x40003c00

08007da4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3320      	adds	r3, #32
 8007db8:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3330      	adds	r3, #48	; 0x30
 8007dc0:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	095b      	lsrs	r3, r3, #5
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3301      	adds	r3, #1
 8007dcc:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dce:	f7f9 fd1b 	bl	8001808 <HAL_GetTick>
 8007dd2:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8007dd4:	887b      	ldrh	r3, [r7, #2]
 8007dd6:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8007dd8:	887b      	ldrh	r3, [r7, #2]
 8007dda:	853b      	strh	r3, [r7, #40]	; 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d001      	beq.n	8007dec <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
 8007dea:	e310      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <HAL_SPI_TransmitReceive+0x5a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d002      	beq.n	8007dfe <HAL_SPI_TransmitReceive+0x5a>
 8007df8:	887b      	ldrh	r3, [r7, #2]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e305      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_SPI_TransmitReceive+0x6c>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e2fe      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2205      	movs	r2, #5
 8007e1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	887a      	ldrh	r2, [r7, #2]
 8007e32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	887a      	ldrh	r2, [r7, #2]
 8007e3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	887a      	ldrh	r2, [r7, #2]
 8007e48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	887a      	ldrh	r2, [r7, #2]
 8007e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8007e6e:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a70      	ldr	r2, [pc, #448]	; (8008038 <HAL_SPI_TransmitReceive+0x294>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d009      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0xea>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a6f      	ldr	r2, [pc, #444]	; (800803c <HAL_SPI_TransmitReceive+0x298>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d004      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0xea>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a6d      	ldr	r2, [pc, #436]	; (8008040 <HAL_SPI_TransmitReceive+0x29c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d102      	bne.n	8007e94 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8007e8e:	2310      	movs	r3, #16
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e92:	e001      	b.n	8007e98 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8007e94:	2308      	movs	r3, #8
 8007e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	4b69      	ldr	r3, [pc, #420]	; (8008044 <HAL_SPI_TransmitReceive+0x2a0>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	8879      	ldrh	r1, [r7, #2]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	430b      	orrs	r3, r1
 8007eaa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 0201 	orr.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ec4:	d107      	bne.n	8007ed6 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	2b0f      	cmp	r3, #15
 8007edc:	f240 80a2 	bls.w	8008024 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8007ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007ee6:	e094      	b.n	8008012 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	f003 0302 	and.w	r3, r3, #2
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d120      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x194>
 8007ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01d      	beq.n	8007f38 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8007efc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007efe:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d217      	bcs.n	8007f38 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6812      	ldr	r2, [r2, #0]
 8007f12:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	3b01      	subs	r3, #1
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f36:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8007f40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d065      	beq.n	8008012 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d118      	bne.n	8007f86 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f5e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f64:	1d1a      	adds	r2, r3, #4
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f82:	853b      	strh	r3, [r7, #40]	; 0x28
 8007f84:	e045      	b.n	8008012 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007f86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007f88:	8bfb      	ldrh	r3, [r7, #30]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d21d      	bcs.n	8007fca <HAL_SPI_TransmitReceive+0x226>
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d018      	beq.n	8007fca <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fa2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa8:	1d1a      	adds	r2, r3, #4
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007fc8:	e023      	b.n	8008012 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fca:	f7f9 fc1d 	bl	8001808 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d803      	bhi.n	8007fe2 <HAL_SPI_TransmitReceive+0x23e>
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d102      	bne.n	8007fe8 <HAL_SPI_TransmitReceive+0x244>
 8007fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d114      	bne.n	8008012 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fa15 	bl	8008418 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ff4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e1fd      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008012:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f af67 	bne.w	8007ee8 <HAL_SPI_TransmitReceive+0x144>
 800801a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800801c:	2b00      	cmp	r3, #0
 800801e:	f47f af63 	bne.w	8007ee8 <HAL_SPI_TransmitReceive+0x144>
 8008022:	e1ce      	b.n	80083c2 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	2b07      	cmp	r3, #7
 800802a:	f240 81c2 	bls.w	80083b2 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008034:	e0c9      	b.n	80081ca <HAL_SPI_TransmitReceive+0x426>
 8008036:	bf00      	nop
 8008038:	40013000 	.word	0x40013000
 800803c:	40003800 	.word	0x40003800
 8008040:	40003c00 	.word	0x40003c00
 8008044:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b02      	cmp	r3, #2
 8008054:	d11f      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x2f2>
 8008056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008058:	2b00      	cmp	r3, #0
 800805a:	d01c      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800805c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800805e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008064:	429a      	cmp	r2, r3
 8008066:	d216      	bcs.n	8008096 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800806c:	881a      	ldrh	r2, [r3, #0]
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008076:	1c9a      	adds	r2, r3, #2
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008082:	b29b      	uxth	r3, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008094:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800809e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 8092 	beq.w	80081ca <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	695b      	ldr	r3, [r3, #20]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d118      	bne.n	80080e6 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	8812      	ldrh	r2, [r2, #0]
 80080bc:	b292      	uxth	r2, r2
 80080be:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c4:	1c9a      	adds	r2, r3, #2
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80080e4:	e071      	b.n	80081ca <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80080e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80080e8:	8bfb      	ldrh	r3, [r7, #30]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d228      	bcs.n	8008140 <HAL_SPI_TransmitReceive+0x39c>
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d023      	beq.n	8008140 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fc:	6a3a      	ldr	r2, [r7, #32]
 80080fe:	8812      	ldrh	r2, [r2, #0]
 8008100:	b292      	uxth	r2, r2
 8008102:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008108:	1c9a      	adds	r2, r3, #2
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008112:	6a3a      	ldr	r2, [r7, #32]
 8008114:	8812      	ldrh	r2, [r2, #0]
 8008116:	b292      	uxth	r2, r2
 8008118:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811e:	1c9a      	adds	r2, r3, #2
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800812a:	b29b      	uxth	r3, r3
 800812c:	3b02      	subs	r3, #2
 800812e:	b29a      	uxth	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800813c:	853b      	strh	r3, [r7, #40]	; 0x28
 800813e:	e044      	b.n	80081ca <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8008140:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008142:	2b01      	cmp	r3, #1
 8008144:	d11d      	bne.n	8008182 <HAL_SPI_TransmitReceive+0x3de>
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d018      	beq.n	8008182 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	8812      	ldrh	r2, [r2, #0]
 8008158:	b292      	uxth	r2, r2
 800815a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008160:	1c9a      	adds	r2, r3, #2
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800816c:	b29b      	uxth	r3, r3
 800816e:	3b01      	subs	r3, #1
 8008170:	b29a      	uxth	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800817e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008180:	e023      	b.n	80081ca <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008182:	f7f9 fb41 	bl	8001808 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800818e:	429a      	cmp	r2, r3
 8008190:	d803      	bhi.n	800819a <HAL_SPI_TransmitReceive+0x3f6>
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d102      	bne.n	80081a0 <HAL_SPI_TransmitReceive+0x3fc>
 800819a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800819c:	2b00      	cmp	r3, #0
 800819e:	d114      	bne.n	80081ca <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 f939 	bl	8008418 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e121      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80081ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f47f af3b 	bne.w	8008048 <HAL_SPI_TransmitReceive+0x2a4>
 80081d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f47f af37 	bne.w	8008048 <HAL_SPI_TransmitReceive+0x2a4>
 80081da:	e0f2      	b.n	80083c2 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0302 	and.w	r3, r3, #2
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d121      	bne.n	800822e <HAL_SPI_TransmitReceive+0x48a>
 80081ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01e      	beq.n	800822e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80081f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081f2:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 80081f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d218      	bcs.n	800822e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3320      	adds	r3, #32
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800821a:	b29b      	uxth	r3, r3
 800821c:	3b01      	subs	r3, #1
 800821e:	b29a      	uxth	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800822c:	857b      	strh	r3, [r7, #42]	; 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695b      	ldr	r3, [r3, #20]
 8008234:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8008236:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 80ba 	beq.w	80083b2 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	d11b      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008258:	7812      	ldrb	r2, [r2, #0]
 800825a:	b2d2      	uxtb	r2, r2
 800825c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800826e:	b29b      	uxth	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008280:	853b      	strh	r3, [r7, #40]	; 0x28
 8008282:	e096      	b.n	80083b2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8008284:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008286:	8bfb      	ldrh	r3, [r7, #30]
 8008288:	429a      	cmp	r2, r3
 800828a:	d24a      	bcs.n	8008322 <HAL_SPI_TransmitReceive+0x57e>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d045      	beq.n	8008322 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a2:	7812      	ldrb	r2, [r2, #0]
 80082a4:	b2d2      	uxtb	r2, r2
 80082a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ac:	1c5a      	adds	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082da:	7812      	ldrb	r2, [r2, #0]
 80082dc:	b2d2      	uxtb	r2, r2
 80082de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082e4:	1c5a      	adds	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	665a      	str	r2, [r3, #100]	; 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f6:	7812      	ldrb	r2, [r2, #0]
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b04      	subs	r3, #4
 8008310:	b29a      	uxth	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800831e:	853b      	strh	r3, [r7, #40]	; 0x28
 8008320:	e047      	b.n	80083b2 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008322:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008324:	2b03      	cmp	r3, #3
 8008326:	d820      	bhi.n	800836a <HAL_SPI_TransmitReceive+0x5c6>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01b      	beq.n	800836a <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800833e:	7812      	ldrb	r2, [r2, #0]
 8008340:	b2d2      	uxtb	r2, r2
 8008342:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008366:	853b      	strh	r3, [r7, #40]	; 0x28
 8008368:	e023      	b.n	80083b2 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800836a:	f7f9 fa4d 	bl	8001808 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008376:	429a      	cmp	r2, r3
 8008378:	d803      	bhi.n	8008382 <HAL_SPI_TransmitReceive+0x5de>
 800837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008380:	d102      	bne.n	8008388 <HAL_SPI_TransmitReceive+0x5e4>
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008384:	2b00      	cmp	r3, #0
 8008386:	d114      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 f845 	bl	8008418 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008394:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

            return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e02d      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80083b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f47f af11 	bne.w	80081dc <HAL_SPI_TransmitReceive+0x438>
 80083ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f47f af0d 	bne.w	80081dc <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c8:	2200      	movs	r2, #0
 80083ca:	2108      	movs	r1, #8
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f8c3 	bl	8008558 <SPI_WaitOnFlagUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083de:	f043 0220 	orr.w	r2, r3, #32
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f815 	bl	8008418 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800840c:	2300      	movs	r3, #0
  }
}
 800840e:	4618      	mov	r0, r3
 8008410:	3730      	adds	r7, #48	; 0x30
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop

08008418 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0208 	orr.w	r2, r2, #8
 8008436:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0210 	orr.w	r2, r2, #16
 8008446:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6919      	ldr	r1, [r3, #16]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b3c      	ldr	r3, [pc, #240]	; (8008554 <SPI_CloseTransfer+0x13c>)
 8008464:	400b      	ands	r3, r1
 8008466:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008476:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b04      	cmp	r3, #4
 8008482:	d014      	beq.n	80084ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00f      	beq.n	80084ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008494:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	699a      	ldr	r2, [r3, #24]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f042 0220 	orr.w	r2, r2, #32
 80084ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d014      	beq.n	80084e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00f      	beq.n	80084e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ca:	f043 0204 	orr.w	r2, r3, #4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699a      	ldr	r2, [r3, #24]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00f      	beq.n	800850e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f4:	f043 0201 	orr.w	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	699a      	ldr	r2, [r3, #24]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800850c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00f      	beq.n	8008538 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800851e:	f043 0208 	orr.w	r2, r3, #8
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008536:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008548:	bf00      	nop
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	fffffc90 	.word	0xfffffc90

08008558 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008568:	e010      	b.n	800858c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800856a:	f7f9 f94d 	bl	8001808 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d803      	bhi.n	8008582 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008580:	d102      	bne.n	8008588 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e00f      	b.n	80085ac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	695a      	ldr	r2, [r3, #20]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	bf0c      	ite	eq
 800859c:	2301      	moveq	r3, #1
 800859e:	2300      	movne	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d0df      	beq.n	800856a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	3301      	adds	r3, #1
 80085c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	3301      	adds	r3, #1
 80085cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	3307      	adds	r3, #7
 80085d2:	08db      	lsrs	r3, r3, #3
 80085d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	fb02 f303 	mul.w	r3, r2, r3
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3714      	adds	r7, #20
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b082      	sub	sp, #8
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e03c      	b.n	8008676 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008602:	b2db      	uxtb	r3, r3
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7f8 fef7 	bl	8001404 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2202      	movs	r2, #2
 800861a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0201 	bic.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f85c 	bl	80086ec <USART_SetConfig>
 8008634:	4603      	mov	r3, r0
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e01b      	b.n	8008676 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800864c:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689a      	ldr	r2, [r3, #8]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800865c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fd5c 	bl	800912c <USART_CheckIdleState>
 8008674:	4603      	mov	r3, r0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3708      	adds	r7, #8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b084      	sub	sp, #16
 8008682:	af00      	add	r7, sp, #0
 8008684:	60f8      	str	r0, [r7, #12]
 8008686:	60b9      	str	r1, [r7, #8]
 8008688:	603b      	str	r3, [r7, #0]
 800868a:	4613      	mov	r3, r2
 800868c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800868e:	e018      	b.n	80086c2 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d014      	beq.n	80086c2 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008698:	f7f9 f8b6 	bl	8001808 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d302      	bcc.n	80086ae <USART_WaitOnFlagUntilTimeout+0x30>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d109      	bne.n	80086c2 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e00f      	b.n	80086e2 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69da      	ldr	r2, [r3, #28]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	4013      	ands	r3, r2
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	bf0c      	ite	eq
 80086d2:	2301      	moveq	r3, #1
 80086d4:	2300      	movne	r3, #0
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	461a      	mov	r2, r3
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d0d7      	beq.n	8008690 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
	...

080086ec <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08e      	sub	sp, #56	; 0x38
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80086fa:	2300      	movs	r3, #0
 80086fc:	633b      	str	r3, [r7, #48]	; 0x30
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	431a      	orrs	r2, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	4313      	orrs	r3, r2
 800870e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	4bc9      	ldr	r3, [pc, #804]	; (8008a40 <USART_SetConfig+0x354>)
 800871c:	4013      	ands	r3, r2
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008724:	430b      	orrs	r3, r1
 8008726:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8008728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6a1b      	ldr	r3, [r3, #32]
 8008732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008734:	4313      	orrs	r3, r2
 8008736:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	699a      	ldr	r2, [r3, #24]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	4313      	orrs	r3, r2
 8008742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008744:	4313      	orrs	r3, r2
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800874e:	4313      	orrs	r3, r2
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	4bba      	ldr	r3, [pc, #744]	; (8008a44 <USART_SetConfig+0x358>)
 800875a:	4013      	ands	r3, r2
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6812      	ldr	r2, [r2, #0]
 8008760:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008762:	430b      	orrs	r3, r1
 8008764:	6053      	str	r3, [r2, #4]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - USART Clock Prescaler : set PRESCALER according to husart->Init.ClockPrescaler value */
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876c:	f023 010f 	bic.w	r1, r3, #15
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	430a      	orrs	r2, r1
 800877a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4ab1      	ldr	r2, [pc, #708]	; (8008a48 <USART_SetConfig+0x35c>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d176      	bne.n	8008874 <USART_SetConfig+0x188>
 8008786:	4bb1      	ldr	r3, [pc, #708]	; (8008a4c <USART_SetConfig+0x360>)
 8008788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800878e:	2b28      	cmp	r3, #40	; 0x28
 8008790:	d86c      	bhi.n	800886c <USART_SetConfig+0x180>
 8008792:	a201      	add	r2, pc, #4	; (adr r2, 8008798 <USART_SetConfig+0xac>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	0800883d 	.word	0x0800883d
 800879c:	0800886d 	.word	0x0800886d
 80087a0:	0800886d 	.word	0x0800886d
 80087a4:	0800886d 	.word	0x0800886d
 80087a8:	0800886d 	.word	0x0800886d
 80087ac:	0800886d 	.word	0x0800886d
 80087b0:	0800886d 	.word	0x0800886d
 80087b4:	0800886d 	.word	0x0800886d
 80087b8:	08008845 	.word	0x08008845
 80087bc:	0800886d 	.word	0x0800886d
 80087c0:	0800886d 	.word	0x0800886d
 80087c4:	0800886d 	.word	0x0800886d
 80087c8:	0800886d 	.word	0x0800886d
 80087cc:	0800886d 	.word	0x0800886d
 80087d0:	0800886d 	.word	0x0800886d
 80087d4:	0800886d 	.word	0x0800886d
 80087d8:	0800884d 	.word	0x0800884d
 80087dc:	0800886d 	.word	0x0800886d
 80087e0:	0800886d 	.word	0x0800886d
 80087e4:	0800886d 	.word	0x0800886d
 80087e8:	0800886d 	.word	0x0800886d
 80087ec:	0800886d 	.word	0x0800886d
 80087f0:	0800886d 	.word	0x0800886d
 80087f4:	0800886d 	.word	0x0800886d
 80087f8:	08008855 	.word	0x08008855
 80087fc:	0800886d 	.word	0x0800886d
 8008800:	0800886d 	.word	0x0800886d
 8008804:	0800886d 	.word	0x0800886d
 8008808:	0800886d 	.word	0x0800886d
 800880c:	0800886d 	.word	0x0800886d
 8008810:	0800886d 	.word	0x0800886d
 8008814:	0800886d 	.word	0x0800886d
 8008818:	0800885d 	.word	0x0800885d
 800881c:	0800886d 	.word	0x0800886d
 8008820:	0800886d 	.word	0x0800886d
 8008824:	0800886d 	.word	0x0800886d
 8008828:	0800886d 	.word	0x0800886d
 800882c:	0800886d 	.word	0x0800886d
 8008830:	0800886d 	.word	0x0800886d
 8008834:	0800886d 	.word	0x0800886d
 8008838:	08008865 	.word	0x08008865
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008842:	e112      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008844:	2302      	movs	r3, #2
 8008846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800884a:	e10e      	b.n	8008a6a <USART_SetConfig+0x37e>
 800884c:	2304      	movs	r3, #4
 800884e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008852:	e10a      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008854:	2308      	movs	r3, #8
 8008856:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800885a:	e106      	b.n	8008a6a <USART_SetConfig+0x37e>
 800885c:	2310      	movs	r3, #16
 800885e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008862:	e102      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008864:	2320      	movs	r3, #32
 8008866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800886a:	e0fe      	b.n	8008a6a <USART_SetConfig+0x37e>
 800886c:	2340      	movs	r3, #64	; 0x40
 800886e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008872:	e0fa      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a75      	ldr	r2, [pc, #468]	; (8008a50 <USART_SetConfig+0x364>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d130      	bne.n	80088e0 <USART_SetConfig+0x1f4>
 800887e:	4b73      	ldr	r3, [pc, #460]	; (8008a4c <USART_SetConfig+0x360>)
 8008880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	2b05      	cmp	r3, #5
 8008888:	d826      	bhi.n	80088d8 <USART_SetConfig+0x1ec>
 800888a:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <USART_SetConfig+0x1a4>)
 800888c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008890:	080088a9 	.word	0x080088a9
 8008894:	080088b1 	.word	0x080088b1
 8008898:	080088b9 	.word	0x080088b9
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	2300      	movs	r3, #0
 80088aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088ae:	e0dc      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088b0:	2302      	movs	r3, #2
 80088b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088b6:	e0d8      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088b8:	2304      	movs	r3, #4
 80088ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088be:	e0d4      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088c0:	2308      	movs	r3, #8
 80088c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088c6:	e0d0      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088c8:	2310      	movs	r3, #16
 80088ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088ce:	e0cc      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088d0:	2320      	movs	r3, #32
 80088d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088d6:	e0c8      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80088de:	e0c4      	b.n	8008a6a <USART_SetConfig+0x37e>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a5b      	ldr	r2, [pc, #364]	; (8008a54 <USART_SetConfig+0x368>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d130      	bne.n	800894c <USART_SetConfig+0x260>
 80088ea:	4b58      	ldr	r3, [pc, #352]	; (8008a4c <USART_SetConfig+0x360>)
 80088ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d826      	bhi.n	8008944 <USART_SetConfig+0x258>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <USART_SetConfig+0x210>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008915 	.word	0x08008915
 8008900:	0800891d 	.word	0x0800891d
 8008904:	08008925 	.word	0x08008925
 8008908:	0800892d 	.word	0x0800892d
 800890c:	08008935 	.word	0x08008935
 8008910:	0800893d 	.word	0x0800893d
 8008914:	2300      	movs	r3, #0
 8008916:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800891a:	e0a6      	b.n	8008a6a <USART_SetConfig+0x37e>
 800891c:	2302      	movs	r3, #2
 800891e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008922:	e0a2      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008924:	2304      	movs	r3, #4
 8008926:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800892a:	e09e      	b.n	8008a6a <USART_SetConfig+0x37e>
 800892c:	2308      	movs	r3, #8
 800892e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008932:	e09a      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008934:	2310      	movs	r3, #16
 8008936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800893a:	e096      	b.n	8008a6a <USART_SetConfig+0x37e>
 800893c:	2320      	movs	r3, #32
 800893e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008942:	e092      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008944:	2340      	movs	r3, #64	; 0x40
 8008946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800894a:	e08e      	b.n	8008a6a <USART_SetConfig+0x37e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a41      	ldr	r2, [pc, #260]	; (8008a58 <USART_SetConfig+0x36c>)
 8008952:	4293      	cmp	r3, r2
 8008954:	f040 8086 	bne.w	8008a64 <USART_SetConfig+0x378>
 8008958:	4b3c      	ldr	r3, [pc, #240]	; (8008a4c <USART_SetConfig+0x360>)
 800895a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008960:	2b28      	cmp	r3, #40	; 0x28
 8008962:	d87b      	bhi.n	8008a5c <USART_SetConfig+0x370>
 8008964:	a201      	add	r2, pc, #4	; (adr r2, 800896c <USART_SetConfig+0x280>)
 8008966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800896a:	bf00      	nop
 800896c:	08008a11 	.word	0x08008a11
 8008970:	08008a5d 	.word	0x08008a5d
 8008974:	08008a5d 	.word	0x08008a5d
 8008978:	08008a5d 	.word	0x08008a5d
 800897c:	08008a5d 	.word	0x08008a5d
 8008980:	08008a5d 	.word	0x08008a5d
 8008984:	08008a5d 	.word	0x08008a5d
 8008988:	08008a5d 	.word	0x08008a5d
 800898c:	08008a19 	.word	0x08008a19
 8008990:	08008a5d 	.word	0x08008a5d
 8008994:	08008a5d 	.word	0x08008a5d
 8008998:	08008a5d 	.word	0x08008a5d
 800899c:	08008a5d 	.word	0x08008a5d
 80089a0:	08008a5d 	.word	0x08008a5d
 80089a4:	08008a5d 	.word	0x08008a5d
 80089a8:	08008a5d 	.word	0x08008a5d
 80089ac:	08008a21 	.word	0x08008a21
 80089b0:	08008a5d 	.word	0x08008a5d
 80089b4:	08008a5d 	.word	0x08008a5d
 80089b8:	08008a5d 	.word	0x08008a5d
 80089bc:	08008a5d 	.word	0x08008a5d
 80089c0:	08008a5d 	.word	0x08008a5d
 80089c4:	08008a5d 	.word	0x08008a5d
 80089c8:	08008a5d 	.word	0x08008a5d
 80089cc:	08008a29 	.word	0x08008a29
 80089d0:	08008a5d 	.word	0x08008a5d
 80089d4:	08008a5d 	.word	0x08008a5d
 80089d8:	08008a5d 	.word	0x08008a5d
 80089dc:	08008a5d 	.word	0x08008a5d
 80089e0:	08008a5d 	.word	0x08008a5d
 80089e4:	08008a5d 	.word	0x08008a5d
 80089e8:	08008a5d 	.word	0x08008a5d
 80089ec:	08008a31 	.word	0x08008a31
 80089f0:	08008a5d 	.word	0x08008a5d
 80089f4:	08008a5d 	.word	0x08008a5d
 80089f8:	08008a5d 	.word	0x08008a5d
 80089fc:	08008a5d 	.word	0x08008a5d
 8008a00:	08008a5d 	.word	0x08008a5d
 8008a04:	08008a5d 	.word	0x08008a5d
 8008a08:	08008a5d 	.word	0x08008a5d
 8008a0c:	08008a39 	.word	0x08008a39
 8008a10:	2301      	movs	r3, #1
 8008a12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a16:	e028      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a18:	2302      	movs	r3, #2
 8008a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a1e:	e024      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a20:	2304      	movs	r3, #4
 8008a22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a26:	e020      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a28:	2308      	movs	r3, #8
 8008a2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a2e:	e01c      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a30:	2310      	movs	r3, #16
 8008a32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a36:	e018      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a38:	2320      	movs	r3, #32
 8008a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a3e:	e014      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a40:	cfff69f3 	.word	0xcfff69f3
 8008a44:	ffffc0f6 	.word	0xffffc0f6
 8008a48:	40011000 	.word	0x40011000
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	40004400 	.word	0x40004400
 8008a54:	40004800 	.word	0x40004800
 8008a58:	40011400 	.word	0x40011400
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a62:	e002      	b.n	8008a6a <USART_SetConfig+0x37e>
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  switch (clocksource)
 8008a6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a6e:	2b20      	cmp	r3, #32
 8008a70:	f200 8329 	bhi.w	80090c6 <USART_SetConfig+0x9da>
 8008a74:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <USART_SetConfig+0x390>)
 8008a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7a:	bf00      	nop
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008bb7 	.word	0x08008bb7
 8008a84:	08008c6d 	.word	0x08008c6d
 8008a88:	080090c7 	.word	0x080090c7
 8008a8c:	08008d27 	.word	0x08008d27
 8008a90:	080090c7 	.word	0x080090c7
 8008a94:	080090c7 	.word	0x080090c7
 8008a98:	080090c7 	.word	0x080090c7
 8008a9c:	08008de1 	.word	0x08008de1
 8008aa0:	080090c7 	.word	0x080090c7
 8008aa4:	080090c7 	.word	0x080090c7
 8008aa8:	080090c7 	.word	0x080090c7
 8008aac:	080090c7 	.word	0x080090c7
 8008ab0:	080090c7 	.word	0x080090c7
 8008ab4:	080090c7 	.word	0x080090c7
 8008ab8:	080090c7 	.word	0x080090c7
 8008abc:	08008f59 	.word	0x08008f59
 8008ac0:	080090c7 	.word	0x080090c7
 8008ac4:	080090c7 	.word	0x080090c7
 8008ac8:	080090c7 	.word	0x080090c7
 8008acc:	080090c7 	.word	0x080090c7
 8008ad0:	080090c7 	.word	0x080090c7
 8008ad4:	080090c7 	.word	0x080090c7
 8008ad8:	080090c7 	.word	0x080090c7
 8008adc:	080090c7 	.word	0x080090c7
 8008ae0:	080090c7 	.word	0x080090c7
 8008ae4:	080090c7 	.word	0x080090c7
 8008ae8:	080090c7 	.word	0x080090c7
 8008aec:	080090c7 	.word	0x080090c7
 8008af0:	080090c7 	.word	0x080090c7
 8008af4:	080090c7 	.word	0x080090c7
 8008af8:	080090c7 	.word	0x080090c7
 8008afc:	08009015 	.word	0x08009015
  {
    case USART_CLOCKSOURCE_D2PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b00:	f7fc fb02 	bl	8005108 <HAL_RCC_GetPCLK1Freq>
 8008b04:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d044      	beq.n	8008b98 <USART_SetConfig+0x4ac>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d03e      	beq.n	8008b94 <USART_SetConfig+0x4a8>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d038      	beq.n	8008b90 <USART_SetConfig+0x4a4>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d032      	beq.n	8008b8c <USART_SetConfig+0x4a0>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d02c      	beq.n	8008b88 <USART_SetConfig+0x49c>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	2b05      	cmp	r3, #5
 8008b34:	d026      	beq.n	8008b84 <USART_SetConfig+0x498>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	2b06      	cmp	r3, #6
 8008b3c:	d020      	beq.n	8008b80 <USART_SetConfig+0x494>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	2b07      	cmp	r3, #7
 8008b44:	d01a      	beq.n	8008b7c <USART_SetConfig+0x490>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	2b08      	cmp	r3, #8
 8008b4c:	d014      	beq.n	8008b78 <USART_SetConfig+0x48c>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	2b09      	cmp	r3, #9
 8008b54:	d00e      	beq.n	8008b74 <USART_SetConfig+0x488>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	2b0a      	cmp	r3, #10
 8008b5c:	d008      	beq.n	8008b70 <USART_SetConfig+0x484>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b62:	2b0b      	cmp	r3, #11
 8008b64:	d102      	bne.n	8008b6c <USART_SetConfig+0x480>
 8008b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b6a:	e016      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e014      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b70:	2380      	movs	r3, #128	; 0x80
 8008b72:	e012      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b74:	2340      	movs	r3, #64	; 0x40
 8008b76:	e010      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b78:	2320      	movs	r3, #32
 8008b7a:	e00e      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b7c:	2310      	movs	r3, #16
 8008b7e:	e00c      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b80:	230c      	movs	r3, #12
 8008b82:	e00a      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b84:	230a      	movs	r3, #10
 8008b86:	e008      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b88:	2308      	movs	r3, #8
 8008b8a:	e006      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b8c:	2306      	movs	r3, #6
 8008b8e:	e004      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b90:	2304      	movs	r3, #4
 8008b92:	e002      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e000      	b.n	8008b9a <USART_SetConfig+0x4ae>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba0:	005a      	lsls	r2, r3, #1
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	085b      	lsrs	r3, r3, #1
 8008ba8:	441a      	add	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008bb4:	e28b      	b.n	80090ce <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_D2PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bb6:	f7fc fabd 	bl	8005134 <HAL_RCC_GetPCLK2Freq>
 8008bba:	62b8      	str	r0, [r7, #40]	; 0x28
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d044      	beq.n	8008c4e <USART_SetConfig+0x562>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d03e      	beq.n	8008c4a <USART_SetConfig+0x55e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd0:	2b02      	cmp	r3, #2
 8008bd2:	d038      	beq.n	8008c46 <USART_SetConfig+0x55a>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d032      	beq.n	8008c42 <USART_SetConfig+0x556>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	2b04      	cmp	r3, #4
 8008be2:	d02c      	beq.n	8008c3e <USART_SetConfig+0x552>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	2b05      	cmp	r3, #5
 8008bea:	d026      	beq.n	8008c3a <USART_SetConfig+0x54e>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf0:	2b06      	cmp	r3, #6
 8008bf2:	d020      	beq.n	8008c36 <USART_SetConfig+0x54a>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf8:	2b07      	cmp	r3, #7
 8008bfa:	d01a      	beq.n	8008c32 <USART_SetConfig+0x546>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d014      	beq.n	8008c2e <USART_SetConfig+0x542>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c08:	2b09      	cmp	r3, #9
 8008c0a:	d00e      	beq.n	8008c2a <USART_SetConfig+0x53e>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c10:	2b0a      	cmp	r3, #10
 8008c12:	d008      	beq.n	8008c26 <USART_SetConfig+0x53a>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b0b      	cmp	r3, #11
 8008c1a:	d102      	bne.n	8008c22 <USART_SetConfig+0x536>
 8008c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c20:	e016      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e014      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	e012      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	e010      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c2e:	2320      	movs	r3, #32
 8008c30:	e00e      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c32:	2310      	movs	r3, #16
 8008c34:	e00c      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c36:	230c      	movs	r3, #12
 8008c38:	e00a      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	e008      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c3e:	2308      	movs	r3, #8
 8008c40:	e006      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c42:	2306      	movs	r3, #6
 8008c44:	e004      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c46:	2304      	movs	r3, #4
 8008c48:	e002      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e000      	b.n	8008c50 <USART_SetConfig+0x564>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c56:	005a      	lsls	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	085b      	lsrs	r3, r3, #1
 8008c5e:	441a      	add	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008c6a:	e230      	b.n	80090ce <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL2:
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fa15 	bl	80070a0 <HAL_RCCEx_GetPLL2ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, husart->Init.BaudRate,
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d044      	beq.n	8008d0a <USART_SetConfig+0x61e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d03e      	beq.n	8008d06 <USART_SetConfig+0x61a>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d038      	beq.n	8008d02 <USART_SetConfig+0x616>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d032      	beq.n	8008cfe <USART_SetConfig+0x612>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9c:	2b04      	cmp	r3, #4
 8008c9e:	d02c      	beq.n	8008cfa <USART_SetConfig+0x60e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b05      	cmp	r3, #5
 8008ca6:	d026      	beq.n	8008cf6 <USART_SetConfig+0x60a>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b06      	cmp	r3, #6
 8008cae:	d020      	beq.n	8008cf2 <USART_SetConfig+0x606>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	2b07      	cmp	r3, #7
 8008cb6:	d01a      	beq.n	8008cee <USART_SetConfig+0x602>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2b08      	cmp	r3, #8
 8008cbe:	d014      	beq.n	8008cea <USART_SetConfig+0x5fe>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	2b09      	cmp	r3, #9
 8008cc6:	d00e      	beq.n	8008ce6 <USART_SetConfig+0x5fa>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b0a      	cmp	r3, #10
 8008cce:	d008      	beq.n	8008ce2 <USART_SetConfig+0x5f6>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2b0b      	cmp	r3, #11
 8008cd6:	d102      	bne.n	8008cde <USART_SetConfig+0x5f2>
 8008cd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cdc:	e016      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e014      	b.n	8008d0c <USART_SetConfig+0x620>
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	e012      	b.n	8008d0c <USART_SetConfig+0x620>
 8008ce6:	2340      	movs	r3, #64	; 0x40
 8008ce8:	e010      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cea:	2320      	movs	r3, #32
 8008cec:	e00e      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cee:	2310      	movs	r3, #16
 8008cf0:	e00c      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cf2:	230c      	movs	r3, #12
 8008cf4:	e00a      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cf6:	230a      	movs	r3, #10
 8008cf8:	e008      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	e006      	b.n	8008d0c <USART_SetConfig+0x620>
 8008cfe:	2306      	movs	r3, #6
 8008d00:	e004      	b.n	8008d0c <USART_SetConfig+0x620>
 8008d02:	2304      	movs	r3, #4
 8008d04:	e002      	b.n	8008d0c <USART_SetConfig+0x620>
 8008d06:	2302      	movs	r3, #2
 8008d08:	e000      	b.n	8008d0c <USART_SetConfig+0x620>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d10:	005a      	lsls	r2, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	441a      	add	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d22:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008d24:	e1d3      	b.n	80090ce <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_PLL3:
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d26:	f107 030c 	add.w	r3, r7, #12
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fb0c 	bl	8007348 <HAL_RCCEx_GetPLL3ClockFreq>
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, husart->Init.BaudRate,
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d044      	beq.n	8008dc4 <USART_SetConfig+0x6d8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d03e      	beq.n	8008dc0 <USART_SetConfig+0x6d4>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d038      	beq.n	8008dbc <USART_SetConfig+0x6d0>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d032      	beq.n	8008db8 <USART_SetConfig+0x6cc>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d02c      	beq.n	8008db4 <USART_SetConfig+0x6c8>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d026      	beq.n	8008db0 <USART_SetConfig+0x6c4>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b06      	cmp	r3, #6
 8008d68:	d020      	beq.n	8008dac <USART_SetConfig+0x6c0>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b07      	cmp	r3, #7
 8008d70:	d01a      	beq.n	8008da8 <USART_SetConfig+0x6bc>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b08      	cmp	r3, #8
 8008d78:	d014      	beq.n	8008da4 <USART_SetConfig+0x6b8>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b09      	cmp	r3, #9
 8008d80:	d00e      	beq.n	8008da0 <USART_SetConfig+0x6b4>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b0a      	cmp	r3, #10
 8008d88:	d008      	beq.n	8008d9c <USART_SetConfig+0x6b0>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b0b      	cmp	r3, #11
 8008d90:	d102      	bne.n	8008d98 <USART_SetConfig+0x6ac>
 8008d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d96:	e016      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e014      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008d9c:	2380      	movs	r3, #128	; 0x80
 8008d9e:	e012      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008da0:	2340      	movs	r3, #64	; 0x40
 8008da2:	e010      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008da4:	2320      	movs	r3, #32
 8008da6:	e00e      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008da8:	2310      	movs	r3, #16
 8008daa:	e00c      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008dac:	230c      	movs	r3, #12
 8008dae:	e00a      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008db0:	230a      	movs	r3, #10
 8008db2:	e008      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008db4:	2308      	movs	r3, #8
 8008db6:	e006      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008db8:	2306      	movs	r3, #6
 8008dba:	e004      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008dbc:	2304      	movs	r3, #4
 8008dbe:	e002      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e000      	b.n	8008dc6 <USART_SetConfig+0x6da>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dca:	005a      	lsls	r2, r3, #1
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	085b      	lsrs	r3, r3, #1
 8008dd2:	441a      	add	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	685b      	ldr	r3, [r3, #4]
 8008dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ddc:	633b      	str	r3, [r7, #48]	; 0x30
                                                husart->Init.ClockPrescaler));
      break;
 8008dde:	e176      	b.n	80090ce <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008de0:	4b89      	ldr	r3, [pc, #548]	; (8009008 <USART_SetConfig+0x91c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d05d      	beq.n	8008ea8 <USART_SetConfig+0x7bc>
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)),
 8008dec:	4b86      	ldr	r3, [pc, #536]	; (8009008 <USART_SetConfig+0x91c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	08db      	lsrs	r3, r3, #3
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	4a85      	ldr	r2, [pc, #532]	; (800900c <USART_SetConfig+0x920>)
 8008df8:	40da      	lsrs	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d044      	beq.n	8008e8c <USART_SetConfig+0x7a0>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d03e      	beq.n	8008e88 <USART_SetConfig+0x79c>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d038      	beq.n	8008e84 <USART_SetConfig+0x798>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d032      	beq.n	8008e80 <USART_SetConfig+0x794>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	2b04      	cmp	r3, #4
 8008e20:	d02c      	beq.n	8008e7c <USART_SetConfig+0x790>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	2b05      	cmp	r3, #5
 8008e28:	d026      	beq.n	8008e78 <USART_SetConfig+0x78c>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	2b06      	cmp	r3, #6
 8008e30:	d020      	beq.n	8008e74 <USART_SetConfig+0x788>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	2b07      	cmp	r3, #7
 8008e38:	d01a      	beq.n	8008e70 <USART_SetConfig+0x784>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d014      	beq.n	8008e6c <USART_SetConfig+0x780>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	2b09      	cmp	r3, #9
 8008e48:	d00e      	beq.n	8008e68 <USART_SetConfig+0x77c>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	2b0a      	cmp	r3, #10
 8008e50:	d008      	beq.n	8008e64 <USART_SetConfig+0x778>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	2b0b      	cmp	r3, #11
 8008e58:	d102      	bne.n	8008e60 <USART_SetConfig+0x774>
 8008e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e5e:	e016      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e60:	2301      	movs	r3, #1
 8008e62:	e014      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	e012      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e68:	2340      	movs	r3, #64	; 0x40
 8008e6a:	e010      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	e00e      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e70:	2310      	movs	r3, #16
 8008e72:	e00c      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e74:	230c      	movs	r3, #12
 8008e76:	e00a      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e78:	230a      	movs	r3, #10
 8008e7a:	e008      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e7c:	2308      	movs	r3, #8
 8008e7e:	e006      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e80:	2306      	movs	r3, #6
 8008e82:	e004      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e84:	2304      	movs	r3, #4
 8008e86:	e002      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e000      	b.n	8008e8e <USART_SetConfig+0x7a2>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e92:	005a      	lsls	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	441a      	add	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
      }
      break;
 8008ea6:	e112      	b.n	80090ce <USART_SetConfig+0x9e2>
        usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d044      	beq.n	8008f3a <USART_SetConfig+0x84e>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d03e      	beq.n	8008f36 <USART_SetConfig+0x84a>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d038      	beq.n	8008f32 <USART_SetConfig+0x846>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d032      	beq.n	8008f2e <USART_SetConfig+0x842>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d02c      	beq.n	8008f2a <USART_SetConfig+0x83e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d026      	beq.n	8008f26 <USART_SetConfig+0x83a>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	2b06      	cmp	r3, #6
 8008ede:	d020      	beq.n	8008f22 <USART_SetConfig+0x836>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee4:	2b07      	cmp	r3, #7
 8008ee6:	d01a      	beq.n	8008f1e <USART_SetConfig+0x832>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d014      	beq.n	8008f1a <USART_SetConfig+0x82e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef4:	2b09      	cmp	r3, #9
 8008ef6:	d00e      	beq.n	8008f16 <USART_SetConfig+0x82a>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b0a      	cmp	r3, #10
 8008efe:	d008      	beq.n	8008f12 <USART_SetConfig+0x826>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f04:	2b0b      	cmp	r3, #11
 8008f06:	d102      	bne.n	8008f0e <USART_SetConfig+0x822>
 8008f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f0c:	e016      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e014      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f12:	2380      	movs	r3, #128	; 0x80
 8008f14:	e012      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f16:	2340      	movs	r3, #64	; 0x40
 8008f18:	e010      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f1a:	2320      	movs	r3, #32
 8008f1c:	e00e      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f1e:	2310      	movs	r3, #16
 8008f20:	e00c      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f22:	230c      	movs	r3, #12
 8008f24:	e00a      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f26:	230a      	movs	r3, #10
 8008f28:	e008      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	e006      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f2e:	2306      	movs	r3, #6
 8008f30:	e004      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f32:	2304      	movs	r3, #4
 8008f34:	e002      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e000      	b.n	8008f3c <USART_SetConfig+0x850>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4a33      	ldr	r2, [pc, #204]	; (800900c <USART_SetConfig+0x920>)
 8008f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f42:	005a      	lsls	r2, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	441a      	add	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8008f56:	e0ba      	b.n	80090ce <USART_SetConfig+0x9e2>
    case USART_CLOCKSOURCE_CSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(CSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d044      	beq.n	8008fea <USART_SetConfig+0x8fe>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d03e      	beq.n	8008fe6 <USART_SetConfig+0x8fa>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d038      	beq.n	8008fe2 <USART_SetConfig+0x8f6>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d032      	beq.n	8008fde <USART_SetConfig+0x8f2>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d02c      	beq.n	8008fda <USART_SetConfig+0x8ee>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b05      	cmp	r3, #5
 8008f86:	d026      	beq.n	8008fd6 <USART_SetConfig+0x8ea>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	2b06      	cmp	r3, #6
 8008f8e:	d020      	beq.n	8008fd2 <USART_SetConfig+0x8e6>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b07      	cmp	r3, #7
 8008f96:	d01a      	beq.n	8008fce <USART_SetConfig+0x8e2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d014      	beq.n	8008fca <USART_SetConfig+0x8de>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	2b09      	cmp	r3, #9
 8008fa6:	d00e      	beq.n	8008fc6 <USART_SetConfig+0x8da>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	2b0a      	cmp	r3, #10
 8008fae:	d008      	beq.n	8008fc2 <USART_SetConfig+0x8d6>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb4:	2b0b      	cmp	r3, #11
 8008fb6:	d102      	bne.n	8008fbe <USART_SetConfig+0x8d2>
 8008fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fbc:	e016      	b.n	8008fec <USART_SetConfig+0x900>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e014      	b.n	8008fec <USART_SetConfig+0x900>
 8008fc2:	2380      	movs	r3, #128	; 0x80
 8008fc4:	e012      	b.n	8008fec <USART_SetConfig+0x900>
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	e010      	b.n	8008fec <USART_SetConfig+0x900>
 8008fca:	2320      	movs	r3, #32
 8008fcc:	e00e      	b.n	8008fec <USART_SetConfig+0x900>
 8008fce:	2310      	movs	r3, #16
 8008fd0:	e00c      	b.n	8008fec <USART_SetConfig+0x900>
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	e00a      	b.n	8008fec <USART_SetConfig+0x900>
 8008fd6:	230a      	movs	r3, #10
 8008fd8:	e008      	b.n	8008fec <USART_SetConfig+0x900>
 8008fda:	2308      	movs	r3, #8
 8008fdc:	e006      	b.n	8008fec <USART_SetConfig+0x900>
 8008fde:	2306      	movs	r3, #6
 8008fe0:	e004      	b.n	8008fec <USART_SetConfig+0x900>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	e002      	b.n	8008fec <USART_SetConfig+0x900>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e000      	b.n	8008fec <USART_SetConfig+0x900>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <USART_SetConfig+0x924>)
 8008fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff2:	005a      	lsls	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	441a      	add	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	fbb2 f3f3 	udiv	r3, r2, r3
 8009004:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8009006:	e062      	b.n	80090ce <USART_SetConfig+0x9e2>
 8009008:	58024400 	.word	0x58024400
 800900c:	03d09000 	.word	0x03d09000
 8009010:	003d0900 	.word	0x003d0900
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d044      	beq.n	80090a6 <USART_SetConfig+0x9ba>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	2b01      	cmp	r3, #1
 8009022:	d03e      	beq.n	80090a2 <USART_SetConfig+0x9b6>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009028:	2b02      	cmp	r3, #2
 800902a:	d038      	beq.n	800909e <USART_SetConfig+0x9b2>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009030:	2b03      	cmp	r3, #3
 8009032:	d032      	beq.n	800909a <USART_SetConfig+0x9ae>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	2b04      	cmp	r3, #4
 800903a:	d02c      	beq.n	8009096 <USART_SetConfig+0x9aa>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	2b05      	cmp	r3, #5
 8009042:	d026      	beq.n	8009092 <USART_SetConfig+0x9a6>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	2b06      	cmp	r3, #6
 800904a:	d020      	beq.n	800908e <USART_SetConfig+0x9a2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009050:	2b07      	cmp	r3, #7
 8009052:	d01a      	beq.n	800908a <USART_SetConfig+0x99e>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009058:	2b08      	cmp	r3, #8
 800905a:	d014      	beq.n	8009086 <USART_SetConfig+0x99a>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	2b09      	cmp	r3, #9
 8009062:	d00e      	beq.n	8009082 <USART_SetConfig+0x996>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	2b0a      	cmp	r3, #10
 800906a:	d008      	beq.n	800907e <USART_SetConfig+0x992>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	2b0b      	cmp	r3, #11
 8009072:	d102      	bne.n	800907a <USART_SetConfig+0x98e>
 8009074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009078:	e016      	b.n	80090a8 <USART_SetConfig+0x9bc>
 800907a:	2301      	movs	r3, #1
 800907c:	e014      	b.n	80090a8 <USART_SetConfig+0x9bc>
 800907e:	2380      	movs	r3, #128	; 0x80
 8009080:	e012      	b.n	80090a8 <USART_SetConfig+0x9bc>
 8009082:	2340      	movs	r3, #64	; 0x40
 8009084:	e010      	b.n	80090a8 <USART_SetConfig+0x9bc>
 8009086:	2320      	movs	r3, #32
 8009088:	e00e      	b.n	80090a8 <USART_SetConfig+0x9bc>
 800908a:	2310      	movs	r3, #16
 800908c:	e00c      	b.n	80090a8 <USART_SetConfig+0x9bc>
 800908e:	230c      	movs	r3, #12
 8009090:	e00a      	b.n	80090a8 <USART_SetConfig+0x9bc>
 8009092:	230a      	movs	r3, #10
 8009094:	e008      	b.n	80090a8 <USART_SetConfig+0x9bc>
 8009096:	2308      	movs	r3, #8
 8009098:	e006      	b.n	80090a8 <USART_SetConfig+0x9bc>
 800909a:	2306      	movs	r3, #6
 800909c:	e004      	b.n	80090a8 <USART_SetConfig+0x9bc>
 800909e:	2304      	movs	r3, #4
 80090a0:	e002      	b.n	80090a8 <USART_SetConfig+0x9bc>
 80090a2:	2302      	movs	r3, #2
 80090a4:	e000      	b.n	80090a8 <USART_SetConfig+0x9bc>
 80090a6:	2301      	movs	r3, #1
 80090a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80090ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b0:	005a      	lsls	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	085b      	lsrs	r3, r3, #1
 80090b8:	441a      	add	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80090c4:	e003      	b.n	80090ce <USART_SetConfig+0x9e2>
    default:
      ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      break;
 80090cc:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	2b0f      	cmp	r3, #15
 80090d2:	d916      	bls.n	8009102 <USART_SetConfig+0xa16>
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090da:	d212      	bcs.n	8009102 <USART_SetConfig+0xa16>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	b29b      	uxth	r3, r3
 80090e0:	f023 030f 	bic.w	r3, r3, #15
 80090e4:	84fb      	strh	r3, [r7, #38]	; 0x26
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	085b      	lsrs	r3, r3, #1
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	b29a      	uxth	r2, r3
 80090f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80090f4:	4313      	orrs	r3, r2
 80090f6:	84fb      	strh	r3, [r7, #38]	; 0x26
    husart->Instance->BRR = brrtemp;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80090fe:	60da      	str	r2, [r3, #12]
 8009100:	e002      	b.n	8009108 <USART_SetConfig+0xa1c>
  }
  else
  {
    ret = HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  husart->NbTxDataToProcess = 1U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	879a      	strh	r2, [r3, #60]	; 0x3c
  husart->NbRxDataToProcess = 1U;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	649a      	str	r2, [r3, #72]	; 0x48
  husart->TxISR   = NULL;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	64da      	str	r2, [r3, #76]	; 0x4c

  return ret;
 8009120:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 8009124:	4618      	mov	r0, r3
 8009126:	3738      	adds	r7, #56	; 0x38
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af02      	add	r7, sp, #8
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800913a:	f7f8 fb65 	bl	8001808 <HAL_GetTick>
 800913e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0308 	and.w	r3, r3, #8
 800914a:	2b08      	cmp	r3, #8
 800914c:	d10e      	bne.n	800916c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800914e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2200      	movs	r2, #0
 8009158:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fa8e 	bl	800867e <USART_WaitOnFlagUntilTimeout>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	e01e      	b.n	80091aa <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0304 	and.w	r3, r3, #4
 8009176:	2b04      	cmp	r3, #4
 8009178:	d10e      	bne.n	8009198 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800917a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff fa78 	bl	800867e <USART_WaitOnFlagUntilTimeout>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d001      	beq.n	8009198 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e008      	b.n	80091aa <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <HAL_USARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param husart      USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_DisableFifoMode(USART_HandleTypeDef *husart)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));

  /* Process Locked */
  __HAL_LOCK(husart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <HAL_USARTEx_DisableFifoMode+0x16>
 80091c4:	2302      	movs	r3, #2
 80091c6:	e027      	b.n	8009218 <HAL_USARTEx_DisableFifoMode+0x66>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f022 0201 	bic.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091f6:	60fb      	str	r3, [r7, #12]
  husart->FifoMode = USART_FIFOMODE_DISABLE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <HAL_USARTEx_SetTxFifoThreshold>:
  *            @arg @ref USART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetTxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_USARTEx_SetTxFifoThreshold+0x18>
 8009238:	2302      	movs	r3, #2
 800923a:	e02d      	b.n	8009298 <HAL_USARTEx_SetTxFifoThreshold+0x74>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2202      	movs	r2, #2
 8009248:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0201 	bic.w	r2, r2, #1
 8009262:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f84f 	bl	800931c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <HAL_USARTEx_SetRxFifoThreshold>:
  *            @arg @ref USART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref USART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USARTEx_SetRxFifoThreshold(USART_HandleTypeDef *husart, uint32_t Threshold)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(husart->Instance));
  assert_param(IS_USART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(husart);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_USARTEx_SetRxFifoThreshold+0x18>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e02d      	b.n	8009314 <HAL_USARTEx_SetRxFifoThreshold+0x74>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  husart->State = HAL_USART_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Save actual USART configuration */
  tmpcr1 = READ_REG(husart->Instance->CR1);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Disable USART */
  __HAL_USART_DISABLE(husart);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 0201 	bic.w	r2, r2, #1
 80092de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(husart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  USARTEx_SetNbDataToProcess(husart);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f811 	bl	800931c <USARTEx_SetNbDataToProcess>

  /* Restore USART configuration */
  WRITE_REG(husart->Instance->CR1, tmpcr1);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	601a      	str	r2, [r3, #0]

  husart->State = HAL_USART_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USARTEx_SetNbDataToProcess>:
  *       the USART configuration registers.
  * @param husart USART handle.
  * @retval None
  */
static void USARTEx_SetNbDataToProcess(USART_HandleTypeDef *husart)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  uint8_t tx_fifo_threshold;
  /* 2 0U/1U added for MISRAC2012-Rule-18.1_b and MISRAC2012-Rule-18.1_d */
  static const uint8_t numerator[]   = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (husart->FifoMode == USART_FIFOMODE_DISABLE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <USARTEx_SetNbDataToProcess+0x1e>
  {
    husart->NbTxDataToProcess = 1U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = 1U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	875a      	strh	r2, [r3, #58]	; 0x3a
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                                (uint16_t)denominator[tx_fifo_threshold];
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                                (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009338:	e02f      	b.n	800939a <USARTEx_SetNbDataToProcess+0x7e>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800933a:	2310      	movs	r3, #16
 800933c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800933e:	2310      	movs	r3, #16
 8009340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos) & 0xFFU);
 8009348:	0e5b      	lsrs	r3, r3, #25
    rx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
                                            USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos) & 0xFFU);
 8009358:	0f5b      	lsrs	r3, r3, #29
    tx_fifo_threshold = (uint8_t)((READ_BIT(husart->Instance->CR3,
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	733b      	strb	r3, [r7, #12]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009362:	7bbb      	ldrb	r3, [r7, #14]
 8009364:	7b3a      	ldrb	r2, [r7, #12]
 8009366:	4910      	ldr	r1, [pc, #64]	; (80093a8 <USARTEx_SetNbDataToProcess+0x8c>)
 8009368:	5c8a      	ldrb	r2, [r1, r2]
 800936a:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[tx_fifo_threshold];
 800936e:	7b3a      	ldrb	r2, [r7, #12]
 8009370:	490e      	ldr	r1, [pc, #56]	; (80093ac <USARTEx_SetNbDataToProcess+0x90>)
 8009372:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009374:	fb93 f3f2 	sdiv	r3, r3, r2
 8009378:	b29a      	uxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	879a      	strh	r2, [r3, #60]	; 0x3c
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800937e:	7bfb      	ldrb	r3, [r7, #15]
 8009380:	7b7a      	ldrb	r2, [r7, #13]
 8009382:	4909      	ldr	r1, [pc, #36]	; (80093a8 <USARTEx_SetNbDataToProcess+0x8c>)
 8009384:	5c8a      	ldrb	r2, [r1, r2]
 8009386:	fb02 f303 	mul.w	r3, r2, r3
                                (uint16_t)denominator[rx_fifo_threshold];
 800938a:	7b7a      	ldrb	r2, [r7, #13]
 800938c:	4907      	ldr	r1, [pc, #28]	; (80093ac <USARTEx_SetNbDataToProcess+0x90>)
 800938e:	5c8a      	ldrb	r2, [r1, r2]
    husart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009390:	fb93 f3f2 	sdiv	r3, r3, r2
 8009394:	b29a      	uxth	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 800939a:	bf00      	nop
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	08009664 	.word	0x08009664
 80093ac:	0800966c 	.word	0x0800966c

080093b0 <calloc>:
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <calloc+0xc>)
 80093b2:	460a      	mov	r2, r1
 80093b4:	4601      	mov	r1, r0
 80093b6:	6818      	ldr	r0, [r3, #0]
 80093b8:	f000 b802 	b.w	80093c0 <_calloc_r>
 80093bc:	2400005c 	.word	0x2400005c

080093c0 <_calloc_r>:
 80093c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093c2:	fba1 2402 	umull	r2, r4, r1, r2
 80093c6:	b94c      	cbnz	r4, 80093dc <_calloc_r+0x1c>
 80093c8:	4611      	mov	r1, r2
 80093ca:	9201      	str	r2, [sp, #4]
 80093cc:	f000 f82e 	bl	800942c <_malloc_r>
 80093d0:	9a01      	ldr	r2, [sp, #4]
 80093d2:	4605      	mov	r5, r0
 80093d4:	b930      	cbnz	r0, 80093e4 <_calloc_r+0x24>
 80093d6:	4628      	mov	r0, r5
 80093d8:	b003      	add	sp, #12
 80093da:	bd30      	pop	{r4, r5, pc}
 80093dc:	220c      	movs	r2, #12
 80093de:	6002      	str	r2, [r0, #0]
 80093e0:	2500      	movs	r5, #0
 80093e2:	e7f8      	b.n	80093d6 <_calloc_r+0x16>
 80093e4:	4621      	mov	r1, r4
 80093e6:	f000 f8ad 	bl	8009544 <memset>
 80093ea:	e7f4      	b.n	80093d6 <_calloc_r+0x16>

080093ec <sbrk_aligned>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	4e0e      	ldr	r6, [pc, #56]	; (8009428 <sbrk_aligned+0x3c>)
 80093f0:	460c      	mov	r4, r1
 80093f2:	6831      	ldr	r1, [r6, #0]
 80093f4:	4605      	mov	r5, r0
 80093f6:	b911      	cbnz	r1, 80093fe <sbrk_aligned+0x12>
 80093f8:	f000 f8ac 	bl	8009554 <_sbrk_r>
 80093fc:	6030      	str	r0, [r6, #0]
 80093fe:	4621      	mov	r1, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f000 f8a7 	bl	8009554 <_sbrk_r>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d00a      	beq.n	8009420 <sbrk_aligned+0x34>
 800940a:	1cc4      	adds	r4, r0, #3
 800940c:	f024 0403 	bic.w	r4, r4, #3
 8009410:	42a0      	cmp	r0, r4
 8009412:	d007      	beq.n	8009424 <sbrk_aligned+0x38>
 8009414:	1a21      	subs	r1, r4, r0
 8009416:	4628      	mov	r0, r5
 8009418:	f000 f89c 	bl	8009554 <_sbrk_r>
 800941c:	3001      	adds	r0, #1
 800941e:	d101      	bne.n	8009424 <sbrk_aligned+0x38>
 8009420:	f04f 34ff 	mov.w	r4, #4294967295
 8009424:	4620      	mov	r0, r4
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	24000540 	.word	0x24000540

0800942c <_malloc_r>:
 800942c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009430:	1ccd      	adds	r5, r1, #3
 8009432:	f025 0503 	bic.w	r5, r5, #3
 8009436:	3508      	adds	r5, #8
 8009438:	2d0c      	cmp	r5, #12
 800943a:	bf38      	it	cc
 800943c:	250c      	movcc	r5, #12
 800943e:	2d00      	cmp	r5, #0
 8009440:	4607      	mov	r7, r0
 8009442:	db01      	blt.n	8009448 <_malloc_r+0x1c>
 8009444:	42a9      	cmp	r1, r5
 8009446:	d905      	bls.n	8009454 <_malloc_r+0x28>
 8009448:	230c      	movs	r3, #12
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	2600      	movs	r6, #0
 800944e:	4630      	mov	r0, r6
 8009450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009528 <_malloc_r+0xfc>
 8009458:	f000 f868 	bl	800952c <__malloc_lock>
 800945c:	f8d8 3000 	ldr.w	r3, [r8]
 8009460:	461c      	mov	r4, r3
 8009462:	bb5c      	cbnz	r4, 80094bc <_malloc_r+0x90>
 8009464:	4629      	mov	r1, r5
 8009466:	4638      	mov	r0, r7
 8009468:	f7ff ffc0 	bl	80093ec <sbrk_aligned>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	4604      	mov	r4, r0
 8009470:	d155      	bne.n	800951e <_malloc_r+0xf2>
 8009472:	f8d8 4000 	ldr.w	r4, [r8]
 8009476:	4626      	mov	r6, r4
 8009478:	2e00      	cmp	r6, #0
 800947a:	d145      	bne.n	8009508 <_malloc_r+0xdc>
 800947c:	2c00      	cmp	r4, #0
 800947e:	d048      	beq.n	8009512 <_malloc_r+0xe6>
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	4631      	mov	r1, r6
 8009484:	4638      	mov	r0, r7
 8009486:	eb04 0903 	add.w	r9, r4, r3
 800948a:	f000 f863 	bl	8009554 <_sbrk_r>
 800948e:	4581      	cmp	r9, r0
 8009490:	d13f      	bne.n	8009512 <_malloc_r+0xe6>
 8009492:	6821      	ldr	r1, [r4, #0]
 8009494:	1a6d      	subs	r5, r5, r1
 8009496:	4629      	mov	r1, r5
 8009498:	4638      	mov	r0, r7
 800949a:	f7ff ffa7 	bl	80093ec <sbrk_aligned>
 800949e:	3001      	adds	r0, #1
 80094a0:	d037      	beq.n	8009512 <_malloc_r+0xe6>
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	442b      	add	r3, r5
 80094a6:	6023      	str	r3, [r4, #0]
 80094a8:	f8d8 3000 	ldr.w	r3, [r8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d038      	beq.n	8009522 <_malloc_r+0xf6>
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	42a2      	cmp	r2, r4
 80094b4:	d12b      	bne.n	800950e <_malloc_r+0xe2>
 80094b6:	2200      	movs	r2, #0
 80094b8:	605a      	str	r2, [r3, #4]
 80094ba:	e00f      	b.n	80094dc <_malloc_r+0xb0>
 80094bc:	6822      	ldr	r2, [r4, #0]
 80094be:	1b52      	subs	r2, r2, r5
 80094c0:	d41f      	bmi.n	8009502 <_malloc_r+0xd6>
 80094c2:	2a0b      	cmp	r2, #11
 80094c4:	d917      	bls.n	80094f6 <_malloc_r+0xca>
 80094c6:	1961      	adds	r1, r4, r5
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	6025      	str	r5, [r4, #0]
 80094cc:	bf18      	it	ne
 80094ce:	6059      	strne	r1, [r3, #4]
 80094d0:	6863      	ldr	r3, [r4, #4]
 80094d2:	bf08      	it	eq
 80094d4:	f8c8 1000 	streq.w	r1, [r8]
 80094d8:	5162      	str	r2, [r4, r5]
 80094da:	604b      	str	r3, [r1, #4]
 80094dc:	4638      	mov	r0, r7
 80094de:	f104 060b 	add.w	r6, r4, #11
 80094e2:	f000 f829 	bl	8009538 <__malloc_unlock>
 80094e6:	f026 0607 	bic.w	r6, r6, #7
 80094ea:	1d23      	adds	r3, r4, #4
 80094ec:	1af2      	subs	r2, r6, r3
 80094ee:	d0ae      	beq.n	800944e <_malloc_r+0x22>
 80094f0:	1b9b      	subs	r3, r3, r6
 80094f2:	50a3      	str	r3, [r4, r2]
 80094f4:	e7ab      	b.n	800944e <_malloc_r+0x22>
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	6862      	ldr	r2, [r4, #4]
 80094fa:	d1dd      	bne.n	80094b8 <_malloc_r+0x8c>
 80094fc:	f8c8 2000 	str.w	r2, [r8]
 8009500:	e7ec      	b.n	80094dc <_malloc_r+0xb0>
 8009502:	4623      	mov	r3, r4
 8009504:	6864      	ldr	r4, [r4, #4]
 8009506:	e7ac      	b.n	8009462 <_malloc_r+0x36>
 8009508:	4634      	mov	r4, r6
 800950a:	6876      	ldr	r6, [r6, #4]
 800950c:	e7b4      	b.n	8009478 <_malloc_r+0x4c>
 800950e:	4613      	mov	r3, r2
 8009510:	e7cc      	b.n	80094ac <_malloc_r+0x80>
 8009512:	230c      	movs	r3, #12
 8009514:	603b      	str	r3, [r7, #0]
 8009516:	4638      	mov	r0, r7
 8009518:	f000 f80e 	bl	8009538 <__malloc_unlock>
 800951c:	e797      	b.n	800944e <_malloc_r+0x22>
 800951e:	6025      	str	r5, [r4, #0]
 8009520:	e7dc      	b.n	80094dc <_malloc_r+0xb0>
 8009522:	605b      	str	r3, [r3, #4]
 8009524:	deff      	udf	#255	; 0xff
 8009526:	bf00      	nop
 8009528:	2400053c 	.word	0x2400053c

0800952c <__malloc_lock>:
 800952c:	4801      	ldr	r0, [pc, #4]	; (8009534 <__malloc_lock+0x8>)
 800952e:	f000 b84b 	b.w	80095c8 <__retarget_lock_acquire_recursive>
 8009532:	bf00      	nop
 8009534:	24000680 	.word	0x24000680

08009538 <__malloc_unlock>:
 8009538:	4801      	ldr	r0, [pc, #4]	; (8009540 <__malloc_unlock+0x8>)
 800953a:	f000 b846 	b.w	80095ca <__retarget_lock_release_recursive>
 800953e:	bf00      	nop
 8009540:	24000680 	.word	0x24000680

08009544 <memset>:
 8009544:	4402      	add	r2, r0
 8009546:	4603      	mov	r3, r0
 8009548:	4293      	cmp	r3, r2
 800954a:	d100      	bne.n	800954e <memset+0xa>
 800954c:	4770      	bx	lr
 800954e:	f803 1b01 	strb.w	r1, [r3], #1
 8009552:	e7f9      	b.n	8009548 <memset+0x4>

08009554 <_sbrk_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d06      	ldr	r5, [pc, #24]	; (8009570 <_sbrk_r+0x1c>)
 8009558:	2300      	movs	r3, #0
 800955a:	4604      	mov	r4, r0
 800955c:	4608      	mov	r0, r1
 800955e:	602b      	str	r3, [r5, #0]
 8009560:	f7f7 ffe4 	bl	800152c <_sbrk>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_sbrk_r+0x1a>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	b103      	cbz	r3, 800956e <_sbrk_r+0x1a>
 800956c:	6023      	str	r3, [r4, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	2400067c 	.word	0x2400067c

08009574 <__errno>:
 8009574:	4b01      	ldr	r3, [pc, #4]	; (800957c <__errno+0x8>)
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	4770      	bx	lr
 800957a:	bf00      	nop
 800957c:	2400005c 	.word	0x2400005c

08009580 <__libc_init_array>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	4d0d      	ldr	r5, [pc, #52]	; (80095b8 <__libc_init_array+0x38>)
 8009584:	4c0d      	ldr	r4, [pc, #52]	; (80095bc <__libc_init_array+0x3c>)
 8009586:	1b64      	subs	r4, r4, r5
 8009588:	10a4      	asrs	r4, r4, #2
 800958a:	2600      	movs	r6, #0
 800958c:	42a6      	cmp	r6, r4
 800958e:	d109      	bne.n	80095a4 <__libc_init_array+0x24>
 8009590:	4d0b      	ldr	r5, [pc, #44]	; (80095c0 <__libc_init_array+0x40>)
 8009592:	4c0c      	ldr	r4, [pc, #48]	; (80095c4 <__libc_init_array+0x44>)
 8009594:	f000 f828 	bl	80095e8 <_init>
 8009598:	1b64      	subs	r4, r4, r5
 800959a:	10a4      	asrs	r4, r4, #2
 800959c:	2600      	movs	r6, #0
 800959e:	42a6      	cmp	r6, r4
 80095a0:	d105      	bne.n	80095ae <__libc_init_array+0x2e>
 80095a2:	bd70      	pop	{r4, r5, r6, pc}
 80095a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a8:	4798      	blx	r3
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7ee      	b.n	800958c <__libc_init_array+0xc>
 80095ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80095b2:	4798      	blx	r3
 80095b4:	3601      	adds	r6, #1
 80095b6:	e7f2      	b.n	800959e <__libc_init_array+0x1e>
 80095b8:	08009674 	.word	0x08009674
 80095bc:	08009674 	.word	0x08009674
 80095c0:	08009674 	.word	0x08009674
 80095c4:	08009678 	.word	0x08009678

080095c8 <__retarget_lock_acquire_recursive>:
 80095c8:	4770      	bx	lr

080095ca <__retarget_lock_release_recursive>:
 80095ca:	4770      	bx	lr

080095cc <memcpy>:
 80095cc:	440a      	add	r2, r1
 80095ce:	4291      	cmp	r1, r2
 80095d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d4:	d100      	bne.n	80095d8 <memcpy+0xc>
 80095d6:	4770      	bx	lr
 80095d8:	b510      	push	{r4, lr}
 80095da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e2:	4291      	cmp	r1, r2
 80095e4:	d1f9      	bne.n	80095da <memcpy+0xe>
 80095e6:	bd10      	pop	{r4, pc}

080095e8 <_init>:
 80095e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ea:	bf00      	nop
 80095ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ee:	bc08      	pop	{r3}
 80095f0:	469e      	mov	lr, r3
 80095f2:	4770      	bx	lr

080095f4 <_fini>:
 80095f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f6:	bf00      	nop
 80095f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fa:	bc08      	pop	{r3}
 80095fc:	469e      	mov	lr, r3
 80095fe:	4770      	bx	lr
